// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof require === 'function';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 366016,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5608896,
    DYNAMIC_BASE = 5608896,
    DYNAMICTOP_PTR = 365984;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY, 'provided buffer should be ' + INITIAL_TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY);
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  SOCKFS.root = FS.mount(SOCKFS, {}, null);
if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1) { port_changed($0, $1); },
 function($0) { glcd_data($0); }];

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}




// STATICTOP = STATIC_BASE + 366008;
/* global initializers */ /*__ATINIT__.push();*/


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 366000
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // some webservers (azure) does not support subprotocol header
              if (runtimeConfig && null === Module['websocket']['subprotocol']) {
                subProtocols = 'null';
                opts = undefined;
              }
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else
              if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else
              {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          if (ArrayBuffer.isView(buffer)) {
            offset += buffer.byteOffset;
            buffer = buffer.buffer;
          }
  
          var data;
            data = buffer.slice(offset, offset + length);
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: 22 };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: 22 };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: 97 };
      }
  
      return { family: family, addr: addr, port: port };
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: 97 };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }
  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
  
      var getSocketFromFD = function() {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(9);
        return socket;
      };
      var getSocketAddress = function(allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      };
  
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = getSocketFromFD(), info = getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = getSocketFromFD(), info = getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -107; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -92; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/emscripten-core/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -92; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -75;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var check = function(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      };
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(9);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -22;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -22; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(22);
          return -1;
        default: {
          return -22;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  var _emscripten_asm_const_int=true;

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }



   

   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }
  Module["_usleep"] = _usleep;function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        ___setErrNo(22);
        return -1;
      }
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        ___setErrNo(22);
        return -1;
      }
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 


FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


function nullFunc_i(x) { err("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidiiii(x) { err("Invalid function pointer called with signature 'iidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity }

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_i": nullFunc_i,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iidiiii": nullFunc_iidiiii,
  "nullFunc_iiii": nullFunc_iiii,
  "nullFunc_iiiii": nullFunc_iiiii,
  "nullFunc_v": nullFunc_v,
  "nullFunc_vi": nullFunc_vi,
  "nullFunc_vii": nullFunc_vii,
  "nullFunc_viii": nullFunc_viii,
  "nullFunc_viiii": nullFunc_viiii,
  "___lock": ___lock,
  "___setErrNo": ___setErrNo,
  "___syscall102": ___syscall102,
  "___syscall140": ___syscall140,
  "___syscall142": ___syscall142,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___unlock": ___unlock,
  "__inet_ntop4_raw": __inet_ntop4_raw,
  "__inet_ntop6_raw": __inet_ntop6_raw,
  "__inet_pton4_raw": __inet_pton4_raw,
  "__inet_pton6_raw": __inet_pton6_raw,
  "__read_sockaddr": __read_sockaddr,
  "__write_sockaddr": __write_sockaddr,
  "_abort": _abort,
  "_emscripten_asm_const_ii": _emscripten_asm_const_ii,
  "_emscripten_asm_const_iii": _emscripten_asm_const_iii,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_exit": _exit,
  "_llvm_stackrestore": _llvm_stackrestore,
  "_llvm_stacksave": _llvm_stacksave,
  "_nanosleep": _nanosleep,
  "_usleep": _usleep,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_min=global.Math.min,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_i=env.nullFunc_i,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall102=env.___syscall102,
  ___syscall140=env.___syscall140,
  ___syscall142=env.___syscall142,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___unlock=env.___unlock,
  __inet_ntop4_raw=env.__inet_ntop4_raw,
  __inet_ntop6_raw=env.__inet_ntop6_raw,
  __inet_pton4_raw=env.__inet_pton4_raw,
  __inet_pton6_raw=env.__inet_pton6_raw,
  __read_sockaddr=env.__read_sockaddr,
  __write_sockaddr=env.__write_sockaddr,
  _abort=env._abort,
  _emscripten_asm_const_ii=env._emscripten_asm_const_ii,
  _emscripten_asm_const_iii=env._emscripten_asm_const_iii,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _exit=env._exit,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _nanosleep=env._nanosleep,
  _usleep=env._usleep,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  STACKTOP = 366016,
  STACK_MAX = 5608896,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _avr_load_firmware($avr,$firmware) {
 $avr = $avr|0;
 $firmware = $firmware|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $addr = 0, $addr101 = 0, $addr143 = 0, $addr154 = 0, $all = 0, $and = 0, $and138 = 0, $aref = 0, $aref15 = 0, $aref16 = 0;
 var $arrayidx = 0, $arrayidx100 = 0, $arrayidx107 = 0, $arrayidx118 = 0, $arrayidx134 = 0, $arrayidx142 = 0, $arrayidx145 = 0, $arrayidx153 = 0, $arrayidx163 = 0, $arrayidx170 = 0, $arrayidx176 = 0, $arrayidx30 = 0, $arrayidx34 = 0, $arrayidx41 = 0, $arrayidx78 = 0, $arrayidx84 = 0, $arrayidx91 = 0, $arrayidx93 = 0, $avcc = 0, $avcc10 = 0;
 var $avcc11 = 0, $avr$addr = 0, $bf$clear = 0, $bf$clear38 = 0, $bf$clear46 = 0, $bf$clear49 = 0, $bf$load = 0, $bf$load36 = 0, $bf$load43 = 0, $bf$load48 = 0, $bf$set = 0, $bf$set39 = 0, $bf$set47 = 0, $bf$shl = 0, $bf$shl45 = 0, $bf$value = 0, $bf$value37 = 0, $bf$value44 = 0, $bi = 0, $bi128 = 0;
 var $bit = 0, $call148 = 0, $call56 = 0, $call95 = 0, $cmp = 0, $cmp114 = 0, $cmp130 = 0, $cmp158 = 0, $cmp26 = 0, $cmp52 = 0, $cmp63 = 0, $cmp75 = 0, $cmp81 = 0, $cmp87 = 0, $codeend = 0, $command_register_addr = 0, $command_register_addr188 = 0, $comp = 0, $cond = 0, $cond69 = 0;
 var $console_register_addr = 0, $conv = 0, $conv102 = 0, $conv120 = 0, $conv136 = 0, $conv155 = 0, $conv32 = 0, $conv35 = 0, $conv42 = 0, $conv59 = 0, $conv80 = 0, $conv86 = 0, $count = 0, $d = 0, $datasize = 0, $e = 0, $eeprom = 0, $eeprom23 = 0, $eesize = 0, $eesize24 = 0;
 var $external_state = 0, $external_state29 = 0, $external_state33 = 0, $external_state40 = 0, $filename = 0, $firmware$addr = 0, $flash = 0, $flashbase = 0, $flashbase19 = 0, $flashsize = 0, $flashsize18 = 0, $frequency = 0, $frequency1 = 0, $frequency2 = 0, $i = 0, $inc = 0, $inc123 = 0, $inc126 = 0, $inc182 = 0, $inc186 = 0;
 var $mask = 0, $name = 0, $name108 = 0, $name146 = 0, $name164 = 0, $name171 = 0, $name177 = 0, $offset = 0, $or = 0, $shl = 0, $shl137 = 0, $size = 0, $sub = 0, $ti = 0, $tobool = 0, $tobool121 = 0, $tobool13 = 0, $tobool139 = 0, $tobool149 = 0, $tobool189 = 0;
 var $tobool20 = 0, $tobool21 = 0, $tobool3 = 0, $tobool60 = 0, $tobool8 = 0, $tobool96 = 0, $trace = 0, $trace106 = 0, $trace117 = 0, $trace133 = 0, $trace141 = 0, $trace144 = 0, $trace152 = 0, $trace162 = 0, $trace169 = 0, $trace175 = 0, $trace83 = 0, $trace90 = 0, $trace92 = 0, $trace99 = 0;
 var $tracecount = 0, $tracecount74 = 0, $tracename = 0, $tracename61 = 0, $traceperiod = 0, $traceperiod66 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vcc = 0, $vcc5 = 0, $vcc6 = 0, $vcd = 0, $vcd105 = 0, $vcd161 = 0;
 var $vcd174 = 0, $vcd191 = 0, $vcd57 = 0, $vcd62 = 0, $vcd71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer9 = sp + 152|0;
 $vararg_buffer5 = sp + 144|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 128|0;
 $d = sp + 192|0;
 $e = sp + 184|0;
 $comp = sp;
 $avr$addr = $avr;
 $firmware$addr = $firmware;
 $0 = $firmware$addr;
 $frequency = ((($0)) + 64|0);
 $1 = HEAP32[$frequency>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $2 = $firmware$addr;
  $frequency1 = ((($2)) + 64|0);
  $3 = HEAP32[$frequency1>>2]|0;
  $4 = $avr$addr;
  $frequency2 = ((($4)) + 40|0);
  HEAP32[$frequency2>>2] = $3;
 }
 $5 = $firmware$addr;
 $vcc = ((($5)) + 68|0);
 $6 = HEAP32[$vcc>>2]|0;
 $tobool3 = ($6|0)!=(0);
 if ($tobool3) {
  $7 = $firmware$addr;
  $vcc5 = ((($7)) + 68|0);
  $8 = HEAP32[$vcc5>>2]|0;
  $9 = $avr$addr;
  $vcc6 = ((($9)) + 44|0);
  HEAP32[$vcc6>>2] = $8;
 }
 $10 = $firmware$addr;
 $avcc = ((($10)) + 72|0);
 $11 = HEAP32[$avcc>>2]|0;
 $tobool8 = ($11|0)!=(0);
 if ($tobool8) {
  $12 = $firmware$addr;
  $avcc10 = ((($12)) + 72|0);
  $13 = HEAP32[$avcc10>>2]|0;
  $14 = $avr$addr;
  $avcc11 = ((($14)) + 48|0);
  HEAP32[$avcc11>>2] = $13;
 }
 $15 = $firmware$addr;
 $aref = ((($15)) + 76|0);
 $16 = HEAP32[$aref>>2]|0;
 $tobool13 = ($16|0)!=(0);
 if ($tobool13) {
  $17 = $firmware$addr;
  $aref15 = ((($17)) + 76|0);
  $18 = HEAP32[$aref15>>2]|0;
  $19 = $avr$addr;
  $aref16 = ((($19)) + 52|0);
  HEAP32[$aref16>>2] = $18;
 }
 $20 = $avr$addr;
 $21 = $firmware$addr;
 $flash = ((($21)) + 2424|0);
 $22 = HEAP32[$flash>>2]|0;
 $23 = $firmware$addr;
 $flashsize = ((($23)) + 2428|0);
 $24 = HEAP32[$flashsize>>2]|0;
 $25 = $firmware$addr;
 $flashbase = ((($25)) + 2420|0);
 $26 = HEAP32[$flashbase>>2]|0;
 _avr_loadcode($20,$22,$24,$26);
 $27 = $firmware$addr;
 $flashsize18 = ((($27)) + 2428|0);
 $28 = HEAP32[$flashsize18>>2]|0;
 $29 = $firmware$addr;
 $flashbase19 = ((($29)) + 2420|0);
 $30 = HEAP32[$flashbase19>>2]|0;
 $add = (($28) + ($30))|0;
 $31 = $firmware$addr;
 $datasize = ((($31)) + 2432|0);
 $32 = HEAP32[$datasize>>2]|0;
 $sub = (($add) - ($32))|0;
 $33 = $avr$addr;
 $codeend = ((($33)) + 32|0);
 HEAP32[$codeend>>2] = $sub;
 $34 = $firmware$addr;
 $eeprom = ((($34)) + 2440|0);
 $35 = HEAP32[$eeprom>>2]|0;
 $tobool20 = ($35|0)!=(0|0);
 if ($tobool20) {
  $36 = $firmware$addr;
  $eesize = ((($36)) + 2444|0);
  $37 = HEAP32[$eesize>>2]|0;
  $tobool21 = ($37|0)!=(0);
  if ($tobool21) {
   $38 = $firmware$addr;
   $eeprom23 = ((($38)) + 2440|0);
   $39 = HEAP32[$eeprom23>>2]|0;
   HEAP32[$d>>2] = $39;
   $offset = ((($d)) + 4|0);
   HEAP16[$offset>>1] = 0;
   $size = ((($d)) + 8|0);
   $40 = $firmware$addr;
   $eesize24 = ((($40)) + 2444|0);
   $41 = HEAP32[$eesize24>>2]|0;
   HEAP32[$size>>2] = $41;
   $42 = $avr$addr;
   (_avr_ioctl($42,1701147504,$d)|0);
  }
 }
 $i = 0;
 while(1) {
  $43 = $i;
  $cmp = ($43|0)<(8);
  if (!($cmp)) {
   break;
  }
  $44 = $firmware$addr;
  $external_state = ((($44)) + 2392|0);
  $45 = $i;
  $arrayidx = (($external_state) + (($45*3)|0)|0);
  $46 = HEAP8[$arrayidx>>0]|0;
  $conv = $46 << 24 >> 24;
  $cmp26 = ($conv|0)==(0);
  if ($cmp26) {
   break;
  }
  $47 = $firmware$addr;
  $external_state29 = ((($47)) + 2392|0);
  $48 = $i;
  $arrayidx30 = (($external_state29) + (($48*3)|0)|0);
  $49 = HEAP8[$arrayidx30>>0]|0;
  $conv32 = $49 << 24 >> 24;
  $bf$load = HEAP32[$e>>2]|0;
  $bf$value = $conv32 & 127;
  $bf$clear = $bf$load & -128;
  $bf$set = $bf$clear | $bf$value;
  HEAP32[$e>>2] = $bf$set;
  $50 = $firmware$addr;
  $external_state33 = ((($50)) + 2392|0);
  $51 = $i;
  $arrayidx34 = (($external_state33) + (($51*3)|0)|0);
  $mask = ((($arrayidx34)) + 1|0);
  $52 = HEAP8[$mask>>0]|0;
  $conv35 = $52&255;
  $bf$load36 = HEAP32[$e>>2]|0;
  $bf$value37 = $conv35 & 255;
  $bf$shl = $bf$value37 << 7;
  $bf$clear38 = $bf$load36 & -32641;
  $bf$set39 = $bf$clear38 | $bf$shl;
  HEAP32[$e>>2] = $bf$set39;
  $53 = $firmware$addr;
  $external_state40 = ((($53)) + 2392|0);
  $54 = $i;
  $arrayidx41 = (($external_state40) + (($54*3)|0)|0);
  $value = ((($arrayidx41)) + 2|0);
  $55 = HEAP8[$value>>0]|0;
  $conv42 = $55&255;
  $bf$load43 = HEAP32[$e>>2]|0;
  $bf$value44 = $conv42 & 255;
  $bf$shl45 = $bf$value44 << 15;
  $bf$clear46 = $bf$load43 & -8355841;
  $bf$set47 = $bf$clear46 | $bf$shl45;
  HEAP32[$e>>2] = $bf$set47;
  $56 = $avr$addr;
  $bf$load48 = HEAP32[$e>>2]|0;
  $bf$clear49 = $bf$load48 & 127;
  $or = 1768910848 | $bf$clear49;
  (_avr_ioctl($56,$or,$e)|0);
  $57 = $i;
  $inc = (($57) + 1)|0;
  $i = $inc;
 }
 $58 = $avr$addr;
 $59 = $firmware$addr;
 $command_register_addr = ((($59)) + 2416|0);
 $60 = HEAP16[$command_register_addr>>1]|0;
 _avr_set_command_register($58,$60);
 $61 = $avr$addr;
 $62 = $firmware$addr;
 $console_register_addr = ((($62)) + 2418|0);
 $63 = HEAP16[$console_register_addr>>1]|0;
 _avr_set_console_register($61,$63);
 $64 = $firmware$addr;
 $tracecount = ((($64)) + 212|0);
 $65 = HEAP32[$tracecount>>2]|0;
 $cmp52 = ($65|0)==(0);
 if ($cmp52) {
  STACKTOP = sp;return;
 }
 $call56 = (_malloc(4216)|0);
 $66 = $avr$addr;
 $vcd = ((($66)) + 8288|0);
 HEAP32[$vcd>>2] = $call56;
 $67 = $avr$addr;
 $vcd57 = ((($67)) + 8288|0);
 $68 = HEAP32[$vcd57>>2]|0;
 _memset(($68|0),0,4216)|0;
 $69 = $avr$addr;
 $70 = $firmware$addr;
 $tracename = ((($70)) + 80|0);
 $71 = HEAP8[$tracename>>0]|0;
 $conv59 = $71 << 24 >> 24;
 $tobool60 = ($conv59|0)!=(0);
 $72 = $firmware$addr;
 $tracename61 = ((($72)) + 80|0);
 $cond = $tobool60 ? $tracename61 : 354828;
 $73 = $avr$addr;
 $vcd62 = ((($73)) + 8288|0);
 $74 = HEAP32[$vcd62>>2]|0;
 $75 = $firmware$addr;
 $traceperiod = ((($75)) + 208|0);
 $76 = HEAP32[$traceperiod>>2]|0;
 $cmp63 = ($76>>>0)>=(1000);
 if ($cmp63) {
  $77 = $firmware$addr;
  $traceperiod66 = ((($77)) + 208|0);
  $78 = HEAP32[$traceperiod66>>2]|0;
  $cond69 = $78;
 } else {
  $cond69 = 1000;
 }
 (_avr_vcd_init($69,$cond,$74,$cond69)|0);
 $79 = $avr$addr;
 $80 = $avr$addr;
 $vcd71 = ((($80)) + 8288|0);
 $81 = HEAP32[$vcd71>>2]|0;
 $filename = ((($81)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $filename;
 _avr_global_logger($79,3,354846,$vararg_buffer);
 $ti = 0;
 while(1) {
  $82 = $ti;
  $83 = $firmware$addr;
  $tracecount74 = ((($83)) + 212|0);
  $84 = HEAP32[$tracecount74>>2]|0;
  $cmp75 = ($82|0)<($84|0);
  $85 = $firmware$addr;
  if (!($cmp75)) {
   break;
  }
  $trace = ((($85)) + 216|0);
  $86 = $ti;
  $arrayidx78 = (($trace) + (($86*68)|0)|0);
  $87 = HEAP8[$arrayidx78>>0]|0;
  $conv80 = $87&255;
  $cmp81 = ($conv80|0)==(255);
  L31: do {
   if ($cmp81) {
    label = 23;
   } else {
    $88 = $firmware$addr;
    $trace83 = ((($88)) + 216|0);
    $89 = $ti;
    $arrayidx84 = (($trace83) + (($89*68)|0)|0);
    $90 = HEAP8[$arrayidx84>>0]|0;
    $conv86 = $90&255;
    $cmp87 = ($conv86|0)==(0);
    if ($cmp87) {
     label = 23;
    } else {
     $count = 0;
     $bi = 0;
     while(1) {
      $106 = $bi;
      $cmp114 = ($106|0)<(8);
      if (!($cmp114)) {
       break;
      }
      $107 = $firmware$addr;
      $trace117 = ((($107)) + 216|0);
      $108 = $ti;
      $arrayidx118 = (($trace117) + (($108*68)|0)|0);
      $109 = HEAP8[$arrayidx118>>0]|0;
      $conv120 = $109&255;
      $110 = $bi;
      $shl = 1 << $110;
      $and = $conv120 & $shl;
      $tobool121 = ($and|0)!=(0);
      if ($tobool121) {
       $111 = $count;
       $inc123 = (($111) + 1)|0;
       $count = $inc123;
      }
      $112 = $bi;
      $inc126 = (($112) + 1)|0;
      $bi = $inc126;
     }
     $bi128 = 0;
     while(1) {
      $113 = $bi128;
      $cmp130 = ($113|0)<(8);
      if (!($cmp130)) {
       break L31;
      }
      $114 = $firmware$addr;
      $trace133 = ((($114)) + 216|0);
      $115 = $ti;
      $arrayidx134 = (($trace133) + (($115*68)|0)|0);
      $116 = HEAP8[$arrayidx134>>0]|0;
      $conv136 = $116&255;
      $117 = $bi128;
      $shl137 = 1 << $117;
      $and138 = $conv136 & $shl137;
      $tobool139 = ($and138|0)!=(0);
      if ($tobool139) {
       $118 = $avr$addr;
       $119 = $firmware$addr;
       $trace141 = ((($119)) + 216|0);
       $120 = $ti;
       $arrayidx142 = (($trace141) + (($120*68)|0)|0);
       $addr143 = ((($arrayidx142)) + 2|0);
       $121 = HEAP16[$addr143>>1]|0;
       $122 = $firmware$addr;
       $trace144 = ((($122)) + 216|0);
       $123 = $ti;
       $arrayidx145 = (($trace144) + (($123*68)|0)|0);
       $name146 = ((($arrayidx145)) + 4|0);
       $124 = $bi128;
       $call148 = (_avr_iomem_getirq($118,$121,$name146,$124)|0);
       $bit = $call148;
       $125 = $bit;
       $tobool149 = ($125|0)!=(0|0);
       if (!($tobool149)) {
        label = 35;
        break;
       }
       $130 = $count;
       $cmp158 = ($130|0)==(1);
       if ($cmp158) {
        label = 37;
        break;
       }
       $136 = $firmware$addr;
       $trace169 = ((($136)) + 216|0);
       $137 = $ti;
       $arrayidx170 = (($trace169) + (($137*68)|0)|0);
       $name171 = ((($arrayidx170)) + 4|0);
       $138 = $bi128;
       HEAP32[$vararg_buffer9>>2] = $name171;
       $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
       HEAP32[$vararg_ptr12>>2] = $138;
       (_sprintf($comp,354943,$vararg_buffer9)|0);
       $139 = $avr$addr;
       $vcd174 = ((($139)) + 8288|0);
       $140 = HEAP32[$vcd174>>2]|0;
       $141 = $bit;
       $142 = $firmware$addr;
       $trace175 = ((($142)) + 216|0);
       $143 = $ti;
       $arrayidx176 = (($trace175) + (($143*68)|0)|0);
       $name177 = ((($arrayidx176)) + 4|0);
       (_avr_vcd_add_signal($140,$141,1,$name177)|0);
      }
      $144 = $bi128;
      $inc182 = (($144) + 1)|0;
      $bi128 = $inc182;
     }
     if ((label|0) == 35) {
      label = 0;
      $126 = $avr$addr;
      $127 = $firmware$addr;
      $trace152 = ((($127)) + 216|0);
      $128 = $ti;
      $arrayidx153 = (($trace152) + (($128*68)|0)|0);
      $addr154 = ((($arrayidx153)) + 2|0);
      $129 = HEAP16[$addr154>>1]|0;
      $conv155 = $129&65535;
      HEAP32[$vararg_buffer5>>2] = 354925;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $conv155;
      _avr_global_logger($126,1,354876,$vararg_buffer5);
      break;
     }
     else if ((label|0) == 37) {
      label = 0;
      $131 = $avr$addr;
      $vcd161 = ((($131)) + 8288|0);
      $132 = HEAP32[$vcd161>>2]|0;
      $133 = $bit;
      $134 = $firmware$addr;
      $trace162 = ((($134)) + 216|0);
      $135 = $ti;
      $arrayidx163 = (($trace162) + (($135*68)|0)|0);
      $name164 = ((($arrayidx163)) + 4|0);
      (_avr_vcd_add_signal($132,$133,1,$name164)|0);
      break;
     }
    }
   }
  } while(0);
  do {
   if ((label|0) == 23) {
    label = 0;
    $91 = $avr$addr;
    $92 = $firmware$addr;
    $trace90 = ((($92)) + 216|0);
    $93 = $ti;
    $arrayidx91 = (($trace90) + (($93*68)|0)|0);
    $addr = ((($arrayidx91)) + 2|0);
    $94 = HEAP16[$addr>>1]|0;
    $95 = $firmware$addr;
    $trace92 = ((($95)) + 216|0);
    $96 = $ti;
    $arrayidx93 = (($trace92) + (($96*68)|0)|0);
    $name = ((($arrayidx93)) + 4|0);
    $call95 = (_avr_iomem_getirq($91,$94,$name,8)|0);
    $all = $call95;
    $97 = $all;
    $tobool96 = ($97|0)!=(0|0);
    $98 = $avr$addr;
    if ($tobool96) {
     $vcd105 = ((($98)) + 8288|0);
     $102 = HEAP32[$vcd105>>2]|0;
     $103 = $all;
     $104 = $firmware$addr;
     $trace106 = ((($104)) + 216|0);
     $105 = $ti;
     $arrayidx107 = (($trace106) + (($105*68)|0)|0);
     $name108 = ((($arrayidx107)) + 4|0);
     (_avr_vcd_add_signal($102,$103,8,$name108)|0);
     break;
    } else {
     $99 = $firmware$addr;
     $trace99 = ((($99)) + 216|0);
     $100 = $ti;
     $arrayidx100 = (($trace99) + (($100*68)|0)|0);
     $addr101 = ((($arrayidx100)) + 2|0);
     $101 = HEAP16[$addr101>>1]|0;
     $conv102 = $101&65535;
     HEAP32[$vararg_buffer1>>2] = 354925;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $conv102;
     _avr_global_logger($98,1,354876,$vararg_buffer1);
     break;
    }
   }
  } while(0);
  $145 = $ti;
  $inc186 = (($145) + 1)|0;
  $ti = $inc186;
 }
 $command_register_addr188 = ((($85)) + 2416|0);
 $146 = HEAP16[$command_register_addr188>>1]|0;
 $tobool189 = ($146<<16>>16)!=(0);
 if ($tobool189) {
  STACKTOP = sp;return;
 }
 $147 = $avr$addr;
 $vcd191 = ((($147)) + 8288|0);
 $148 = HEAP32[$vcd191>>2]|0;
 (_avr_vcd_start($148)|0);
 STACKTOP = sp;return;
}
function _set_pin($port,$pin,$value) {
 $port = $port|0;
 $pin = $pin|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv2 = 0, $conv3 = 0, $conv4 = 0, $conv6 = 0, $or = 0, $pin$addr = 0, $port$addr = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $port$addr = $port;
 $pin$addr = $pin;
 $value$addr = $value;
 $0 = $port$addr;
 $conv = $0 << 24 >> 24;
 $1 = $pin$addr;
 $conv1 = $1&65535;
 $2 = $value$addr;
 $conv2 = $2&255;
 HEAP32[$vararg_buffer>>2] = $conv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $conv1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $conv2;
 (_printf(354949,$vararg_buffer)|0);
 $3 = HEAP32[90988]|0;
 $4 = $port$addr;
 $conv3 = $4 << 24 >> 24;
 $or = 1768908544 | $conv3;
 $5 = $pin$addr;
 $conv4 = $5&65535;
 $call5 = (_avr_io_getirq($3,$or,$conv4)|0);
 $6 = $value$addr;
 $conv6 = $6&255;
 _avr_raise_irq($call5,$conv6);
 STACKTOP = sp;return;
}
function _get_ports() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (354816|0);
}
function _run() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $i = 0, $inc = 0, $or$cond = 0, $retval = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(5000);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $1 = HEAP32[90988]|0;
  $call = (_avr_run($1)|0);
  $state = $call;
  $2 = $state;
  $cmp1 = ($2|0)==(6);
  $3 = $state;
  $cmp2 = ($3|0)==(7);
  $or$cond = $cmp1 | $cmp2;
  if ($or$cond) {
   label = 4;
   break;
  }
  $5 = $i;
  $inc = (($5) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $4 = $state;
  $retval = $4;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 else if ((label|0) == 6) {
  $retval = -1;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _init($filename) {
 $filename = $filename|0;
 var $0 = 0, $filename$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $filename$addr = $filename;
 $0 = $filename$addr;
 _load_file($0);
 STACKTOP = sp;return;
}
function _load_file($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0;
 var $add$ptr71 = 0, $add$ptr73 = 0, $add$ptr75 = 0, $add$ptr77 = 0, $add$ptr79 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx49 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $bf$clear = 0, $bf$load = 0, $bf$set = 0, $call = 0;
 var $call37 = 0, $call53 = 0, $call63 = 0, $call68 = 0, $call70 = 0, $call72 = 0, $call74 = 0, $call76 = 0, $call78 = 0, $chunk = 0, $ci = 0, $cmp = 0, $cmp15 = 0, $cmp18 = 0, $cmp3 = 0, $cmp4 = 0, $cmp47 = 0, $cmp60 = 0, $cnt = 0, $conv = 0;
 var $conv52 = 0, $data = 0, $data21 = 0, $eeprom = 0, $eesize = 0, $eesize26 = 0, $f = 0, $filename$addr = 0, $flash = 0, $flashbase = 0, $flashbase10 = 0, $flashsize = 0, $flashsize11 = 0, $frequency = 0, $frequency31 = 0, $frequency44 = 0, $i = 0, $iavr = 0, $ilcd = 0, $inc = 0;
 var $inc56 = 0, $inc66 = 0, $irq = 0, $loadBase = 0, $log = 0, $or = 0, $pi = 0, $size = 0, $size23 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2576|0);
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $f = sp + 112|0;
 $chunk = sp + 108|0;
 $filename$addr = $filename;
 HEAP32[$chunk>>2] = 0;
 $0 = $filename$addr;
 $call = (_read_ihex_chunks($0,$chunk)|0);
 $cnt = $call;
 $loadBase = 0;
 $1 = $cnt;
 $cmp = ($1|0)<=(0);
 if ($cmp) {
  $2 = HEAP32[88638]|0;
  $3 = $filename$addr;
  HEAP32[$vararg_buffer>>2] = $3;
  (_fprintf($2,354987,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $4 = $cnt;
 HEAP32[$vararg_buffer1>>2] = $4;
 (_printf(355016,$vararg_buffer1)|0);
 $ci = 0;
 while(1) {
  $5 = $ci;
  $6 = $cnt;
  $cmp3 = ($5|0)<($6|0);
  if (!($cmp3)) {
   break;
  }
  $7 = HEAP32[$chunk>>2]|0;
  $8 = $ci;
  $arrayidx = (($7) + (($8*12)|0)|0);
  $9 = HEAP32[$arrayidx>>2]|0;
  $cmp4 = ($9>>>0)<(1048576);
  $10 = HEAP32[$chunk>>2]|0;
  $11 = $ci;
  $arrayidx6 = (($10) + (($11*12)|0)|0);
  do {
   if ($cmp4) {
    $data = ((($arrayidx6)) + 4|0);
    $12 = HEAP32[$data>>2]|0;
    $flash = ((($f)) + 2424|0);
    HEAP32[$flash>>2] = $12;
    $13 = HEAP32[$chunk>>2]|0;
    $14 = $ci;
    $arrayidx7 = (($13) + (($14*12)|0)|0);
    $size = ((($arrayidx7)) + 8|0);
    $15 = HEAP32[$size>>2]|0;
    $flashsize = ((($f)) + 2428|0);
    HEAP32[$flashsize>>2] = $15;
    $16 = HEAP32[$chunk>>2]|0;
    $17 = $ci;
    $arrayidx8 = (($16) + (($17*12)|0)|0);
    $18 = HEAP32[$arrayidx8>>2]|0;
    $flashbase = ((($f)) + 2420|0);
    HEAP32[$flashbase>>2] = $18;
    $flashbase10 = ((($f)) + 2420|0);
    $19 = HEAP32[$flashbase10>>2]|0;
    $flashsize11 = ((($f)) + 2428|0);
    $20 = HEAP32[$flashsize11>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $19;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $20;
    (_printf(355043,$vararg_buffer4)|0);
   } else {
    $21 = HEAP32[$arrayidx6>>2]|0;
    $cmp15 = ($21>>>0)>=(8454144);
    if (!($cmp15)) {
     $22 = HEAP32[$chunk>>2]|0;
     $23 = $ci;
     $arrayidx16 = (($22) + (($23*12)|0)|0);
     $24 = HEAP32[$arrayidx16>>2]|0;
     $25 = $loadBase;
     $add = (($24) + ($25))|0;
     $cmp18 = ($add>>>0)>=(8454144);
     if (!($cmp18)) {
      break;
     }
    }
    $26 = HEAP32[$chunk>>2]|0;
    $27 = $ci;
    $arrayidx20 = (($26) + (($27*12)|0)|0);
    $data21 = ((($arrayidx20)) + 4|0);
    $28 = HEAP32[$data21>>2]|0;
    $eeprom = ((($f)) + 2440|0);
    HEAP32[$eeprom>>2] = $28;
    $29 = HEAP32[$chunk>>2]|0;
    $30 = $ci;
    $arrayidx22 = (($29) + (($30*12)|0)|0);
    $size23 = ((($arrayidx22)) + 8|0);
    $31 = HEAP32[$size23>>2]|0;
    $eesize = ((($f)) + 2444|0);
    HEAP32[$eesize>>2] = $31;
    $32 = HEAP32[$chunk>>2]|0;
    $33 = $ci;
    $arrayidx24 = (($32) + (($33*12)|0)|0);
    $34 = HEAP32[$arrayidx24>>2]|0;
    $eesize26 = ((($f)) + 2444|0);
    $35 = HEAP32[$eesize26>>2]|0;
    HEAP32[$vararg_buffer8>>2] = $34;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $35;
    (_printf(355068,$vararg_buffer8)|0);
   }
  } while(0);
  $36 = $ci;
  $inc = (($36) + 1)|0;
  $ci = $inc;
 }
 $frequency = ((($f)) + 64|0);
 HEAP32[$frequency>>2] = 16000000;
 (_strcpy($f,357990)|0);
 $37 = $filename$addr;
 $frequency31 = ((($f)) + 64|0);
 $38 = HEAP32[$frequency31>>2]|0;
 HEAP32[$vararg_buffer12>>2] = $37;
 $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $38;
 $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
 HEAP32[$vararg_ptr16>>2] = $f;
 (_printf(355094,$vararg_buffer12)|0);
 $call37 = (_avr_make_mcu_by_name($f)|0);
 HEAP32[90988] = $call37;
 $39 = HEAP32[90988]|0;
 $tobool = ($39|0)!=(0|0);
 if (!($tobool)) {
  $40 = HEAP32[88638]|0;
  HEAP32[$vararg_buffer17>>2] = $f;
  (_fprintf($40,355120,$vararg_buffer17)|0);
  _exit(1);
  // unreachable;
 }
 $41 = HEAP32[90988]|0;
 (_avr_init($41)|0);
 $42 = HEAP32[90988]|0;
 $frequency44 = ((($42)) + 40|0);
 HEAP32[$frequency44>>2] = 16000000;
 $43 = HEAP32[90988]|0;
 _avr_load_firmware($43,$f);
 $44 = HEAP32[90988]|0;
 $log = ((($44)) + 8280|0);
 $bf$load = HEAP8[$log>>0]|0;
 $bf$clear = $bf$load & -7;
 $bf$set = $bf$clear | 6;
 HEAP8[$log>>0] = $bf$set;
 (_printf(355140,$vararg_buffer20)|0);
 $pi = 0;
 while(1) {
  $45 = $pi;
  $cmp47 = ($45>>>0)<(11);
  if (!($cmp47)) {
   break;
  }
  $46 = $pi;
  $arrayidx49 = (354816 + ($46)|0);
  $47 = HEAP8[$arrayidx49>>0]|0;
  $conv = $47 << 24 >> 24;
  HEAP32[$vararg_buffer22>>2] = $conv;
  (_printf(355168,$vararg_buffer22)|0);
  $48 = HEAP32[90988]|0;
  $49 = $pi;
  $arrayidx51 = (354816 + ($49)|0);
  $50 = HEAP8[$arrayidx51>>0]|0;
  $conv52 = $50 << 24 >> 24;
  $or = 1768908544 | $conv52;
  $call53 = (_avr_io_getirq($48,$or,8)|0);
  $irq = $call53;
  $51 = $irq;
  $52 = $pi;
  $arrayidx54 = (354816 + ($52)|0);
  _avr_irq_register_notify($51,79,$arrayidx54);
  $53 = $pi;
  $inc56 = (($53) + 1)|0;
  $pi = $inc56;
 }
 (_printf(355172,$vararg_buffer25)|0);
 $54 = HEAP32[90988]|0;
 _wdg0151_init($54,363956);
 $55 = HEAP32[90988]|0;
 _hd44780_init($55,365012,256,128);
 HEAP32[(365008)>>2] = 80;
 $i = 0;
 while(1) {
  $56 = $i;
  $cmp60 = ($56|0)<(8);
  $57 = HEAP32[90988]|0;
  if (!($cmp60)) {
   break;
  }
  $58 = $i;
  $call63 = (_avr_io_getirq($57,1768908609,$58)|0);
  $iavr = $call63;
  $59 = HEAP32[90989]|0;
  $add$ptr = ((($59)) + 120|0);
  $60 = $i;
  $add$ptr64 = (($add$ptr) + (($60*24)|0)|0);
  $ilcd = $add$ptr64;
  $61 = $iavr;
  $62 = $ilcd;
  _avr_connect_irq($61,$62);
  $63 = $ilcd;
  $64 = $iavr;
  _avr_connect_irq($63,$64);
  $65 = $i;
  $inc66 = (($65) + 1)|0;
  $i = $inc66;
 }
 $call68 = (_avr_io_getirq($57,1768908613,2)|0);
 $66 = HEAP32[90989]|0;
 _avr_connect_irq($call68,$66);
 $67 = HEAP32[90988]|0;
 $call70 = (_avr_io_getirq($67,1768908613,3)|0);
 $68 = HEAP32[90989]|0;
 $add$ptr71 = ((($68)) + 24|0);
 _avr_connect_irq($call70,$add$ptr71);
 $69 = HEAP32[90988]|0;
 $call72 = (_avr_io_getirq($69,1768908613,4)|0);
 $70 = HEAP32[90989]|0;
 $add$ptr73 = ((($70)) + 48|0);
 _avr_connect_irq($call72,$add$ptr73);
 $71 = HEAP32[90988]|0;
 $call74 = (_avr_io_getirq($71,1768908613,5)|0);
 $72 = HEAP32[90989]|0;
 $add$ptr75 = ((($72)) + 72|0);
 _avr_connect_irq($call74,$add$ptr75);
 $73 = HEAP32[90988]|0;
 $call76 = (_avr_io_getirq($73,1768908613,6)|0);
 $74 = HEAP32[90989]|0;
 $add$ptr77 = ((($74)) + 96|0);
 _avr_connect_irq($call76,$add$ptr77);
 $75 = HEAP32[90988]|0;
 $call78 = (_avr_io_getirq($75,1768908613,7)|0);
 $76 = HEAP32[90989]|0;
 $add$ptr79 = ((($76)) + 312|0);
 _avr_connect_irq($call78,$add$ptr79);
 STACKTOP = sp;return;
}
function _pin_changed_hook($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $irq$addr = 0, $param$addr = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $irq$addr = $irq;
 $value$addr = $value;
 $param$addr = $param;
 $0 = $param$addr;
 $1 = HEAP8[$0>>0]|0;
 $conv = $1 << 24 >> 24;
 $2 = $value$addr;
 $call = _emscripten_asm_const_iii(0,($conv|0),($2|0))|0;
 STACKTOP = sp;return;
}
function _glcd_callback() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp17 = 0, $cmp2 = 0, $data = 0, $i = 0, $inc = 0, $inc21 = 0, $inc24 = 0, $inc27 = 0, $inc7 = 0, $inc9 = 0, $x = 0, $x15 = 0, $y = 0, $y11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $data = sp;
 $arrayidx = ((($data)) + 512|0);
 HEAP8[$arrayidx>>0] = 0;
 $i = 0;
 $y = 0;
 while(1) {
  $0 = $y;
  $cmp = ($0|0)<(8);
  if (!($cmp)) {
   break;
  }
  $x = 0;
  while(1) {
   $1 = $x;
   $cmp2 = ($1|0)<(64);
   $2 = $y;
   if (!($cmp2)) {
    break;
   }
   $arrayidx4 = ((363972) + ($2<<6)|0);
   $3 = $x;
   $arrayidx5 = (($arrayidx4) + ($3)|0);
   $4 = HEAP8[$arrayidx5>>0]|0;
   $5 = $i;
   $inc = (($5) + 1)|0;
   $i = $inc;
   $arrayidx6 = (($data) + ($5)|0);
   HEAP8[$arrayidx6>>0] = $4;
   $6 = $x;
   $inc7 = (($6) + 1)|0;
   $x = $inc7;
  }
  $inc9 = (($2) + 1)|0;
  $y = $inc9;
 }
 $y11 = 0;
 while(1) {
  $7 = $y11;
  $cmp13 = ($7|0)<(8);
  if (!($cmp13)) {
   break;
  }
  $x15 = 0;
  while(1) {
   $8 = $x15;
   $cmp17 = ($8|0)<(64);
   $9 = $y11;
   if (!($cmp17)) {
    break;
   }
   $arrayidx19 = ((364492) + ($9<<6)|0);
   $10 = $x15;
   $arrayidx20 = (($arrayidx19) + ($10)|0);
   $11 = HEAP8[$arrayidx20>>0]|0;
   $12 = $i;
   $inc21 = (($12) + 1)|0;
   $i = $inc21;
   $arrayidx22 = (($data) + ($12)|0);
   HEAP8[$arrayidx22>>0] = $11;
   $13 = $x15;
   $inc24 = (($13) + 1)|0;
   $x15 = $inc24;
  }
  $inc27 = (($9) + 1)|0;
  $y11 = $inc27;
 }
 $call = _emscripten_asm_const_ii(1,($data|0))|0;
 STACKTOP = sp;return;
}
function _wdg0151_init($avr,$wdg) {
 $avr = $avr|0;
 $wdg = $wdg|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $avr$addr = 0, $avr1 = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $irq_pool = 0, $wdg$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $avr$addr = $avr;
 $wdg$addr = $wdg;
 $0 = $wdg$addr;
 _memset(($0|0),0,1056)|0;
 $1 = $avr$addr;
 $2 = $wdg$addr;
 $avr1 = ((($2)) + 4|0);
 HEAP32[$avr1>>2] = $1;
 $3 = $avr$addr;
 $irq_pool = ((($3)) + 112|0);
 $call = (_avr_alloc_irq($irq_pool,0,14,16)|0);
 $4 = $wdg$addr;
 HEAP32[$4>>2] = $call;
 $i = 0;
 while(1) {
  $5 = $i;
  $cmp = ($5|0)<(14);
  if (!($cmp)) {
   break;
  }
  $6 = $wdg$addr;
  $7 = HEAP32[$6>>2]|0;
  $8 = $i;
  $add$ptr = (($7) + (($8*24)|0)|0);
  $9 = $wdg$addr;
  _avr_irq_register_notify($add$ptr,81,$9);
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _wdg0151_pin_changed($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $and = 0, $and11 = 0, $and8 = 0, $avr = 0, $conv = 0, $conv10 = 0, $conv5 = 0, $conv7 = 0, $e = 0, $eo = 0, $irq$addr = 0, $irq2 = 0, $irq3 = 0, $neg = 0, $old = 0, $or = 0, $or$cond = 0, $param$addr = 0, $pinstate = 0, $pinstate1 = 0;
 var $pinstate6 = 0, $pinstate9 = 0, $shl = 0, $shl4 = 0, $tobool = 0, $tobool12 = 0, $value$addr = 0, $wdg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $irq$addr = $irq;
 $value$addr = $value;
 $param$addr = $param;
 $0 = $param$addr;
 $wdg = $0;
 $1 = $wdg;
 $pinstate = ((($1)) + 1050|0);
 $2 = HEAP16[$pinstate>>1]|0;
 $old = $2;
 $3 = $wdg;
 $pinstate1 = ((($3)) + 1050|0);
 $4 = HEAP16[$pinstate1>>1]|0;
 $conv = $4&65535;
 $5 = $irq$addr;
 $irq2 = ((($5)) + 8|0);
 $6 = HEAP32[$irq2>>2]|0;
 $shl = 1 << $6;
 $neg = $shl ^ -1;
 $and = $conv & $neg;
 $7 = $value$addr;
 $8 = $irq$addr;
 $irq3 = ((($8)) + 8|0);
 $9 = HEAP32[$irq3>>2]|0;
 $shl4 = $7 << $9;
 $or = $and | $shl4;
 $conv5 = $or&65535;
 $10 = $wdg;
 $pinstate6 = ((($10)) + 1050|0);
 HEAP16[$pinstate6>>1] = $conv5;
 $11 = $old;
 $conv7 = $11&65535;
 $and8 = $conv7 & 16;
 $eo = $and8;
 $12 = $wdg;
 $pinstate9 = ((($12)) + 1050|0);
 $13 = HEAP16[$pinstate9>>1]|0;
 $conv10 = $13&65535;
 $and11 = $conv10 & 16;
 $e = $and11;
 $14 = $eo;
 $tobool = ($14|0)==(0);
 $15 = $e;
 $tobool12 = ($15|0)!=(0);
 $or$cond = $tobool & $tobool12;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $16 = $wdg;
 $avr = ((($16)) + 4|0);
 $17 = HEAP32[$avr>>2]|0;
 $18 = $wdg;
 (_wdg0151_process_e_pinchange($17,0,0,$18)|0);
 $19 = (getTempRet0() | 0);
 STACKTOP = sp;return;
}
function _wdg0151_process_e_pinchange($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and17 = 0, $and2 = 0, $and23 = 0, $and32 = 0, $and39 = 0, $and8 = 0, $avr$addr = 0, $avr29 = 0, $busy = 0, $busy27 = 0;
 var $call = 0, $call11 = 0, $call12 = 0, $conv = 0, $conv1 = 0, $conv16 = 0, $conv22 = 0, $conv31 = 0, $conv38 = 0, $conv7 = 0, $cres = 0, $ctrl1 = 0, $ctrl120 = 0, $ctrl135 = 0, $ctrl2 = 0, $ctrl226 = 0, $ctrl242 = 0, $delay = 0, $param$addr = 0, $pinstate = 0;
 var $reentrant = 0, $reentrant36 = 0, $reentrant43 = 0, $reentrant5 = 0, $tobool = 0, $tobool14 = 0, $tobool18 = 0, $tobool24 = 0, $tobool3 = 0, $tobool33 = 0, $tobool40 = 0, $tobool9 = 0, $wdg = 0, $when$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $when$addr = sp;
 $avr$addr = $avr;
 $2 = $when$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $param$addr = $param;
 $6 = $param$addr;
 $wdg = $6;
 $7 = $wdg;
 $call = (_wdg0151_get_cs($7)|0);
 $cres = $call;
 $8 = $cres;
 $conv = $8&255;
 $and = $conv & 2;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $9 = $wdg;
  $ctrl1 = ((($9)) + 8|0);
  $reentrant = ((($ctrl1)) + 4|0);
  HEAP8[$reentrant>>0] = 1;
 }
 $10 = $cres;
 $conv1 = $10&255;
 $and2 = $conv1 & 4;
 $tobool3 = ($and2|0)!=(0);
 if ($tobool3) {
  $11 = $wdg;
  $ctrl2 = ((($11)) + 528|0);
  $reentrant5 = ((($ctrl2)) + 4|0);
  HEAP8[$reentrant5>>0] = 1;
 }
 $delay = 0;
 $12 = $wdg;
 $pinstate = ((($12)) + 1050|0);
 $13 = HEAP16[$pinstate>>1]|0;
 $conv7 = $13&65535;
 $and8 = $conv7 & 8;
 $tobool9 = ($and8|0)!=(0);
 $14 = $wdg;
 if ($tobool9) {
  $call12 = (_wdg0151_process_read($14)|0);
  $delay = $call12;
 } else {
  $call11 = (_wdg0151_process_write($14)|0);
  $delay = $call11;
 }
 $15 = $delay;
 $tobool14 = ($15|0)!=(0);
 if ($tobool14) {
  $16 = $cres;
  $conv16 = $16&255;
  $and17 = $conv16 & 2;
  $tobool18 = ($and17|0)!=(0);
  if ($tobool18) {
   $17 = $wdg;
   $ctrl120 = ((($17)) + 8|0);
   $busy = ((($ctrl120)) + 1|0);
   HEAP8[$busy>>0] = 1;
  }
  $18 = $cres;
  $conv22 = $18&255;
  $and23 = $conv22 & 4;
  $tobool24 = ($and23|0)!=(0);
  if ($tobool24) {
   $19 = $wdg;
   $ctrl226 = ((($19)) + 528|0);
   $busy27 = ((($ctrl226)) + 1|0);
   HEAP8[$busy27>>0] = 1;
  }
  $20 = $wdg;
  $avr29 = ((($20)) + 4|0);
  $21 = HEAP32[$avr29>>2]|0;
  $22 = $delay;
  $23 = $wdg;
  _avr_cycle_timer_register_usec($21,$22,82,$23);
 }
 $24 = $cres;
 $conv31 = $24&255;
 $and32 = $conv31 & 2;
 $tobool33 = ($and32|0)!=(0);
 if ($tobool33) {
  $25 = $wdg;
  $ctrl135 = ((($25)) + 8|0);
  $reentrant36 = ((($ctrl135)) + 4|0);
  HEAP8[$reentrant36>>0] = 0;
 }
 $26 = $cres;
 $conv38 = $26&255;
 $and39 = $conv38 & 4;
 $tobool40 = ($and39|0)!=(0);
 if (!($tobool40)) {
  $28 = $delay;
  $29 = ($28|0)<(0);
  $30 = $29 << 31 >> 31;
  setTempRet0(($30) | 0);
  STACKTOP = sp;return ($28|0);
 }
 $27 = $wdg;
 $ctrl242 = ((($27)) + 528|0);
 $reentrant43 = ((($ctrl242)) + 4|0);
 HEAP8[$reentrant43>>0] = 0;
 $28 = $delay;
 $29 = ($28|0)<(0);
 $30 = $29 << 31 >> 31;
 setTempRet0(($30) | 0);
 STACKTOP = sp;return ($28|0);
}
function _wdg0151_get_cs($wdg) {
 $wdg = $wdg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $and = 0, $and5 = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv2 = 0, $conv4 = 0, $conv8 = 0, $or = 0, $or9 = 0, $pinstate = 0, $pinstate3 = 0, $res = 0;
 var $tobool = 0, $tobool6 = 0, $wdg$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wdg$addr = $wdg;
 $res = 0;
 $0 = $wdg$addr;
 $pinstate = ((($0)) + 1050|0);
 $1 = HEAP16[$pinstate>>1]|0;
 $conv = $1&65535;
 $and = $conv & 2;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $2 = $res;
  $conv1 = $2&255;
  $or = $conv1 | 4;
  $conv2 = $or&255;
  $res = $conv2;
 }
 $3 = $wdg$addr;
 $pinstate3 = ((($3)) + 1050|0);
 $4 = HEAP16[$pinstate3>>1]|0;
 $conv4 = $4&65535;
 $and5 = $conv4 & 1;
 $tobool6 = ($and5|0)!=(0);
 if ($tobool6) {
  $6 = $res;
  STACKTOP = sp;return ($6|0);
 }
 $5 = $res;
 $conv8 = $5&255;
 $or9 = $conv8 | 2;
 $conv10 = $or9&255;
 $res = $conv10;
 $6 = $res;
 STACKTOP = sp;return ($6|0);
}
function _wdg0151_process_write($wdg) {
 $wdg = $wdg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and14 = 0, $and5 = 0, $and7 = 0, $call = 0, $call17 = 0;
 var $call18 = 0, $conv = 0, $conv1 = 0, $conv13 = 0, $conv2 = 0, $conv4 = 0, $conv6 = 0, $cres = 0, $ctrl1 = 0, $ctrl2 = 0, $datapins = 0, $delay = 0, $dummy = 0, $dummy10 = 0, $pinstate = 0, $pinstate12 = 0, $shr = 0, $tobool = 0, $tobool15 = 0, $tobool8 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $wdg$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $wdg$addr = $wdg;
 $0 = $wdg$addr;
 $pinstate = ((($0)) + 1050|0);
 $1 = HEAP16[$pinstate>>1]|0;
 $conv = $1&65535;
 $shr = $conv >> 5;
 $and = $shr & 255;
 $conv1 = $and&255;
 $2 = $wdg$addr;
 $datapins = ((($2)) + 1048|0);
 HEAP8[$datapins>>0] = $conv1;
 $3 = $wdg$addr;
 $call = (_wdg0151_get_cs($3)|0);
 $cres = $call;
 $4 = $cres;
 $conv2 = $4&255;
 HEAP32[$vararg_buffer>>2] = $conv2;
 (_printf(355447,$vararg_buffer)|0);
 $5 = $cres;
 $conv4 = $5&255;
 $and5 = $conv4 & 2;
 $tobool = ($and5|0)!=(0);
 if ($tobool) {
  $6 = $wdg$addr;
  $ctrl1 = ((($6)) + 8|0);
  $dummy = ((($ctrl1)) + 3|0);
  HEAP8[$dummy>>0] = 1;
 }
 $7 = $cres;
 $conv6 = $7&255;
 $and7 = $conv6 & 4;
 $tobool8 = ($and7|0)!=(0);
 if ($tobool8) {
  $8 = $wdg$addr;
  $ctrl2 = ((($8)) + 528|0);
  $dummy10 = ((($ctrl2)) + 3|0);
  HEAP8[$dummy10>>0] = 1;
 }
 $delay = 0;
 $9 = $wdg$addr;
 $pinstate12 = ((($9)) + 1050|0);
 $10 = HEAP16[$pinstate12>>1]|0;
 $conv13 = $10&65535;
 $and14 = $conv13 & 4;
 $tobool15 = ($and14|0)!=(0);
 $11 = $wdg$addr;
 if ($tobool15) {
  $call17 = (_wdg0151_write_data($11)|0);
  $delay = $call17;
  $12 = $delay;
  HEAP32[$vararg_buffer1>>2] = $12;
  (_printf(355466,$vararg_buffer1)|0);
  $13 = $delay;
  STACKTOP = sp;return ($13|0);
 } else {
  $call18 = (_wdg0151_write_instruction($11)|0);
  $delay = $call18;
  $12 = $delay;
  HEAP32[$vararg_buffer1>>2] = $12;
  (_printf(355466,$vararg_buffer1)|0);
  $13 = $delay;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _wdg0151_process_read($wdg) {
 $wdg = $wdg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $and = 0, $and121 = 0, $and2 = 0;
 var $and39 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx22 = 0, $arrayidx26 = 0, $arrayidx55 = 0, $arrayidx59 = 0, $arrayidx67 = 0, $arrayidx71 = 0, $busy = 0, $busy113 = 0, $busy133 = 0, $busy150 = 0, $call = 0, $cmp = 0, $cmp78 = 0, $conv = 0, $conv1 = 0, $conv100 = 0, $conv105 = 0;
 var $conv109 = 0, $conv115 = 0, $conv118 = 0, $conv120 = 0, $conv127 = 0, $conv131 = 0, $conv135 = 0, $conv140 = 0, $conv146 = 0, $conv15 = 0, $conv152 = 0, $conv155 = 0, $conv31 = 0, $conv38 = 0, $conv60 = 0, $conv77 = 0, $conv94 = 0, $conv97 = 0, $cres = 0, $ctrl1 = 0;
 var $ctrl110 = 0, $ctrl1102 = 0, $ctrl1106 = 0, $ctrl111 = 0, $ctrl1112 = 0, $ctrl112 = 0, $ctrl117 = 0, $ctrl119 = 0, $ctrl123 = 0, $ctrl127 = 0, $ctrl129 = 0, $ctrl134 = 0, $ctrl18 = 0, $ctrl192 = 0, $ctrl195 = 0, $ctrl198 = 0, $ctrl2 = 0, $ctrl2124 = 0, $ctrl2128 = 0, $ctrl2132 = 0;
 var $ctrl2137 = 0, $ctrl2143 = 0, $ctrl2149 = 0, $ctrl246 = 0, $ctrl250 = 0, $ctrl252 = 0, $ctrl256 = 0, $ctrl262 = 0, $ctrl264 = 0, $ctrl268 = 0, $ctrl272 = 0, $ctrl275 = 0, $ctrl281 = 0, $data = 0, $data18 = 0, $data51 = 0, $data63 = 0, $data87 = 0, $dec = 0, $dec48 = 0;
 var $delay = 0, $dummy = 0, $dummy42 = 0, $dummy47 = 0, $dummy9 = 0, $idxprom = 0, $idxprom13 = 0, $idxprom21 = 0, $idxprom25 = 0, $idxprom54 = 0, $idxprom58 = 0, $idxprom66 = 0, $idxprom70 = 0, $inc = 0, $inc74 = 0, $or = 0, $or111 = 0, $or117 = 0, $or142 = 0, $or148 = 0;
 var $or154 = 0, $pinstate = 0, $reset = 0, $reset103 = 0, $reset125 = 0, $reset138 = 0, $shl = 0, $shl110 = 0, $shl116 = 0, $shl141 = 0, $shl147 = 0, $shl153 = 0, $tobool = 0, $tobool104 = 0, $tobool108 = 0, $tobool114 = 0, $tobool122 = 0, $tobool126 = 0, $tobool130 = 0, $tobool134 = 0;
 var $tobool139 = 0, $tobool145 = 0, $tobool151 = 0, $tobool3 = 0, $tobool40 = 0, $tobool43 = 0, $tobool5 = 0, $tobool93 = 0, $tobool96 = 0, $tobool99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0;
 var $wdg$addr = 0, $x_addr = 0, $x_addr24 = 0, $x_addr28 = 0, $x_addr30 = 0, $x_addr35 = 0, $x_addr57 = 0, $x_addr69 = 0, $x_addr73 = 0, $x_addr76 = 0, $x_addr82 = 0, $y_addr = 0, $y_addr20 = 0, $y_addr53 = 0, $y_addr65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $wdg$addr = $wdg;
 $delay = 500;
 $0 = $wdg$addr;
 $call = (_wdg0151_get_cs($0)|0);
 $cres = $call;
 $1 = $wdg$addr;
 $pinstate = ((($1)) + 1050|0);
 $2 = HEAP16[$pinstate>>1]|0;
 $conv = $2&65535;
 $and = $conv & 4;
 $tobool = ($and|0)!=(0);
 $3 = $cres;
 $conv1 = $3&255;
 $and2 = $conv1 & 2;
 $tobool3 = ($and2|0)!=(0);
 if (!($tobool)) {
  if ($tobool3) {
   $49 = $wdg$addr;
   $ctrl192 = ((($49)) + 8|0);
   $reset = ((($ctrl192)) + 2|0);
   $50 = HEAP8[$reset>>0]|0;
   $tobool93 = $50&1;
   $conv94 = $tobool93&1;
   $51 = $wdg$addr;
   $ctrl195 = ((($51)) + 8|0);
   $52 = HEAP8[$ctrl195>>0]|0;
   $tobool96 = $52&1;
   $conv97 = $tobool96&1;
   $53 = $wdg$addr;
   $ctrl198 = ((($53)) + 8|0);
   $busy = ((($ctrl198)) + 1|0);
   $54 = HEAP8[$busy>>0]|0;
   $tobool99 = $54&1;
   $conv100 = $tobool99&1;
   HEAP32[$vararg_buffer8>>2] = $conv94;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $conv97;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $conv100;
   (_printf(355335,$vararg_buffer8)|0);
   $55 = $wdg$addr;
   $ctrl1102 = ((($55)) + 8|0);
   $reset103 = ((($ctrl1102)) + 2|0);
   $56 = HEAP8[$reset103>>0]|0;
   $tobool104 = $56&1;
   $conv105 = $tobool104&1;
   $shl = $conv105 << 4;
   $or = 0 | $shl;
   $57 = $wdg$addr;
   $ctrl1106 = ((($57)) + 8|0);
   $58 = HEAP8[$ctrl1106>>0]|0;
   $tobool108 = $58&1;
   $conv109 = $tobool108&1;
   $shl110 = $conv109 << 5;
   $or111 = $or | $shl110;
   $59 = $wdg$addr;
   $ctrl1112 = ((($59)) + 8|0);
   $busy113 = ((($ctrl1112)) + 1|0);
   $60 = HEAP8[$busy113>>0]|0;
   $tobool114 = $60&1;
   $conv115 = $tobool114&1;
   $shl116 = $conv115 << 7;
   $or117 = $or111 | $shl116;
   $conv118 = $or117&255;
   $data87 = $conv118;
  }
  $61 = $cres;
  $conv120 = $61&255;
  $and121 = $conv120 & 4;
  $tobool122 = ($and121|0)!=(0);
  if ($tobool122) {
   $62 = $wdg$addr;
   $ctrl2124 = ((($62)) + 528|0);
   $reset125 = ((($ctrl2124)) + 2|0);
   $63 = HEAP8[$reset125>>0]|0;
   $tobool126 = $63&1;
   $conv127 = $tobool126&1;
   $64 = $wdg$addr;
   $ctrl2128 = ((($64)) + 528|0);
   $65 = HEAP8[$ctrl2128>>0]|0;
   $tobool130 = $65&1;
   $conv131 = $tobool130&1;
   $66 = $wdg$addr;
   $ctrl2132 = ((($66)) + 528|0);
   $busy133 = ((($ctrl2132)) + 1|0);
   $67 = HEAP8[$busy133>>0]|0;
   $tobool134 = $67&1;
   $conv135 = $tobool134&1;
   HEAP32[$vararg_buffer13>>2] = $conv127;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $conv131;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $conv135;
   (_printf(355391,$vararg_buffer13)|0);
   $68 = $wdg$addr;
   $ctrl2137 = ((($68)) + 528|0);
   $reset138 = ((($ctrl2137)) + 2|0);
   $69 = HEAP8[$reset138>>0]|0;
   $tobool139 = $69&1;
   $conv140 = $tobool139&1;
   $shl141 = $conv140 << 4;
   $or142 = 0 | $shl141;
   $70 = $wdg$addr;
   $ctrl2143 = ((($70)) + 528|0);
   $71 = HEAP8[$ctrl2143>>0]|0;
   $tobool145 = $71&1;
   $conv146 = $tobool145&1;
   $shl147 = $conv146 << 5;
   $or148 = $or142 | $shl147;
   $72 = $wdg$addr;
   $ctrl2149 = ((($72)) + 528|0);
   $busy150 = ((($ctrl2149)) + 1|0);
   $73 = HEAP8[$busy150>>0]|0;
   $tobool151 = $73&1;
   $conv152 = $tobool151&1;
   $shl153 = $conv152 << 7;
   $or154 = $or148 | $shl153;
   $conv155 = $or154&255;
   $data87 = $conv155;
  }
  $74 = $wdg$addr;
  $75 = $data87;
  _wdg0151_write_datapins($74,$75);
  $76 = $delay;
  STACKTOP = sp;return ($76|0);
 }
 do {
  if ($tobool3) {
   $4 = $wdg$addr;
   $ctrl1 = ((($4)) + 8|0);
   $dummy = ((($ctrl1)) + 3|0);
   $5 = HEAP8[$dummy>>0]|0;
   $tobool5 = ($5<<24>>24)!=(0);
   if ($tobool5) {
    (_printf(355219,$vararg_buffer)|0);
    $6 = $wdg$addr;
    $ctrl18 = ((($6)) + 8|0);
    $dummy9 = ((($ctrl18)) + 3|0);
    $7 = HEAP8[$dummy9>>0]|0;
    $dec = (($7) + -1)<<24>>24;
    HEAP8[$dummy9>>0] = $dec;
    break;
   }
   $8 = $wdg$addr;
   $ctrl110 = ((($8)) + 8|0);
   $data = ((($ctrl110)) + 8|0);
   $9 = $wdg$addr;
   $ctrl111 = ((($9)) + 8|0);
   $y_addr = ((($ctrl111)) + 5|0);
   $10 = HEAP8[$y_addr>>0]|0;
   $idxprom = $10&255;
   $arrayidx = (($data) + ($idxprom<<6)|0);
   $11 = $wdg$addr;
   $ctrl112 = ((($11)) + 8|0);
   $x_addr = ((($ctrl112)) + 6|0);
   $12 = HEAP8[$x_addr>>0]|0;
   $idxprom13 = $12&255;
   $arrayidx14 = (($arrayidx) + ($idxprom13)|0);
   $13 = HEAP8[$arrayidx14>>0]|0;
   $conv15 = $13&255;
   HEAP32[$vararg_buffer1>>2] = $conv15;
   (_printf(355252,$vararg_buffer1)|0);
   $14 = $wdg$addr;
   $15 = $wdg$addr;
   $ctrl117 = ((($15)) + 8|0);
   $data18 = ((($ctrl117)) + 8|0);
   $16 = $wdg$addr;
   $ctrl119 = ((($16)) + 8|0);
   $y_addr20 = ((($ctrl119)) + 5|0);
   $17 = HEAP8[$y_addr20>>0]|0;
   $idxprom21 = $17&255;
   $arrayidx22 = (($data18) + ($idxprom21<<6)|0);
   $18 = $wdg$addr;
   $ctrl123 = ((($18)) + 8|0);
   $x_addr24 = ((($ctrl123)) + 6|0);
   $19 = HEAP8[$x_addr24>>0]|0;
   $idxprom25 = $19&255;
   $arrayidx26 = (($arrayidx22) + ($idxprom25)|0);
   $20 = HEAP8[$arrayidx26>>0]|0;
   _wdg0151_write_datapins($14,$20);
   $21 = $wdg$addr;
   $ctrl127 = ((($21)) + 8|0);
   $x_addr28 = ((($ctrl127)) + 6|0);
   $22 = HEAP8[$x_addr28>>0]|0;
   $inc = (($22) + 1)<<24>>24;
   HEAP8[$x_addr28>>0] = $inc;
   $23 = $wdg$addr;
   $ctrl129 = ((($23)) + 8|0);
   $x_addr30 = ((($ctrl129)) + 6|0);
   $24 = HEAP8[$x_addr30>>0]|0;
   $conv31 = $24&255;
   $cmp = ($conv31|0)>=(64);
   if ($cmp) {
    $25 = $wdg$addr;
    $ctrl134 = ((($25)) + 8|0);
    $x_addr35 = ((($ctrl134)) + 6|0);
    HEAP8[$x_addr35>>0] = 0;
   }
  }
 } while(0);
 $26 = $cres;
 $conv38 = $26&255;
 $and39 = $conv38 & 4;
 $tobool40 = ($and39|0)!=(0);
 if (!($tobool40)) {
  $76 = $delay;
  STACKTOP = sp;return ($76|0);
 }
 $27 = $wdg$addr;
 $ctrl2 = ((($27)) + 528|0);
 $dummy42 = ((($ctrl2)) + 3|0);
 $28 = HEAP8[$dummy42>>0]|0;
 $tobool43 = ($28<<24>>24)!=(0);
 if ($tobool43) {
  (_printf(355277,$vararg_buffer3)|0);
  $29 = $wdg$addr;
  $ctrl246 = ((($29)) + 528|0);
  $dummy47 = ((($ctrl246)) + 3|0);
  $30 = HEAP8[$dummy47>>0]|0;
  $dec48 = (($30) + -1)<<24>>24;
  HEAP8[$dummy47>>0] = $dec48;
  $76 = $delay;
  STACKTOP = sp;return ($76|0);
 }
 $31 = $wdg$addr;
 $ctrl250 = ((($31)) + 528|0);
 $data51 = ((($ctrl250)) + 8|0);
 $32 = $wdg$addr;
 $ctrl252 = ((($32)) + 528|0);
 $y_addr53 = ((($ctrl252)) + 5|0);
 $33 = HEAP8[$y_addr53>>0]|0;
 $idxprom54 = $33&255;
 $arrayidx55 = (($data51) + ($idxprom54<<6)|0);
 $34 = $wdg$addr;
 $ctrl256 = ((($34)) + 528|0);
 $x_addr57 = ((($ctrl256)) + 6|0);
 $35 = HEAP8[$x_addr57>>0]|0;
 $idxprom58 = $35&255;
 $arrayidx59 = (($arrayidx55) + ($idxprom58)|0);
 $36 = HEAP8[$arrayidx59>>0]|0;
 $conv60 = $36&255;
 HEAP32[$vararg_buffer5>>2] = $conv60;
 (_printf(355310,$vararg_buffer5)|0);
 $37 = $wdg$addr;
 $38 = $wdg$addr;
 $ctrl262 = ((($38)) + 528|0);
 $data63 = ((($ctrl262)) + 8|0);
 $39 = $wdg$addr;
 $ctrl264 = ((($39)) + 528|0);
 $y_addr65 = ((($ctrl264)) + 5|0);
 $40 = HEAP8[$y_addr65>>0]|0;
 $idxprom66 = $40&255;
 $arrayidx67 = (($data63) + ($idxprom66<<6)|0);
 $41 = $wdg$addr;
 $ctrl268 = ((($41)) + 528|0);
 $x_addr69 = ((($ctrl268)) + 6|0);
 $42 = HEAP8[$x_addr69>>0]|0;
 $idxprom70 = $42&255;
 $arrayidx71 = (($arrayidx67) + ($idxprom70)|0);
 $43 = HEAP8[$arrayidx71>>0]|0;
 _wdg0151_write_datapins($37,$43);
 $44 = $wdg$addr;
 $ctrl272 = ((($44)) + 528|0);
 $x_addr73 = ((($ctrl272)) + 6|0);
 $45 = HEAP8[$x_addr73>>0]|0;
 $inc74 = (($45) + 1)<<24>>24;
 HEAP8[$x_addr73>>0] = $inc74;
 $46 = $wdg$addr;
 $ctrl275 = ((($46)) + 528|0);
 $x_addr76 = ((($ctrl275)) + 6|0);
 $47 = HEAP8[$x_addr76>>0]|0;
 $conv77 = $47&255;
 $cmp78 = ($conv77|0)>=(64);
 if (!($cmp78)) {
  $76 = $delay;
  STACKTOP = sp;return ($76|0);
 }
 $48 = $wdg$addr;
 $ctrl281 = ((($48)) + 528|0);
 $x_addr82 = ((($ctrl281)) + 6|0);
 HEAP8[$x_addr82>>0] = 0;
 $76 = $delay;
 STACKTOP = sp;return ($76|0);
}
function _wdg0151_busy_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and2 = 0, $avr$addr = 0, $busy = 0, $busy5 = 0, $call = 0, $conv = 0, $conv1 = 0, $ctrl1 = 0, $ctrl2 = 0;
 var $param$addr = 0, $res = 0, $tobool = 0, $tobool3 = 0, $wdg = 0, $when$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $when$addr = sp;
 $avr$addr = $avr;
 $2 = $when$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $param$addr = $param;
 $6 = $param$addr;
 $wdg = $6;
 $7 = $wdg;
 $call = (_wdg0151_get_cs($7)|0);
 $res = $call;
 $8 = $res;
 $conv = $8&255;
 $and = $conv & 2;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $9 = $wdg;
  $ctrl1 = ((($9)) + 8|0);
  $busy = ((($ctrl1)) + 1|0);
  HEAP8[$busy>>0] = 0;
 }
 $10 = $res;
 $conv1 = $10&255;
 $and2 = $conv1 & 4;
 $tobool3 = ($and2|0)!=(0);
 if (!($tobool3)) {
  setTempRet0((0) | 0);
  STACKTOP = sp;return 0;
 }
 $11 = $wdg;
 $ctrl2 = ((($11)) + 528|0);
 $busy5 = ((($ctrl2)) + 1|0);
 HEAP8[$busy5>>0] = 0;
 setTempRet0((0) | 0);
 STACKTOP = sp;return 0;
}
function _wdg0151_write_datapins($wdg,$data) {
 $wdg = $wdg|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $add$ptr1 = 0, $and = 0, $cmp = 0, $conv = 0, $data$addr = 0, $datapins = 0, $i = 0, $inc = 0, $shl = 0, $wdg$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wdg$addr = $wdg;
 $data$addr = $data;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(8);
  if (!($cmp)) {
   break;
  }
  $1 = $wdg$addr;
  $2 = HEAP32[$1>>2]|0;
  $add$ptr = ((($2)) + 120|0);
  $3 = $i;
  $add$ptr1 = (($add$ptr) + (($3*24)|0)|0);
  $4 = $data$addr;
  $conv = $4&255;
  $5 = $i;
  $shl = $conv << $5;
  $and = $shl & 1;
  _avr_raise_irq($add$ptr1,$and);
  $6 = $i;
  $inc = (($6) + 1)|0;
  $i = $inc;
 }
 $7 = $data$addr;
 $8 = $wdg$addr;
 $datapins = ((($8)) + 1048|0);
 HEAP8[$datapins>>0] = $7;
 STACKTOP = sp;return;
}
function _wdg0151_write_data($wdg) {
 $wdg = $wdg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and25 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx42 = 0, $arrayidx46 = 0, $call = 0, $cb = 0, $cb62 = 0, $cmp = 0, $cmp53 = 0, $conv = 0, $conv1 = 0, $conv18 = 0, $conv2 = 0, $conv24 = 0;
 var $conv29 = 0, $conv31 = 0, $conv34 = 0, $conv4 = 0, $conv52 = 0, $cres = 0, $ctrl1 = 0, $ctrl110 = 0, $ctrl114 = 0, $ctrl116 = 0, $ctrl121 = 0, $ctrl13 = 0, $ctrl17 = 0, $ctrl18 = 0, $ctrl2 = 0, $ctrl232 = 0, $ctrl237 = 0, $ctrl239 = 0, $ctrl243 = 0, $ctrl247 = 0;
 var $ctrl250 = 0, $ctrl256 = 0, $data = 0, $data38 = 0, $datapins = 0, $datapins28 = 0, $datapins36 = 0, $datapins6 = 0, $delay = 0, $idxprom = 0, $idxprom12 = 0, $idxprom41 = 0, $idxprom45 = 0, $inc = 0, $inc49 = 0, $tobool = 0, $tobool26 = 0, $tobool60 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wdg$addr = 0, $x_addr = 0, $x_addr11 = 0, $x_addr15 = 0, $x_addr17 = 0, $x_addr22 = 0, $x_addr30 = 0, $x_addr44 = 0, $x_addr48 = 0, $x_addr51 = 0, $x_addr57 = 0, $y_addr = 0, $y_addr33 = 0, $y_addr40 = 0, $y_addr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $wdg$addr = $wdg;
 $delay = 200;
 $0 = $wdg$addr;
 $call = (_wdg0151_get_cs($0)|0);
 $cres = $call;
 $1 = $cres;
 $conv = $1&255;
 $and = $conv & 2;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $2 = $wdg$addr;
  $datapins = ((($2)) + 1048|0);
  $3 = HEAP8[$datapins>>0]|0;
  $conv1 = $3&255;
  $4 = $wdg$addr;
  $ctrl1 = ((($4)) + 8|0);
  $x_addr = ((($ctrl1)) + 6|0);
  $5 = HEAP8[$x_addr>>0]|0;
  $conv2 = $5&255;
  $6 = $wdg$addr;
  $ctrl13 = ((($6)) + 8|0);
  $y_addr = ((($ctrl13)) + 5|0);
  $7 = HEAP8[$y_addr>>0]|0;
  $conv4 = $7&255;
  HEAP32[$vararg_buffer>>2] = $conv1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $conv4;
  (_printf(355916,$vararg_buffer)|0);
  $8 = $wdg$addr;
  $datapins6 = ((($8)) + 1048|0);
  $9 = HEAP8[$datapins6>>0]|0;
  $10 = $wdg$addr;
  $ctrl17 = ((($10)) + 8|0);
  $data = ((($ctrl17)) + 8|0);
  $11 = $wdg$addr;
  $ctrl18 = ((($11)) + 8|0);
  $y_addr9 = ((($ctrl18)) + 5|0);
  $12 = HEAP8[$y_addr9>>0]|0;
  $idxprom = $12&255;
  $arrayidx = (($data) + ($idxprom<<6)|0);
  $13 = $wdg$addr;
  $ctrl110 = ((($13)) + 8|0);
  $x_addr11 = ((($ctrl110)) + 6|0);
  $14 = HEAP8[$x_addr11>>0]|0;
  $idxprom12 = $14&255;
  $arrayidx13 = (($arrayidx) + ($idxprom12)|0);
  HEAP8[$arrayidx13>>0] = $9;
  $15 = $wdg$addr;
  $ctrl114 = ((($15)) + 8|0);
  $x_addr15 = ((($ctrl114)) + 6|0);
  $16 = HEAP8[$x_addr15>>0]|0;
  $inc = (($16) + 1)<<24>>24;
  HEAP8[$x_addr15>>0] = $inc;
  $17 = $wdg$addr;
  $ctrl116 = ((($17)) + 8|0);
  $x_addr17 = ((($ctrl116)) + 6|0);
  $18 = HEAP8[$x_addr17>>0]|0;
  $conv18 = $18&255;
  $cmp = ($conv18|0)>=(64);
  if ($cmp) {
   $19 = $wdg$addr;
   $ctrl121 = ((($19)) + 8|0);
   $x_addr22 = ((($ctrl121)) + 6|0);
   HEAP8[$x_addr22>>0] = 0;
  }
 }
 $20 = $cres;
 $conv24 = $20&255;
 $and25 = $conv24 & 4;
 $tobool26 = ($and25|0)!=(0);
 if ($tobool26) {
  $21 = $wdg$addr;
  $datapins28 = ((($21)) + 1048|0);
  $22 = HEAP8[$datapins28>>0]|0;
  $conv29 = $22&255;
  $23 = $wdg$addr;
  $ctrl2 = ((($23)) + 528|0);
  $x_addr30 = ((($ctrl2)) + 6|0);
  $24 = HEAP8[$x_addr30>>0]|0;
  $conv31 = $24&255;
  $25 = $wdg$addr;
  $ctrl232 = ((($25)) + 528|0);
  $y_addr33 = ((($ctrl232)) + 5|0);
  $26 = HEAP8[$y_addr33>>0]|0;
  $conv34 = $26&255;
  HEAP32[$vararg_buffer3>>2] = $conv29;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $conv31;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $conv34;
  (_printf(355962,$vararg_buffer3)|0);
  $27 = $wdg$addr;
  $datapins36 = ((($27)) + 1048|0);
  $28 = HEAP8[$datapins36>>0]|0;
  $29 = $wdg$addr;
  $ctrl237 = ((($29)) + 528|0);
  $data38 = ((($ctrl237)) + 8|0);
  $30 = $wdg$addr;
  $ctrl239 = ((($30)) + 528|0);
  $y_addr40 = ((($ctrl239)) + 5|0);
  $31 = HEAP8[$y_addr40>>0]|0;
  $idxprom41 = $31&255;
  $arrayidx42 = (($data38) + ($idxprom41<<6)|0);
  $32 = $wdg$addr;
  $ctrl243 = ((($32)) + 528|0);
  $x_addr44 = ((($ctrl243)) + 6|0);
  $33 = HEAP8[$x_addr44>>0]|0;
  $idxprom45 = $33&255;
  $arrayidx46 = (($arrayidx42) + ($idxprom45)|0);
  HEAP8[$arrayidx46>>0] = $28;
  $34 = $wdg$addr;
  $ctrl247 = ((($34)) + 528|0);
  $x_addr48 = ((($ctrl247)) + 6|0);
  $35 = HEAP8[$x_addr48>>0]|0;
  $inc49 = (($35) + 1)<<24>>24;
  HEAP8[$x_addr48>>0] = $inc49;
  $36 = $wdg$addr;
  $ctrl250 = ((($36)) + 528|0);
  $x_addr51 = ((($ctrl250)) + 6|0);
  $37 = HEAP8[$x_addr51>>0]|0;
  $conv52 = $37&255;
  $cmp53 = ($conv52|0)>=(64);
  if ($cmp53) {
   $38 = $wdg$addr;
   $ctrl256 = ((($38)) + 528|0);
   $x_addr57 = ((($ctrl256)) + 6|0);
   HEAP8[$x_addr57>>0] = 0;
  }
 }
 $39 = $wdg$addr;
 $cb = ((($39)) + 1052|0);
 $40 = HEAP32[$cb>>2]|0;
 $tobool60 = ($40|0)!=(0|0);
 if (!($tobool60)) {
  $43 = $delay;
  STACKTOP = sp;return ($43|0);
 }
 $41 = $wdg$addr;
 $cb62 = ((($41)) + 1052|0);
 $42 = HEAP32[$cb62>>2]|0;
 FUNCTION_TABLE_v[$42 & 127]();
 $43 = $delay;
 STACKTOP = sp;return ($43|0);
}
function _wdg0151_write_instruction($wdg) {
 $wdg = $wdg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and100 = 0, $and104 = 0;
 var $and111 = 0, $and128 = 0, $and15 = 0, $and24 = 0, $and29 = 0, $and3 = 0, $and34 = 0, $and37 = 0, $and46 = 0, $and58 = 0, $and6 = 0, $and63 = 0, $and68 = 0, $and71 = 0, $and79 = 0, $and9 = 0, $and90 = 0, $and95 = 0, $call = 0, $conv = 0;
 var $conv103 = 0, $conv110 = 0, $conv12 = 0, $conv127 = 0, $conv14 = 0, $conv19 = 0, $conv2 = 0, $conv23 = 0, $conv28 = 0, $conv33 = 0, $conv35 = 0, $conv36 = 0, $conv42 = 0, $conv45 = 0, $conv49 = 0, $conv5 = 0, $conv57 = 0, $conv62 = 0, $conv67 = 0, $conv69 = 0;
 var $conv7 = 0, $conv70 = 0, $conv74 = 0, $conv78 = 0, $conv8 = 0, $conv82 = 0, $conv89 = 0, $conv94 = 0, $conv99 = 0, $cres = 0, $ctrl1 = 0, $ctrl1108 = 0, $ctrl1124 = 0, $ctrl140 = 0, $ctrl176 = 0, $ctrl2 = 0, $ctrl2115 = 0, $ctrl2132 = 0, $ctrl251 = 0, $ctrl284 = 0;
 var $datapins = 0, $datapins32 = 0, $datapins66 = 0, $delay = 0, $pinstate = 0, $pinstate1 = 0, $pinstate22 = 0, $pinstate27 = 0, $pinstate56 = 0, $pinstate61 = 0, $pinstate88 = 0, $pinstate93 = 0, $pinstate98 = 0, $start = 0, $start41 = 0, $start52 = 0, $tobool = 0, $tobool10 = 0, $tobool101 = 0, $tobool105 = 0;
 var $tobool112 = 0, $tobool129 = 0, $tobool16 = 0, $tobool25 = 0, $tobool30 = 0, $tobool38 = 0, $tobool4 = 0, $tobool47 = 0, $tobool59 = 0, $tobool64 = 0, $tobool72 = 0, $tobool80 = 0, $tobool91 = 0, $tobool96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $wdg$addr = 0, $x = 0, $x_addr = 0, $x_addr18 = 0, $y = 0, $y_addr = 0, $y_addr85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $wdg$addr = $wdg;
 $delay = 200;
 $0 = $wdg$addr;
 $call = (_wdg0151_get_cs($0)|0);
 $cres = $call;
 $1 = $wdg$addr;
 $pinstate = ((($1)) + 1050|0);
 $2 = HEAP16[$pinstate>>1]|0;
 $conv = $2&65535;
 $and = $conv & 2048;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $3 = $wdg$addr;
  $pinstate1 = ((($3)) + 1050|0);
  $4 = HEAP16[$pinstate1>>1]|0;
  $conv2 = $4&65535;
  $and3 = $conv2 & 4096;
  $tobool4 = ($and3|0)!=(0);
  if (!($tobool4)) {
   $5 = $wdg$addr;
   $datapins = ((($5)) + 1048|0);
   $6 = HEAP8[$datapins>>0]|0;
   $conv5 = $6&255;
   $and6 = $conv5 & 63;
   $conv7 = $and6&255;
   $y = $conv7;
   $7 = $cres;
   $conv8 = $7&255;
   $and9 = $conv8 & 2;
   $tobool10 = ($and9|0)!=(0);
   if ($tobool10) {
    $8 = $y;
    $9 = $wdg$addr;
    $ctrl1 = ((($9)) + 8|0);
    $x_addr = ((($ctrl1)) + 6|0);
    HEAP8[$x_addr>>0] = $8;
    $10 = $y;
    $conv12 = $10&255;
    HEAP32[$vararg_buffer>>2] = $conv12;
    (_printf(355494,$vararg_buffer)|0);
   }
   $11 = $cres;
   $conv14 = $11&255;
   $and15 = $conv14 & 4;
   $tobool16 = ($and15|0)!=(0);
   if (!($tobool16)) {
    $56 = $delay;
    STACKTOP = sp;return ($56|0);
   }
   $12 = $y;
   $13 = $wdg$addr;
   $ctrl2 = ((($13)) + 528|0);
   $x_addr18 = ((($ctrl2)) + 6|0);
   HEAP8[$x_addr18>>0] = $12;
   $14 = $y;
   $conv19 = $14&255;
   HEAP32[$vararg_buffer1>>2] = $conv19;
   (_printf(355535,$vararg_buffer1)|0);
   $56 = $delay;
   STACKTOP = sp;return ($56|0);
  }
 }
 $15 = $wdg$addr;
 $pinstate22 = ((($15)) + 1050|0);
 $16 = HEAP16[$pinstate22>>1]|0;
 $conv23 = $16&65535;
 $and24 = $conv23 & 4096;
 $tobool25 = ($and24|0)!=(0);
 if ($tobool25) {
  $17 = $wdg$addr;
  $pinstate27 = ((($17)) + 1050|0);
  $18 = HEAP16[$pinstate27>>1]|0;
  $conv28 = $18&65535;
  $and29 = $conv28 & 2048;
  $tobool30 = ($and29|0)!=(0);
  if ($tobool30) {
   $19 = $wdg$addr;
   $datapins32 = ((($19)) + 1048|0);
   $20 = HEAP8[$datapins32>>0]|0;
   $conv33 = $20&255;
   $and34 = $conv33 & 63;
   $conv35 = $and34&255;
   $start = $conv35;
   $21 = $cres;
   $conv36 = $21&255;
   $and37 = $conv36 & 2;
   $tobool38 = ($and37|0)!=(0);
   if ($tobool38) {
    $22 = $start;
    $23 = $wdg$addr;
    $ctrl140 = ((($23)) + 8|0);
    $start41 = ((($ctrl140)) + 7|0);
    HEAP8[$start41>>0] = $22;
    $24 = $start;
    $conv42 = $24&255;
    HEAP32[$vararg_buffer4>>2] = $conv42;
    (_printf(355576,$vararg_buffer4)|0);
   }
   $25 = $cres;
   $conv45 = $25&255;
   $and46 = $conv45 & 4;
   $tobool47 = ($and46|0)!=(0);
   if ($tobool47) {
    $26 = $start;
    $conv49 = $26&255;
    HEAP32[$vararg_buffer7>>2] = $conv49;
    (_printf(355616,$vararg_buffer7)|0);
    $27 = $start;
    $28 = $wdg$addr;
    $ctrl251 = ((($28)) + 528|0);
    $start52 = ((($ctrl251)) + 7|0);
    HEAP8[$start52>>0] = $27;
   }
   (_printf(355656,$vararg_buffer10)|0);
   $56 = $delay;
   STACKTOP = sp;return ($56|0);
  }
 }
 $29 = $wdg$addr;
 $pinstate56 = ((($29)) + 1050|0);
 $30 = HEAP16[$pinstate56>>1]|0;
 $conv57 = $30&65535;
 $and58 = $conv57 & 4096;
 $tobool59 = ($and58|0)!=(0);
 if ($tobool59) {
  $31 = $wdg$addr;
  $pinstate61 = ((($31)) + 1050|0);
  $32 = HEAP16[$pinstate61>>1]|0;
  $conv62 = $32&65535;
  $and63 = $conv62 & 2048;
  $tobool64 = ($and63|0)!=(0);
  if (!($tobool64)) {
   $33 = $wdg$addr;
   $datapins66 = ((($33)) + 1048|0);
   $34 = HEAP8[$datapins66>>0]|0;
   $conv67 = $34&255;
   $and68 = $conv67 & 7;
   $conv69 = $and68&255;
   $x = $conv69;
   $35 = $cres;
   $conv70 = $35&255;
   $and71 = $conv70 & 2;
   $tobool72 = ($and71|0)!=(0);
   if ($tobool72) {
    $36 = $x;
    $conv74 = $36&255;
    HEAP32[$vararg_buffer12>>2] = $conv74;
    (_printf(355700,$vararg_buffer12)|0);
    $37 = $x;
    $38 = $wdg$addr;
    $ctrl176 = ((($38)) + 8|0);
    $y_addr = ((($ctrl176)) + 5|0);
    HEAP8[$y_addr>>0] = $37;
   }
   $39 = $cres;
   $conv78 = $39&255;
   $and79 = $conv78 & 4;
   $tobool80 = ($and79|0)!=(0);
   if (!($tobool80)) {
    $56 = $delay;
    STACKTOP = sp;return ($56|0);
   }
   $40 = $x;
   $conv82 = $40&255;
   HEAP32[$vararg_buffer15>>2] = $conv82;
   (_printf(355741,$vararg_buffer15)|0);
   $41 = $x;
   $42 = $wdg$addr;
   $ctrl284 = ((($42)) + 528|0);
   $y_addr85 = ((($ctrl284)) + 5|0);
   HEAP8[$y_addr85>>0] = $41;
   $56 = $delay;
   STACKTOP = sp;return ($56|0);
  }
 }
 $43 = $wdg$addr;
 $pinstate88 = ((($43)) + 1050|0);
 $44 = HEAP16[$pinstate88>>1]|0;
 $conv89 = $44&65535;
 $and90 = $conv89 & 4096;
 $tobool91 = ($and90|0)!=(0);
 if ($tobool91) {
  $56 = $delay;
  STACKTOP = sp;return ($56|0);
 }
 $45 = $wdg$addr;
 $pinstate93 = ((($45)) + 1050|0);
 $46 = HEAP16[$pinstate93>>1]|0;
 $conv94 = $46&65535;
 $and95 = $conv94 & 2048;
 $tobool96 = ($and95|0)!=(0);
 if ($tobool96) {
  $56 = $delay;
  STACKTOP = sp;return ($56|0);
 }
 $47 = $wdg$addr;
 $pinstate98 = ((($47)) + 1050|0);
 $48 = HEAP16[$pinstate98>>1]|0;
 $conv99 = $48&65535;
 $and100 = $conv99 & 32;
 $tobool101 = ($and100|0)!=(0);
 $49 = $cres;
 $conv103 = $49&255;
 $and104 = $conv103 & 2;
 $tobool105 = ($and104|0)!=(0);
 if ($tobool101) {
  if ($tobool105) {
   (_printf(355782,$vararg_buffer18)|0);
   $50 = $wdg$addr;
   $ctrl1108 = ((($50)) + 8|0);
   HEAP8[$ctrl1108>>0] = 1;
  }
  $51 = $cres;
  $conv110 = $51&255;
  $and111 = $conv110 & 4;
  $tobool112 = ($and111|0)!=(0);
  if (!($tobool112)) {
   $56 = $delay;
   STACKTOP = sp;return ($56|0);
  }
  (_printf(355815,$vararg_buffer20)|0);
  $52 = $wdg$addr;
  $ctrl2115 = ((($52)) + 528|0);
  HEAP8[$ctrl2115>>0] = 1;
  $56 = $delay;
  STACKTOP = sp;return ($56|0);
 } else {
  if ($tobool105) {
   (_printf(355848,$vararg_buffer22)|0);
   $53 = $wdg$addr;
   $ctrl1124 = ((($53)) + 8|0);
   HEAP8[$ctrl1124>>0] = 0;
  }
  $54 = $cres;
  $conv127 = $54&255;
  $and128 = $conv127 & 4;
  $tobool129 = ($and128|0)!=(0);
  if (!($tobool129)) {
   $56 = $delay;
   STACKTOP = sp;return ($56|0);
  }
  (_printf(355882,$vararg_buffer24)|0);
  $55 = $wdg$addr;
  $ctrl2132 = ((($55)) + 528|0);
  HEAP8[$ctrl2132>>0] = 0;
  $56 = $delay;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _hd44780_init($avr,$b,$width,$height) {
 $avr = $avr|0;
 $b = $b|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr5 = 0, $avr$addr = 0, $avr1 = 0, $b$addr = 0, $call = 0, $cmp = 0, $h = 0, $height$addr = 0, $i = 0, $inc = 0, $irq_pool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $w = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $avr$addr = $avr;
 $b$addr = $b;
 $width$addr = $width;
 $height$addr = $height;
 $0 = $b$addr;
 _memset(($0|0),0,168)|0;
 $1 = $avr$addr;
 $2 = $b$addr;
 $avr1 = ((($2)) + 4|0);
 HEAP32[$avr1>>2] = $1;
 $3 = $width$addr;
 $4 = $b$addr;
 $w = ((($4)) + 8|0);
 HEAP32[$w>>2] = $3;
 $5 = $height$addr;
 $6 = $b$addr;
 $h = ((($6)) + 12|0);
 HEAP32[$h>>2] = $5;
 $7 = $avr$addr;
 $irq_pool = ((($7)) + 112|0);
 $call = (_avr_alloc_irq($irq_pool,0,16,80)|0);
 $8 = $b$addr;
 HEAP32[$8>>2] = $call;
 HEAP32[$vararg_buffer>>2] = 16;
 (_printf(356178,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $cmp = ($9|0)<(12);
  $10 = $b$addr;
  if (!($cmp)) {
   break;
  }
  $11 = HEAP32[$10>>2]|0;
  $12 = $i;
  $add$ptr = (($11) + (($12*24)|0)|0);
  $13 = $b$addr;
  _hd44780_pin_changed($add$ptr,(83),$13);
  $14 = $b$addr;
  $15 = HEAP32[$14>>2]|0;
  $16 = $i;
  $add$ptr5 = (($15) + (($16*24)|0)|0);
  $17 = $b$addr;
  _avr_irq_register_notify($add$ptr5,83,$17);
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 __hd44780_reset_cursor($10);
 $19 = $b$addr;
 __hd44780_clear_screen($19);
 $20 = $avr$addr;
 $21 = (_avr_usec_to_cycles($20,37)|0);
 $22 = (getTempRet0() | 0);
 HEAP32[$vararg_buffer1>>2] = 37;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $21;
 (_printf(356221,$vararg_buffer1)|0);
 $23 = $avr$addr;
 $24 = (_avr_usec_to_cycles($23,1)|0);
 $25 = (getTempRet0() | 0);
 HEAP32[$vararg_buffer5>>2] = 1;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $24;
 (_printf(356221,$vararg_buffer5)|0);
 STACKTOP = sp;return;
}
function _hd44780_pin_changed($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$ptr = 0, $add$ptr11 = 0, $add$ptr3 = 0, $add$ptr5 = 0, $add$ptr8 = 0, $and = 0, $and16 = 0, $and22 = 0, $and25 = 0, $avr = 0, $b = 0, $call = 0, $cmp = 0, $conv = 0, $conv19 = 0, $conv21 = 0, $conv24 = 0, $e = 0, $eo = 0;
 var $i = 0, $inc = 0, $irq$addr = 0, $irq1 = 0, $irq15 = 0, $irq17 = 0, $neg = 0, $old = 0, $or = 0, $or$cond = 0, $param$addr = 0, $pinstate = 0, $pinstate14 = 0, $pinstate20 = 0, $pinstate23 = 0, $shl = 0, $shl18 = 0, $shr = 0, $shr12 = 0, $shr6 = 0;
 var $shr9 = 0, $tobool = 0, $tobool26 = 0, $tobool27 = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $irq$addr = $irq;
 $value$addr = $value;
 $param$addr = $param;
 $0 = $param$addr;
 $b = $0;
 $1 = $b;
 $pinstate = ((($1)) + 162|0);
 $2 = HEAP16[$pinstate>>1]|0;
 $old = $2;
 $3 = $irq$addr;
 $irq1 = ((($3)) + 8|0);
 $4 = HEAP32[$irq1>>2]|0;
 switch ($4|0) {
 case 0:  {
  $i = 0;
  while(1) {
   $5 = $i;
   $cmp = ($5|0)<(4);
   $6 = $b;
   $7 = HEAP32[$6>>2]|0;
   if (!($cmp)) {
    break;
   }
   $add$ptr = ((($7)) + 192|0);
   $8 = $i;
   $add$ptr3 = (($add$ptr) + (($8*24)|0)|0);
   $9 = $value$addr;
   $10 = $i;
   $shr = $9 >>> $10;
   $and = $shr & 1;
   $11 = $param$addr;
   _hd44780_pin_changed($add$ptr3,$and,$11);
   $12 = $i;
   $inc = (($12) + 1)|0;
   $i = $inc;
  }
  $add$ptr5 = ((($7)) + 24|0);
  $13 = $value$addr;
  $shr6 = $13 >>> 4;
  $14 = $param$addr;
  _hd44780_pin_changed($add$ptr5,$shr6,$14);
  $15 = $b;
  $16 = HEAP32[$15>>2]|0;
  $add$ptr8 = ((($16)) + 72|0);
  $17 = $value$addr;
  $shr9 = $17 >>> 5;
  $18 = $param$addr;
  _hd44780_pin_changed($add$ptr8,$shr9,$18);
  $19 = $b;
  $20 = HEAP32[$19>>2]|0;
  $add$ptr11 = ((($20)) + 48|0);
  $21 = $value$addr;
  $shr12 = $21 >>> 6;
  $22 = $param$addr;
  _hd44780_pin_changed($add$ptr11,$shr12,$22);
  STACKTOP = sp;return;
  break;
 }
 case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4:  {
  $23 = $b;
  $call = (_hd44780_get_flag($23,12)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
 }
 }
 $24 = $b;
 $pinstate14 = ((($24)) + 162|0);
 $25 = HEAP16[$pinstate14>>1]|0;
 $conv = $25&65535;
 $26 = $irq$addr;
 $irq15 = ((($26)) + 8|0);
 $27 = HEAP32[$irq15>>2]|0;
 $shl = 1 << $27;
 $neg = $shl ^ -1;
 $and16 = $conv & $neg;
 $28 = $value$addr;
 $29 = $irq$addr;
 $irq17 = ((($29)) + 8|0);
 $30 = HEAP32[$irq17>>2]|0;
 $shl18 = $28 << $30;
 $or = $and16 | $shl18;
 $conv19 = $or&65535;
 $31 = $b;
 $pinstate20 = ((($31)) + 162|0);
 HEAP16[$pinstate20>>1] = $conv19;
 $32 = $old;
 $conv21 = $32&65535;
 $and22 = $conv21 & 8;
 $eo = $and22;
 $33 = $b;
 $pinstate23 = ((($33)) + 162|0);
 $34 = HEAP16[$pinstate23>>1]|0;
 $conv24 = $34&65535;
 $and25 = $conv24 & 8;
 $e = $and25;
 $35 = $eo;
 $tobool26 = ($35|0)==(0);
 $36 = $e;
 $tobool27 = ($36|0)!=(0);
 $or$cond = $tobool26 & $tobool27;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $37 = $b;
 $avr = ((($37)) + 4|0);
 $38 = HEAP32[$avr>>2]|0;
 $39 = $b;
 (__hd44780_process_e_pinchange($38,0,0,$39)|0);
 $40 = (getTempRet0() | 0);
 STACKTOP = sp;return;
}
function __hd44780_reset_cursor($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $b$addr = 0, $conv = 0, $cursor = 0, $cursor1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $b$addr = $b;
 $0 = $b$addr;
 $cursor = ((($0)) + 16|0);
 HEAP16[$cursor>>1] = 0;
 $1 = $b$addr;
 (_hd44780_set_flag($1,13,1)|0);
 $2 = $b$addr;
 $3 = HEAP32[$2>>2]|0;
 $add$ptr = ((($3)) + 312|0);
 $4 = $b$addr;
 $cursor1 = ((($4)) + 16|0);
 $5 = HEAP16[$cursor1>>1]|0;
 $conv = $5&65535;
 _avr_raise_irq($add$ptr,$conv);
 STACKTOP = sp;return;
}
function __hd44780_clear_screen($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $b$addr = 0, $conv = 0, $cursor = 0, $vram = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $b$addr = $b;
 $0 = $b$addr;
 $vram = ((($0)) + 18|0);
 dest=$vram; stop=dest+80|0; do { HEAP16[dest>>1]=8224|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $1 = $b$addr;
 (_hd44780_set_flag($1,13,1)|0);
 $2 = $b$addr;
 $3 = HEAP32[$2>>2]|0;
 $add$ptr = ((($3)) + 312|0);
 $4 = $b$addr;
 $cursor = ((($4)) + 16|0);
 $5 = HEAP16[$cursor>>1]|0;
 $conv = $5&65535;
 _avr_raise_irq($add$ptr,$conv);
 STACKTOP = sp;return;
}
function _avr_usec_to_cycles($avr,$usec) {
 $avr = $avr|0;
 $usec = $usec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $avr$addr = 0, $frequency = 0, $usec$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $avr$addr = $avr;
 $usec$addr = $usec;
 $0 = $avr$addr;
 $frequency = ((($0)) + 40|0);
 $1 = HEAP32[$frequency>>2]|0;
 $2 = $usec$addr;
 $3 = (___muldi3(($1|0),0,($2|0),0)|0);
 $4 = (getTempRet0() | 0);
 $5 = (___udivdi3(($3|0),($4|0),1000000,0)|0);
 $6 = (getTempRet0() | 0);
 $7 = (___udivdi3(($5|0),($6|0),4,0)|0);
 $8 = (getTempRet0() | 0);
 setTempRet0(($8) | 0);
 STACKTOP = sp;return ($7|0);
}
function _hd44780_set_flag($b,$bit,$val) {
 $b = $b|0;
 $bit = $bit|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and6 = 0, $b$addr = 0, $bit$addr = 0, $cmp = 0, $cond = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv3 = 0;
 var $conv4 = 0, $conv7 = 0, $conv9 = 0, $flags = 0, $flags10 = 0, $flags2 = 0, $neg = 0, $old = 0, $or = 0, $shl = 0, $shl5 = 0, $shl8 = 0, $tobool = 0, $val$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $b$addr = $b;
 $bit$addr = $bit;
 $val$addr = $val;
 $0 = $b$addr;
 $flags = ((($0)) + 166|0);
 $1 = HEAP16[$flags>>1]|0;
 $conv = $1&65535;
 $2 = $bit$addr;
 $conv1 = $2&65535;
 $shl = 1 << $conv1;
 $and = $conv & $shl;
 $old = $and;
 $3 = $b$addr;
 $flags2 = ((($3)) + 166|0);
 $4 = HEAP16[$flags2>>1]|0;
 $conv3 = $4&65535;
 $5 = $bit$addr;
 $conv4 = $5&65535;
 $shl5 = 1 << $conv4;
 $neg = $shl5 ^ -1;
 $and6 = $conv3 & $neg;
 $6 = $val$addr;
 $tobool = ($6|0)!=(0);
 if ($tobool) {
  $7 = $bit$addr;
  $conv7 = $7&65535;
  $shl8 = 1 << $conv7;
  $cond = $shl8;
 } else {
  $cond = 0;
 }
 $or = $and6 | $cond;
 $conv9 = $or&65535;
 $8 = $b$addr;
 $flags10 = ((($8)) + 166|0);
 HEAP16[$flags10>>1] = $conv9;
 $9 = $old;
 $cmp = ($9|0)!=(0);
 $conv11 = $cmp&1;
 STACKTOP = sp;return ($conv11|0);
}
function _hd44780_get_flag($b,$bit) {
 $b = $b|0;
 $bit = $bit|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $b$addr = 0, $bit$addr = 0, $cmp = 0, $conv = 0, $conv1 = 0, $conv2 = 0, $flags = 0, $shl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $b$addr = $b;
 $bit$addr = $bit;
 $0 = $b$addr;
 $flags = ((($0)) + 166|0);
 $1 = HEAP16[$flags>>1]|0;
 $conv = $1&65535;
 $2 = $bit$addr;
 $conv1 = $2&65535;
 $shl = 1 << $conv1;
 $and = $conv & $shl;
 $cmp = ($and|0)!=(0);
 $conv2 = $cmp&1;
 STACKTOP = sp;return ($conv2|0);
}
function __hd44780_process_e_pinchange($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $and = 0;
 var $avr$addr = 0, $avr6 = 0, $b = 0, $call1 = 0, $call2 = 0, $conv = 0, $delay = 0, $param$addr = 0, $pinstate = 0, $tobool = 0, $tobool3 = 0, $when$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $when$addr = sp;
 $avr$addr = $avr;
 $2 = $when$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $param$addr = $param;
 $6 = $param$addr;
 $b = $6;
 $7 = $b;
 (_hd44780_set_flag($7,12,1)|0);
 $delay = 0;
 $8 = $b;
 $pinstate = ((($8)) + 162|0);
 $9 = HEAP16[$pinstate>>1]|0;
 $conv = $9&65535;
 $and = $conv & 4;
 $tobool = ($and|0)!=(0);
 $10 = $b;
 if ($tobool) {
  $call1 = (_hd44780_process_read($10)|0);
  $delay = $call1;
 } else {
  $call2 = (_hd44780_process_write($10)|0);
  $delay = $call2;
 }
 $11 = $delay;
 $tobool3 = ($11|0)!=(0);
 if (!($tobool3)) {
  $19 = $b;
  (_hd44780_set_flag($19,12,0)|0);
  setTempRet0((0) | 0);
  STACKTOP = sp;return 0;
 }
 $12 = $b;
 (_hd44780_set_flag($12,11,1)|0);
 $13 = $b;
 $14 = HEAP32[$13>>2]|0;
 $add$ptr = ((($14)) + 288|0);
 _avr_raise_irq($add$ptr,1);
 $15 = $b;
 $avr6 = ((($15)) + 4|0);
 $16 = HEAP32[$avr6>>2]|0;
 $17 = $delay;
 $18 = $b;
 _avr_cycle_timer_register_usec($16,$17,84,$18);
 $19 = $b;
 (_hd44780_set_flag($19,12,0)|0);
 setTempRet0((0) | 0);
 STACKTOP = sp;return 0;
}
function _hd44780_process_read($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr32 = 0, $add$ptr55 = 0;
 var $add$ptr56 = 0, $and = 0, $and60 = 0, $arrayidx = 0, $avr = 0, $b$addr = 0, $busy = 0, $call = 0, $call2 = 0, $call23 = 0, $cmp = 0, $cmp52 = 0, $comp = 0, $cond = 0, $cond25 = 0, $cond51 = 0, $conv = 0, $conv10 = 0, $conv15 = 0, $conv18 = 0;
 var $conv21 = 0, $conv27 = 0, $conv28 = 0, $conv34 = 0, $conv39 = 0, $conv41 = 0, $conv49 = 0, $conv5 = 0, $conv58 = 0, $conv6 = 0, $conv7 = 0, $cursor = 0, $cursor14 = 0, $cursor17 = 0, $delay = 0, $done = 0, $flags = 0, $flags38 = 0, $four = 0, $i = 0;
 var $idxprom = 0, $inc = 0, $inc35 = 0, $inc61 = 0, $land$ext = 0, $lnot = 0, $lnot$ext = 0, $or = 0, $or40 = 0, $pinstate = 0, $readpins = 0, $readpins13 = 0, $readpins22 = 0, $readpins26 = 0, $readpins33 = 0, $readpins48 = 0, $readpins57 = 0, $shl = 0, $shr = 0, $shr59 = 0;
 var $sub = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool24 = 0, $tobool3 = 0, $tobool36 = 0, $tobool4 = 0, $tobool44 = 0, $tobool50 = 0, $tobool8 = 0, $vram = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $b$addr = $b;
 $delay = 0;
 $0 = $b$addr;
 $call = (_hd44780_get_flag($0,2)|0);
 $tobool = ($call|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 $four = $lnot$ext;
 $1 = $four;
 $tobool1 = ($1|0)!=(0);
 if ($tobool1) {
  $2 = $b$addr;
  $call2 = (_hd44780_get_flag($2,10)|0);
  $tobool3 = ($call2|0)!=(0);
  $3 = $tobool3;
 } else {
  $3 = 0;
 }
 $land$ext = $3&1;
 $comp = $land$ext;
 $done = 0;
 $4 = $comp;
 $tobool4 = ($4|0)!=(0);
 if ($tobool4) {
  $5 = $b$addr;
  $readpins = ((($5)) + 165|0);
  $6 = HEAP8[$readpins>>0]|0;
  $conv = $6&255;
  $shl = $conv << 4;
  $conv5 = $shl&255;
  HEAP8[$readpins>>0] = $conv5;
  $7 = $done;
  $inc = (($7) + 1)|0;
  $done = $inc;
  $8 = $b$addr;
  $flags = ((($8)) + 166|0);
  $9 = HEAP16[$flags>>1]|0;
  $conv6 = $9&65535;
  $xor = $conv6 ^ 1024;
  $conv7 = $xor&65535;
  HEAP16[$flags>>1] = $conv7;
 }
 $10 = $done;
 $tobool8 = ($10|0)!=(0);
 if (!($tobool8)) {
  $11 = $b$addr;
  $pinstate = ((($11)) + 162|0);
  $12 = HEAP16[$pinstate>>1]|0;
  $conv10 = $12&65535;
  $and = $conv10 & 2;
  $tobool11 = ($and|0)!=(0);
  if ($tobool11) {
   $delay = 37;
   $13 = $b$addr;
   $vram = ((($13)) + 18|0);
   $14 = $b$addr;
   $cursor = ((($14)) + 16|0);
   $15 = HEAP16[$cursor>>1]|0;
   $idxprom = $15&65535;
   $arrayidx = (($vram) + ($idxprom)|0);
   $16 = HEAP8[$arrayidx>>0]|0;
   $17 = $b$addr;
   $readpins13 = ((($17)) + 165|0);
   HEAP8[$readpins13>>0] = $16;
   $18 = $b$addr;
   _hd44780_kick_cursor($18);
  } else {
   $delay = 0;
   $19 = $b$addr;
   $cursor14 = ((($19)) + 16|0);
   $20 = HEAP16[$cursor14>>1]|0;
   $conv15 = $20&65535;
   $cmp = ($conv15|0)<(80);
   $21 = $b$addr;
   $cursor17 = ((($21)) + 16|0);
   $22 = HEAP16[$cursor17>>1]|0;
   $conv18 = $22&65535;
   $sub = (($conv18) - 64)|0;
   $cond = $cmp ? $conv18 : $sub;
   $conv21 = $cond&255;
   $23 = $b$addr;
   $readpins22 = ((($23)) + 165|0);
   HEAP8[$readpins22>>0] = $conv21;
   $24 = $b$addr;
   $call23 = (_hd44780_get_flag($24,11)|0);
   $busy = $call23;
   $25 = $busy;
   $tobool24 = ($25|0)!=(0);
   $cond25 = $tobool24 ? 128 : 0;
   $26 = $b$addr;
   $readpins26 = ((($26)) + 165|0);
   $27 = HEAP8[$readpins26>>0]|0;
   $conv27 = $27&255;
   $or = $conv27 | $cond25;
   $conv28 = $or&255;
   HEAP8[$readpins26>>0] = $conv28;
   $28 = $b$addr;
   (_hd44780_set_flag($28,11,0)|0);
   $29 = $b$addr;
   $30 = HEAP32[$29>>2]|0;
   $add$ptr = ((($30)) + 288|0);
   _avr_raise_irq($add$ptr,0);
   $31 = $b$addr;
   $avr = ((($31)) + 4|0);
   $32 = HEAP32[$avr>>2]|0;
   $33 = $b$addr;
   _avr_cycle_timer_cancel($32,84,$33);
  }
  $34 = $b$addr;
  $35 = HEAP32[$34>>2]|0;
  $add$ptr32 = ((($35)) + 360|0);
  $36 = $b$addr;
  $readpins33 = ((($36)) + 165|0);
  $37 = HEAP8[$readpins33>>0]|0;
  $conv34 = $37&255;
  _avr_raise_irq($add$ptr32,$conv34);
  $38 = $done;
  $inc35 = (($38) + 1)|0;
  $done = $inc35;
  $39 = $four;
  $tobool36 = ($39|0)!=(0);
  if ($tobool36) {
   $40 = $b$addr;
   $flags38 = ((($40)) + 166|0);
   $41 = HEAP16[$flags38>>1]|0;
   $conv39 = $41&65535;
   $or40 = $conv39 | 1024;
   $conv41 = $or40&65535;
   HEAP16[$flags38>>1] = $conv41;
  }
 }
 $42 = $done;
 $tobool44 = ($42|0)!=(0);
 if (!($tobool44)) {
  $56 = $delay;
  STACKTOP = sp;return ($56|0);
 }
 $43 = $b$addr;
 $44 = HEAP32[$43>>2]|0;
 $45 = $b$addr;
 $readpins48 = ((($45)) + 165|0);
 $46 = HEAP8[$readpins48>>0]|0;
 $conv49 = $46&255;
 $shr = $conv49 >> 4;
 _avr_raise_irq($44,$shr);
 $47 = $four;
 $tobool50 = ($47|0)!=(0);
 $cond51 = $tobool50 ? 4 : 0;
 $i = $cond51;
 while(1) {
  $48 = $i;
  $cmp52 = ($48|0)<(8);
  if (!($cmp52)) {
   break;
  }
  $49 = $b$addr;
  $50 = HEAP32[$49>>2]|0;
  $add$ptr55 = ((($50)) + 96|0);
  $51 = $i;
  $add$ptr56 = (($add$ptr55) + (($51*24)|0)|0);
  $52 = $b$addr;
  $readpins57 = ((($52)) + 165|0);
  $53 = HEAP8[$readpins57>>0]|0;
  $conv58 = $53&255;
  $54 = $i;
  $shr59 = $conv58 >> $54;
  $and60 = $shr59 & 1;
  _avr_raise_irq($add$ptr56,$and60);
  $55 = $i;
  $inc61 = (($55) + 1)|0;
  $i = $inc61;
 }
 $56 = $delay;
 STACKTOP = sp;return ($56|0);
}
function _hd44780_process_write($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $and = 0, $and13 = 0, $and17 = 0, $and27 = 0, $and44 = 0, $and8 = 0;
 var $b$addr = 0, $call = 0, $call2 = 0, $call35 = 0, $call47 = 0, $call49 = 0, $comp = 0, $conv = 0, $conv15 = 0, $conv19 = 0, $conv21 = 0, $conv22 = 0, $conv25 = 0, $conv28 = 0, $conv32 = 0, $conv39 = 0, $conv43 = 0, $conv7 = 0, $conv9 = 0, $datapins = 0;
 var $datapins10 = 0, $datapins20 = 0, $datapins29 = 0, $datapins31 = 0, $datapins38 = 0, $delay = 0, $flags = 0, $four = 0, $inc = 0, $land$ext = 0, $lnot = 0, $lnot$ext = 0, $or = 0, $or18 = 0, $pinstate = 0, $pinstate14 = 0, $pinstate24 = 0, $pinstate42 = 0, $shr = 0, $shr16 = 0;
 var $shr26 = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, $tobool33 = 0, $tobool36 = 0, $tobool4 = 0, $tobool45 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $write = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $b$addr = $b;
 $delay = 0;
 $0 = $b$addr;
 $call = (_hd44780_get_flag($0,2)|0);
 $tobool = ($call|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 $four = $lnot$ext;
 $1 = $four;
 $tobool1 = ($1|0)!=(0);
 if ($tobool1) {
  $2 = $b$addr;
  $call2 = (_hd44780_get_flag($2,10)|0);
  $tobool3 = ($call2|0)!=(0);
  $3 = $tobool3;
 } else {
  $3 = 0;
 }
 $land$ext = $3&1;
 $comp = $land$ext;
 $write = 0;
 $4 = $four;
 $tobool4 = ($4|0)!=(0);
 if ($tobool4) {
  $5 = $comp;
  $tobool5 = ($5|0)!=(0);
  $6 = $b$addr;
  $datapins = ((($6)) + 164|0);
  $7 = HEAP8[$datapins>>0]|0;
  $conv = $7&255;
  if ($tobool5) {
   $and = $conv & 240;
   $8 = $b$addr;
   $pinstate = ((($8)) + 162|0);
   $9 = HEAP16[$pinstate>>1]|0;
   $conv7 = $9&65535;
   $shr = $conv7 >> 8;
   $and8 = $shr & 15;
   $or = $and | $and8;
   $conv9 = $or&255;
   $10 = $b$addr;
   $datapins10 = ((($10)) + 164|0);
   HEAP8[$datapins10>>0] = $conv9;
  } else {
   $and13 = $conv & 15;
   $11 = $b$addr;
   $pinstate14 = ((($11)) + 162|0);
   $12 = HEAP16[$pinstate14>>1]|0;
   $conv15 = $12&65535;
   $shr16 = $conv15 >> 4;
   $and17 = $shr16 & 240;
   $or18 = $and13 | $and17;
   $conv19 = $or18&255;
   $13 = $b$addr;
   $datapins20 = ((($13)) + 164|0);
   HEAP8[$datapins20>>0] = $conv19;
  }
  $14 = $comp;
  $write = $14;
  $15 = $b$addr;
  $flags = ((($15)) + 166|0);
  $16 = HEAP16[$flags>>1]|0;
  $conv21 = $16&65535;
  $xor = $conv21 ^ 1024;
  $conv22 = $xor&65535;
  HEAP16[$flags>>1] = $conv22;
 } else {
  $17 = $b$addr;
  $pinstate24 = ((($17)) + 162|0);
  $18 = HEAP16[$pinstate24>>1]|0;
  $conv25 = $18&65535;
  $shr26 = $conv25 >> 4;
  $and27 = $shr26 & 255;
  $conv28 = $and27&255;
  $19 = $b$addr;
  $datapins29 = ((($19)) + 164|0);
  HEAP8[$datapins29>>0] = $conv28;
  $20 = $write;
  $inc = (($20) + 1)|0;
  $write = $inc;
 }
 $21 = $b$addr;
 $22 = HEAP32[$21>>2]|0;
 $add$ptr = ((($22)) + 336|0);
 $23 = $b$addr;
 $datapins31 = ((($23)) + 164|0);
 $24 = HEAP8[$datapins31>>0]|0;
 $conv32 = $24&255;
 _avr_raise_irq($add$ptr,$conv32);
 $25 = $write;
 $tobool33 = ($25|0)!=(0);
 if (!($tobool33)) {
  $32 = $delay;
  STACKTOP = sp;return ($32|0);
 }
 $26 = $b$addr;
 $call35 = (_hd44780_get_flag($26,11)|0);
 $tobool36 = ($call35|0)!=(0);
 if ($tobool36) {
  $27 = $b$addr;
  $datapins38 = ((($27)) + 164|0);
  $28 = HEAP8[$datapins38>>0]|0;
  $conv39 = $28&255;
  HEAP32[$vararg_buffer>>2] = 356297;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv39;
  (_printf(356258,$vararg_buffer)|0);
 }
 $29 = $b$addr;
 $pinstate42 = ((($29)) + 162|0);
 $30 = HEAP16[$pinstate42>>1]|0;
 $conv43 = $30&65535;
 $and44 = $conv43 & 2;
 $tobool45 = ($and44|0)!=(0);
 $31 = $b$addr;
 if ($tobool45) {
  $call47 = (_hd44780_write_data($31)|0);
  $delay = $call47;
  $32 = $delay;
  STACKTOP = sp;return ($32|0);
 } else {
  $call49 = (_hd44780_write_command($31)|0);
  $delay = $call49;
  $32 = $delay;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __hd44780_busy_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $avr$addr = 0, $b = 0, $param$addr = 0, $when$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $when$addr = sp;
 $avr$addr = $avr;
 $2 = $when$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $param$addr = $param;
 $6 = $param$addr;
 $b = $6;
 $7 = $b;
 (_hd44780_set_flag($7,11,0)|0);
 $8 = $b;
 $9 = HEAP32[$8>>2]|0;
 $add$ptr = ((($9)) + 288|0);
 _avr_raise_irq($add$ptr,0);
 setTempRet0((0) | 0);
 STACKTOP = sp;return 0;
}
function _hd44780_write_data($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $b$addr = 0, $call2 = 0, $conv = 0, $cursor = 0, $datapins = 0, $datapins1 = 0, $delay = 0, $idxprom = 0;
 var $tobool = 0, $vararg_buffer = 0, $vram = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $b$addr = $b;
 $delay = 37;
 $0 = $b$addr;
 $datapins = ((($0)) + 164|0);
 $1 = HEAP8[$datapins>>0]|0;
 $2 = $b$addr;
 $vram = ((($2)) + 18|0);
 $3 = $b$addr;
 $cursor = ((($3)) + 16|0);
 $4 = HEAP16[$cursor>>1]|0;
 $idxprom = $4&65535;
 $arrayidx = (($vram) + ($idxprom)|0);
 HEAP8[$arrayidx>>0] = $1;
 $5 = $b$addr;
 $datapins1 = ((($5)) + 164|0);
 $6 = HEAP8[$datapins1>>0]|0;
 $conv = $6&255;
 HEAP32[$vararg_buffer>>2] = $conv;
 (_printf(356396,$vararg_buffer)|0);
 $7 = $b$addr;
 $call2 = (_hd44780_get_flag($7,4)|0);
 $tobool = ($call2|0)!=(0);
 if ($tobool) {
  $9 = $b$addr;
  (_hd44780_set_flag($9,13,1)|0);
  $10 = $delay;
  STACKTOP = sp;return ($10|0);
 }
 $8 = $b$addr;
 _hd44780_kick_cursor($8);
 $9 = $b$addr;
 (_hd44780_set_flag($9,13,1)|0);
 $10 = $delay;
 STACKTOP = sp;return ($10|0);
}
function _hd44780_write_command($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and11 = 0, $and19 = 0, $and23 = 0, $and27 = 0, $and39 = 0, $and43 = 0;
 var $and48 = 0, $and52 = 0, $and56 = 0, $and6 = 0, $and62 = 0, $and66 = 0, $b$addr = 0, $call15 = 0, $call30 = 0, $conv = 0, $conv10 = 0, $conv12 = 0, $conv18 = 0, $conv22 = 0, $conv26 = 0, $conv3 = 0, $conv38 = 0, $conv42 = 0, $conv47 = 0, $conv5 = 0;
 var $conv51 = 0, $conv55 = 0, $conv61 = 0, $conv65 = 0, $conv7 = 0, $cursor = 0, $cursor13 = 0, $datapins = 0, $datapins17 = 0, $datapins2 = 0, $datapins21 = 0, $datapins25 = 0, $datapins37 = 0, $datapins4 = 0, $datapins41 = 0, $datapins46 = 0, $datapins50 = 0, $datapins54 = 0, $datapins60 = 0, $datapins64 = 0;
 var $datapins9 = 0, $dec = 0, $delay = 0, $four = 0, $lnot = 0, $lnot$ext = 0, $shl = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $tobool29 = 0, $tobool31 = 0, $top = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $b$addr = $b;
 $delay = 37;
 $top = 7;
 while(1) {
  $0 = $top;
  $tobool = ($0|0)!=(0);
  if (!($tobool)) {
   break;
  }
  $1 = $b$addr;
  $datapins = ((($1)) + 164|0);
  $2 = HEAP8[$datapins>>0]|0;
  $conv = $2&255;
  $3 = $top;
  $shl = 1 << $3;
  $and = $conv & $shl;
  $tobool1 = ($and|0)!=(0);
  if ($tobool1) {
   break;
  }
  $4 = $top;
  $dec = (($4) + -1)|0;
  $top = $dec;
 }
 $5 = $b$addr;
 $datapins2 = ((($5)) + 164|0);
 $6 = HEAP8[$datapins2>>0]|0;
 $conv3 = $6&255;
 HEAP32[$vararg_buffer>>2] = $conv3;
 (_printf(356319,$vararg_buffer)|0);
 $7 = $top;
 switch ($7|0) {
 case 7:  {
  $8 = $b$addr;
  $datapins4 = ((($8)) + 164|0);
  $9 = HEAP8[$datapins4>>0]|0;
  $conv5 = $9&255;
  $and6 = $conv5 & 127;
  $conv7 = $and6&65535;
  $10 = $b$addr;
  $cursor = ((($10)) + 16|0);
  HEAP16[$cursor>>1] = $conv7;
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 case 6:  {
  $11 = $b$addr;
  $datapins9 = ((($11)) + 164|0);
  $12 = HEAP8[$datapins9>>0]|0;
  $conv10 = $12&255;
  $and11 = $conv10 & 63;
  $add = (64 + ($and11))|0;
  $conv12 = $add&65535;
  $13 = $b$addr;
  $cursor13 = ((($13)) + 16|0);
  HEAP16[$cursor13>>1] = $conv12;
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 case 5:  {
  $14 = $b$addr;
  $call15 = (_hd44780_get_flag($14,2)|0);
  $tobool16 = ($call15|0)!=(0);
  $lnot = $tobool16 ^ 1;
  $lnot$ext = $lnot&1;
  $four = $lnot$ext;
  $15 = $b$addr;
  $16 = $b$addr;
  $datapins17 = ((($16)) + 164|0);
  $17 = HEAP8[$datapins17>>0]|0;
  $conv18 = $17&255;
  $and19 = $conv18 & 16;
  (_hd44780_set_flag($15,2,$and19)|0);
  $18 = $b$addr;
  $19 = $b$addr;
  $datapins21 = ((($19)) + 164|0);
  $20 = HEAP8[$datapins21>>0]|0;
  $conv22 = $20&255;
  $and23 = $conv22 & 8;
  (_hd44780_set_flag($18,1,$and23)|0);
  $21 = $b$addr;
  $22 = $b$addr;
  $datapins25 = ((($22)) + 164|0);
  $23 = HEAP8[$datapins25>>0]|0;
  $conv26 = $23&255;
  $and27 = $conv26 & 4;
  (_hd44780_set_flag($21,0,$and27)|0);
  $24 = $four;
  $tobool29 = ($24|0)!=(0);
  if ($tobool29) {
   $51 = $delay;
   STACKTOP = sp;return ($51|0);
  }
  $25 = $b$addr;
  $call30 = (_hd44780_get_flag($25,2)|0);
  $tobool31 = ($call30|0)!=(0);
  if ($tobool31) {
   $51 = $delay;
   STACKTOP = sp;return ($51|0);
  }
  HEAP32[$vararg_buffer1>>2] = 356374;
  (_printf(356347,$vararg_buffer1)|0);
  $26 = $b$addr;
  (_hd44780_set_flag($26,10,0)|0);
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 case 4:  {
  $27 = $b$addr;
  $28 = $b$addr;
  $datapins37 = ((($28)) + 164|0);
  $29 = HEAP8[$datapins37>>0]|0;
  $conv38 = $29&255;
  $and39 = $conv38 & 8;
  (_hd44780_set_flag($27,4,$and39)|0);
  $30 = $b$addr;
  $31 = $b$addr;
  $datapins41 = ((($31)) + 164|0);
  $32 = HEAP8[$datapins41>>0]|0;
  $conv42 = $32&255;
  $and43 = $conv42 & 4;
  (_hd44780_set_flag($30,3,$and43)|0);
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 case 3:  {
  $33 = $b$addr;
  $34 = $b$addr;
  $datapins46 = ((($34)) + 164|0);
  $35 = HEAP8[$datapins46>>0]|0;
  $conv47 = $35&255;
  $and48 = $conv47 & 4;
  (_hd44780_set_flag($33,7,$and48)|0);
  $36 = $b$addr;
  $37 = $b$addr;
  $datapins50 = ((($37)) + 164|0);
  $38 = HEAP8[$datapins50>>0]|0;
  $conv51 = $38&255;
  $and52 = $conv51 & 2;
  (_hd44780_set_flag($36,6,$and52)|0);
  $39 = $b$addr;
  $40 = $b$addr;
  $datapins54 = ((($40)) + 164|0);
  $41 = HEAP8[$datapins54>>0]|0;
  $conv55 = $41&255;
  $and56 = $conv55 & 1;
  (_hd44780_set_flag($39,5,$and56)|0);
  $42 = $b$addr;
  (_hd44780_set_flag($42,13,1)|0);
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 case 2:  {
  $43 = $b$addr;
  $44 = $b$addr;
  $datapins60 = ((($44)) + 164|0);
  $45 = HEAP8[$datapins60>>0]|0;
  $conv61 = $45&255;
  $and62 = $conv61 & 2;
  (_hd44780_set_flag($43,9,$and62)|0);
  $46 = $b$addr;
  $47 = $b$addr;
  $datapins64 = ((($47)) + 164|0);
  $48 = HEAP8[$datapins64>>0]|0;
  $conv65 = $48&255;
  $and66 = $conv65 & 1;
  (_hd44780_set_flag($46,8,$and66)|0);
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 case 1:  {
  $49 = $b$addr;
  __hd44780_reset_cursor($49);
  $delay = 1520;
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 case 0:  {
  $50 = $b$addr;
  __hd44780_clear_screen($50);
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
  break;
 }
 default: {
  $51 = $delay;
  STACKTOP = sp;return ($51|0);
 }
 }
 return (0)|0;
}
function _hd44780_kick_cursor($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$ptr = 0, $b$addr = 0, $call = 0, $cmp = 0, $cmp15 = 0, $cmp25 = 0, $cmp6 = 0, $conv = 0, $conv18 = 0, $conv24 = 0, $conv34 = 0, $conv5 = 0, $cursor = 0, $cursor17 = 0, $cursor21 = 0, $cursor23 = 0, $cursor28 = 0, $cursor3 = 0, $cursor33 = 0, $cursor9 = 0;
 var $dec = 0, $dec29 = 0, $inc = 0, $inc10 = 0, $tobool = 0, $tobool19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $b$addr = $b;
 $0 = $b$addr;
 $call = (_hd44780_get_flag($0,9)|0);
 $tobool = ($call|0)!=(0);
 $1 = $b$addr;
 $cursor = ((($1)) + 16|0);
 $2 = HEAP16[$cursor>>1]|0;
 $conv = $2&65535;
 if ($tobool) {
  $cmp = ($conv|0)<(79);
  $3 = $b$addr;
  $cursor3 = ((($3)) + 16|0);
  $4 = HEAP16[$cursor3>>1]|0;
  if ($cmp) {
   $inc = (($4) + 1)<<16>>16;
   HEAP16[$cursor3>>1] = $inc;
   STACKTOP = sp;return;
  }
  $conv5 = $4&65535;
  $cmp6 = ($conv5|0)<(143);
  if (!($cmp6)) {
   STACKTOP = sp;return;
  }
  $5 = $b$addr;
  $cursor9 = ((($5)) + 16|0);
  $6 = HEAP16[$cursor9>>1]|0;
  $inc10 = (($6) + 1)<<16>>16;
  HEAP16[$cursor9>>1] = $inc10;
  STACKTOP = sp;return;
 } else {
  $cmp15 = ($conv|0)<(80);
  if ($cmp15) {
   $7 = $b$addr;
   $cursor17 = ((($7)) + 16|0);
   $8 = HEAP16[$cursor17>>1]|0;
   $conv18 = $8&65535;
   $tobool19 = ($conv18|0)!=(0);
   if ($tobool19) {
    $9 = $b$addr;
    $cursor21 = ((($9)) + 16|0);
    $10 = HEAP16[$cursor21>>1]|0;
    $dec = (($10) + -1)<<16>>16;
    HEAP16[$cursor21>>1] = $dec;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   $11 = $b$addr;
   $cursor23 = ((($11)) + 16|0);
   $12 = HEAP16[$cursor23>>1]|0;
   $conv24 = $12&65535;
   $cmp25 = ($conv24|0)>(80);
   if ($cmp25) {
    $13 = $b$addr;
    $cursor28 = ((($13)) + 16|0);
    $14 = HEAP16[$cursor28>>1]|0;
    $dec29 = (($14) + -1)<<16>>16;
    HEAP16[$cursor28>>1] = $dec29;
   }
  }
  $15 = $b$addr;
  (_hd44780_set_flag($15,13,1)|0);
  $16 = $b$addr;
  $17 = HEAP32[$16>>2]|0;
  $add$ptr = ((($17)) + 312|0);
  $18 = $b$addr;
  $cursor33 = ((($18)) + 16|0);
  $19 = HEAP16[$cursor33>>1]|0;
  $conv34 = $19&65535;
  _avr_raise_irq($add$ptr,$conv34);
  STACKTOP = sp;return;
 }
}
function _avr_init_irq($pool,$irq,$base,$count,$names) {
 $pool = $pool|0;
 $irq = $irq|0;
 $base = $base|0;
 $count = $count|0;
 $names = $names|0;
 var $$pre$i = 0, $$pre8$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$i = 0, $add$us = 0, $and$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx5 = 0, $arrayidx5$us = 0, $call = 0, $call$i = 0, $call$us = 0;
 var $cmp$i = 0, $cmp20 = 0, $exitcond = 0, $exitcond23 = 0, $flags = 0, $flags$us = 0, $i$021 = 0, $i$021$us = 0, $inc = 0, $inc$i = 0, $inc$us = 0, $irq1 = 0, $irq1$i = 0, $irq1$us = 0, $mul = 0, $mul$i = 0, $name = 0, $name$us = 0, $tobool = 0, $tobool4 = 0;
 var $tobool6 = 0, $tobool6$us = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $mul = ($count*24)|0;
 _memset(($irq|0),0,($mul|0))|0;
 $cmp20 = ($count|0)==(0);
 if ($cmp20) {
  STACKTOP = sp;return;
 }
 $tobool = ($pool|0)==(0|0);
 $tobool4 = ($names|0)==(0|0);
 $irq1$i = ((($pool)) + 4|0);
 if ($tobool) {
  $i$021$us = 0;
  while(1) {
   $add$us = (($i$021$us) + ($base))|0;
   $irq1$us = (((($irq) + (($i$021$us*24)|0)|0)) + 8|0);
   HEAP32[$irq1$us>>2] = $add$us;
   $flags$us = (((($irq) + (($i$021$us*24)|0)|0)) + 16|0);
   HEAP8[$flags$us>>0] = 8;
   if ($tobool4) {
    label = 8;
   } else {
    $arrayidx5$us = (($names) + ($i$021$us<<2)|0);
    $0 = HEAP32[$arrayidx5$us>>2]|0;
    $tobool6$us = ($0|0)==(0|0);
    if ($tobool6$us) {
     label = 8;
    } else {
     $call$us = (___strdup($0)|0);
     $name$us = (((($irq) + (($i$021$us*24)|0)|0)) + 4|0);
     HEAP32[$name$us>>2] = $call$us;
    }
   }
   if ((label|0) == 8) {
    label = 0;
    HEAP32[$vararg_buffer>>2] = 356673;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $add$us;
    (_printf(356632,$vararg_buffer)|0);
   }
   $inc$us = (($i$021$us) + 1)|0;
   $exitcond = ($inc$us|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $i$021$us = $inc$us;
   }
  }
  STACKTOP = sp;return;
 }
 $i$021 = 0;
 while(1) {
  $add = (($i$021) + ($base))|0;
  $irq1 = (((($irq) + (($i$021*24)|0)|0)) + 8|0);
  HEAP32[$irq1>>2] = $add;
  $flags = (((($irq) + (($i$021*24)|0)|0)) + 16|0);
  HEAP8[$flags>>0] = 8;
  $arrayidx = (($irq) + (($i$021*24)|0)|0);
  $1 = HEAP32[$pool>>2]|0;
  $and$i = $1 & 15;
  $cmp$i = ($and$i|0)==(0);
  if ($cmp$i) {
   $add$i = $1 << 2;
   $mul$i = (($add$i) + 64)|0;
   $2 = HEAP32[$irq1$i>>2]|0;
   $call$i = (_realloc($2,$mul$i)|0);
   HEAP32[$irq1$i>>2] = $call$i;
   $$pre8$i = HEAP32[$pool>>2]|0;
   $3 = $$pre8$i;$4 = $call$i;
  } else {
   $$pre$i = HEAP32[$irq1$i>>2]|0;
   $3 = $1;$4 = $$pre$i;
  }
  $inc$i = (($3) + 1)|0;
  HEAP32[$pool>>2] = $inc$i;
  $arrayidx$i = (($4) + ($3<<2)|0);
  HEAP32[$arrayidx$i>>2] = $arrayidx;
  HEAP32[$arrayidx>>2] = $pool;
  if ($tobool4) {
   label = 17;
  } else {
   $arrayidx5 = (($names) + ($i$021<<2)|0);
   $5 = HEAP32[$arrayidx5>>2]|0;
   $tobool6 = ($5|0)==(0|0);
   if ($tobool6) {
    label = 17;
   } else {
    $call = (___strdup($5)|0);
    $name = (((($irq) + (($i$021*24)|0)|0)) + 4|0);
    HEAP32[$name>>2] = $call;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   $6 = HEAP32[$irq1>>2]|0;
   HEAP32[$vararg_buffer2>>2] = 356673;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $6;
   (_printf(356632,$vararg_buffer2)|0);
  }
  $inc = (($i$021) + 1)|0;
  $exitcond23 = ($inc|0)==($count|0);
  if ($exitcond23) {
   break;
  } else {
   $i$021 = $inc;
  }
 }
 STACKTOP = sp;return;
}
function _avr_alloc_irq($pool,$base,$count,$names) {
 $pool = $pool|0;
 $base = $base|0;
 $count = $count|0;
 $names = $names|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp9 = 0, $exitcond = 0, $flags = 0, $i$010 = 0, $inc = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = ($count*24)|0;
 $call = (_malloc($mul)|0);
 _avr_init_irq($pool,$call,$base,$count,$names);
 $cmp9 = ($count|0)==(0);
 if ($cmp9) {
  return ($call|0);
 }
 $i$010 = 0;
 while(1) {
  $flags = (((($call) + (($i$010*24)|0)|0)) + 16|0);
  $0 = HEAP8[$flags>>0]|0;
  $1 = $0 | 4;
  HEAP8[$flags>>0] = $1;
  $inc = (($i$010) + 1)|0;
  $exitcond = ($inc|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$010 = $inc;
  }
 }
 return ($call|0);
}
function _avr_irq_register_notify($irq,$notify,$param) {
 $irq = $irq|0;
 $notify = $notify|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i = 0, $cmp = 0, $cmp6 = 0, $hook$0 = 0, $hook$012 = 0, $hook$014 = 0, $hook2 = 0, $notify4 = 0, $notify9 = 0, $or$cond = 0, $param10 = 0, $param5 = 0;
 var $tobool = 0, $tobool1 = 0, $tobool3 = 0, $tobool313 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($irq|0)!=(0|0);
 $tobool1 = ($notify|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  return;
 }
 $hook2 = ((($irq)) + 20|0);
 $hook$012 = HEAP32[$hook2>>2]|0;
 $tobool313 = ($hook$012|0)==(0|0);
 $0 = $hook$012;
 L4: do {
  if (!($tobool313)) {
   $hook$014 = $hook$012;
   while(1) {
    $notify4 = ((($hook$014)) + 12|0);
    $1 = HEAP32[$notify4>>2]|0;
    $cmp = ($1|0)==($notify|0);
    if ($cmp) {
     $param5 = ((($hook$014)) + 16|0);
     $2 = HEAP32[$param5>>2]|0;
     $cmp6 = ($2|0)==($param|0);
     if ($cmp6) {
      break;
     }
    }
    $hook$0 = HEAP32[$hook$014>>2]|0;
    $tobool3 = ($hook$0|0)==(0|0);
    if ($tobool3) {
     break L4;
    } else {
     $hook$014 = $hook$0;
    }
   }
   return;
  }
 } while(0);
 $call$i = (_malloc(20)|0);
 $3 = ((($call$i)) + 4|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 HEAP32[$call$i>>2] = $0;
 HEAP32[$hook2>>2] = $call$i;
 $notify9 = ((($call$i)) + 12|0);
 HEAP32[$notify9>>2] = $notify;
 $param10 = ((($call$i)) + 16|0);
 HEAP32[$param10>>2] = $param;
 return;
}
function _avr_raise_irq($irq,$value) {
 $irq = $irq|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $busy = 0, $chain = 0, $cmp = 0, $cmp23 = 0, $cond = 0, $dec = 0, $flags = 0;
 var $hook$026 = 0, $hook20 = 0, $lnot$ext = 0, $notify = 0, $or$cond = 0, $param = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2125 = 0, $tobool27 = 0, $tobool31 = 0, $value3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($irq|0)==(0|0);
 if ($tobool) {
  return;
 }
 $flags = ((($irq)) + 16|0);
 $0 = HEAP8[$flags>>0]|0;
 $1 = $0 & 1;
 $tobool1 = ($1<<24>>24)==(0);
 $tobool2 = ($value|0)==(0);
 $lnot$ext = $tobool2&1;
 $cond = $tobool1 ? $value : $lnot$ext;
 $value3 = ((($irq)) + 12|0);
 $2 = HEAP32[$value3>>2]|0;
 $cmp = ($2|0)==($cond|0);
 $3 = $0 & 10;
 $4 = ($3<<24>>24)==(2);
 $or$cond = $4 & $cmp;
 if ($or$cond) {
  return;
 }
 $5 = $0 & -9;
 HEAP8[$flags>>0] = $5;
 $hook20 = ((($irq)) + 20|0);
 $6 = HEAP32[$hook20>>2]|0;
 $tobool2125 = ($6|0)==(0|0);
 if (!($tobool2125)) {
  $hook$026 = $6;
  while(1) {
   $7 = HEAP32[$hook$026>>2]|0;
   $busy = ((($hook$026)) + 4|0);
   $8 = HEAP32[$busy>>2]|0;
   $cmp23 = ($8|0)==(0);
   if ($cmp23) {
    HEAP32[$busy>>2] = 1;
    $notify = ((($hook$026)) + 12|0);
    $9 = HEAP32[$notify>>2]|0;
    $tobool27 = ($9|0)==(0|0);
    if (!($tobool27)) {
     $param = ((($hook$026)) + 16|0);
     $10 = HEAP32[$param>>2]|0;
     FUNCTION_TABLE_viii[$9 & 255]($irq,$cond,$10);
    }
    $chain = ((($hook$026)) + 8|0);
    $11 = HEAP32[$chain>>2]|0;
    $tobool31 = ($11|0)==(0|0);
    if (!($tobool31)) {
     _avr_raise_irq($11,$cond);
    }
    $12 = HEAP32[$busy>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$busy>>2] = $dec;
   }
   $tobool21 = ($7|0)==(0|0);
   if ($tobool21) {
    break;
   } else {
    $hook$026 = $7;
   }
  }
 }
 HEAP32[$value3>>2] = $cond;
 return;
}
function _avr_connect_irq($src,$dst) {
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call$i = 0, $chain = 0, $chain9 = 0, $cmp = 0, $cmp5 = 0, $hook$0 = 0, $hook$014 = 0, $hook$016 = 0, $hook3 = 0, $or$cond$not = 0, $or$cond13 = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool415 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $tobool = ($src|0)==(0|0);
 $tobool1 = ($dst|0)==(0|0);
 $or$cond$not = $tobool | $tobool1;
 $cmp = ($src|0)==($dst|0);
 $or$cond13 = $cmp | $or$cond$not;
 if ($or$cond13) {
  $0 = HEAP32[88638]|0;
  HEAP32[$vararg_buffer>>2] = 356714;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $src;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $dst;
  (_fprintf($0,356686,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $hook3 = ((($src)) + 20|0);
 $hook$014 = HEAP32[$hook3>>2]|0;
 $tobool415 = ($hook$014|0)==(0|0);
 $1 = $hook$014;
 L5: do {
  if (!($tobool415)) {
   $hook$016 = $hook$014;
   while(1) {
    $chain = ((($hook$016)) + 8|0);
    $2 = HEAP32[$chain>>2]|0;
    $cmp5 = ($2|0)==($dst|0);
    if ($cmp5) {
     break;
    }
    $hook$0 = HEAP32[$hook$016>>2]|0;
    $tobool4 = ($hook$0|0)==(0|0);
    if ($tobool4) {
     break L5;
    } else {
     $hook$016 = $hook$0;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $call$i = (_malloc(20)|0);
 $3 = ((($call$i)) + 4|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 HEAP32[$call$i>>2] = $1;
 HEAP32[$hook3>>2] = $call$i;
 $chain9 = ((($call$i)) + 8|0);
 HEAP32[$chain9>>2] = $dst;
 STACKTOP = sp;return;
}
function _avr_ioctl($avr,$ctl,$io_param) {
 $avr = $avr|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $io_port = 0, $ioctl = 0, $port$0 = 0, $port$010 = 0, $port$08 = 0, $res$0$lcssa = 0, $res$1 = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $io_port = ((($avr)) + 5896|0);
 $port$08 = HEAP32[$io_port>>2]|0;
 $tobool9 = ($port$08|0)==(0|0);
 if ($tobool9) {
  $res$0$lcssa = -1;
  return ($res$0$lcssa|0);
 }
 $port$010 = $port$08;
 while(1) {
  $ioctl = ((($port$010)) + 32|0);
  $0 = HEAP32[$ioctl>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if ($tobool1) {
   $res$1 = -1;
  } else {
   $call = (FUNCTION_TABLE_iiii[$0 & 255]($port$010,$ctl,$io_param)|0);
   $res$1 = $call;
  }
  $port$0 = HEAP32[$port$010>>2]|0;
  $tobool = ($port$0|0)!=(0|0);
  $cmp = ($res$1|0)==(-1);
  $1 = $cmp & $tobool;
  if ($1) {
   $port$010 = $port$0;
  } else {
   $res$0$lcssa = $res$1;
   break;
  }
 }
 return ($res$0$lcssa|0);
}
function _avr_register_io($avr,$io) {
 $avr = $avr|0;
 $io = $io|0;
 var $0 = 0, $avr1 = 0, $io_port = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $io_port = ((($avr)) + 5896|0);
 $0 = HEAP32[$io_port>>2]|0;
 HEAP32[$io>>2] = $0;
 $avr1 = ((($io)) + 4|0);
 HEAP32[$avr1>>2] = $avr;
 HEAP32[$io_port>>2] = $io;
 return;
}
function _avr_register_io_read($avr,$addr,$readp,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $readp = $readp|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $c19 = 0, $c47$pre$phiZ2D = 0, $cmp = 0, $cmp20 = 0, $idxprom = 0, $param2 = 0, $tobool = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($addr) + -32)<<16>>16;
 $idxprom = $0&65535;
 $param2 = (((((($avr)) + 140|0) + (($idxprom*20)|0)|0)) + 4|0);
 $1 = HEAP32[$param2>>2]|0;
 $tobool = ($1|0)==(0|0);
 if ($tobool) {
  $c = (((((($avr)) + 140|0) + (($idxprom*20)|0)|0)) + 8|0);
  $2 = HEAP32[$c>>2]|0;
  $tobool7 = ($2|0)==(0|0);
  if ($tobool7) {
   $c47$pre$phiZ2D = $c;
   HEAP32[$param2>>2] = $param;
   HEAP32[$c47$pre$phiZ2D>>2] = $readp;
   STACKTOP = sp;return;
  }
 }
 $cmp = ($1|0)==($param|0);
 $c19 = (((((($avr)) + 140|0) + (($idxprom*20)|0)|0)) + 8|0);
 if ($cmp) {
  $3 = HEAP32[$c19>>2]|0;
  $cmp20 = ($3|0)==($readp|0);
  if ($cmp20) {
   $c47$pre$phiZ2D = $c19;
   HEAP32[$param2>>2] = $param;
   HEAP32[$c47$pre$phiZ2D>>2] = $readp;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$vararg_buffer>>2] = 356783;
 _avr_global_logger($avr,1,356730,$vararg_buffer);
 $4 = HEAP32[$c19>>2]|0;
 $5 = HEAP32[$param2>>2]|0;
 HEAP32[$vararg_buffer1>>2] = 356783;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $idxprom;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $4;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $5;
 $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $readp;
 $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
 HEAP32[$vararg_ptr8>>2] = $param;
 _avr_global_logger($avr,1,356804,$vararg_buffer1);
 _abort();
 // unreachable;
}
function _avr_register_io_write($avr,$addr,$writep,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $writep = $writep|0;
 $param = $param|0;
 var $$pre53 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $c110 = 0, $c122$pre$phi$sinkZ2D = 0, $c122$pre$phiZ2D = 0, $c24 = 0, $c68 = 0, $cmp = 0, $cmp17 = 0;
 var $cmp25 = 0, $cmp33 = 0, $cmp37 = 0, $cmp93 = 0, $conv = 0, $conv2 = 0, $inc = 0, $inc89 = 0, $io56 = 0, $io_shared_io_count = 0, $or$cond = 0, $param105 = 0, $param5 = 0, $tobool = 0, $tobool10 = 0, $used = 0, $used88$phi$trans$insert = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $conv = $addr&65535;
 $0 = (($addr) + -32)<<16>>16;
 $conv2 = $0&65535;
 $cmp = ($0&65535)>(279);
 if ($cmp) {
  HEAP32[$vararg_buffer>>2] = 356889;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 280;
  _avr_global_logger($avr,1,356833,$vararg_buffer);
  _abort();
  // unreachable;
 }
 $param5 = (((((($avr)) + 140|0) + (($conv2*20)|0)|0)) + 12|0);
 $1 = HEAP32[$param5>>2]|0;
 $tobool = ($1|0)==(0|0);
 $2 = $1;
 if ($tobool) {
  $c = (((((($avr)) + 140|0) + (($conv2*20)|0)|0)) + 16|0);
  $3 = HEAP32[$c>>2]|0;
  $tobool10 = ($3|0)==(0|0);
  if ($tobool10) {
   $c122$pre$phiZ2D = $c;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $cmp17 = ($1|0)==($param|0);
  $c24 = (((((($avr)) + 140|0) + (($conv2*20)|0)|0)) + 16|0);
  $4 = HEAP32[$c24>>2]|0;
  $cmp25 = ($4|0)==($writep|0);
  $or$cond = $cmp17 & $cmp25;
  if ($or$cond) {
   $c122$pre$phiZ2D = $c24;
  } else {
   $cmp33 = ($4|0)==(85|0);
   do {
    if ($cmp33) {
     $used88$phi$trans$insert = (((($avr)) + 5744|0) + (($2*36)|0)|0);
     $$pre53 = HEAP32[$used88$phi$trans$insert>>2]|0;
     $inc89 = (($$pre53) + 1)|0;
     HEAP32[$used88$phi$trans$insert>>2] = $inc89;
     $cmp93 = ($inc89>>>0)>(4);
     if ($cmp93) {
      HEAP32[$vararg_buffer10>>2] = 356889;
      $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
      HEAP32[$vararg_ptr13>>2] = $conv;
      _avr_global_logger($avr,1,356997,$vararg_buffer10);
      _abort();
      // unreachable;
     } else {
      $10 = $$pre53;$9 = $2;
     }
    } else {
     $io_shared_io_count = ((($avr)) + 5740|0);
     $5 = HEAP32[$io_shared_io_count>>2]|0;
     $inc = (($5) + 1)|0;
     HEAP32[$io_shared_io_count>>2] = $inc;
     $cmp37 = ($inc>>>0)>(4);
     if ($cmp37) {
      HEAP32[$vararg_buffer3>>2] = 356889;
      _avr_global_logger($avr,1,356911,$vararg_buffer3);
      _abort();
      // unreachable;
     } else {
      HEAP32[$vararg_buffer6>>2] = 356889;
      $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
      HEAP32[$vararg_ptr9>>2] = $conv;
      _avr_global_logger($avr,3,356952,$vararg_buffer6);
      $used = (((($avr)) + 5744|0) + (($5*36)|0)|0);
      $6 = HEAP32[$param5>>2]|0;
      $io56 = (((((($avr)) + 5744|0) + (($5*36)|0)|0)) + 4|0);
      HEAP32[$io56>>2] = $6;
      $7 = HEAP32[$c24>>2]|0;
      $c68 = (((((($avr)) + 5744|0) + (($5*36)|0)|0)) + 8|0);
      HEAP32[$c68>>2] = $7;
      $8 = $5;
      HEAP32[$param5>>2] = $8;
      HEAP32[$c24>>2] = 85;
      HEAP32[$used>>2] = 2;
      $10 = 1;$9 = $5;
      break;
     }
    }
   } while(0);
   $param105 = ((((((($avr)) + 5744|0) + (($9*36)|0)|0)) + 4|0) + ($10<<3)|0);
   HEAP32[$param105>>2] = $param;
   $c110 = ((((((((($avr)) + 5744|0) + (($9*36)|0)|0)) + 4|0) + ($10<<3)|0)) + 4|0);
   $c122$pre$phi$sinkZ2D = $c110;
   HEAP32[$c122$pre$phi$sinkZ2D>>2] = $writep;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$param5>>2] = $param;
 $c122$pre$phi$sinkZ2D = $c122$pre$phiZ2D;
 HEAP32[$c122$pre$phi$sinkZ2D>>2] = $writep;
 STACKTOP = sp;return;
}
function __avr_io_mux_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c5 = 0, $cmp = 0, $cmp13 = 0, $i$014 = 0, $inc = 0, $param10 = 0, $tobool = 0, $used = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $param;
 $used = (((($avr)) + 5744|0) + (($0*36)|0)|0);
 $1 = HEAP32[$used>>2]|0;
 $cmp13 = ($1|0)>(0);
 if (!($cmp13)) {
  return;
 }
 $5 = $1;$i$014 = 0;
 while(1) {
  $c5 = ((((((((($avr)) + 5744|0) + (($0*36)|0)|0)) + 4|0) + ($i$014<<3)|0)) + 4|0);
  $2 = HEAP32[$c5>>2]|0;
  $tobool = ($2|0)==(0|0);
  if ($tobool) {
   $4 = $5;
  } else {
   $param10 = ((((((($avr)) + 5744|0) + (($0*36)|0)|0)) + 4|0) + ($i$014<<3)|0);
   $3 = HEAP32[$param10>>2]|0;
   FUNCTION_TABLE_viiii[$2 & 255]($avr,$addr,$v,$3);
   $$pre = HEAP32[$used>>2]|0;
   $4 = $$pre;
  }
  $inc = (($i$014) + 1)|0;
  $cmp = ($inc|0)<($4|0);
  if ($cmp) {
   $5 = $4;$i$014 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _avr_io_getirq($avr,$ctl,$index) {
 $avr = $avr|0;
 $ctl = $ctl|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $cmp3 = 0, $io_port = 0, $irq = 0, $irq_count = 0, $irq_ioctl_get = 0, $port$0 = 0, $port$010 = 0, $port$08 = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $io_port = ((($avr)) + 5896|0);
 $port$08 = HEAP32[$io_port>>2]|0;
 $tobool9 = ($port$08|0)==(0|0);
 if ($tobool9) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $port$010 = $port$08;
 while(1) {
  $irq = ((($port$010)) + 24|0);
  $0 = HEAP32[$irq>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $irq_ioctl_get = ((($port$010)) + 16|0);
   $1 = HEAP32[$irq_ioctl_get>>2]|0;
   $cmp = ($1|0)==($ctl|0);
   if ($cmp) {
    $irq_count = ((($port$010)) + 20|0);
    $2 = HEAP32[$irq_count>>2]|0;
    $cmp3 = ($2|0)>($index|0);
    if ($cmp3) {
     break;
    }
   }
  }
  $port$0 = HEAP32[$port$010>>2]|0;
  $tobool = ($port$0|0)==(0|0);
  if ($tobool) {
   $retval$0 = 0;
   label = 8;
   break;
  } else {
   $port$010 = $port$0;
  }
 }
 if ((label|0) == 8) {
  return ($retval$0|0);
 }
 $add$ptr = (($0) + (($index*24)|0)|0);
 $retval$0 = $add$ptr;
 return ($retval$0|0);
}
function _avr_iomem_getirq($avr,$addr,$name,$index) {
 $avr = $avr|0;
 $addr = $addr|0;
 $name = $name|0;
 $index = $index|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add$6 = 0, $add$7 = 0, $add$ptr = 0, $add$ptr$1 = 0, $add$ptr$2 = 0, $add$ptr$3 = 0, $add$ptr$4 = 0, $add$ptr$5 = 0, $add$ptr$6 = 0;
 var $add$ptr$7 = 0, $add$ptr60 = 0, $add40 = 0, $arrayidx14$1 = 0, $arrayidx14$2 = 0, $arrayidx14$3 = 0, $arrayidx14$4 = 0, $arrayidx14$5 = 0, $arrayidx14$6 = 0, $arrayidx14$7 = 0, $arrayidx14$8 = 0, $call15 = 0, $call15$1 = 0, $call15$2 = 0, $call15$3 = 0, $call15$4 = 0, $call15$5 = 0, $call15$6 = 0, $call15$7 = 0, $call17 = 0;
 var $call39 = 0, $call48 = 0, $cmp = 0, $cmp2 = 0, $conv = 0, $flags = 0, $flags$1 = 0, $flags$2 = 0, $flags$3 = 0, $flags$4 = 0, $flags$5 = 0, $flags$6 = 0, $flags$7 = 0, $idxprom = 0, $irq = 0, $irq_pool = 0, $name47 = 0, $name54 = 0, $namep = 0, $names = 0;
 var $retval$0 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0;
 var $vla = 0, $vla$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer33 = sp + 304|0;
 $vararg_buffer29 = sp + 296|0;
 $vararg_buffer25 = sp + 288|0;
 $vararg_buffer21 = sp + 280|0;
 $vararg_buffer17 = sp + 272|0;
 $vararg_buffer13 = sp + 264|0;
 $vararg_buffer9 = sp + 256|0;
 $vararg_buffer5 = sp + 248|0;
 $vararg_buffer1 = sp + 240|0;
 $vararg_buffer = sp + 232|0;
 $names = sp + 48|0;
 $namep = sp;
 $cmp = ($index|0)>(8);
 if ($cmp) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $conv = $addr&65535;
 $0 = (($addr) + -32)<<16>>16;
 $idxprom = $0&65535;
 $irq = (((($avr)) + 140|0) + (($idxprom*20)|0)|0);
 $1 = HEAP32[$irq>>2]|0;
 $cmp2 = ($1|0)==(0|0);
 if ($cmp2) {
  HEAP32[$vararg_buffer1>>2] = $conv;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 0;
  (_sprintf($names,357046,$vararg_buffer1)|0);
  HEAP32[$namep>>2] = $names;
  $call15 = (_strlen($names)|0);
  $add = (($call15) + 1)|0;
  $add$ptr = (($names) + ($add)|0);
  HEAP32[$vararg_buffer5>>2] = $conv;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 1;
  (_sprintf($add$ptr,357046,$vararg_buffer5)|0);
  $arrayidx14$1 = ((($namep)) + 4|0);
  HEAP32[$arrayidx14$1>>2] = $add$ptr;
  $call15$1 = (_strlen($add$ptr)|0);
  $add$1 = (($call15$1) + 1)|0;
  $add$ptr$1 = (($add$ptr) + ($add$1)|0);
  HEAP32[$vararg_buffer9>>2] = $conv;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 2;
  (_sprintf($add$ptr$1,357046,$vararg_buffer9)|0);
  $arrayidx14$2 = ((($namep)) + 8|0);
  HEAP32[$arrayidx14$2>>2] = $add$ptr$1;
  $call15$2 = (_strlen($add$ptr$1)|0);
  $add$2 = (($call15$2) + 1)|0;
  $add$ptr$2 = (($add$ptr$1) + ($add$2)|0);
  HEAP32[$vararg_buffer13>>2] = $conv;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 3;
  (_sprintf($add$ptr$2,357046,$vararg_buffer13)|0);
  $arrayidx14$3 = ((($namep)) + 12|0);
  HEAP32[$arrayidx14$3>>2] = $add$ptr$2;
  $call15$3 = (_strlen($add$ptr$2)|0);
  $add$3 = (($call15$3) + 1)|0;
  $add$ptr$3 = (($add$ptr$2) + ($add$3)|0);
  HEAP32[$vararg_buffer17>>2] = $conv;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = 4;
  (_sprintf($add$ptr$3,357046,$vararg_buffer17)|0);
  $arrayidx14$4 = ((($namep)) + 16|0);
  HEAP32[$arrayidx14$4>>2] = $add$ptr$3;
  $call15$4 = (_strlen($add$ptr$3)|0);
  $add$4 = (($call15$4) + 1)|0;
  $add$ptr$4 = (($add$ptr$3) + ($add$4)|0);
  HEAP32[$vararg_buffer21>>2] = $conv;
  $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
  HEAP32[$vararg_ptr24>>2] = 5;
  (_sprintf($add$ptr$4,357046,$vararg_buffer21)|0);
  $arrayidx14$5 = ((($namep)) + 20|0);
  HEAP32[$arrayidx14$5>>2] = $add$ptr$4;
  $call15$5 = (_strlen($add$ptr$4)|0);
  $add$5 = (($call15$5) + 1)|0;
  $add$ptr$5 = (($add$ptr$4) + ($add$5)|0);
  HEAP32[$vararg_buffer25>>2] = $conv;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = 6;
  (_sprintf($add$ptr$5,357046,$vararg_buffer25)|0);
  $arrayidx14$6 = ((($namep)) + 24|0);
  HEAP32[$arrayidx14$6>>2] = $add$ptr$5;
  $call15$6 = (_strlen($add$ptr$5)|0);
  $add$6 = (($call15$6) + 1)|0;
  $add$ptr$6 = (($add$ptr$5) + ($add$6)|0);
  HEAP32[$vararg_buffer29>>2] = $conv;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = 7;
  (_sprintf($add$ptr$6,357046,$vararg_buffer29)|0);
  $arrayidx14$7 = ((($namep)) + 28|0);
  HEAP32[$arrayidx14$7>>2] = $add$ptr$6;
  $call15$7 = (_strlen($add$ptr$6)|0);
  $add$7 = (($call15$7) + 1)|0;
  $add$ptr$7 = (($add$ptr$6) + ($add$7)|0);
  HEAP32[$vararg_buffer33>>2] = $conv;
  (_sprintf($add$ptr$7,357061,$vararg_buffer33)|0);
  $arrayidx14$8 = ((($namep)) + 32|0);
  HEAP32[$arrayidx14$8>>2] = $add$ptr$7;
  $irq_pool = ((($avr)) + 112|0);
  $call17 = (_avr_alloc_irq($irq_pool,0,9,$namep)|0);
  HEAP32[$irq>>2] = $call17;
  $flags = ((($call17)) + 16|0);
  $7 = HEAP8[$flags>>0]|0;
  $8 = $7 | 2;
  HEAP8[$flags>>0] = $8;
  $flags$1 = ((($call17)) + 40|0);
  $9 = HEAP8[$flags$1>>0]|0;
  $10 = $9 | 2;
  HEAP8[$flags$1>>0] = $10;
  $flags$2 = ((($call17)) + 64|0);
  $11 = HEAP8[$flags$2>>0]|0;
  $12 = $11 | 2;
  HEAP8[$flags$2>>0] = $12;
  $flags$3 = ((($call17)) + 88|0);
  $13 = HEAP8[$flags$3>>0]|0;
  $14 = $13 | 2;
  HEAP8[$flags$3>>0] = $14;
  $flags$4 = ((($call17)) + 112|0);
  $15 = HEAP8[$flags$4>>0]|0;
  $16 = $15 | 2;
  HEAP8[$flags$4>>0] = $16;
  $flags$5 = ((($call17)) + 136|0);
  $17 = HEAP8[$flags$5>>0]|0;
  $18 = $17 | 2;
  HEAP8[$flags$5>>0] = $18;
  $flags$6 = ((($call17)) + 160|0);
  $19 = HEAP8[$flags$6>>0]|0;
  $20 = $19 | 2;
  HEAP8[$flags$6>>0] = $20;
  $flags$7 = ((($call17)) + 184|0);
  $21 = HEAP8[$flags$7>>0]|0;
  $22 = $21 | 2;
  HEAP8[$flags$7>>0] = $22;
  $23 = $call17;
 } else {
  $23 = $1;
 }
 $tobool = ($name|0)==(0|0);
 if ($tobool) {
  $6 = $23;
 } else {
  $call39 = (_strlen($name)|0);
  $add40 = (($call39) + 10)|0;
  $2 = (_llvm_stacksave()|0);
  $vla$alloca_mul = $add40;
  $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
  HEAP32[$vararg_buffer>>2] = $name;
  (_sprintf($vla,357036,$vararg_buffer)|0);
  $3 = HEAP32[$irq>>2]|0;
  $name47 = (((($3) + (($index*24)|0)|0)) + 4|0);
  $4 = HEAP32[$name47>>2]|0;
  _free($4);
  $call48 = (___strdup($vla)|0);
  $5 = HEAP32[$irq>>2]|0;
  $name54 = (((($5) + (($index*24)|0)|0)) + 4|0);
  HEAP32[$name54>>2] = $call48;
  _llvm_stackrestore(($2|0));
  $$pre = HEAP32[$irq>>2]|0;
  $6 = $$pre;
 }
 $add$ptr60 = (($6) + (($index*24)|0)|0);
 $retval$0 = $add$ptr60;
 STACKTOP = sp;return ($retval$0|0);
}
function _avr_io_setirqs($io,$ctl,$count,$irqs) {
 $io = $io|0;
 $ctl = $ctl|0;
 $count = $count|0;
 $irqs = $irqs|0;
 var $$pre = 0, $$pre69 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$us = 0, $add$ptr23 = 0, $add$ptr23$us = 0, $add$ptr34 = 0, $add$ptr34$us = 0, $and = 0, $arrayidx = 0, $arrayidx$us = 0, $arrayidx37 = 0, $arrayidx37$us = 0, $arrayidx48 = 0, $avr = 0, $buf = 0, $call = 0, $call11 = 0;
 var $call11$us = 0, $call1158 = 0, $call1158$us = 0, $call18 = 0, $call18$us = 0, $call22 = 0, $call22$us = 0, $call28$us = 0, $call33 = 0, $call33$us = 0, $call36 = 0, $call36$us = 0, $call39 = 0, $cmp24 = 0, $cmp4449 = 0, $cmp64 = 0, $conv = 0, $conv$us = 0, $conv10 = 0, $conv10$us = 0;
 var $conv1057$pre$phiZ2D = 0, $conv1057$us$pre$phiZZ2D = 0, $conv29$us = 0, $conv51 = 0, $conv51$us = 0, $dst$0$lcssa = 0, $dst$0$lcssa$us = 0, $dst$054 = 0, $dst$054$us = 0, $dst$1$lcssa = 0, $dst$1$lcssa$us = 0, $dst$160 = 0, $dst$160$us = 0, $exitcond = 0, $exitcond67 = 0, $exitcond68 = 0, $i$065 = 0, $i$065$us = 0, $i42$050 = 0, $inc = 0;
 var $inc$us = 0, $inc50 = 0, $incdec$ptr = 0, $incdec$ptr$us = 0, $incdec$ptr14 = 0, $incdec$ptr14$us = 0, $incdec$ptr15 = 0, $incdec$ptr15$us = 0, $incdec$ptr19 = 0, $incdec$ptr19$us = 0, $incdec$ptr30$us = 0, $incdec$ptr31 = 0, $incdec$ptr31$us = 0, $incdec$ptr8 = 0, $incdec$ptr8$us = 0, $irq = 0, $irq_count = 0, $irq_ioctl_get = 0, $irq_names$0 = 0, $irq_names1 = 0;
 var $irq_pool = 0, $irqs$addr$0 = 0, $isdigit = 0, $isdigit$us = 0, $isdigit53 = 0, $isdigit53$us = 0, $isdigittmp = 0, $isdigittmp$us = 0, $isdigittmp52 = 0, $isdigittmp52$us = 0, $kind$0$lcssa = 0, $kind$0$lcssa$us = 0, $kind$055 = 0, $kind$055$us = 0, $kind$1$lcssa = 0, $kind$1$lcssa$us = 0, $kind$161 = 0, $kind$161$us = 0, $kind20 = 0, $mul = 0;
 var $tobool = 0, $tobool12 = 0, $tobool12$us = 0, $tobool1259 = 0, $tobool1259$us = 0, $tobool2 = 0, $tobool40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $buf = sp;
 $irq_count = ((($io)) + 20|0);
 HEAP32[$irq_count>>2] = $count;
 $tobool = ($irqs|0)==(0|0);
 if (!($tobool)) {
  $irqs$addr$0 = $irqs;
  $irq = ((($io)) + 24|0);
  HEAP32[$irq>>2] = $irqs$addr$0;
  $irq_ioctl_get = ((($io)) + 16|0);
  HEAP32[$irq_ioctl_get>>2] = $ctl;
  STACKTOP = sp;return ($irqs$addr$0|0);
 }
 $irq_names1 = ((($io)) + 12|0);
 $0 = HEAP32[$irq_names1>>2]|0;
 $tobool2 = ($0|0)==(0|0);
 if ($tobool2) {
  $18 = 0;$irq_names$0 = 0;
 } else {
  $mul = $count << 2;
  $call = (_malloc($mul)|0);
  _memset(($call|0),0,($mul|0))|0;
  $cmp64 = ($count|0)>(0);
  L6: do {
   if ($cmp64) {
    $kind20 = ((($io)) + 8|0);
    $and = $ctl & 255;
    $cmp24 = ($and>>>0)>(32);
    if ($cmp24) {
     $1 = $0;$i$065$us = 0;
     while(1) {
      $arrayidx$us = (($1) + ($i$065$us<<2)|0);
      $2 = HEAP32[$arrayidx$us>>2]|0;
      $3 = HEAP8[$2>>0]|0;
      $conv51$us = $3 << 24 >> 24;
      $isdigittmp52$us = (($conv51$us) + -48)|0;
      $isdigit53$us = ($isdigittmp52$us>>>0)<(10);
      if ($isdigit53$us) {
       $7 = $3;$dst$054$us = $buf;$kind$055$us = $2;
       while(1) {
        $incdec$ptr$us = ((($kind$055$us)) + 1|0);
        $incdec$ptr8$us = ((($dst$054$us)) + 1|0);
        HEAP8[$dst$054$us>>0] = $7;
        $8 = HEAP8[$incdec$ptr$us>>0]|0;
        $conv$us = $8 << 24 >> 24;
        $isdigittmp$us = (($conv$us) + -48)|0;
        $isdigit$us = ($isdigittmp$us>>>0)<(10);
        if ($isdigit$us) {
         $7 = $8;$dst$054$us = $incdec$ptr8$us;$kind$055$us = $incdec$ptr$us;
        } else {
         $20 = $8;$conv1057$us$pre$phiZZ2D = $conv$us;$dst$0$lcssa$us = $incdec$ptr8$us;$kind$0$lcssa$us = $incdec$ptr$us;
         break;
        }
       }
      } else {
       $20 = $3;$conv1057$us$pre$phiZZ2D = $conv51$us;$dst$0$lcssa$us = $buf;$kind$0$lcssa$us = $2;
      }
      $call1158$us = (_isalpha($conv1057$us$pre$phiZZ2D)|0);
      $tobool1259$us = ($call1158$us|0)==(0);
      if ($tobool1259$us) {
       $5 = $20;$dst$160$us = $dst$0$lcssa$us;$kind$161$us = $kind$0$lcssa$us;
       while(1) {
        $incdec$ptr14$us = ((($kind$161$us)) + 1|0);
        $incdec$ptr15$us = ((($dst$160$us)) + 1|0);
        HEAP8[$dst$160$us>>0] = $5;
        $6 = HEAP8[$incdec$ptr14$us>>0]|0;
        $conv10$us = $6 << 24 >> 24;
        $call11$us = (_isalpha($conv10$us)|0);
        $tobool12$us = ($call11$us|0)==(0);
        if ($tobool12$us) {
         $5 = $6;$dst$160$us = $incdec$ptr15$us;$kind$161$us = $incdec$ptr14$us;
        } else {
         $dst$1$lcssa$us = $incdec$ptr15$us;$kind$1$lcssa$us = $incdec$ptr14$us;
         break;
        }
       }
      } else {
       $dst$1$lcssa$us = $dst$0$lcssa$us;$kind$1$lcssa$us = $kind$0$lcssa$us;
      }
      HEAP8[$dst$1$lcssa$us>>0]=7501409&255;HEAP8[$dst$1$lcssa$us+1>>0]=(7501409>>8)&255;HEAP8[$dst$1$lcssa$us+2>>0]=(7501409>>16)&255;HEAP8[$dst$1$lcssa$us+3>>0]=7501409>>24;
      $call18$us = (_strlen($dst$1$lcssa$us)|0);
      $add$ptr$us = (($dst$1$lcssa$us) + ($call18$us)|0);
      $incdec$ptr19$us = ((($add$ptr$us)) + 1|0);
      HEAP8[$add$ptr$us>>0] = 46;
      $4 = HEAP32[$kind20>>2]|0;
      (_strcpy($incdec$ptr19$us,$4)|0);
      $call22$us = (_strlen($incdec$ptr19$us)|0);
      $add$ptr23$us = (($incdec$ptr19$us) + ($call22$us)|0);
      $call28$us = (_tolower($and)|0);
      $conv29$us = $call28$us&255;
      $incdec$ptr30$us = ((($add$ptr23$us)) + 1|0);
      HEAP8[$add$ptr23$us>>0] = $conv29$us;
      $incdec$ptr31$us = ((($incdec$ptr30$us)) + 1|0);
      HEAP8[$incdec$ptr30$us>>0] = 46;
      (_strcpy($incdec$ptr31$us,$kind$1$lcssa$us)|0);
      $call33$us = (_strlen($incdec$ptr31$us)|0);
      $add$ptr34$us = (($incdec$ptr31$us) + ($call33$us)|0);
      HEAP8[$add$ptr34$us>>0] = 0;
      $call36$us = (___strdup($buf)|0);
      $arrayidx37$us = (($call) + ($i$065$us<<2)|0);
      HEAP32[$arrayidx37$us>>2] = $call36$us;
      $inc$us = (($i$065$us) + 1)|0;
      $exitcond67 = ($inc$us|0)==($count|0);
      if ($exitcond67) {
       break L6;
      }
      $$pre69 = HEAP32[$irq_names1>>2]|0;
      $1 = $$pre69;$i$065$us = $inc$us;
     }
    } else {
     $9 = $0;$i$065 = 0;
     while(1) {
      $arrayidx = (($9) + ($i$065<<2)|0);
      $10 = HEAP32[$arrayidx>>2]|0;
      $11 = HEAP8[$10>>0]|0;
      $conv51 = $11 << 24 >> 24;
      $isdigittmp52 = (($conv51) + -48)|0;
      $isdigit53 = ($isdigittmp52>>>0)<(10);
      if ($isdigit53) {
       $12 = $11;$dst$054 = $buf;$kind$055 = $10;
       while(1) {
        $incdec$ptr = ((($kind$055)) + 1|0);
        $incdec$ptr8 = ((($dst$054)) + 1|0);
        HEAP8[$dst$054>>0] = $12;
        $13 = HEAP8[$incdec$ptr>>0]|0;
        $conv = $13 << 24 >> 24;
        $isdigittmp = (($conv) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $12 = $13;$dst$054 = $incdec$ptr8;$kind$055 = $incdec$ptr;
        } else {
         $21 = $13;$conv1057$pre$phiZ2D = $conv;$dst$0$lcssa = $incdec$ptr8;$kind$0$lcssa = $incdec$ptr;
         break;
        }
       }
      } else {
       $21 = $11;$conv1057$pre$phiZ2D = $conv51;$dst$0$lcssa = $buf;$kind$0$lcssa = $10;
      }
      $call1158 = (_isalpha($conv1057$pre$phiZ2D)|0);
      $tobool1259 = ($call1158|0)==(0);
      if ($tobool1259) {
       $14 = $21;$dst$160 = $dst$0$lcssa;$kind$161 = $kind$0$lcssa;
       while(1) {
        $incdec$ptr14 = ((($kind$161)) + 1|0);
        $incdec$ptr15 = ((($dst$160)) + 1|0);
        HEAP8[$dst$160>>0] = $14;
        $15 = HEAP8[$incdec$ptr14>>0]|0;
        $conv10 = $15 << 24 >> 24;
        $call11 = (_isalpha($conv10)|0);
        $tobool12 = ($call11|0)==(0);
        if ($tobool12) {
         $14 = $15;$dst$160 = $incdec$ptr15;$kind$161 = $incdec$ptr14;
        } else {
         $dst$1$lcssa = $incdec$ptr15;$kind$1$lcssa = $incdec$ptr14;
         break;
        }
       }
      } else {
       $dst$1$lcssa = $dst$0$lcssa;$kind$1$lcssa = $kind$0$lcssa;
      }
      HEAP8[$dst$1$lcssa>>0]=7501409&255;HEAP8[$dst$1$lcssa+1>>0]=(7501409>>8)&255;HEAP8[$dst$1$lcssa+2>>0]=(7501409>>16)&255;HEAP8[$dst$1$lcssa+3>>0]=7501409>>24;
      $call18 = (_strlen($dst$1$lcssa)|0);
      $add$ptr = (($dst$1$lcssa) + ($call18)|0);
      $incdec$ptr19 = ((($add$ptr)) + 1|0);
      HEAP8[$add$ptr>>0] = 46;
      $16 = HEAP32[$kind20>>2]|0;
      (_strcpy($incdec$ptr19,$16)|0);
      $call22 = (_strlen($incdec$ptr19)|0);
      $add$ptr23 = (($incdec$ptr19) + ($call22)|0);
      $incdec$ptr31 = ((($add$ptr23)) + 1|0);
      HEAP8[$add$ptr23>>0] = 46;
      (_strcpy($incdec$ptr31,$kind$1$lcssa)|0);
      $call33 = (_strlen($incdec$ptr31)|0);
      $add$ptr34 = (($incdec$ptr31) + ($call33)|0);
      HEAP8[$add$ptr34>>0] = 0;
      $call36 = (___strdup($buf)|0);
      $arrayidx37 = (($call) + ($i$065<<2)|0);
      HEAP32[$arrayidx37>>2] = $call36;
      $inc = (($i$065) + 1)|0;
      $exitcond68 = ($inc|0)==($count|0);
      if ($exitcond68) {
       break L6;
      }
      $$pre = HEAP32[$irq_names1>>2]|0;
      $9 = $$pre;$i$065 = $inc;
     }
    }
   }
  } while(0);
  $18 = $call;$irq_names$0 = $call;
 }
 $avr = ((($io)) + 4|0);
 $17 = HEAP32[$avr>>2]|0;
 $irq_pool = ((($17)) + 112|0);
 $call39 = (_avr_alloc_irq($irq_pool,0,$count,$irq_names$0)|0);
 $tobool40 = ($irq_names$0|0)==(0|0);
 if ($tobool40) {
  $irqs$addr$0 = $call39;
  $irq = ((($io)) + 24|0);
  HEAP32[$irq>>2] = $irqs$addr$0;
  $irq_ioctl_get = ((($io)) + 16|0);
  HEAP32[$irq_ioctl_get>>2] = $ctl;
  STACKTOP = sp;return ($irqs$addr$0|0);
 }
 $cmp4449 = ($count|0)>(0);
 if ($cmp4449) {
  $i42$050 = 0;
  while(1) {
   $arrayidx48 = (($irq_names$0) + ($i42$050<<2)|0);
   $19 = HEAP32[$arrayidx48>>2]|0;
   _free($19);
   $inc50 = (($i42$050) + 1)|0;
   $exitcond = ($inc50|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $i42$050 = $inc50;
   }
  }
 }
 _free($18);
 $irqs$addr$0 = $call39;
 $irq = ((($io)) + 24|0);
 HEAP32[$irq>>2] = $irqs$addr$0;
 $irq_ioctl_get = ((($io)) + 16|0);
 HEAP32[$irq_ioctl_get>>2] = $ctl;
 STACKTOP = sp;return ($irqs$addr$0|0);
}
function _avr_cycle_timer_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$16 = 0;
 var $arrayidx$17 = 0, $arrayidx$18 = 0, $arrayidx$19 = 0, $arrayidx$2 = 0, $arrayidx$20 = 0, $arrayidx$21 = 0, $arrayidx$22 = 0, $arrayidx$23 = 0, $arrayidx$24 = 0, $arrayidx$25 = 0, $arrayidx$26 = 0, $arrayidx$27 = 0, $arrayidx$28 = 0, $arrayidx$29 = 0, $arrayidx$3 = 0, $arrayidx$30 = 0, $arrayidx$31 = 0, $arrayidx$32 = 0, $arrayidx$33 = 0, $arrayidx$34 = 0;
 var $arrayidx$35 = 0, $arrayidx$36 = 0, $arrayidx$37 = 0, $arrayidx$38 = 0, $arrayidx$39 = 0, $arrayidx$4 = 0, $arrayidx$40 = 0, $arrayidx$41 = 0, $arrayidx$42 = 0, $arrayidx$43 = 0, $arrayidx$44 = 0, $arrayidx$45 = 0, $arrayidx$46 = 0, $arrayidx$47 = 0, $arrayidx$48 = 0, $arrayidx$49 = 0, $arrayidx$5 = 0, $arrayidx$50 = 0, $arrayidx$51 = 0, $arrayidx$52 = 0;
 var $arrayidx$53 = 0, $arrayidx$54 = 0, $arrayidx$55 = 0, $arrayidx$56 = 0, $arrayidx$57 = 0, $arrayidx$58 = 0, $arrayidx$59 = 0, $arrayidx$6 = 0, $arrayidx$60 = 0, $arrayidx$61 = 0, $arrayidx$62 = 0, $arrayidx$63 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $cycle_timers = 0, $run_cycle_count = 0, $run_cycle_limit = 0, $timer_free = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cycle_timers = ((($avr)) + 5904|0);
 _memset(($cycle_timers|0),0,1544)|0;
 $timer_free = ((($avr)) + 7440|0);
 $arrayidx = ((($avr)) + 5904|0);
 HEAP32[$arrayidx>>2] = 0;
 $0 = $arrayidx;
 $arrayidx$1 = ((($avr)) + 5928|0);
 HEAP32[$arrayidx$1>>2] = $0;
 $1 = $arrayidx$1;
 $arrayidx$2 = ((($avr)) + 5952|0);
 HEAP32[$arrayidx$2>>2] = $1;
 $2 = $arrayidx$2;
 $arrayidx$3 = ((($avr)) + 5976|0);
 HEAP32[$arrayidx$3>>2] = $2;
 $3 = $arrayidx$3;
 $arrayidx$4 = ((($avr)) + 6000|0);
 HEAP32[$arrayidx$4>>2] = $3;
 $4 = $arrayidx$4;
 $arrayidx$5 = ((($avr)) + 6024|0);
 HEAP32[$arrayidx$5>>2] = $4;
 $5 = $arrayidx$5;
 $arrayidx$6 = ((($avr)) + 6048|0);
 HEAP32[$arrayidx$6>>2] = $5;
 $6 = $arrayidx$6;
 $arrayidx$7 = ((($avr)) + 6072|0);
 HEAP32[$arrayidx$7>>2] = $6;
 $7 = $arrayidx$7;
 $arrayidx$8 = ((($avr)) + 6096|0);
 HEAP32[$arrayidx$8>>2] = $7;
 $8 = $arrayidx$8;
 $arrayidx$9 = ((($avr)) + 6120|0);
 HEAP32[$arrayidx$9>>2] = $8;
 $9 = $arrayidx$9;
 $arrayidx$10 = ((($avr)) + 6144|0);
 HEAP32[$arrayidx$10>>2] = $9;
 $10 = $arrayidx$10;
 $arrayidx$11 = ((($avr)) + 6168|0);
 HEAP32[$arrayidx$11>>2] = $10;
 $11 = $arrayidx$11;
 $arrayidx$12 = ((($avr)) + 6192|0);
 HEAP32[$arrayidx$12>>2] = $11;
 $12 = $arrayidx$12;
 $arrayidx$13 = ((($avr)) + 6216|0);
 HEAP32[$arrayidx$13>>2] = $12;
 $13 = $arrayidx$13;
 $arrayidx$14 = ((($avr)) + 6240|0);
 HEAP32[$arrayidx$14>>2] = $13;
 $14 = $arrayidx$14;
 $arrayidx$15 = ((($avr)) + 6264|0);
 HEAP32[$arrayidx$15>>2] = $14;
 $15 = $arrayidx$15;
 $arrayidx$16 = ((($avr)) + 6288|0);
 HEAP32[$arrayidx$16>>2] = $15;
 $16 = $arrayidx$16;
 $arrayidx$17 = ((($avr)) + 6312|0);
 HEAP32[$arrayidx$17>>2] = $16;
 $17 = $arrayidx$17;
 $arrayidx$18 = ((($avr)) + 6336|0);
 HEAP32[$arrayidx$18>>2] = $17;
 $18 = $arrayidx$18;
 $arrayidx$19 = ((($avr)) + 6360|0);
 HEAP32[$arrayidx$19>>2] = $18;
 $19 = $arrayidx$19;
 $arrayidx$20 = ((($avr)) + 6384|0);
 HEAP32[$arrayidx$20>>2] = $19;
 $20 = $arrayidx$20;
 $arrayidx$21 = ((($avr)) + 6408|0);
 HEAP32[$arrayidx$21>>2] = $20;
 $21 = $arrayidx$21;
 $arrayidx$22 = ((($avr)) + 6432|0);
 HEAP32[$arrayidx$22>>2] = $21;
 $22 = $arrayidx$22;
 $arrayidx$23 = ((($avr)) + 6456|0);
 HEAP32[$arrayidx$23>>2] = $22;
 $23 = $arrayidx$23;
 $arrayidx$24 = ((($avr)) + 6480|0);
 HEAP32[$arrayidx$24>>2] = $23;
 $24 = $arrayidx$24;
 $arrayidx$25 = ((($avr)) + 6504|0);
 HEAP32[$arrayidx$25>>2] = $24;
 $25 = $arrayidx$25;
 $arrayidx$26 = ((($avr)) + 6528|0);
 HEAP32[$arrayidx$26>>2] = $25;
 $26 = $arrayidx$26;
 $arrayidx$27 = ((($avr)) + 6552|0);
 HEAP32[$arrayidx$27>>2] = $26;
 $27 = $arrayidx$27;
 $arrayidx$28 = ((($avr)) + 6576|0);
 HEAP32[$arrayidx$28>>2] = $27;
 $28 = $arrayidx$28;
 $arrayidx$29 = ((($avr)) + 6600|0);
 HEAP32[$arrayidx$29>>2] = $28;
 $29 = $arrayidx$29;
 $arrayidx$30 = ((($avr)) + 6624|0);
 HEAP32[$arrayidx$30>>2] = $29;
 $30 = $arrayidx$30;
 $arrayidx$31 = ((($avr)) + 6648|0);
 HEAP32[$arrayidx$31>>2] = $30;
 $31 = $arrayidx$31;
 $arrayidx$32 = ((($avr)) + 6672|0);
 HEAP32[$arrayidx$32>>2] = $31;
 $32 = $arrayidx$32;
 $arrayidx$33 = ((($avr)) + 6696|0);
 HEAP32[$arrayidx$33>>2] = $32;
 $33 = $arrayidx$33;
 $arrayidx$34 = ((($avr)) + 6720|0);
 HEAP32[$arrayidx$34>>2] = $33;
 $34 = $arrayidx$34;
 $arrayidx$35 = ((($avr)) + 6744|0);
 HEAP32[$arrayidx$35>>2] = $34;
 $35 = $arrayidx$35;
 $arrayidx$36 = ((($avr)) + 6768|0);
 HEAP32[$arrayidx$36>>2] = $35;
 $36 = $arrayidx$36;
 $arrayidx$37 = ((($avr)) + 6792|0);
 HEAP32[$arrayidx$37>>2] = $36;
 $37 = $arrayidx$37;
 $arrayidx$38 = ((($avr)) + 6816|0);
 HEAP32[$arrayidx$38>>2] = $37;
 $38 = $arrayidx$38;
 $arrayidx$39 = ((($avr)) + 6840|0);
 HEAP32[$arrayidx$39>>2] = $38;
 $39 = $arrayidx$39;
 $arrayidx$40 = ((($avr)) + 6864|0);
 HEAP32[$arrayidx$40>>2] = $39;
 $40 = $arrayidx$40;
 $arrayidx$41 = ((($avr)) + 6888|0);
 HEAP32[$arrayidx$41>>2] = $40;
 $41 = $arrayidx$41;
 $arrayidx$42 = ((($avr)) + 6912|0);
 HEAP32[$arrayidx$42>>2] = $41;
 $42 = $arrayidx$42;
 $arrayidx$43 = ((($avr)) + 6936|0);
 HEAP32[$arrayidx$43>>2] = $42;
 $43 = $arrayidx$43;
 $arrayidx$44 = ((($avr)) + 6960|0);
 HEAP32[$arrayidx$44>>2] = $43;
 $44 = $arrayidx$44;
 $arrayidx$45 = ((($avr)) + 6984|0);
 HEAP32[$arrayidx$45>>2] = $44;
 $45 = $arrayidx$45;
 $arrayidx$46 = ((($avr)) + 7008|0);
 HEAP32[$arrayidx$46>>2] = $45;
 $46 = $arrayidx$46;
 $arrayidx$47 = ((($avr)) + 7032|0);
 HEAP32[$arrayidx$47>>2] = $46;
 $47 = $arrayidx$47;
 $arrayidx$48 = ((($avr)) + 7056|0);
 HEAP32[$arrayidx$48>>2] = $47;
 $48 = $arrayidx$48;
 $arrayidx$49 = ((($avr)) + 7080|0);
 HEAP32[$arrayidx$49>>2] = $48;
 $49 = $arrayidx$49;
 $arrayidx$50 = ((($avr)) + 7104|0);
 HEAP32[$arrayidx$50>>2] = $49;
 $50 = $arrayidx$50;
 $arrayidx$51 = ((($avr)) + 7128|0);
 HEAP32[$arrayidx$51>>2] = $50;
 $51 = $arrayidx$51;
 $arrayidx$52 = ((($avr)) + 7152|0);
 HEAP32[$arrayidx$52>>2] = $51;
 $52 = $arrayidx$52;
 $arrayidx$53 = ((($avr)) + 7176|0);
 HEAP32[$arrayidx$53>>2] = $52;
 $53 = $arrayidx$53;
 $arrayidx$54 = ((($avr)) + 7200|0);
 HEAP32[$arrayidx$54>>2] = $53;
 $54 = $arrayidx$54;
 $arrayidx$55 = ((($avr)) + 7224|0);
 HEAP32[$arrayidx$55>>2] = $54;
 $55 = $arrayidx$55;
 $arrayidx$56 = ((($avr)) + 7248|0);
 HEAP32[$arrayidx$56>>2] = $55;
 $56 = $arrayidx$56;
 $arrayidx$57 = ((($avr)) + 7272|0);
 HEAP32[$arrayidx$57>>2] = $56;
 $57 = $arrayidx$57;
 $arrayidx$58 = ((($avr)) + 7296|0);
 HEAP32[$arrayidx$58>>2] = $57;
 $58 = $arrayidx$58;
 $arrayidx$59 = ((($avr)) + 7320|0);
 HEAP32[$arrayidx$59>>2] = $58;
 $59 = $arrayidx$59;
 $arrayidx$60 = ((($avr)) + 7344|0);
 HEAP32[$arrayidx$60>>2] = $59;
 $60 = $arrayidx$60;
 $arrayidx$61 = ((($avr)) + 7368|0);
 HEAP32[$arrayidx$61>>2] = $60;
 $61 = $arrayidx$61;
 $arrayidx$62 = ((($avr)) + 7392|0);
 HEAP32[$arrayidx$62>>2] = $61;
 $62 = $arrayidx$62;
 $arrayidx$63 = ((($avr)) + 7416|0);
 HEAP32[$arrayidx$63>>2] = $62;
 HEAP32[$timer_free>>2] = $arrayidx$63;
 $run_cycle_count = ((($avr)) + 64|0);
 $63 = $run_cycle_count;
 $64 = $63;
 HEAP32[$64>>2] = 1;
 $65 = (($63) + 4)|0;
 $66 = $65;
 HEAP32[$66>>2] = 0;
 $run_cycle_limit = ((($avr)) + 72|0);
 $67 = $run_cycle_limit;
 $68 = $67;
 HEAP32[$68>>2] = 1;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = 0;
 return;
}
function _avr_cycle_timer_register($avr,$0,$1,$timer,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $timer = $timer|0;
 $param = $param|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cmp$i = 0, $cmp4$i = 0, $cycle$i$i = 0, $cycle$i12 = 0, $last$020$i = 0, $last$020$i$phi = 0, $last$029$i = 0, $last$029$i$lcssa$pn = 0;
 var $last$029$i$phi = 0, $loop$0$i = 0, $loop$027$i = 0, $loop$030$i = 0, $param3$i = 0, $param4$i = 0, $run_cycle_count6$i$i$i = 0, $run_cycle_limit$i$i$i = 0, $t$0$i = 0, $t$018$i = 0, $t$021$i = 0, $timer1$i = 0, $timer2$i = 0, $timer3$i = 0, $timer_free = 0, $timer_free$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool12$i = 0;
 var $tobool19$i = 0, $tobool5$i = 0, $tobool7$i = 0, $tobool728$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $when$i$i = 0, $when$i$phi$trans$insert = 0, $when5$i = 0, $when8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $timer1$i = ((($avr)) + 7444|0);
 $t$018$i = HEAP32[$timer1$i>>2]|0;
 $tobool19$i = ($t$018$i|0)==(0|0);
 if ($tobool19$i) {
  $36 = 0;$38 = 1000;
 } else {
  $last$020$i = 0;$t$021$i = $t$018$i;
  while(1) {
   $timer2$i = ((($t$021$i)) + 16|0);
   $2 = HEAP32[$timer2$i>>2]|0;
   $cmp$i = ($2|0)==($timer|0);
   if ($cmp$i) {
    $param3$i = ((($t$021$i)) + 20|0);
    $3 = HEAP32[$param3$i>>2]|0;
    $cmp4$i = ($3|0)==($param|0);
    if ($cmp4$i) {
     label = 5;
     break;
    }
   }
   $t$0$i = HEAP32[$t$021$i>>2]|0;
   $tobool$i = ($t$0$i|0)==(0|0);
   if ($tobool$i) {
    $7 = $t$018$i;
    break;
   } else {
    $last$020$i$phi = $t$021$i;$t$021$i = $t$0$i;$last$020$i = $last$020$i$phi;
   }
  }
  if ((label|0) == 5) {
   $tobool5$i = ($last$020$i|0)==(0|0);
   $4 = HEAP32[$t$021$i>>2]|0;
   if ($tobool5$i) {
    HEAP32[$timer1$i>>2] = $4;
    $5 = $4;
    $113 = $5;
   } else {
    HEAP32[$last$020$i>>2] = $4;
    $113 = $t$018$i;
   }
   $timer_free$i = ((($avr)) + 7440|0);
   $6 = HEAP32[$timer_free$i>>2]|0;
   HEAP32[$t$021$i>>2] = $6;
   HEAP32[$timer_free$i>>2] = $t$021$i;
   $7 = $113;
  }
  $tobool$i$i = ($7|0)==(0|0);
  if ($tobool$i$i) {
   $36 = 0;$38 = 1000;
  } else {
   $when$i$i = ((($7)) + 8|0);
   $8 = $when$i$i;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = (($8) + 4)|0;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $cycle$i$i = ((($avr)) + 56|0);
   $14 = $cycle$i$i;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($13>>>0)>($19>>>0);
   $21 = ($10>>>0)>($16>>>0);
   $22 = ($13|0)==($19|0);
   $23 = $22 & $21;
   $24 = $20 | $23;
   $25 = (_i64Subtract(($10|0),($13|0),($16|0),($19|0))|0);
   $26 = (getTempRet0() | 0);
   $27 = $24 ? $25 : 0;
   $28 = $24 ? $26 : 0;
   $36 = $28;$38 = $27;
  }
 }
 $run_cycle_limit$i$i$i = ((($avr)) + 72|0);
 $29 = $run_cycle_limit$i$i$i;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34>>>0)<($36>>>0);
 $37 = ($31>>>0)<($38>>>0);
 $39 = ($34|0)==($36|0);
 $40 = $39 & $37;
 $41 = $35 | $40;
 $42 = $41 ? $31 : $38;
 $43 = $41 ? $34 : $36;
 $44 = ($42|0)==(0);
 $45 = ($43|0)==(0);
 $46 = $44 & $45;
 $47 = $46 ? 1 : $42;
 $48 = $46 ? 0 : $43;
 $run_cycle_count6$i$i$i = ((($avr)) + 64|0);
 $49 = $run_cycle_count6$i$i$i;
 $50 = $49;
 HEAP32[$50>>2] = $47;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $timer_free = ((($avr)) + 7440|0);
 $53 = HEAP32[$timer_free>>2]|0;
 $tobool = ($53|0)==(0|0);
 if ($tobool) {
  HEAP32[$vararg_buffer>>2] = 357109;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 64;
  _avr_global_logger($avr,1,357078,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $cycle$i12 = ((($avr)) + 56|0);
 $54 = $cycle$i12;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (_i64Add(($56|0),($59|0),($0|0),($1|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = HEAP32[$53>>2]|0;
 HEAP32[$timer_free>>2] = $62;
 HEAP32[$53>>2] = 0;
 $timer3$i = ((($53)) + 16|0);
 HEAP32[$timer3$i>>2] = $timer;
 $param4$i = ((($53)) + 20|0);
 HEAP32[$param4$i>>2] = $param;
 $when5$i = ((($53)) + 8|0);
 $63 = $when5$i;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = (($63) + 4)|0;
 $66 = $65;
 HEAP32[$66>>2] = $61;
 $loop$027$i = HEAP32[$timer1$i>>2]|0;
 $tobool728$i = ($loop$027$i|0)==(0|0);
 $67 = $loop$027$i;
 do {
  if ($tobool728$i) {
   label = 19;
  } else {
   $last$029$i = 0;$loop$030$i = $loop$027$i;
   while(1) {
    $when8$i = ((($loop$030$i)) + 8|0);
    $68 = $when8$i;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 4)|0;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73>>>0)>($61>>>0);
    $75 = ($70>>>0)>($60>>>0);
    $76 = ($73|0)==($61|0);
    $77 = $76 & $75;
    $78 = $74 | $77;
    if ($78) {
     label = 18;
     break;
    }
    $loop$0$i = HEAP32[$loop$030$i>>2]|0;
    $tobool7$i = ($loop$0$i|0)==(0|0);
    if ($tobool7$i) {
     $last$029$i$lcssa$pn = $loop$030$i;
     break;
    } else {
     $last$029$i$phi = $loop$030$i;$loop$030$i = $loop$0$i;$last$029$i = $last$029$i$phi;
    }
   }
   if ((label|0) == 18) {
    $tobool12$i = ($last$029$i|0)==(0|0);
    if ($tobool12$i) {
     label = 19;
     break;
    } else {
     $last$029$i$lcssa$pn = $last$029$i;
    }
   }
   $79 = HEAP32[$last$029$i$lcssa$pn>>2]|0;
   HEAP32[$53>>2] = $79;
   HEAP32[$last$029$i$lcssa$pn>>2] = $53;
   $when$i$phi$trans$insert = ((($loop$027$i)) + 8|0);
   $80 = $when$i$phi$trans$insert;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($80) + 4)|0;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $87 = $85;$89 = $82;
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$53>>2] = $67;
  HEAP32[$timer1$i>>2] = $53;
  $87 = $61;$89 = $60;
 }
 $86 = ($87>>>0)>($59>>>0);
 $88 = ($89>>>0)>($56>>>0);
 $90 = ($87|0)==($59|0);
 $91 = $90 & $88;
 $92 = $86 | $91;
 $93 = (_i64Subtract(($89|0),($87|0),($56|0),($59|0))|0);
 $94 = (getTempRet0() | 0);
 $95 = $92 ? $93 : 0;
 $96 = $92 ? $94 : 0;
 $97 = ($34>>>0)<($96>>>0);
 $98 = ($31>>>0)<($95>>>0);
 $99 = ($34|0)==($96|0);
 $100 = $99 & $98;
 $101 = $97 | $100;
 $102 = $101 ? $31 : $95;
 $103 = $101 ? $34 : $96;
 $104 = ($102|0)==(0);
 $105 = ($103|0)==(0);
 $106 = $104 & $105;
 $107 = $106 ? 1 : $102;
 $108 = $106 ? 0 : $103;
 $109 = $run_cycle_count6$i$i$i;
 $110 = $109;
 HEAP32[$110>>2] = $107;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 STACKTOP = sp;return;
}
function _avr_cycle_timer_cancel($avr,$timer,$param) {
 $avr = $avr|0;
 $timer = $timer|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $cycle$i = 0, $last$020 = 0, $last$020$phi = 0, $param3 = 0, $run_cycle_count6$i$i = 0, $run_cycle_limit$i$i = 0;
 var $t$0 = 0, $t$018 = 0, $t$021 = 0, $timer1 = 0, $timer2 = 0, $timer_free = 0, $tobool = 0, $tobool$i = 0, $tobool19 = 0, $tobool5 = 0, $when$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $timer1 = ((($avr)) + 7444|0);
 $t$018 = HEAP32[$timer1>>2]|0;
 $tobool19 = ($t$018|0)==(0|0);
 if ($tobool19) {
  $34 = 0;$36 = 1000;
 } else {
  $last$020 = 0;$t$021 = $t$018;
  while(1) {
   $timer2 = ((($t$021)) + 16|0);
   $0 = HEAP32[$timer2>>2]|0;
   $cmp = ($0|0)==($timer|0);
   if ($cmp) {
    $param3 = ((($t$021)) + 20|0);
    $1 = HEAP32[$param3>>2]|0;
    $cmp4 = ($1|0)==($param|0);
    if ($cmp4) {
     label = 5;
     break;
    }
   }
   $t$0 = HEAP32[$t$021>>2]|0;
   $tobool = ($t$0|0)==(0|0);
   if ($tobool) {
    $5 = $t$018;
    break;
   } else {
    $last$020$phi = $t$021;$t$021 = $t$0;$last$020 = $last$020$phi;
   }
  }
  if ((label|0) == 5) {
   $tobool5 = ($last$020|0)==(0|0);
   $2 = HEAP32[$t$021>>2]|0;
   if ($tobool5) {
    HEAP32[$timer1>>2] = $2;
    $3 = $2;
    $51 = $3;
   } else {
    HEAP32[$last$020>>2] = $2;
    $51 = $t$018;
   }
   $timer_free = ((($avr)) + 7440|0);
   $4 = HEAP32[$timer_free>>2]|0;
   HEAP32[$t$021>>2] = $4;
   HEAP32[$timer_free>>2] = $t$021;
   $5 = $51;
  }
  $tobool$i = ($5|0)==(0|0);
  if ($tobool$i) {
   $34 = 0;$36 = 1000;
  } else {
   $when$i = ((($5)) + 8|0);
   $6 = $when$i;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $cycle$i = ((($avr)) + 56|0);
   $12 = $cycle$i;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($11>>>0)>($17>>>0);
   $19 = ($8>>>0)>($14>>>0);
   $20 = ($11|0)==($17|0);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = (_i64Subtract(($8|0),($11|0),($14|0),($17|0))|0);
   $24 = (getTempRet0() | 0);
   $25 = $22 ? $23 : 0;
   $26 = $22 ? $24 : 0;
   $34 = $26;$36 = $25;
  }
 }
 $run_cycle_limit$i$i = ((($avr)) + 72|0);
 $27 = $run_cycle_limit$i$i;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32>>>0)<($34>>>0);
 $35 = ($29>>>0)<($36>>>0);
 $37 = ($32|0)==($34|0);
 $38 = $37 & $35;
 $39 = $33 | $38;
 $40 = $39 ? $29 : $36;
 $41 = $39 ? $32 : $34;
 $42 = ($40|0)==(0);
 $43 = ($41|0)==(0);
 $44 = $42 & $43;
 $45 = $44 ? 1 : $40;
 $46 = $44 ? 0 : $41;
 $run_cycle_count6$i$i = ((($avr)) + 64|0);
 $47 = $run_cycle_count6$i$i;
 $48 = $47;
 HEAP32[$48>>2] = $45;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 return;
}
function _avr_cycle_timer_register_usec($avr,$when,$timer,$param) {
 $avr = $avr|0;
 $when = $when|0;
 $timer = $timer|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $avr$idx = 0, $avr$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr$idx = ((($avr)) + 40|0);
 $avr$idx$val = HEAP32[$avr$idx>>2]|0;
 $0 = (___muldi3(($avr$idx$val|0),0,($when|0),0)|0);
 $1 = (getTempRet0() | 0);
 $2 = (___udivdi3(($0|0),($1|0),4000000,0)|0);
 $3 = (getTempRet0() | 0);
 _avr_cycle_timer_register($avr,$2,$3,$timer,$param);
 return;
}
function _avr_cycle_timer_status($avr,$timer,$param) {
 $avr = $avr|0;
 $timer = $timer|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cmp = 0, $cmp4 = 0, $cycle = 0, $param3 = 0, $t$0 = 0, $t$011 = 0, $t$09 = 0, $timer1 = 0, $timer2 = 0, $tobool = 0, $tobool10 = 0, $when = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $timer1 = ((($avr)) + 7444|0);
 $t$09 = HEAP32[$timer1>>2]|0;
 $tobool10 = ($t$09|0)==(0|0);
 if ($tobool10) {
  $18 = 0;$19 = 0;
  setTempRet0(($18) | 0);
  return ($19|0);
 }
 $t$011 = $t$09;
 while(1) {
  $timer2 = ((($t$011)) + 16|0);
  $0 = HEAP32[$timer2>>2]|0;
  $cmp = ($0|0)==($timer|0);
  if ($cmp) {
   $param3 = ((($t$011)) + 20|0);
   $1 = HEAP32[$param3>>2]|0;
   $cmp4 = ($1|0)==($param|0);
   if ($cmp4) {
    break;
   }
  }
  $t$0 = HEAP32[$t$011>>2]|0;
  $tobool = ($t$0|0)==(0|0);
  if ($tobool) {
   $18 = 0;$19 = 0;
   label = 7;
   break;
  } else {
   $t$011 = $t$0;
  }
 }
 if ((label|0) == 7) {
  setTempRet0(($18) | 0);
  return ($19|0);
 }
 $when = ((($t$011)) + 8|0);
 $2 = $when;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $cycle = ((($avr)) + 56|0);
 $8 = $cycle;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_i64Add(($4|0),($7|0),1,0)|0);
 $15 = (getTempRet0() | 0);
 $16 = (_i64Subtract(($14|0),($15|0),($10|0),($13|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = $17;$19 = $16;
 setTempRet0(($18) | 0);
 return ($19|0);
}
function _avr_cycle_timer_process($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cycle = 0, $last$029$i = 0, $last$029$i$lcssa$pn = 0, $last$029$i$phi = 0, $loop$0$i = 0, $loop$027$i = 0, $loop$030$i = 0, $param = 0, $param4$i = 0, $run_cycle_count6$i = 0, $run_cycle_limit$i = 0;
 var $run_cycle_limit$i35 = 0, $timer = 0, $timer3$i = 0, $timer8 = 0, $timer_free = 0, $tobool = 0, $tobool$i41 = 0, $tobool11 = 0, $tobool12$i = 0, $tobool26 = 0, $tobool7$i = 0, $tobool728$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $when2 = 0, $when5$i = 0, $when8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $timer = ((($avr)) + 7444|0);
 $0 = HEAP32[$timer>>2]|0;
 $tobool = ($0|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   $cycle = ((($avr)) + 56|0);
   $timer_free = ((($avr)) + 7440|0);
   $1 = $0;
   while(1) {
    $when2 = ((($1)) + 8|0);
    $2 = $when2;
    $3 = $2;
    $4 = HEAP32[$3>>2]|0;
    $5 = (($2) + 4)|0;
    $6 = $5;
    $7 = HEAP32[$6>>2]|0;
    $8 = $cycle;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = ($7>>>0)>($13>>>0);
    $15 = ($4>>>0)>($10>>>0);
    $16 = ($7|0)==($13|0);
    $17 = $16 & $15;
    $18 = $14 | $17;
    if ($18) {
     break;
    }
    $19 = HEAP32[$1>>2]|0;
    HEAP32[$timer>>2] = $19;
    HEAP32[$1>>2] = 0;
    $timer8 = ((($1)) + 16|0);
    $param = ((($1)) + 20|0);
    $22 = $4;$23 = $7;
    while(1) {
     $20 = HEAP32[$timer8>>2]|0;
     $21 = HEAP32[$param>>2]|0;
     $24 = (FUNCTION_TABLE_iiiii[$20 & 255]($avr,$22,$23,$21)|0);
     $25 = (getTempRet0() | 0);
     $26 = ($25>>>0)<($23>>>0);
     $27 = ($24>>>0)<=($22>>>0);
     $28 = ($25|0)==($23|0);
     $29 = $28 & $27;
     $30 = $26 | $29;
     $31 = ($24|0)==(0);
     $32 = ($25|0)==(0);
     $33 = $31 & $32;
     $tobool11 = $33 | $30;
     if ($tobool11) {
      break;
     }
     $34 = $cycle;
     $35 = $34;
     $36 = HEAP32[$35>>2]|0;
     $37 = (($34) + 4)|0;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = ($25>>>0)>($39>>>0);
     $41 = ($24>>>0)>($36>>>0);
     $42 = ($25|0)==($39|0);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      label = 7;
      break;
     } else {
      $22 = $24;$23 = $25;
     }
    }
    L9: do {
     if ((label|0) == 7) {
      label = 0;
      $45 = HEAP32[$timer_free>>2]|0;
      $tobool$i41 = ($45|0)==(0|0);
      if ($tobool$i41) {
       HEAP32[$vararg_buffer>>2] = 357170;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = 64;
       _avr_global_logger($avr,1,357134,$vararg_buffer);
       break;
      }
      $46 = HEAP32[$param>>2]|0;
      $47 = HEAP32[$timer8>>2]|0;
      $48 = HEAP32[$45>>2]|0;
      HEAP32[$timer_free>>2] = $48;
      HEAP32[$45>>2] = 0;
      $timer3$i = ((($45)) + 16|0);
      HEAP32[$timer3$i>>2] = $47;
      $param4$i = ((($45)) + 20|0);
      HEAP32[$param4$i>>2] = $46;
      $when5$i = ((($45)) + 8|0);
      $49 = $when5$i;
      $50 = $49;
      HEAP32[$50>>2] = $24;
      $51 = (($49) + 4)|0;
      $52 = $51;
      HEAP32[$52>>2] = $25;
      $loop$027$i = HEAP32[$timer>>2]|0;
      $tobool728$i = ($loop$027$i|0)==(0|0);
      $53 = $loop$027$i;
      do {
       if (!($tobool728$i)) {
        $last$029$i = 0;$loop$030$i = $loop$027$i;
        while(1) {
         $when8$i = ((($loop$030$i)) + 8|0);
         $54 = $when8$i;
         $55 = $54;
         $56 = HEAP32[$55>>2]|0;
         $57 = (($54) + 4)|0;
         $58 = $57;
         $59 = HEAP32[$58>>2]|0;
         $60 = ($59>>>0)>($25>>>0);
         $61 = ($56>>>0)>($24>>>0);
         $62 = ($59|0)==($25|0);
         $63 = $62 & $61;
         $64 = $60 | $63;
         if ($64) {
          label = 13;
          break;
         }
         $loop$0$i = HEAP32[$loop$030$i>>2]|0;
         $tobool7$i = ($loop$0$i|0)==(0|0);
         if ($tobool7$i) {
          $last$029$i$lcssa$pn = $loop$030$i;
          break;
         } else {
          $last$029$i$phi = $loop$030$i;$loop$030$i = $loop$0$i;$last$029$i = $last$029$i$phi;
         }
        }
        if ((label|0) == 13) {
         label = 0;
         $tobool12$i = ($last$029$i|0)==(0|0);
         if ($tobool12$i) {
          break;
         } else {
          $last$029$i$lcssa$pn = $last$029$i;
         }
        }
        $65 = HEAP32[$last$029$i$lcssa$pn>>2]|0;
        HEAP32[$45>>2] = $65;
        HEAP32[$last$029$i$lcssa$pn>>2] = $45;
        break L9;
       }
      } while(0);
      HEAP32[$45>>2] = $53;
      HEAP32[$timer>>2] = $45;
     }
    } while(0);
    $81 = HEAP32[$timer_free>>2]|0;
    HEAP32[$1>>2] = $81;
    HEAP32[$timer_free>>2] = $1;
    $82 = HEAP32[$timer>>2]|0;
    $tobool26 = ($82|0)==(0|0);
    if ($tobool26) {
     break L1;
    } else {
     $1 = $82;
    }
   }
   $66 = (_i64Subtract(($4|0),($7|0),($10|0),($13|0))|0);
   $67 = (getTempRet0() | 0);
   $run_cycle_limit$i = ((($avr)) + 72|0);
   $68 = $run_cycle_limit$i;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73>>>0)<($67>>>0);
   $75 = ($70>>>0)<($66>>>0);
   $76 = ($73|0)==($67|0);
   $77 = $76 & $75;
   $78 = $74 | $77;
   $79 = $78 ? $70 : $66;
   $80 = $78 ? $73 : $67;
   $107 = $67;$108 = $66;$97 = $79;$99 = $80;
   $96 = ($97|0)==(0);
   $98 = ($99|0)==(0);
   $100 = $96 & $98;
   $101 = $100 ? 1 : $97;
   $102 = $100 ? 0 : $99;
   $run_cycle_count6$i = ((($avr)) + 64|0);
   $103 = $run_cycle_count6$i;
   $104 = $103;
   HEAP32[$104>>2] = $101;
   $105 = (($103) + 4)|0;
   $106 = $105;
   HEAP32[$106>>2] = $102;
   setTempRet0(($107) | 0);
   STACKTOP = sp;return ($108|0);
  }
 } while(0);
 $run_cycle_limit$i35 = ((($avr)) + 72|0);
 $83 = $run_cycle_limit$i35;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88>>>0)<(0);
 $90 = ($85>>>0)<(1000);
 $91 = ($88|0)==(0);
 $92 = $91 & $90;
 $93 = $89 | $92;
 $94 = $93 ? $85 : 1000;
 $95 = $93 ? $88 : 0;
 $107 = 0;$108 = 1000;$97 = $94;$99 = $95;
 $96 = ($97|0)==(0);
 $98 = ($99|0)==(0);
 $100 = $96 & $98;
 $101 = $100 ? 1 : $97;
 $102 = $100 ? 0 : $99;
 $run_cycle_count6$i = ((($avr)) + 64|0);
 $103 = $run_cycle_count6$i;
 $104 = $103;
 HEAP32[$104>>2] = $101;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = $102;
 setTempRet0(($107) | 0);
 STACKTOP = sp;return ($108|0);
}
function _avr_vcd_init($avr,$filename,$vcd,$period) {
 $avr = $avr|0;
 $filename = $filename|0;
 $vcd = $vcd|0;
 $period = $period|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arraydecay = 0, $period5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($vcd|0),0,4216)|0;
 HEAP32[$vcd>>2] = $avr;
 $arraydecay = ((($vcd)) + 4|0);
 (_strncpy($arraydecay,$filename,74)|0);
 $0 = HEAP32[$vcd>>2]|0;
 $$idx = ((($0)) + 40|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = (___muldi3(($$idx$val|0),0,($period|0),0)|0);
 $2 = (getTempRet0() | 0);
 $3 = (___udivdi3(($1|0),($2|0),4000000,0)|0);
 $4 = (getTempRet0() | 0);
 $period5 = ((($vcd)) + 4184|0);
 $5 = $period5;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 return 0;
}
function __avr_vcd_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $period = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_vcd_flush_log($param);
 $period = ((($param)) + 4184|0);
 $2 = $period;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_i64Add(($4|0),($7|0),($0|0),($1|0))|0);
 $9 = (getTempRet0() | 0);
 setTempRet0(($9) | 0);
 return ($8|0);
}
function _avr_vcd_flush_log($vcd) {
 $vcd = $vcd|0;
 var $$idx = 0, $$idx$val = 0, $$pre16$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $alias$i = 0, $and$i = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp2$i = 0, $cmp213$i = 0, $cmp5$i = 0, $conv$i27 = 0;
 var $div$i = 0, $dst$114$i = 0, $dst$114$i$ph = 0, $dst$2$i = 0, $i$015$i = 0, $inc26 = 0, $incdec$ptr$i = 0, $incdec$ptr10$i = 0, $incdec$ptr3$i = 0, $incdec$ptr8$i = 0, $irq19 = 0, $irq4 = 0, $li$032 = 0, $log = 0, $logindex = 0, $or$cond = 0, $out = 0, $output = 0, $shl = 0, $shl$i = 0;
 var $shl20 = 0, $signal = 0, $signal17 = 0, $size$i = 0, $start = 0, $sub$i = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $when = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $out = sp;
 $logindex = ((($vcd)) + 4204|0);
 $0 = HEAP32[$logindex>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $output = ((($vcd)) + 80|0);
 $1 = HEAP32[$output>>2]|0;
 $tobool1 = ($1|0)==(0|0);
 if ($tobool1) {
  STACKTOP = sp;return;
 }
 $log = ((($vcd)) + 4208|0);
 $start = ((($vcd)) + 4192|0);
 $incdec$ptr$i = ((($out)) + 1|0);
 $23 = 0;$25 = 0;$32 = 0;$34 = 0;$li$032 = 0;
 while(1) {
  $2 = HEAP32[$log>>2]|0;
  $3 = HEAP32[$vcd>>2]|0;
  $when = (($2) + ($li$032<<4)|0);
  $4 = $when;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $start;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_i64Subtract(($6|0),($9|0),($12|0),($15|0))|0);
  $17 = (getTempRet0() | 0);
  $$idx = ((($3)) + 40|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $18 = (___muldi3(($16|0),($17|0),1000000,0)|0);
  $19 = (getTempRet0() | 0);
  $div$i = (($$idx$val>>>0) / 1000)&-1;
  $20 = (___udivdi3(($18|0),($19|0),($div$i|0),0)|0);
  $21 = (getTempRet0() | 0);
  $22 = ($20|0)==($23|0);
  $24 = ($21|0)==($25|0);
  $26 = $22 & $24;
  if ($26) {
   $signal = (((($2) + ($li$032<<4)|0)) + 8|0);
   $27 = HEAP32[$signal>>2]|0;
   $irq4 = ((($27)) + 8|0);
   $28 = HEAP32[$irq4>>2]|0;
   $shl = 1 << $28;
   $29 = ($shl|0)<(0);
   $30 = $29 << 31 >> 31;
   $31 = $32 & $shl;
   $33 = $34 & $30;
   $35 = ($31|0)!=(0);
   $36 = ($33|0)!=(0);
   $37 = $35 | $36;
   $38 = $37&1;
   $39 = (_i64Add(($23|0),($25|0),($38|0),0)|0);
   $40 = (getTempRet0() | 0);
   $42 = $40;$44 = $39;
  } else {
   $42 = $21;$44 = $20;
  }
  $41 = ($42>>>0)>($25>>>0);
  $43 = ($44>>>0)>($23>>>0);
  $45 = ($42|0)==($25|0);
  $46 = $45 & $43;
  $47 = $41 | $46;
  $cmp11 = ($li$032|0)==(0);
  $or$cond = $cmp11 | $47;
  if ($or$cond) {
   $48 = HEAP32[$output>>2]|0;
   $49 = $vararg_buffer;
   $50 = $49;
   HEAP32[$50>>2] = $44;
   $51 = (($49) + 4)|0;
   $52 = $51;
   HEAP32[$52>>2] = $42;
   (_fprintf($48,357193,$vararg_buffer)|0);
   $58 = 0;$60 = 0;$66 = $44;$67 = $42;
  } else {
   $58 = $32;$60 = $34;$66 = $23;$67 = $25;
  }
  $signal17 = (((($2) + ($li$032<<4)|0)) + 8|0);
  $53 = HEAP32[$signal17>>2]|0;
  $irq19 = ((($53)) + 8|0);
  $54 = HEAP32[$irq19>>2]|0;
  $shl20 = 1 << $54;
  $55 = ($shl20|0)<(0);
  $56 = $55 << 31 >> 31;
  $57 = $58 | $shl20;
  $59 = $60 | $56;
  $61 = HEAP32[$output>>2]|0;
  $value = (((($2) + ($li$032<<4)|0)) + 12|0);
  $62 = HEAP32[$value>>2]|0;
  $size$i = ((($53)) + 28|0);
  $63 = HEAP32[$size$i>>2]|0;
  $cmp$i = ($63|0)>(1);
  if ($cmp$i) {
   HEAP8[$out>>0] = 98;
   $dst$114$i$ph = $incdec$ptr$i;
   label = 12;
  } else {
   $cmp213$i = ($63|0)==(1);
   if ($cmp213$i) {
    $dst$114$i$ph = $out;
    label = 12;
   } else {
    $dst$2$i = $out;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $dst$114$i = $dst$114$i$ph;$i$015$i = $63;
   while(1) {
    $sub$i = (($i$015$i) + -1)|0;
    $shl$i = 1 << $sub$i;
    $and$i = $shl$i & $62;
    $tobool$i = ($and$i|0)==(0);
    $conv$i27 = $tobool$i ? 48 : 49;
    $incdec$ptr3$i = ((($dst$114$i)) + 1|0);
    HEAP8[$dst$114$i>>0] = $conv$i27;
    $cmp2$i = ($i$015$i|0)>(1);
    if ($cmp2$i) {
     $dst$114$i = $incdec$ptr3$i;$i$015$i = $sub$i;
    } else {
     break;
    }
   }
   $$pre16$i = HEAP32[$size$i>>2]|0;
   $cmp5$i = ($$pre16$i|0)>(1);
   if ($cmp5$i) {
    $incdec$ptr8$i = ((($dst$114$i)) + 2|0);
    HEAP8[$incdec$ptr3$i>>0] = 32;
    $dst$2$i = $incdec$ptr8$i;
   } else {
    $dst$2$i = $incdec$ptr3$i;
   }
  }
  $alias$i = ((($53)) + 24|0);
  $64 = HEAP8[$alias$i>>0]|0;
  $incdec$ptr10$i = ((($dst$2$i)) + 1|0);
  HEAP8[$dst$2$i>>0] = $64;
  HEAP8[$incdec$ptr10$i>>0] = 0;
  HEAP32[$vararg_buffer1>>2] = $out;
  (_fprintf($61,357551,$vararg_buffer1)|0);
  $inc26 = (($li$032) + 1)|0;
  $65 = HEAP32[$logindex>>2]|0;
  $cmp = ($inc26>>>0)<($65>>>0);
  if ($cmp) {
   $23 = $66;$25 = $67;$32 = $57;$34 = $59;$li$032 = $inc26;
  } else {
   break;
  }
 }
 HEAP32[$logindex>>2] = 0;
 STACKTOP = sp;return;
}
function _avr_vcd_stop($vcd) {
 $vcd = $vcd|0;
 var $0 = 0, $1 = 0, $output = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vcd>>2]|0;
 _avr_cycle_timer_cancel($0,86,$vcd);
 _avr_vcd_flush_log($vcd);
 $output = ((($vcd)) + 80|0);
 $1 = HEAP32[$output>>2]|0;
 $tobool = ($1|0)==(0|0);
 if ($tobool) {
  HEAP32[$output>>2] = 0;
  return 0;
 }
 (_fclose($1)|0);
 HEAP32[$output>>2] = 0;
 return 0;
}
function __avr_vcd_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$pre = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $avr28$pre$phiZ2D = 0, $call = 0, $cmp = 0, $cmp7 = 0, $cycle = 0, $div$mask = 0, $inc = 0, $log = 0, $log26$phi$trans$insert = 0, $logindex = 0, $logsize = 0, $mul = 0, $output = 0;
 var $signal = 0, $tobool = 0, $tobool16 = 0, $value29 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $when = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $output = ((($param)) + 80|0);
 $0 = HEAP32[$output>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $logindex = ((($param)) + 4204|0);
 $1 = HEAP32[$logindex>>2]|0;
 $logsize = ((($param)) + 4200|0);
 $2 = HEAP32[$logsize>>2]|0;
 $cmp = ($1>>>0)<($2>>>0);
 do {
  if ($cmp) {
   $log26$phi$trans$insert = ((($param)) + 4208|0);
   $$pre = HEAP32[$log26$phi$trans$insert>>2]|0;
   $11 = $1;$12 = $$pre;$avr28$pre$phiZ2D = $param;
  } else {
   $add = (($2) + 64)|0;
   HEAP32[$logsize>>2] = $add;
   $log = ((($param)) + 4208|0);
   $3 = HEAP32[$log>>2]|0;
   $mul = $add << 4;
   $call = (_realloc($3,$mul)|0);
   HEAP32[$log>>2] = $call;
   $4 = HEAP32[$param>>2]|0;
   $5 = HEAP32[$logsize>>2]|0;
   HEAP32[$vararg_buffer>>2] = 357231;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $5;
   _avr_global_logger($4,3,357200,$vararg_buffer);
   $6 = HEAP32[$logsize>>2]|0;
   $div$mask = $6 & -64;
   $cmp7 = ($div$mask|0)==(320);
   if ($cmp7) {
    $7 = HEAP32[$param>>2]|0;
    HEAP32[$vararg_buffer2>>2] = 357231;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $6;
    _avr_global_logger($7,2,357247,$vararg_buffer2);
   }
   $8 = HEAP32[$log>>2]|0;
   $tobool16 = ($8|0)==(0|0);
   if (!($tobool16)) {
    $$pre24 = HEAP32[$logindex>>2]|0;
    $11 = $$pre24;$12 = $8;$avr28$pre$phiZ2D = $param;
    break;
   }
   $9 = HEAP32[$param>>2]|0;
   $10 = HEAP32[$logsize>>2]|0;
   HEAP32[$vararg_buffer6>>2] = 357231;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $10;
   _avr_global_logger($9,1,357289,$vararg_buffer6);
   HEAP32[$logsize>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $inc = (($11) + 1)|0;
 HEAP32[$logindex>>2] = $inc;
 $signal = (((($12) + ($11<<4)|0)) + 8|0);
 HEAP32[$signal>>2] = $irq;
 $13 = HEAP32[$avr28$pre$phiZ2D>>2]|0;
 $cycle = ((($13)) + 56|0);
 $14 = $cycle;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $when = (($12) + ($11<<4)|0);
 $20 = $when;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 $value29 = (((($12) + ($11<<4)|0)) + 12|0);
 HEAP32[$value29>>2] = $value;
 STACKTOP = sp;return;
}
function _avr_vcd_add_signal($vcd,$signal_irq,$signal_bit_size,$name) {
 $vcd = $vcd|0;
 $signal_irq = $signal_irq|0;
 $signal_bit_size = $signal_bit_size|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add6 = 0, $alias = 0, $arraydecay = 0, $call4 = 0, $cmp = 0, $cmp7 = 0, $conv = 0, $inc = 0, $irq = 0, $irq_pool = 0, $names = 0, $retval$0 = 0, $signal_count = 0, $size = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vla = 0, $vla$alloca_mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $names = sp + 12|0;
 $signal_count = ((($vcd)) + 84|0);
 $0 = HEAP32[$signal_count>>2]|0;
 $cmp = ($0|0)==(64);
 if ($cmp) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $inc = (($0) + 1)|0;
 HEAP32[$signal_count>>2] = $inc;
 $arraydecay = (((((($vcd)) + 88|0) + ($0<<6)|0)) + 32|0);
 (_strncpy($arraydecay,$name,32)|0);
 $size = (((((($vcd)) + 88|0) + ($0<<6)|0)) + 28|0);
 HEAP32[$size>>2] = $signal_bit_size;
 $1 = HEAP32[$signal_count>>2]|0;
 $add = (($1) + 32)|0;
 $conv = $add&255;
 $alias = (((((($vcd)) + 88|0) + ($0<<6)|0)) + 24|0);
 HEAP8[$alias>>0] = $conv;
 $call4 = (_strlen($name)|0);
 $add6 = (($call4) + 11)|0;
 $2 = (_llvm_stacksave()|0);
 $vla$alloca_mul = $add6;
 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$vla$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$vla$alloca_mul)|0)+15)&-16)|0);;
 $cmp7 = ($signal_bit_size|0)>(1);
 if ($cmp7) {
  HEAP32[$vararg_buffer>>2] = $signal_bit_size;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $name;
  (_sprintf($vla,357327,$vararg_buffer)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = $name;
  (_sprintf($vla,357337,$vararg_buffer2)|0);
 }
 HEAP32[$names>>2] = $vla;
 $3 = HEAP32[$vcd>>2]|0;
 $irq_pool = ((($3)) + 112|0);
 $irq = (((($vcd)) + 88|0) + ($0<<6)|0);
 _avr_init_irq($irq_pool,$irq,$0,1,$names);
 _avr_irq_register_notify($irq,87,$vcd);
 _avr_connect_irq($signal_irq,$irq);
 _llvm_stackrestore(($2|0));
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _avr_vcd_start($vcd) {
 $vcd = $vcd|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alias = 0, $alias$i = 0, $arraydecay = 0, $arraydecay18 = 0, $call1 = 0, $cmp = 0, $cmp$i = 0, $cmp12 = 0, $cmp1239 = 0, $cmp212$i = 0, $cmp29 = 0, $cmp2937 = 0, $conv = 0, $cycle = 0, $dst$0$i36 = 0, $dst$2$i = 0;
 var $i$040 = 0, $i26$038 = 0, $inc = 0, $inc40 = 0, $incdec$ptr$i = 0, $incdec$ptr7$i = 0, $incdec$ptr9$i = 0, $logindex = 0, $out = 0, $output = 0, $period = 0, $retval$0 = 0, $scevgep = 0, $scevgep43 = 0, $scevgep44 = 0, $scevgep45 = 0, $signal_count = 0, $size = 0, $size$i = 0, $smax = 0;
 var $smax$i = 0, $start = 0, $tobool = 0, $tobool$i = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer3 = sp + 64|0;
 $vararg_buffer = sp + 48|0;
 $out = sp;
 $output = ((($vcd)) + 80|0);
 $0 = HEAP32[$output>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $1 = HEAP32[$vcd>>2]|0;
  _avr_cycle_timer_cancel($1,86,$vcd);
  _avr_vcd_flush_log($vcd);
  $2 = HEAP32[$output>>2]|0;
  $tobool$i = ($2|0)==(0|0);
  if (!($tobool$i)) {
   (_fclose($2)|0);
  }
  HEAP32[$output>>2] = 0;
 }
 $arraydecay = ((($vcd)) + 4|0);
 $call1 = (_fopen($arraydecay,357345)|0);
 HEAP32[$output>>2] = $call1;
 $cmp = ($call1|0)==(0|0);
 if ($cmp) {
  _perror($arraydecay);
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 (_fwrite(357347,20,1,$call1)|0);
 $3 = HEAP32[$output>>2]|0;
 (_fwrite(357368,25,1,$3)|0);
 $signal_count = ((($vcd)) + 84|0);
 $4 = HEAP32[$signal_count>>2]|0;
 $cmp1239 = ($4|0)>(0);
 $5 = HEAP32[$output>>2]|0;
 if ($cmp1239) {
  $11 = $5;$i$040 = 0;
  while(1) {
   $size = (((((($vcd)) + 88|0) + ($i$040<<6)|0)) + 28|0);
   $9 = HEAP32[$size>>2]|0;
   $alias = (((((($vcd)) + 88|0) + ($i$040<<6)|0)) + 24|0);
   $10 = HEAP8[$alias>>0]|0;
   $conv = $10 << 24 >> 24;
   $arraydecay18 = (((((($vcd)) + 88|0) + ($i$040<<6)|0)) + 32|0);
   HEAP32[$vararg_buffer>>2] = $9;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $conv;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $arraydecay18;
   (_fprintf($11,357442,$vararg_buffer)|0);
   $inc = (($i$040) + 1)|0;
   $12 = HEAP32[$signal_count>>2]|0;
   $cmp12 = ($inc|0)<($12|0);
   $13 = HEAP32[$output>>2]|0;
   if ($cmp12) {
    $11 = $13;$i$040 = $inc;
   } else {
    $$lcssa = $13;
    break;
   }
  }
 } else {
  $$lcssa = $5;
 }
 (_fwrite(357394,14,1,$$lcssa)|0);
 $6 = HEAP32[$output>>2]|0;
 (_fwrite(357409,21,1,$6)|0);
 $7 = HEAP32[$output>>2]|0;
 (_fwrite(357431,10,1,$7)|0);
 $8 = HEAP32[$signal_count>>2]|0;
 $cmp2937 = ($8|0)>(0);
 if ($cmp2937) {
  $incdec$ptr$i = ((($out)) + 1|0);
  $i26$038 = 0;
  while(1) {
   $32 = HEAP32[$output>>2]|0;
   $size$i = (((((($vcd)) + 88|0) + ($i26$038<<6)|0)) + 28|0);
   $33 = HEAP32[$size$i>>2]|0;
   $cmp$i = ($33|0)>(1);
   if ($cmp$i) {
    HEAP8[$out>>0] = 98;
    $dst$0$i36 = $incdec$ptr$i;
    label = 16;
   } else {
    $cmp212$i = ($33|0)==(1);
    if ($cmp212$i) {
     $dst$0$i36 = $out;
     label = 16;
    } else {
     $dst$2$i = $out;
    }
   }
   if ((label|0) == 16) {
    label = 0;
    $34 = $33 ^ -1;
    $35 = ($34|0)>(-2);
    $smax$i = $35 ? $34 : -2;
    $36 = (($33) + 2)|0;
    $37 = (($36) + ($smax$i))|0;
    _memset(($dst$0$i36|0),120,($37|0))|0;
    $38 = $33 ^ -1;
    $39 = ($38|0)>(-2);
    $smax = $39 ? $38 : -2;
    $40 = (($33) + ($smax))|0;
    $scevgep44 = ((($dst$0$i36)) + 2|0);
    $scevgep45 = (($scevgep44) + ($40)|0);
    if ($cmp$i) {
     $scevgep = ((($dst$0$i36)) + 1|0);
     $scevgep43 = (($scevgep) + ($40)|0);
     $incdec$ptr7$i = ((($scevgep43)) + 2|0);
     HEAP8[$scevgep45>>0] = 32;
     $dst$2$i = $incdec$ptr7$i;
    } else {
     $dst$2$i = $scevgep45;
    }
   }
   $alias$i = (((((($vcd)) + 88|0) + ($i26$038<<6)|0)) + 24|0);
   $41 = HEAP8[$alias$i>>0]|0;
   $incdec$ptr9$i = ((($dst$2$i)) + 1|0);
   HEAP8[$dst$2$i>>0] = $41;
   HEAP8[$incdec$ptr9$i>>0] = 0;
   HEAP32[$vararg_buffer3>>2] = $out;
   (_fprintf($32,357551,$vararg_buffer3)|0);
   $inc40 = (($i26$038) + 1)|0;
   $42 = HEAP32[$signal_count>>2]|0;
   $cmp29 = ($inc40|0)<($42|0);
   if ($cmp29) {
    $i26$038 = $inc40;
   } else {
    break;
   }
  }
 }
 $14 = HEAP32[$output>>2]|0;
 (_fwrite(357467,5,1,$14)|0);
 $logindex = ((($vcd)) + 4204|0);
 HEAP32[$logindex>>2] = 0;
 $15 = HEAP32[$vcd>>2]|0;
 $cycle = ((($15)) + 56|0);
 $16 = $cycle;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $start = ((($vcd)) + 4192|0);
 $22 = $start;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $period = ((($vcd)) + 4184|0);
 $26 = $period;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 _avr_cycle_timer_register($15,$28,$31,86,$vcd);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _avr_global_logger($avr,$level,$format,$varargs) {
 $avr = $avr|0;
 $level = $level|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $args = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $args = sp;
 HEAP32[$args>>2] = $varargs;
 $tobool = (88|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 _std_logger($avr,$level,$format,$args);
 STACKTOP = sp;return;
}
function _std_logger($avr,$level,$format,$ap) {
 $avr = $avr|0;
 $level = $level|0;
 $format = $format|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $bf$clear = 0, $bf$load = 0, $bf$lshr = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $conv = 0, $log = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($avr|0)==(0|0);
 if (!($tobool)) {
  $log = ((($avr)) + 8280|0);
  $bf$load = HEAP8[$log>>0]|0;
  $bf$lshr = ($bf$load&255) >>> 1;
  $bf$clear = $bf$lshr & 3;
  $conv = $bf$clear&255;
  $cmp = ($conv|0)<($level|0);
  if ($cmp) {
   return;
  }
 }
 $cmp2 = ($level|0)>(1);
 $0 = HEAP32[88639]|0;
 $1 = HEAP32[88638]|0;
 $cond = $cmp2 ? $0 : $1;
 (_vfprintf($cond,$format,$ap)|0);
 return;
}
function _avr_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add5 = 0, $address_size = 0, $bf$clear = 0, $bf$load = 0, $bf$set = 0, $call = 0, $call6 = 0, $codeend = 0, $conv = 0, $conv22 = 0, $data = 0, $data14 = 0;
 var $eind = 0, $flash = 0, $flashend = 0, $frequency = 0, $init = 0, $init15 = 0, $log = 0, $ramend = 0, $run = 0, $sleep = 0, $state = 0, $tobool = 0, $tobool16 = 0, $tobool21 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $flashend = ((($avr)) + 8|0);
 $0 = HEAP32[$flashend>>2]|0;
 $add = (($0) + 1)|0;
 $call = (_malloc($add)|0);
 $flash = ((($avr)) + 5888|0);
 HEAP32[$flash>>2] = $call;
 _memset(($call|0),-1,($add|0))|0;
 $codeend = ((($avr)) + 32|0);
 HEAP32[$codeend>>2] = $0;
 $ramend = ((($avr)) + 4|0);
 $1 = HEAP16[$ramend>>1]|0;
 $conv = $1&65535;
 $add5 = (($conv) + 1)|0;
 $call6 = (_malloc($add5)|0);
 $data = ((($avr)) + 5892|0);
 HEAP32[$data>>2] = $call6;
 _memset(($call6|0),0,($add5|0))|0;
 $2 = HEAP32[$avr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 _avr_global_logger($avr,3,357473,$vararg_buffer);
 $state = ((($avr)) + 36|0);
 HEAP32[$state>>2] = 0;
 $frequency = ((($avr)) + 40|0);
 HEAP32[$frequency>>2] = 1000000;
 _avr_interrupt_init($avr);
 $init = ((($avr)) + 92|0);
 $3 = HEAP32[$init>>2]|0;
 $tobool = ($3|0)==(0|0);
 if (!($tobool)) {
  $data14 = ((($avr)) + 100|0);
  $4 = HEAP32[$data14>>2]|0;
  FUNCTION_TABLE_vii[$3 & 255]($avr,$4);
 }
 $init15 = ((($avr)) + 84|0);
 $5 = HEAP32[$init15>>2]|0;
 $tobool16 = ($5|0)==(0|0);
 if (!($tobool16)) {
  FUNCTION_TABLE_vi[$5 & 255]($avr);
 }
 $run = ((($avr)) + 104|0);
 HEAP32[$run>>2] = 89;
 $sleep = ((($avr)) + 108|0);
 HEAP32[$sleep>>2] = 90;
 $eind = ((($avr)) + 26|0);
 $6 = HEAP16[$eind>>1]|0;
 $tobool21 = ($6<<16>>16)==(0);
 $conv22 = $tobool21 ? 2 : 3;
 $address_size = ((($avr)) + 28|0);
 HEAP8[$address_size>>0] = $conv22;
 $log = ((($avr)) + 8280|0);
 $bf$load = HEAP8[$log>>0]|0;
 $bf$clear = $bf$load & -7;
 $bf$set = $bf$clear | 2;
 HEAP8[$log>>0] = $bf$set;
 _avr_reset($avr);
 STACKTOP = sp;return 0;
}
function _avr_callback_run_raw($avr) {
 $avr = $avr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $bf$clear = 0, $bf$load = 0, $call = 0, $cmp = 0, $cmp4 = 0, $cycle = 0, $interrupt_state = 0, $log = 0, $new_pc$0 = 0, $pc = 0, $sleep12 = 0, $state = 0, $switch = 0, $tobool = 0;
 var $tobool20 = 0, $tobool7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $pc = ((($avr)) + 132|0);
 $0 = HEAP32[$pc>>2]|0;
 $state = ((($avr)) + 36|0);
 $1 = HEAP32[$state>>2]|0;
 $cmp = ($1|0)==(2);
 if ($cmp) {
  $call = (_avr_run_one($avr)|0);
  $new_pc$0 = $call;
 } else {
  $new_pc$0 = $0;
 }
 $2 = (_avr_cycle_timer_process($avr)|0);
 $3 = (getTempRet0() | 0);
 HEAP32[$pc>>2] = $new_pc$0;
 $4 = HEAP32[$state>>2]|0;
 $cmp4 = ($4|0)==(3);
 do {
  if ($cmp4) {
   $arrayidx = ((($avr)) + 127|0);
   $5 = HEAP8[$arrayidx>>0]|0;
   $tobool = ($5<<24>>24)==(0);
   if (!($tobool)) {
    $sleep12 = ((($avr)) + 108|0);
    $6 = HEAP32[$sleep12>>2]|0;
    FUNCTION_TABLE_viii[$6 & 255]($avr,$2,$3);
    $7 = (_i64Add(($2|0),($3|0),1,0)|0);
    $8 = (getTempRet0() | 0);
    $cycle = ((($avr)) + 56|0);
    $9 = $cycle;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = (_i64Add(($7|0),($8|0),($11|0),($14|0))|0);
    $16 = (getTempRet0() | 0);
    $17 = $cycle;
    $18 = $17;
    HEAP32[$18>>2] = $15;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    $$pre = HEAP32[$state>>2]|0;
    $22 = $$pre;
    break;
   }
   $log = ((($avr)) + 8280|0);
   $bf$load = HEAP8[$log>>0]|0;
   $bf$clear = $bf$load & 6;
   $tobool7 = ($bf$clear<<24>>24)==(0);
   if (!($tobool7)) {
    _avr_global_logger($avr,3,357492,$vararg_buffer);
   }
   HEAP32[$state>>2] = 6;
   STACKTOP = sp;return;
  } else {
   $22 = $4;
  }
 } while(0);
 $21 = $22 & -2;
 $switch = ($21|0)==(2);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $interrupt_state = ((($avr)) + 128|0);
 $23 = HEAP8[$interrupt_state>>0]|0;
 $tobool20 = ($23<<24>>24)==(0);
 if ($tobool20) {
  STACKTOP = sp;return;
 }
 _avr_service_interrupts($avr);
 STACKTOP = sp;return;
}
function _avr_callback_sleep_raw($avr,$0,$1) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$i = 0, $avr$idx$i = 0, $avr$idx$val$i = 0, $cmp = 0, $cmp$i = 0, $cmp3 = 0, $not$cmp$i = 0, $sleep_usec$i = 0, $spec$store$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr$idx$i = ((($avr)) + 40|0);
 $avr$idx$val$i = HEAP32[$avr$idx$i>>2]|0;
 $2 = (___muldi3(($0|0),($1|0),1000000,0)|0);
 $3 = (getTempRet0() | 0);
 $4 = (___udivdi3(($2|0),($3|0),($avr$idx$val$i|0),0)|0);
 $5 = (getTempRet0() | 0);
 $sleep_usec$i = ((($avr)) + 80|0);
 $6 = HEAP32[$sleep_usec$i>>2]|0;
 $add$i = (($6) + ($4))|0;
 $cmp$i = ($add$i>>>0)>(200);
 $spec$store$select$i = $cmp$i ? 0 : $add$i;
 HEAP32[$sleep_usec$i>>2] = $spec$store$select$i;
 $cmp3 = ($add$i|0)==(0);
 $not$cmp$i = $cmp$i ^ 1;
 $cmp = $cmp3 | $not$cmp$i;
 if ($cmp) {
  return;
 }
 (_usleep(($add$i|0))|0);
 return;
}
function _avr_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp632 = 0, $conv3 = 0, $data = 0, $exitcond = 0, $i$033 = 0, $inc = 0, $io_port = 0, $pc = 0;
 var $port$0 = 0, $port$028 = 0, $port$030 = 0, $ramend2 = 0, $reset = 0, $reset21 = 0, $reset_pc = 0, $scevgep = 0, $state = 0, $tobool = 0, $tobool20 = 0, $tobool2029 = 0, $tobool22 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $ramend2 = ((($avr)) + 4|0);
 $0 = HEAP16[$ramend2>>1]|0;
 $conv3 = $0&65535;
 $1 = HEAP32[$avr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 _avr_global_logger($avr,3,357482,$vararg_buffer);
 $state = ((($avr)) + 36|0);
 HEAP32[$state>>2] = 2;
 $cmp632 = ($0&65535)>(32);
 if ($cmp632) {
  $data = ((($avr)) + 5892|0);
  $i$033 = 32;
  while(1) {
   $9 = HEAP32[$data>>2]|0;
   $arrayidx = (($9) + ($i$033)|0);
   HEAP8[$arrayidx>>0] = 0;
   $inc = (($i$033) + 1)|0;
   $exitcond = ($inc|0)==($conv3|0);
   if ($exitcond) {
    break;
   } else {
    $i$033 = $inc;
   }
  }
 }
 $2 = HEAP16[$ramend2>>1]|0;
 __avr_sp_set($avr,$2);
 $reset_pc = ((($avr)) + 136|0);
 $3 = HEAP32[$reset_pc>>2]|0;
 $pc = ((($avr)) + 132|0);
 HEAP32[$pc>>2] = $3;
 $scevgep = ((($avr)) + 120|0);
 $4 = $scevgep;
 $5 = $4;
 HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP8[$7>>0]=0&255;HEAP8[$7+1>>0]=(0>>8)&255;HEAP8[$7+2>>0]=(0>>16)&255;HEAP8[$7+3>>0]=0>>24;
 _avr_interrupt_reset($avr);
 _avr_cycle_timer_reset($avr);
 $reset = ((($avr)) + 88|0);
 $8 = HEAP32[$reset>>2]|0;
 $tobool = ($8|0)==(0|0);
 if (!($tobool)) {
  FUNCTION_TABLE_vi[$8 & 255]($avr);
 }
 $io_port = ((($avr)) + 5896|0);
 $port$028 = HEAP32[$io_port>>2]|0;
 $tobool2029 = ($port$028|0)==(0|0);
 if ($tobool2029) {
  STACKTOP = sp;return;
 }
 $port$030 = $port$028;
 while(1) {
  $reset21 = ((($port$030)) + 28|0);
  $10 = HEAP32[$reset21>>2]|0;
  $tobool22 = ($10|0)==(0|0);
  if (!($tobool22)) {
   FUNCTION_TABLE_vi[$10 & 255]($port$030);
  }
  $port$0 = HEAP32[$port$030>>2]|0;
  $tobool20 = ($port$0|0)==(0|0);
  if ($tobool20) {
   break;
  } else {
   $port$030 = $port$0;
  }
 }
 STACKTOP = sp;return;
}
function _avr_sadly_crashed($avr,$signal) {
 $avr = $avr|0;
 $signal = $signal|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $gdb_port = 0, $state = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 357555;
 _avr_global_logger($avr,1,357551,$vararg_buffer);
 $state = ((($avr)) + 36|0);
 HEAP32[$state>>2] = 1;
 $gdb_port = ((($avr)) + 8296|0);
 $0 = HEAP32[$gdb_port>>2]|0;
 $tobool = ($0|0)==(0);
 $$pre = ((($avr)) + 8292|0);
 do {
  if (!($tobool)) {
   $1 = HEAP32[$$pre>>2]|0;
   $tobool1 = ($1|0)==(0|0);
   if ($tobool1) {
    (_avr_gdb_init($avr)|0);
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $$pr = HEAP32[$$pre>>2]|0;
 $tobool5 = ($$pr|0)==(0|0);
 if (!($tobool5)) {
  STACKTOP = sp;return;
 }
 HEAP32[$state>>2] = 7;
 STACKTOP = sp;return;
}
function _avr_set_command_register($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($addr<<16>>16)==(0);
 if ($tobool) {
  return;
 }
 _avr_register_io_write($avr,$addr,91,0);
 return;
}
function __avr_io_command_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $call11 = 0, $call12 = 0, $conv = 0, $or$cond = 0, $tobool = 0, $tobool13 = 0, $tobool14 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vcd = 0, $vcd4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $conv = $v&255;
 HEAP32[$vararg_buffer>>2] = 357573;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $conv;
 _avr_global_logger($avr,3,360891,$vararg_buffer);
 switch ($v<<24>>24) {
 case 1:  {
  $vcd = ((($avr)) + 8288|0);
  $0 = HEAP32[$vcd>>2]|0;
  $tobool = ($0|0)==(0|0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  (_avr_vcd_start($0)|0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $vcd4 = ((($avr)) + 8288|0);
  $1 = HEAP32[$vcd4>>2]|0;
  $tobool5 = ($1|0)==(0|0);
  if ($tobool5) {
   STACKTOP = sp;return;
  }
  (_avr_vcd_stop($1)|0);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $call11 = (_avr_io_getirq($avr,1969320496,1)|0);
  $call12 = (_avr_io_getirq($avr,1969320496,0)|0);
  $tobool13 = ($call11|0)!=(0|0);
  $tobool14 = ($call12|0)!=(0|0);
  $or$cond = $tobool13 & $tobool14;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  HEAP32[$vararg_buffer2>>2] = 357573;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $call11;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $call12;
  _avr_global_logger($avr,3,357595,$vararg_buffer2);
  _avr_connect_irq($call11,$call12);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _avr_set_console_register($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($addr<<16>>16)==(0);
 if ($tobool) {
  return;
 }
 _avr_register_io_write($avr,$addr,92,0);
 return;
}
function __avr_io_console_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $add5 = 0, $arrayidx = 0, $arrayidx11 = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cmp8 = 0, $inc = 0, $or$cond = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $cmp = ($v<<24>>24)==(13);
 $0 = HEAP32[91295]|0;
 $tobool = ($0|0)!=(0|0);
 $or$cond = $cmp & $tobool;
 $1 = HEAP32[91296]|0;
 if ($or$cond) {
  $arrayidx = (($0) + ($1)|0);
  HEAP8[$arrayidx>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $0;
  _avr_global_logger($avr,0,357644,$vararg_buffer);
  HEAP32[91296] = 0;
  STACKTOP = sp;return;
 }
 $add = (($1) + 1)|0;
 $2 = HEAP32[91297]|0;
 $cmp2 = ($add|0)<($2|0);
 $add5 = (($2) + 128)|0;
 if ($cmp2) {
  $4 = $0;
 } else {
  HEAP32[91297] = $add5;
  $call = (_realloc($0,$add5)|0);
  HEAP32[91295] = $call;
  $4 = $call;
 }
 $cmp8 = ($v&255)>(31);
 if (!($cmp8)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[91296]|0;
 $inc = (($3) + 1)|0;
 HEAP32[91296] = $inc;
 $arrayidx11 = (($4) + ($3)|0);
 HEAP8[$arrayidx11>>0] = $v;
 STACKTOP = sp;return;
}
function _avr_loadcode($avr,$code,$size,$address) {
 $avr = $avr|0;
 $code = $code|0;
 $size = $size|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $add = 0, $add$ptr = 0, $add1 = 0, $cmp = 0, $flash = 0, $flashend = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $add = (($address) + ($size))|0;
 $flashend = ((($avr)) + 8|0);
 $0 = HEAP32[$flashend>>2]|0;
 $add1 = (($0) + 1)|0;
 $cmp = ($add>>>0)>($add1>>>0);
 if ($cmp) {
  HEAP32[$vararg_buffer>>2] = $size;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $add1;
  _avr_global_logger($avr,1,357650,$vararg_buffer);
  _abort();
  // unreachable;
 } else {
  $flash = ((($avr)) + 5888|0);
  $1 = HEAP32[$flash>>2]|0;
  $add$ptr = (($1) + ($address)|0);
  _memcpy(($add$ptr|0),($code|0),($size|0))|0;
  STACKTOP = sp;return;
 }
}
function _avr_callback_sleep_gdb($avr,$0,$1) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$i = 0, $avr$idx$i = 0, $avr$idx$val$i = 0, $call1 = 0, $cmp$i = 0, $sleep_usec$i = 0, $spec$select$i = 0, $spec$store$select$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr$idx$i = ((($avr)) + 40|0);
 $avr$idx$val$i = HEAP32[$avr$idx$i>>2]|0;
 $2 = (___muldi3(($0|0),($1|0),1000000,0)|0);
 $3 = (getTempRet0() | 0);
 $4 = (___udivdi3(($2|0),($3|0),($avr$idx$val$i|0),0)|0);
 $5 = (getTempRet0() | 0);
 $sleep_usec$i = ((($avr)) + 80|0);
 $6 = HEAP32[$sleep_usec$i>>2]|0;
 $add$i = (($6) + ($4))|0;
 $cmp$i = ($add$i>>>0)>(200);
 $spec$store$select$i = $cmp$i ? 0 : $add$i;
 HEAP32[$sleep_usec$i>>2] = $spec$store$select$i;
 $spec$select$i = $cmp$i ? $add$i : 0;
 while(1) {
  $call1 = (_avr_gdb_processor($avr,$spec$select$i)|0);
  $tobool = ($call1|0)==(0);
  if ($tobool) {
   break;
  }
 }
 return;
}
function _avr_callback_run_gdb($avr) {
 $avr = $avr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $bf$clear = 0, $bf$load = 0, $call14 = 0, $cmp = 0, $cmp11 = 0, $cmp19 = 0, $cmp2 = 0, $cmp5 = 0, $conv = 0, $cycle = 0, $log = 0, $new_pc$0 = 0, $pc = 0, $pc26 = 0;
 var $pc28 = 0, $pc29 = 0, $sleep29 = 0, $state = 0, $switch = 0, $tobool22 = 0, $tobool24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $state = ((($avr)) + 36|0);
 $0 = HEAP32[$state>>2]|0;
 $cmp = ($0|0)==(1);
 $conv = $cmp&1;
 (_avr_gdb_processor($avr,$conv)|0);
 $1 = HEAP32[$state>>2]|0;
 $cmp2 = ($1|0)==(1);
 if ($cmp2) {
  STACKTOP = sp;return;
 }
 $cmp5 = ($1|0)==(4);
 if ($cmp5) {
  HEAP32[$state>>2] = 2;
  $pc26 = ((($avr)) + 132|0);
  $pc29 = $pc26;
  label = 5;
 } else {
  $pc = ((($avr)) + 132|0);
  $2 = HEAP32[$pc>>2]|0;
  $cmp11 = ($1|0)==(2);
  if ($cmp11) {
   $pc29 = $pc;
   label = 5;
  } else {
   $new_pc$0 = $2;$pc28 = $pc;
  }
 }
 if ((label|0) == 5) {
  $call14 = (_avr_run_one($avr)|0);
  $new_pc$0 = $call14;$pc28 = $pc29;
 }
 $3 = (_avr_cycle_timer_process($avr)|0);
 $4 = (getTempRet0() | 0);
 HEAP32[$pc28>>2] = $new_pc$0;
 $5 = HEAP32[$state>>2]|0;
 $cmp19 = ($5|0)==(3);
 do {
  if ($cmp19) {
   $arrayidx = ((($avr)) + 127|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $tobool22 = ($6<<24>>24)==(0);
   if (!($tobool22)) {
    $sleep29 = ((($avr)) + 108|0);
    $7 = HEAP32[$sleep29>>2]|0;
    FUNCTION_TABLE_viii[$7 & 255]($avr,$3,$4);
    $8 = (_i64Add(($3|0),($4|0),1,0)|0);
    $9 = (getTempRet0() | 0);
    $cycle = ((($avr)) + 56|0);
    $10 = $cycle;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = (($10) + 4)|0;
    $14 = $13;
    $15 = HEAP32[$14>>2]|0;
    $16 = (_i64Add(($8|0),($9|0),($12|0),($15|0))|0);
    $17 = (getTempRet0() | 0);
    $18 = $cycle;
    $19 = $18;
    HEAP32[$19>>2] = $16;
    $20 = (($18) + 4)|0;
    $21 = $20;
    HEAP32[$21>>2] = $17;
    $$pre = HEAP32[$state>>2]|0;
    $23 = $$pre;
    break;
   }
   $log = ((($avr)) + 8280|0);
   $bf$load = HEAP8[$log>>0]|0;
   $bf$clear = $bf$load & 6;
   $tobool24 = ($bf$clear<<24>>24)==(0);
   if (!($tobool24)) {
    _avr_global_logger($avr,3,357492,$vararg_buffer);
   }
   HEAP32[$state>>2] = 6;
   STACKTOP = sp;return;
  } else {
   $23 = $5;
  }
 } while(0);
 $22 = $23 & -2;
 $switch = ($22|0)==(2);
 if ($switch) {
  _avr_service_interrupts($avr);
 }
 if (!($cmp5)) {
  STACKTOP = sp;return;
 }
 HEAP32[$state>>2] = 5;
 STACKTOP = sp;return;
}
function _avr_run($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $run = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $run = ((($avr)) + 104|0);
 $0 = HEAP32[$run>>2]|0;
 FUNCTION_TABLE_vi[$0 & 255]($avr);
 $state = ((($avr)) + 36|0);
 $1 = HEAP32[$state>>2]|0;
 return ($1|0);
}
function _avr_core_allocate($core,$coreLen) {
 $core = $core|0;
 $coreLen = $coreLen|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_malloc($coreLen)|0);
 _memcpy(($call|0),($core|0),($coreLen|0))|0;
 return ($call|0);
}
function _avr_make_mcu_by_name($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $call = 0, $call20 = 0, $conv = 0, $e2end = 0, $flashend = 0, $i$025 = 0, $inc = 0, $inc14 = 0;
 var $j$021 = 0, $make = 0, $ramend = 0, $retval$0 = 0, $tobool = 0, $tobool11 = 0, $tobool23 = 0, $tobool5 = 0, $tobool520 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $tobool23 = (353596|0)==(0|0);
 L1: do {
  if (!($tobool23)) {
   $1 = 353596;$i$025 = 0;
   L3: while(1) {
    $0 = HEAP32[$1>>2]|0;
    $tobool520 = ($0|0)==(0|0);
    if (!($tobool520)) {
     $3 = $0;$j$021 = 0;
     while(1) {
      $call = (_strcmp($3,$name)|0);
      $tobool11 = ($call|0)==(0);
      $inc = (($j$021) + 1)|0;
      if ($tobool11) {
       break L3;
      }
      $arrayidx4 = (($1) + ($inc<<2)|0);
      $2 = HEAP32[$arrayidx4>>2]|0;
      $tobool5 = ($2|0)==(0|0);
      if ($tobool5) {
       break;
      } else {
       $3 = $2;$j$021 = $inc;
      }
     }
    }
    $inc14 = (($i$025) + 1)|0;
    $arrayidx = (144 + ($inc14<<2)|0);
    $4 = HEAP32[$arrayidx>>2]|0;
    $tobool = ($4|0)==(0|0);
    if ($tobool) {
     break L1;
    } else {
     $1 = $4;$i$025 = $inc14;
    }
   }
   $make = ((($1)) + 16|0);
   $5 = HEAP32[$make>>2]|0;
   $call20 = (FUNCTION_TABLE_i[$5 & 63]()|0);
   $6 = HEAP32[$call20>>2]|0;
   $flashend = ((($call20)) + 8|0);
   $7 = HEAP32[$flashend>>2]|0;
   $ramend = ((($call20)) + 4|0);
   $8 = HEAP16[$ramend>>1]|0;
   $conv = $8&65535;
   $e2end = ((($call20)) + 12|0);
   $9 = HEAP32[$e2end>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $6;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $7;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $conv;
   $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
   HEAP32[$vararg_ptr7>>2] = $9;
   _avr_global_logger($call20,3,357773,$vararg_buffer2);
   $retval$0 = $call20;
   STACKTOP = sp;return ($retval$0|0);
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = 357752;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $name;
 _avr_global_logger(0,1,357728,$vararg_buffer);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _read_hex_string($src,$buffer,$maxlen) {
 $src = $src|0;
 $buffer = $buffer|0;
 $maxlen = $maxlen|0;
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $b$0$ph47 = 0, $b$1 = 0, $b$2 = 0, $cmp$us = 0, $conv$us = 0, $conv15 = 0, $conv31 = 0, $conv3136 = 0, $conv3150 = 0, $conv34$us = 0;
 var $dec = 0, $dst$0$ph$lcssa30 = 0, $dst$0$ph41 = 0, $dst$1 = 0, $inc = 0, $incdec$ptr$us = 0, $incdec$ptr26 = 0, $ls$0$ph46 = 0, $maxlen$addr$0$ph40 = 0, $maxlen$addr$1 = 0, $or19 = 0, $retval$2 = 0, $shl16 = 0, $src$addr$0$ph39 = 0, $src$addr$033$us = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub18 = 0, $tobool$us = 0;
 var $tobool1 = 0, $tobool138 = 0, $tobool24 = 0, $tobool32 = 0, $tobool3237 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[$src>>0]|0;
 $tobool3237 = ($0<<24>>24)!=(0);
 $tobool138 = ($maxlen|0)!=(0);
 $1 = $tobool138 & $tobool3237;
 L1: do {
  if ($1) {
   $conv3136 = $0 << 24 >> 24;
   $7 = $0;$b$0$ph47 = 0;$conv3150 = $conv3136;$dst$0$ph41 = $buffer;$ls$0$ph46 = 0;$maxlen$addr$0$ph40 = $maxlen;$src$addr$0$ph39 = $src;
   L3: while(1) {
    $3 = $7;$conv34$us = $conv3150;$src$addr$033$us = $src$addr$0$ph39;
    L5: while(1) {
     $incdec$ptr$us = ((($src$addr$033$us)) + 1|0);
     switch ($conv34$us|0) {
     case 102: case 101: case 100: case 99: case 98: case 97:  {
      label = 9;
      break L5;
      break;
     }
     case 70: case 69: case 68: case 67: case 66: case 65:  {
      $$sink = -55;
      break L5;
      break;
     }
     case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      label = 7;
      break L5;
      break;
     }
     default: {
     }
     }
     $cmp$us = ($3<<24>>24)>(32);
     if ($cmp$us) {
      break L3;
     }
     $2 = HEAP8[$incdec$ptr$us>>0]|0;
     $conv$us = $2 << 24 >> 24;
     $tobool$us = ($2<<24>>24)==(0);
     if ($tobool$us) {
      $dst$0$ph$lcssa30 = $dst$0$ph41;
      break L1;
     } else {
      $3 = $2;$conv34$us = $conv$us;$src$addr$033$us = $incdec$ptr$us;
     }
    }
    if ((label|0) == 7) {
     label = 0;
     $$sink = 208;
    }
    else if ((label|0) == 9) {
     label = 0;
     $$sink = -87;
    }
    $conv15 = $b$0$ph47 << 4;
    $shl16 = $conv15 & 4080;
    $sub18 = (($conv34$us) + ($$sink))|0;
    $or19 = $sub18 | $shl16;
    $and = $ls$0$ph46 & 1;
    $tobool24 = ($and|0)==(0);
    if ($tobool24) {
     $b$2 = $or19;$dst$1 = $dst$0$ph41;$maxlen$addr$1 = $maxlen$addr$0$ph40;
    } else {
     $b$1 = $or19&255;
     $dec = (($maxlen$addr$0$ph40) + -1)|0;
     $incdec$ptr26 = ((($dst$0$ph41)) + 1|0);
     HEAP8[$dst$0$ph41>>0] = $b$1;
     $b$2 = 0;$dst$1 = $incdec$ptr26;$maxlen$addr$1 = $dec;
    }
    $inc = (($ls$0$ph46) + 1)|0;
    $5 = HEAP8[$incdec$ptr$us>>0]|0;
    $conv31 = $5 << 24 >> 24;
    $tobool32 = ($5<<24>>24)!=(0);
    $tobool1 = ($maxlen$addr$1|0)!=(0);
    $6 = $tobool1 & $tobool32;
    if ($6) {
     $7 = $5;$b$0$ph47 = $b$2;$conv3150 = $conv31;$dst$0$ph41 = $dst$1;$ls$0$ph46 = $inc;$maxlen$addr$0$ph40 = $maxlen$addr$1;$src$addr$0$ph39 = $incdec$ptr$us;
    } else {
     $dst$0$ph$lcssa30 = $dst$1;
     break L1;
    }
   }
   $4 = HEAP32[88638]|0;
   HEAP32[$vararg_buffer>>2] = 357844;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $conv34$us;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $incdec$ptr$us;
   (_fprintf($4,357825,$vararg_buffer)|0);
   $retval$2 = -1;
   STACKTOP = sp;return ($retval$2|0);
  } else {
   $dst$0$ph$lcssa30 = $buffer;
  }
 } while(0);
 $sub$ptr$lhs$cast = $dst$0$ph$lcssa30;
 $sub$ptr$rhs$cast = $buffer;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $retval$2 = $sub$ptr$sub;
 STACKTOP = sp;return ($retval$2|0);
}
function _read_ihex_chunks($fname,$chunks) {
 $fname = $fname|0;
 $chunks = $chunks|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr113 = 0, $add$ptr93 = 0, $add105 = 0, $add122 = 0, $add77 = 0, $arrayidx35 = 0, $arrayidx46 = 0;
 var $arrayidx48 = 0, $arrayidx50 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $baseaddr = 0, $baseaddr98 = 0, $bline = 0, $call = 0, $call106 = 0, $call18 = 0, $call5 = 0, $call562 = 0, $call7 = 0, $call92 = 0, $chk$0$lcssa = 0, $chk$059 = 0, $chunk$065 = 0, $chunk$1 = 0, $chunk$4$ph = 0, $chunk$574 = 0;
 var $cmp = 0, $cmp19 = 0, $cmp37 = 0, $cmp73 = 0, $cmp78 = 0, $cmp87 = 0, $conv104 = 0, $conv117 = 0, $conv119 = 0, $conv27 = 0, $conv28 = 0, $conv29 = 0, $conv33 = 0, $conv36 = 0, $conv47 = 0, $conv49 = 0, $conv51 = 0, $conv56 = 0, $conv59 = 0, $conv64 = 0;
 var $conv67 = 0, $data = 0, $data108 = 0, $data110 = 0, $dec = 0, $inc = 0, $inc90 = 0, $incdec$ptr = 0, $line = 0, $max_chunks$066 = 0, $max_chunks$1 = 0, $max_chunks$4$ph = 0, $max_chunks$575 = 0, $max_chunks$6 = 0, $mul = 0, $mul96 = 0, $not$or$cond57 = 0, $or = 0, $or$cond = 0, $or52 = 0;
 var $or60 = 0, $or68 = 0, $retval$1 = 0, $segment$064 = 0, $segment$3$ph = 0, $segment$473 = 0, $shl = 0, $shl57 = 0, $shl61 = 0, $shl65 = 0, $shl69 = 0, $size = 0, $size102 = 0, $size112 = 0, $size121 = 0, $spec$select = 0, $src$060 = 0, $sub = 0, $sub94 = 0, $tlen$061 = 0;
 var $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool25 = 0, $tobool2558 = 0, $tobool6 = 0, $tobool663 = 0, $tobool8 = 0, $tobool83 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer7 = sp + 216|0;
 $vararg_buffer2 = sp + 200|0;
 $vararg_buffer = sp + 192|0;
 $line = sp + 64|0;
 $bline = sp;
 $tobool = ($fname|0)!=(0|0);
 $tobool1 = ($chunks|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  $retval$1 = -1;
  STACKTOP = sp;return ($retval$1|0);
 }
 $call = (_fopen($fname,357860)|0);
 $tobool2 = ($call|0)==(0|0);
 if ($tobool2) {
  _perror($fname);
  $retval$1 = -1;
  STACKTOP = sp;return ($retval$1|0);
 }
 HEAP32[$chunks>>2] = 0;
 $call562 = (_feof($call)|0);
 $tobool663 = ($call562|0)==(0);
 L8: do {
  if ($tobool663) {
   $add$ptr = ((($line)) + 1|0);
   $0 = HEAP32[88638]|0;
   $arrayidx46 = ((($bline)) + 3|0);
   $arrayidx48 = ((($bline)) + 1|0);
   $arrayidx50 = ((($bline)) + 2|0);
   $arrayidx55 = ((($bline)) + 4|0);
   $arrayidx58 = ((($bline)) + 5|0);
   $chunk$065 = 0;$max_chunks$066 = 0;$segment$064 = 0;
   L10: while(1) {
    $call7 = (_fgets($line,127,$call)|0);
    $tobool8 = ($call7|0)==(0|0);
    if ($tobool8) {
     $chunk$574 = $chunk$065;$max_chunks$575 = $max_chunks$066;$segment$473 = $segment$064;
    } else {
     $1 = HEAP8[$line>>0]|0;
     $cmp = ($1<<24>>24)==(58);
     if (!($cmp)) {
      label = 9;
      break;
     }
     $call18 = (_read_hex_string($add$ptr,$bline,64)|0);
     $cmp19 = ($call18|0)<(1);
     L16: do {
      if ($cmp19) {
       $chunk$4$ph = $chunk$065;$max_chunks$4$ph = $max_chunks$066;$segment$3$ph = $segment$064;
      } else {
       $sub = (($call18) + -1)|0;
       $tobool2558 = ($sub|0)==(0);
       if ($tobool2558) {
        $chk$0$lcssa = 0;
       } else {
        $chk$059 = 0;$src$060 = $bline;$tlen$061 = $sub;
        while(1) {
         $dec = (($tlen$061) + -1)|0;
         $incdec$ptr = ((($src$060)) + 1|0);
         $2 = HEAP8[$src$060>>0]|0;
         $conv27 = $2&255;
         $conv28 = $chk$059 & 255;
         $add = (($conv28) + ($conv27))|0;
         $tobool25 = ($dec|0)==(0);
         if ($tobool25) {
          break;
         } else {
          $chk$059 = $add;$src$060 = $incdec$ptr;$tlen$061 = $dec;
         }
        }
        $conv29 = $add&255;
        $chk$0$lcssa = $conv29;
       }
       $3 = (0 - ($chk$0$lcssa))<<24>>24;
       $arrayidx35 = (($bline) + ($sub)|0);
       $4 = HEAP8[$arrayidx35>>0]|0;
       $cmp37 = ($4<<24>>24)==($3<<24>>24);
       if (!($cmp37)) {
        label = 27;
        break L10;
       }
       $5 = HEAP8[$arrayidx46>>0]|0;
       switch ($5<<24>>24) {
       case 1:  {
        $chunk$4$ph = $chunk$065;$max_chunks$4$ph = $max_chunks$066;$segment$3$ph = $segment$064;
        break L16;
        break;
       }
       case 0:  {
        $6 = HEAP8[$arrayidx48>>0]|0;
        $conv49 = $6&255;
        $shl = $conv49 << 8;
        $or = $shl | $segment$064;
        $7 = HEAP8[$arrayidx50>>0]|0;
        $conv51 = $7&255;
        $or52 = $or | $conv51;
        $cmp73 = ($chunk$065|0)<($max_chunks$066|0);
        if ($cmp73) {
         $12 = HEAP32[$chunks>>2]|0;
         $baseaddr = (($12) + (($chunk$065*12)|0)|0);
         $13 = HEAP32[$baseaddr>>2]|0;
         $size = (((($12) + (($chunk$065*12)|0)|0)) + 8|0);
         $14 = HEAP32[$size>>2]|0;
         $add77 = (($14) + ($13))|0;
         $cmp78 = ($or52|0)!=($add77|0);
         $tobool83 = ($14|0)!=(0);
         $not$or$cond57 = $tobool83 & $cmp78;
         $inc = $not$or$cond57&1;
         $spec$select = (($chunk$065) + ($inc))|0;
         $chunk$1 = $spec$select;
        } else {
         $chunk$1 = $chunk$065;
        }
        $cmp87 = ($chunk$1|0)<($max_chunks$066|0);
        if ($cmp87) {
         $$pre = HEAP32[$chunks>>2]|0;
         $18 = $$pre;$max_chunks$1 = $max_chunks$066;
        } else {
         $inc90 = (($max_chunks$066) + 1)|0;
         $15 = HEAP32[$chunks>>2]|0;
         $16 = ($max_chunks$066*12)|0;
         $mul = (($16) + 24)|0;
         $call92 = (_realloc($15,$mul)|0);
         HEAP32[$chunks>>2] = $call92;
         $add$ptr93 = (($call92) + (($chunk$1*12)|0)|0);
         $sub94 = (($inc90) - ($chunk$1))|0;
         $17 = ($sub94*12)|0;
         $mul96 = (($17) + 12)|0;
         _memset(($add$ptr93|0),0,($mul96|0))|0;
         $baseaddr98 = (($call92) + (($chunk$1*12)|0)|0);
         HEAP32[$baseaddr98>>2] = $or52;
         $18 = $call92;$max_chunks$1 = $inc90;
        }
        $data = (((($18) + (($chunk$1*12)|0)|0)) + 4|0);
        $19 = HEAP32[$data>>2]|0;
        $size102 = (((($18) + (($chunk$1*12)|0)|0)) + 8|0);
        $20 = HEAP32[$size102>>2]|0;
        $21 = HEAP8[$bline>>0]|0;
        $conv104 = $21&255;
        $add105 = (($20) + ($conv104))|0;
        $call106 = (_realloc($19,$add105)|0);
        $22 = HEAP32[$chunks>>2]|0;
        $data108 = (((($22) + (($chunk$1*12)|0)|0)) + 4|0);
        HEAP32[$data108>>2] = $call106;
        $23 = HEAP32[$chunks>>2]|0;
        $data110 = (((($23) + (($chunk$1*12)|0)|0)) + 4|0);
        $24 = HEAP32[$data110>>2]|0;
        $size112 = (((($23) + (($chunk$1*12)|0)|0)) + 8|0);
        $25 = HEAP32[$size112>>2]|0;
        $add$ptr113 = (($24) + ($25)|0);
        $26 = HEAP8[$bline>>0]|0;
        $conv117 = $26&255;
        _memcpy(($add$ptr113|0),($arrayidx55|0),($conv117|0))|0;
        $27 = HEAP8[$bline>>0]|0;
        $conv119 = $27&255;
        $28 = HEAP32[$chunks>>2]|0;
        $size121 = (((($28) + (($chunk$1*12)|0)|0)) + 8|0);
        $29 = HEAP32[$size121>>2]|0;
        $add122 = (($29) + ($conv119))|0;
        HEAP32[$size121>>2] = $add122;
        $chunk$4$ph = $chunk$1;$max_chunks$4$ph = $max_chunks$1;$segment$3$ph = $segment$064;
        break L16;
        break;
       }
       case 2:  {
        $8 = HEAP8[$arrayidx55>>0]|0;
        $conv56 = $8&255;
        $shl57 = $conv56 << 8;
        $9 = HEAP8[$arrayidx58>>0]|0;
        $conv59 = $9&255;
        $or60 = $shl57 | $conv59;
        $shl61 = $or60 << 4;
        $chunk$4$ph = $chunk$065;$max_chunks$4$ph = $max_chunks$066;$segment$3$ph = $shl61;
        break L16;
        break;
       }
       case 4:  {
        $10 = HEAP8[$arrayidx55>>0]|0;
        $conv64 = $10&255;
        $shl65 = $conv64 << 8;
        $11 = HEAP8[$arrayidx58>>0]|0;
        $conv67 = $11&255;
        $or68 = $shl65 | $conv67;
        $shl69 = $or68 << 16;
        $chunk$4$ph = $chunk$065;$max_chunks$4$ph = $max_chunks$066;$segment$3$ph = $shl69;
        break L16;
        break;
       }
       default: {
        $conv47 = $5&255;
        HEAP32[$vararg_buffer2>>2] = 357937;
        $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
        HEAP32[$vararg_ptr5>>2] = $fname;
        $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
        HEAP32[$vararg_ptr6>>2] = $conv47;
        (_fprintf($0,357900,$vararg_buffer2)|0);
        $chunk$4$ph = $chunk$065;$max_chunks$4$ph = $max_chunks$066;$segment$3$ph = $segment$064;
        break L16;
       }
       }
      }
     } while(0);
     $chunk$574 = $chunk$4$ph;$max_chunks$575 = $max_chunks$4$ph;$segment$473 = $segment$3$ph;
    }
    $call5 = (_feof($call)|0);
    $tobool6 = ($call5|0)==(0);
    if ($tobool6) {
     $chunk$065 = $chunk$574;$max_chunks$066 = $max_chunks$575;$segment$064 = $segment$473;
    } else {
     $max_chunks$6 = $max_chunks$575;
     break L8;
    }
   }
   if ((label|0) == 9) {
    HEAP32[$vararg_buffer>>2] = $fname;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $line;
    (_fprintf($0,357862,$vararg_buffer)|0);
    $max_chunks$6 = $max_chunks$066;
    break;
   }
   else if ((label|0) == 27) {
    $conv33 = $3&255;
    $conv36 = $4&255;
    HEAP32[$vararg_buffer7>>2] = 357937;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $fname;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $conv33;
    $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
    HEAP32[$vararg_ptr12>>2] = $conv36;
    (_fprintf($0,357954,$vararg_buffer7)|0);
    $max_chunks$6 = $max_chunks$066;
    break;
   }
  } else {
   $max_chunks$6 = 0;
  }
 } while(0);
 (_fclose($call)|0);
 $retval$1 = $max_chunks$6;
 STACKTOP = sp;return ($retval$1|0);
}
function _m1280_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $portc = 0, $portd = 0, $porte = 0, $portf = 0, $portg = 0, $porth = 0, $portj = 0, $portk = 0, $portl = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $timer3 = 0;
 var $timer4 = 0, $timer5 = 0, $twi = 0, $uart0 = 0, $uart1 = 0, $uart2 = 0, $uart3 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $porta = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$portd);
 $porte = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$porte);
 $portf = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$portf);
 $portg = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$portg);
 $porth = ((($avr)) + 10236|0);
 _avr_ioport_init($avr,$porth);
 $portj = ((($avr)) + 10352|0);
 _avr_ioport_init($avr,$portj);
 $portk = ((($avr)) + 10468|0);
 _avr_ioport_init($avr,$portk);
 $portl = ((($avr)) + 10584|0);
 _avr_ioport_init($avr,$portl);
 $uart0 = ((($avr)) + 10704|0);
 _avr_uart_init($avr,$uart0);
 $uart1 = ((($avr)) + 11072|0);
 _avr_uart_init($avr,$uart1);
 $uart2 = ((($avr)) + 11440|0);
 _avr_uart_init($avr,$uart2);
 $uart3 = ((($avr)) + 11808|0);
 _avr_uart_init($avr,$uart3);
 $adc = ((($avr)) + 12176|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 12744|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 13360|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 13976|0);
 _avr_timer_init($avr,$timer2);
 $timer3 = ((($avr)) + 14592|0);
 _avr_timer_init($avr,$timer3);
 $timer4 = ((($avr)) + 15208|0);
 _avr_timer_init($avr,$timer4);
 $timer5 = ((($avr)) + 15824|0);
 _avr_timer_init($avr,$timer5);
 $spi = ((($avr)) + 16440|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 16588|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _m1280_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(3488,16744)|0);
 return ($call|0);
}
function _m1281_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $portc = 0, $portd = 0, $porte = 0, $portf = 0, $portg = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $timer3 = 0, $twi = 0, $uart0 = 0, $uart1 = 0, $watchdog = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $porta = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$portd);
 $porte = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$porte);
 $portf = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$portf);
 $portg = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$portg);
 $uart0 = ((($avr)) + 10240|0);
 _avr_uart_init($avr,$uart0);
 $uart1 = ((($avr)) + 10608|0);
 _avr_uart_init($avr,$uart1);
 $adc = ((($avr)) + 10976|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 11544|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 12160|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 12776|0);
 _avr_timer_init($avr,$timer2);
 $timer3 = ((($avr)) + 13392|0);
 _avr_timer_init($avr,$timer3);
 $spi = ((($avr)) + 14008|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 14156|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _m1281_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_160() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(20232,14312)|0);
 return ($call|0);
}
function _make_165() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(34544,13960)|0);
 return ($call|0);
}
function _m128_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $portc = 0, $portd = 0, $porte = 0, $portf = 0, $portg = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $timer3 = 0, $twi = 0, $uart0 = 0, $uart1 = 0, $watchdog = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $porta = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$portd);
 $porte = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$porte);
 $portf = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$portf);
 $portg = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$portg);
 $uart0 = ((($avr)) + 10240|0);
 _avr_uart_init($avr,$uart0);
 $uart1 = ((($avr)) + 10608|0);
 _avr_uart_init($avr,$uart1);
 $adc = ((($avr)) + 10976|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 11544|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 12160|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 12776|0);
 _avr_timer_init($avr,$timer2);
 $timer3 = ((($avr)) + 13392|0);
 _avr_timer_init($avr,$timer3);
 $spi = ((($avr)) + 14008|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 14156|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _m128_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_170() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(48504,14312)|0);
 return ($call|0);
}
function _m128rfa1_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $portb = 0, $portd = 0, $porte = 0, $portf = 0, $portg = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $timer3 = 0, $twi = 0, $uart0 = 0, $uart1 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $portb = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$portb);
 $portd = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portd);
 $porte = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$porte);
 $portf = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$portf);
 $portg = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$portg);
 $uart0 = ((($avr)) + 10008|0);
 _avr_uart_init($avr,$uart0);
 $uart1 = ((($avr)) + 10376|0);
 _avr_uart_init($avr,$uart1);
 $adc = ((($avr)) + 10744|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 11312|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 11928|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 12544|0);
 _avr_timer_init($avr,$timer2);
 $timer3 = ((($avr)) + 13160|0);
 _avr_timer_init($avr,$timer3);
 $spi = ((($avr)) + 13776|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 13924|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _m128rfa1_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_174() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(62816,14080)|0);
 return ($call|0);
}
function _m128rfr2_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $portb = 0, $portd = 0, $porte = 0, $portf = 0, $portg = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $timer3 = 0, $twi = 0, $uart0 = 0, $uart1 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $portb = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$portb);
 $portd = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portd);
 $porte = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$porte);
 $portf = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$portf);
 $portg = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$portg);
 $uart0 = ((($avr)) + 10008|0);
 _avr_uart_init($avr,$uart0);
 $uart1 = ((($avr)) + 10376|0);
 _avr_uart_init($avr,$uart1);
 $adc = ((($avr)) + 10744|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 11312|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 11928|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 12544|0);
 _avr_timer_init($avr,$timer2);
 $timer3 = ((($avr)) + 13160|0);
 _avr_timer_init($avr,$timer3);
 $spi = ((($avr)) + 13776|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 13924|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _m128rfr2_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_178() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(76896,14080)|0);
 return ($call|0);
}
function _make_184() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(90976,13344)|0);
 return ($call|0);
}
function _make_190() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(104320,12864)|0);
 return ($call|0);
}
function _make_194() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(117184,12984)|0);
 return ($call|0);
}
function _make_198() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(130168,12272)|0);
 return ($call|0);
}
function _m2560_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $portc = 0, $portd = 0, $porte = 0, $portf = 0, $portg = 0, $porth = 0, $portj = 0, $portk = 0, $portl = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $timer3 = 0;
 var $timer4 = 0, $timer5 = 0, $twi = 0, $uart0 = 0, $uart1 = 0, $uart2 = 0, $uart3 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $porta = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$portd);
 $porte = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$porte);
 $portf = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$portf);
 $portg = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$portg);
 $porth = ((($avr)) + 10236|0);
 _avr_ioport_init($avr,$porth);
 $portj = ((($avr)) + 10352|0);
 _avr_ioport_init($avr,$portj);
 $portk = ((($avr)) + 10468|0);
 _avr_ioport_init($avr,$portk);
 $portl = ((($avr)) + 10584|0);
 _avr_ioport_init($avr,$portl);
 $uart0 = ((($avr)) + 10704|0);
 _avr_uart_init($avr,$uart0);
 $uart1 = ((($avr)) + 11072|0);
 _avr_uart_init($avr,$uart1);
 $uart2 = ((($avr)) + 11440|0);
 _avr_uart_init($avr,$uart2);
 $uart3 = ((($avr)) + 11808|0);
 _avr_uart_init($avr,$uart3);
 $adc = ((($avr)) + 12176|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 12744|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 13360|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 13976|0);
 _avr_timer_init($avr,$timer2);
 $timer3 = ((($avr)) + 14592|0);
 _avr_timer_init($avr,$timer3);
 $timer4 = ((($avr)) + 15208|0);
 _avr_timer_init($avr,$timer4);
 $timer5 = ((($avr)) + 15824|0);
 _avr_timer_init($avr,$timer5);
 $spi = ((($avr)) + 16440|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 16588|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _m2560_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_202() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(142440,16744)|0);
 return ($call|0);
}
function _make_207() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(159184,13344)|0);
 return ($call|0);
}
function _make_212() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(172528,13344)|0);
 return ($call|0);
}
function _make_217() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(185872,12864)|0);
 return ($call|0);
}
function _make_221() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(198736,12984)|0);
 return ($call|0);
}
function _make_227() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(211720,12864)|0);
 return ($call|0);
}
function _make_232() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(224584,13344)|0);
 return ($call|0);
}
function _make_238() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(237928,12864)|0);
 return ($call|0);
}
function _make_243() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(250792,12984)|0);
 return ($call|0);
}
function _mx4_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $portc = 0, $portd = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $twi = 0, $uart0 = 0, $uart1 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $porta = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$portd);
 $uart0 = ((($avr)) + 9888|0);
 _avr_uart_init($avr,$uart0);
 $uart1 = ((($avr)) + 10256|0);
 _avr_uart_init($avr,$uart1);
 $adc = ((($avr)) + 10624|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 11192|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 11808|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 12424|0);
 _avr_timer_init($avr,$timer2);
 $spi = ((($avr)) + 13040|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 13188|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _mx4_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mx8_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $portb = 0, $portc = 0, $portd = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $twi = 0, $uart = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8600|0);
 _avr_flash_init($avr,$selfprog);
 $watchdog = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$watchdog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $portb = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portd);
 $uart = ((($avr)) + 9776|0);
 _avr_uart_init($avr,$uart);
 $adc = ((($avr)) + 10144|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 10712|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 11328|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 11944|0);
 _avr_timer_init($avr,$timer2);
 $spi = ((($avr)) + 12560|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 12708|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _mx8_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mx_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $portc = 0, $portd = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $timer2 = 0, $twi = 0, $uart = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$selfprog);
 $watchdog = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$watchdog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $porta = ((($avr)) + 12864|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portd);
 $uart = ((($avr)) + 9776|0);
 _avr_uart_init($avr,$uart);
 $adc = ((($avr)) + 10144|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 10712|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 11328|0);
 _avr_timer_init($avr,$timer1);
 $timer2 = ((($avr)) + 11944|0);
 _avr_timer_init($avr,$timer2);
 $spi = ((($avr)) + 12560|0);
 _avr_spi_init($avr,$spi);
 $twi = ((($avr)) + 12708|0);
 _avr_twi_init($avr,$twi);
 return;
}
function _mx_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mxm1_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $lin = 0, $portb = 0, $portc = 0, $portd = 0, $porte = 0, $selfprog = 0, $spi = 0, $timer0 = 0, $timer1 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $selfprog = ((($avr)) + 8600|0);
 _avr_flash_init($avr,$selfprog);
 $watchdog = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$watchdog);
 $extint = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$extint);
 $portb = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$portb);
 $portc = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$portc);
 $portd = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$portd);
 $porte = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$porte);
 $lin = ((($avr)) + 9888|0);
 _avr_lin_init($avr,$lin);
 $adc = ((($avr)) + 10320|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 10888|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 11504|0);
 _avr_timer_init($avr,$timer1);
 $spi = ((($avr)) + 12120|0);
 _avr_spi_init($avr,$spi);
 return;
}
function _mxm1_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $data = 0, $idxprom = 0, $lin = 0, $r_linbtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $data = ((($avr)) + 5892|0);
 $0 = HEAP32[$data>>2]|0;
 $lin = ((($avr)) + 9888|0);
 $r_linbtr = ((($lin)) + 40|0);
 $1 = HEAP16[$r_linbtr>>1]|0;
 $idxprom = $1&65535;
 $arrayidx = (($0) + ($idxprom)|0);
 HEAP8[$arrayidx>>0] = 32;
 return;
}
function _make_264() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(263776,10584)|0);
 return ($call|0);
}
function _init_265($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $portb = 0, $timer0 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $watchdog = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$watchdog);
 $extint = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$extint);
 $portb = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$portb);
 $timer0 = ((($avr)) + 9400|0);
 _avr_timer_init($avr,$timer0);
 $adc = ((($avr)) + 10016|0);
 _avr_adc_init($avr,$adc);
 return;
}
function _reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_270() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(274360,11232)|0);
 return ($call|0);
}
function _init_272($avr) {
 $avr = $avr|0;
 var $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $portd = 0, $timer0 = 0, $timer1 = 0, $uart = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $watchdog = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$watchdog);
 $extint = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$extint);
 $porta = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9396|0);
 _avr_ioport_init($avr,$portb);
 $portd = ((($avr)) + 9512|0);
 _avr_ioport_init($avr,$portd);
 $uart = ((($avr)) + 9632|0);
 _avr_uart_init($avr,$uart);
 $timer0 = ((($avr)) + 10000|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 10616|0);
 _avr_timer_init($avr,$timer1);
 return;
}
function _reset_273($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_277() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(285592,11312)|0);
 return ($call|0);
}
function _make_281() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(296904,11192)|0);
 return ($call|0);
}
function _make_285() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(308096,11312)|0);
 return ($call|0);
}
function _make_289() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(319408,11192)|0);
 return ($call|0);
}
function _make_293() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(330600,11312)|0);
 return ($call|0);
}
function _make_297() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_allocate(341912,11192)|0);
 return ($call|0);
}
function _tx4_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $porta = 0, $portb = 0, $timer0 = 0, $timer1 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $watchdog = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$watchdog);
 $extint = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$extint);
 $porta = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$porta);
 $portb = ((($avr)) + 9396|0);
 _avr_ioport_init($avr,$portb);
 $adc = ((($avr)) + 9512|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 10080|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 10696|0);
 _avr_timer_init($avr,$timer1);
 return;
}
function _tx4_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _tx5_init($avr) {
 $avr = $avr|0;
 var $adc = 0, $eeprom = 0, $extint = 0, $portb = 0, $timer0 = 0, $timer1 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$eeprom);
 $watchdog = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$watchdog);
 $extint = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$extint);
 $portb = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$portb);
 $adc = ((($avr)) + 9396|0);
 _avr_adc_init($avr,$adc);
 $timer0 = ((($avr)) + 9960|0);
 _avr_timer_init($avr,$timer0);
 $timer1 = ((($avr)) + 10576|0);
 _avr_timer_init($avr,$timer1);
 return;
}
function _tx5_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _avr_interrupt_init($avr) {
 $avr = $avr|0;
 var $arraydecay = 0, $interrupts = 0, $irq_pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $interrupts = ((($avr)) + 7448|0);
 _memset(($interrupts|0),0,832)|0;
 $irq_pool = ((($avr)) + 112|0);
 $arraydecay = ((($avr)) + 8232|0);
 _avr_init_irq($irq_pool,$arraydecay,0,2,354076);
 return;
}
function _avr_interrupt_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $bf$clear = 0, $bf$load = 0, $cmp = 0, $cmp10 = 0, $conv = 0, $i$011 = 0, $inc = 0, $interrupt_state = 0, $pending2 = 0, $read$i = 0, $running_ptr = 0, $vector_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $running_ptr = ((($avr)) + 7972|0);
 HEAP8[$running_ptr>>0] = 0;
 $read$i = ((($avr)) + 7964|0);
 ;HEAP32[$read$i>>2]=0|0;HEAP8[$read$i+4>>0]=0|0;
 $interrupt_state = ((($avr)) + 128|0);
 HEAP8[$interrupt_state>>0] = 0;
 $vector_count = ((($avr)) + 7704|0);
 $0 = HEAP8[$vector_count>>0]|0;
 $cmp10 = ($0<<24>>24)==(0);
 if ($cmp10) {
  return;
 }
 $i$011 = 0;
 while(1) {
  $arrayidx = (((($avr)) + 7448|0) + ($i$011<<2)|0);
  $1 = HEAP32[$arrayidx>>2]|0;
  $pending2 = ((($1)) + 60|0);
  $bf$load = HEAP8[$pending2>>0]|0;
  $bf$clear = $bf$load & -2;
  HEAP8[$pending2>>0] = $bf$clear;
  $inc = (($i$011) + 1)|0;
  $2 = HEAP8[$vector_count>>0]|0;
  $conv = $2&255;
  $cmp = ($inc>>>0)<($conv>>>0);
  if ($cmp) {
   $i$011 = $inc;
  } else {
   break;
  }
 }
 return;
}
function _avr_register_vector($avr,$vector) {
 $avr = $avr|0;
 $vector = $vector|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arraydecay = 0, $arrayidx = 0, $bf$clear = 0, $bf$clear13 = 0, $bf$clear17 = 0, $bf$clear9 = 0, $bf$load = 0, $bf$load16 = 0, $bf$load8 = 0, $bf$lshr12 = 0, $conv = 0, $conv21 = 0, $conv7 = 0, $enable = 0;
 var $idxprom = 0, $inc = 0, $irq_pool = 0, $mul = 0, $tobool = 0, $tobool18 = 0, $tobool4 = 0, $trace = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vector_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$vector>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $irq_pool = ((($avr)) + 112|0);
 $arraydecay = ((($vector)) + 12|0);
 $conv = $0&255;
 $mul = $conv << 8;
 _avr_init_irq($irq_pool,$arraydecay,$mul,2,354084);
 $vector_count = ((($avr)) + 7704|0);
 $1 = HEAP8[$vector_count>>0]|0;
 $inc = (($1) + 1)<<24>>24;
 HEAP8[$vector_count>>0] = $inc;
 $idxprom = $1&255;
 $arrayidx = (((($avr)) + 7448|0) + ($idxprom<<2)|0);
 HEAP32[$arrayidx>>2] = $vector;
 $trace = ((($vector)) + 60|0);
 $bf$load = HEAP8[$trace>>0]|0;
 $bf$clear = $bf$load & 2;
 $tobool4 = ($bf$clear<<24>>24)==(0);
 if ($tobool4) {
  $$pre = ((($vector)) + 4|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP8[$vector>>0]|0;
  $conv7 = $2&255;
  $enable = ((($vector)) + 4|0);
  $bf$load8 = HEAP32[$enable>>2]|0;
  $bf$clear9 = $bf$load8 & 511;
  $bf$lshr12 = $bf$load8 >>> 9;
  $bf$clear13 = $bf$lshr12 & 7;
  HEAP32[$vararg_buffer>>2] = 358530;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $bf$clear9;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $bf$clear13;
  (_printf(358489,$vararg_buffer)|0);
  $$pre$phiZ2D = $enable;
 }
 $bf$load16 = HEAP32[$$pre$phiZ2D>>2]|0;
 $bf$clear17 = $bf$load16 & 511;
 $tobool18 = ($bf$clear17|0)==(0);
 if (!($tobool18)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$vector>>0]|0;
 $conv21 = $3&255;
 HEAP32[$vararg_buffer4>>2] = $conv21;
 _avr_global_logger($avr,2,358550,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _avr_has_pending_interrupts($avr) {
 $avr = $avr|0;
 var $cmp$i = 0, $lnot$ext = 0, $pending$idx = 0, $pending$idx$val = 0, $pending$idx2 = 0, $pending$idx2$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pending$idx = ((($avr)) + 7964|0);
 $pending$idx$val = HEAP16[$pending$idx>>1]|0;
 $pending$idx2 = ((($avr)) + 7966|0);
 $pending$idx2$val = HEAP16[$pending$idx2>>1]|0;
 $cmp$i = ($pending$idx$val<<16>>16)!=($pending$idx2$val<<16>>16);
 $lnot$ext = $cmp$i&1;
 return ($lnot$ext|0);
}
function _avr_raise_interrupt($avr,$vector) {
 $avr = $avr|0;
 $vector = $vector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$i = 0, $and$i39 = 0, $and$i65 = 0;
 var $arraydecay = 0, $arraydecay35 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i27 = 0, $arrayidx$i33 = 0, $arrayidx$i51 = 0, $arrayidx$i59 = 0, $bf$clear = 0, $bf$clear$i = 0, $bf$clear$i30 = 0, $bf$clear$i56 = 0, $bf$clear10 = 0, $bf$clear16 = 0, $bf$clear2$i = 0, $bf$clear28 = 0, $bf$clear3$i = 0, $bf$clear3$i36 = 0, $bf$clear3$i62 = 0, $bf$clear5$i = 0;
 var $bf$clear60 = 0, $bf$load = 0, $bf$load27 = 0, $bf$load42 = 0, $bf$load58 = 0, $bf$load9 = 0, $bf$load9$pre = 0, $bf$lshr$i = 0, $bf$lshr$i35 = 0, $bf$lshr$i49 = 0, $bf$lshr$i61 = 0, $bf$lshr4$i = 0, $bf$lshr5$i = 0, $bf$lshr5$i38 = 0, $bf$lshr5$i64 = 0, $bf$set = 0, $cmp = 0, $cmp$i = 0, $cmp54 = 0, $conv = 0;
 var $conv$i = 0, $conv$i47 = 0, $conv1$i = 0, $conv1$i34 = 0, $conv1$i60 = 0, $conv20 = 0, $conv7$i52 = 0, $conv9$i = 0, $data$i = 0, $data$i32 = 0, $data$i50 = 0, $data$i58 = 0, $enable2154$sroa$0$0$$sroa_idx = 0, $enable2154$sroa$0$0$copyload = 0, $enable26$sroa$0$0$$sroa_idx = 0, $enable26$sroa$0$0$copyload = 0, $enable3728$sroa$0$0$$sroa_idx = 0, $enable3728$sroa$0$0$copyload = 0, $interrupt_state = 0, $or$i = 0;
 var $raised = 0, $read$i = 0, $retval$0 = 0, $retval$0$i = 0, $retval$0$i68 = 0, $shl$i = 0, $shr$i = 0, $shr$i37 = 0, $shr$i63 = 0, $state = 0, $tobool = 0, $tobool$i = 0, $tobool$i31 = 0, $tobool$i48 = 0, $tobool$i57 = 0, $tobool11 = 0, $tobool17 = 0, $tobool2 = 0, $tobool29 = 0, $tobool3 = 0;
 var $tobool39 = 0, $tobool48 = 0, $tobool61 = 0, $trace = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $write$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tobool = ($vector|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = HEAP8[$vector>>0]|0;
 $tobool2 = ($0<<24>>24)==(0);
 if ($tobool2) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $trace = ((($vector)) + 60|0);
 $bf$load = HEAP8[$trace>>0]|0;
 $bf$clear = $bf$load & 2;
 $tobool3 = ($bf$clear<<24>>24)==(0);
 if ($tobool3) {
  $bf$load9 = $bf$load;
 } else {
  $conv = $0&255;
  $enable26$sroa$0$0$$sroa_idx = ((($vector)) + 4|0);
  $enable26$sroa$0$0$copyload = HEAPU8[$enable26$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$enable26$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$enable26$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$enable26$sroa$0$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i = $enable26$sroa$0$0$copyload & 511;
  $tobool$i = ($bf$clear$i|0)==(0);
  if ($tobool$i) {
   $retval$0$i = 0;
  } else {
   $data$i = ((($avr)) + 5892|0);
   $1 = HEAP32[$data$i>>2]|0;
   $arrayidx$i = (($1) + ($bf$clear$i)|0);
   $2 = HEAP8[$arrayidx$i>>0]|0;
   $conv1$i = $2&255;
   $bf$lshr$i = $enable26$sroa$0$0$copyload >>> 9;
   $bf$clear3$i = $bf$lshr$i & 7;
   $shr$i = $conv1$i >>> $bf$clear3$i;
   $bf$lshr5$i = $enable26$sroa$0$0$copyload >>> 12;
   $and$i = $shr$i & $bf$lshr5$i;
   $retval$0$i = $and$i;
  }
  HEAP32[$vararg_buffer>>2] = 358662;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $retval$0$i;
  (_printf(358634,$vararg_buffer)|0);
  $bf$load9$pre = HEAP8[$trace>>0]|0;
  $bf$load9 = $bf$load9$pre;
 }
 $bf$clear10 = $bf$load9 & 1;
 $tobool11 = ($bf$clear10<<24>>24)==(0);
 if (!($tobool11)) {
  $bf$clear16 = $bf$load9 & 2;
  $tobool17 = ($bf$clear16<<24>>24)==(0);
  if ($tobool17) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $3 = HEAP8[$vector>>0]|0;
  $conv20 = $3&255;
  $enable2154$sroa$0$0$$sroa_idx = ((($vector)) + 4|0);
  $enable2154$sroa$0$0$copyload = HEAPU8[$enable2154$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$enable2154$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$enable2154$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$enable2154$sroa$0$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i56 = $enable2154$sroa$0$0$copyload & 511;
  $tobool$i57 = ($bf$clear$i56|0)==(0);
  if ($tobool$i57) {
   $retval$0$i68 = 0;
  } else {
   $data$i58 = ((($avr)) + 5892|0);
   $4 = HEAP32[$data$i58>>2]|0;
   $arrayidx$i59 = (($4) + ($bf$clear$i56)|0);
   $5 = HEAP8[$arrayidx$i59>>0]|0;
   $conv1$i60 = $5&255;
   $bf$lshr$i61 = $enable2154$sroa$0$0$copyload >>> 9;
   $bf$clear3$i62 = $bf$lshr$i61 & 7;
   $shr$i63 = $conv1$i60 >>> $bf$clear3$i62;
   $bf$lshr5$i64 = $enable2154$sroa$0$0$copyload >>> 12;
   $and$i65 = $shr$i63 & $bf$lshr5$i64;
   $retval$0$i68 = $and$i65;
  }
  HEAP32[$vararg_buffer3>>2] = 358662;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $conv20;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $retval$0$i68;
  (_printf(358682,$vararg_buffer3)|0);
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $raised = ((($vector)) + 8|0);
 $bf$load27 = HEAP32[$raised>>2]|0;
 $bf$clear28 = $bf$load27 & 511;
 $tobool29 = ($bf$clear28|0)==(0);
 if (!($tobool29)) {
  $conv$i47 = $bf$clear28&65535;
  $tobool$i48 = ($conv$i47<<16>>16)==(0);
  if (!($tobool$i48)) {
   $bf$lshr$i49 = $bf$load27 >>> 12;
   $bf$clear2$i = $bf$lshr$i49 & 255;
   $bf$lshr4$i = $bf$load27 >>> 9;
   $bf$clear5$i = $bf$lshr4$i & 7;
   $shl$i = $bf$clear2$i << $bf$clear5$i;
   $data$i50 = ((($avr)) + 5892|0);
   $6 = HEAP32[$data$i50>>2]|0;
   $arrayidx$i51 = (($6) + ($bf$clear28)|0);
   $7 = HEAP8[$arrayidx$i51>>0]|0;
   $conv7$i52 = $7&255;
   $or$i = $shl$i | $conv7$i52;
   $conv9$i = $or$i&255;
   _avr_core_watch_write($avr,$conv$i47,$conv9$i);
  }
 }
 $arraydecay = ((($vector)) + 12|0);
 _avr_raise_irq($arraydecay,1);
 $arraydecay35 = ((($avr)) + 8232|0);
 _avr_raise_irq($arraydecay35,1);
 $enable3728$sroa$0$0$$sroa_idx = ((($vector)) + 4|0);
 $enable3728$sroa$0$0$copyload = HEAPU8[$enable3728$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$enable3728$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$enable3728$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$enable3728$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i30 = $enable3728$sroa$0$0$copyload & 511;
 $tobool$i31 = ($bf$clear$i30|0)==(0);
 if ($tobool$i31) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $data$i32 = ((($avr)) + 5892|0);
 $8 = HEAP32[$data$i32>>2]|0;
 $arrayidx$i33 = (($8) + ($bf$clear$i30)|0);
 $9 = HEAP8[$arrayidx$i33>>0]|0;
 $conv1$i34 = $9&255;
 $bf$lshr$i35 = $enable3728$sroa$0$0$copyload >>> 9;
 $bf$clear3$i36 = $bf$lshr$i35 & 7;
 $shr$i37 = $conv1$i34 >>> $bf$clear3$i36;
 $bf$lshr5$i38 = $enable3728$sroa$0$0$copyload >>> 12;
 $and$i39 = $shr$i37 & $bf$lshr5$i38;
 $tobool39 = ($and$i39|0)==(0);
 if ($tobool39) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $bf$load42 = HEAP8[$trace>>0]|0;
 $bf$set = $bf$load42 | 1;
 HEAP8[$trace>>0] = $bf$set;
 $write$i = ((($avr)) + 7966|0);
 $10 = HEAP16[$write$i>>1]|0;
 $11 = (($10) + 1)<<16>>16;
 $12 = $11 & 63;
 $read$i = ((($avr)) + 7964|0);
 $13 = HEAP16[$read$i>>1]|0;
 $cmp$i = ($13<<16>>16)==($12<<16>>16);
 if (!($cmp$i)) {
  $conv$i = $10&65535;
  $arrayidx$i27 = (((($avr)) + 7708|0) + ($conv$i<<2)|0);
  HEAP32[$arrayidx$i27>>2] = $vector;
  HEAP16[$write$i>>1] = $12;
 }
 $arrayidx = ((($avr)) + 127|0);
 $14 = HEAP8[$arrayidx>>0]|0;
 $tobool48 = ($14<<24>>24)==(0);
 if (!($tobool48)) {
  $interrupt_state = ((($avr)) + 128|0);
  $15 = HEAP8[$interrupt_state>>0]|0;
  $cmp = ($15<<24>>24)==(0);
  if ($cmp) {
   HEAP8[$interrupt_state>>0] = 1;
  }
 }
 $state = ((($avr)) + 36|0);
 $16 = HEAP32[$state>>2]|0;
 $cmp54 = ($16|0)==(3);
 if (!($cmp54)) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $bf$load58 = HEAP8[$trace>>0]|0;
 $bf$clear60 = $bf$load58 & 2;
 $tobool61 = ($bf$clear60<<24>>24)==(0);
 if (!($tobool61)) {
  (_puts(358725)|0);
 }
 HEAP32[$state>>2] = 2;
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function _avr_clear_interrupt($avr,$vector) {
 $avr = $avr|0;
 $vector = $vector|0;
 var $0 = 0, $1 = 0, $2 = 0, $and$i = 0, $arraydecay = 0, $arraydecay8 = 0, $arrayidx$i = 0, $bf$clear = 0, $bf$clear12 = 0, $bf$clear16 = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$clear6 = 0, $bf$load = 0, $bf$load11 = 0, $bf$load14 = 0, $bf$load5 = 0, $bf$load5$pre = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0;
 var $cmp$i$i = 0, $conv = 0, $conv$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $lnot$ext$i = 0, $neg$i = 0, $pending$idx$i = 0, $pending$idx$val$i = 0, $pending$idx2$i = 0, $pending$idx2$val$i = 0, $raised = 0, $shl$i = 0, $tobool = 0, $tobool1 = 0, $tobool13 = 0, $tobool17 = 0, $trace = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $tobool = ($vector|0)==(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $trace = ((($vector)) + 60|0);
 $bf$load = HEAP8[$trace>>0]|0;
 $bf$clear = $bf$load & 2;
 $tobool1 = ($bf$clear<<24>>24)==(0);
 if ($tobool1) {
  $bf$load5 = $bf$load;
 } else {
  $0 = HEAP8[$vector>>0]|0;
  $conv = $0&255;
  HEAP32[$vararg_buffer>>2] = 358768;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv;
  (_printf(358753,$vararg_buffer)|0);
  $bf$load5$pre = HEAP8[$trace>>0]|0;
  $bf$load5 = $bf$load5$pre;
 }
 $bf$clear6 = $bf$load5 & -2;
 HEAP8[$trace>>0] = $bf$clear6;
 $arraydecay = ((($vector)) + 12|0);
 _avr_raise_irq($arraydecay,0);
 $arraydecay8 = ((($avr)) + 8232|0);
 $pending$idx$i = ((($avr)) + 7964|0);
 $pending$idx$val$i = HEAP16[$pending$idx$i>>1]|0;
 $pending$idx2$i = ((($avr)) + 7966|0);
 $pending$idx2$val$i = HEAP16[$pending$idx2$i>>1]|0;
 $cmp$i$i = ($pending$idx$val$i<<16>>16)!=($pending$idx2$val$i<<16>>16);
 $lnot$ext$i = $cmp$i$i&1;
 _avr_raise_irq($arraydecay8,$lnot$ext$i);
 $raised = ((($vector)) + 8|0);
 $bf$load11 = HEAP32[$raised>>2]|0;
 $bf$clear12 = $bf$load11 & 511;
 $tobool13 = ($bf$clear12|0)==(0);
 if ($tobool13) {
  STACKTOP = sp;return;
 }
 $bf$load14 = HEAP8[$trace>>0]|0;
 $bf$clear16 = $bf$load14 & 4;
 $tobool17 = ($bf$clear16<<24>>24)==(0);
 if (!($tobool17)) {
  STACKTOP = sp;return;
 }
 $conv$i = $bf$clear12&65535;
 $bf$lshr$i = $bf$load11 >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $bf$load11 >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($avr)) + 5892|0);
 $1 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($1) + ($bf$clear12)|0);
 $2 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $2&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($avr,$conv$i,$conv9$i);
 STACKTOP = sp;return;
}
function _avr_clear_interrupt_if($avr,$vector,$old) {
 $avr = $avr|0;
 $vector = $vector|0;
 $old = $old|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and$i = 0, $and$i13 = 0, $and15$i = 0, $arraydecay = 0, $arrayidx$i = 0, $arrayidx$i11 = 0, $bf$clear$i8 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr$i12 = 0, $bf$lshr4$i = 0, $bf$lshr5$i = 0, $cmp$i$i = 0, $conv$i = 0;
 var $conv1$i = 0, $conv16$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $data$i10 = 0, $lnot$ext$i = 0, $neg$i = 0, $or$i = 0, $pending$idx$i = 0, $pending$idx$val$i = 0, $pending$idx2$i = 0, $pending$idx2$val$i = 0, $raised6$sroa$0$0$$sroa_idx = 0, $raised6$sroa$0$0$copyload = 0, $retval$0 = 0, $shl$i = 0, $shl13$i = 0, $shr$i = 0, $tobool = 0;
 var $tobool$i = 0, $tobool$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($avr)) + 8232|0);
 $pending$idx$i = ((($avr)) + 7964|0);
 $pending$idx$val$i = HEAP16[$pending$idx$i>>1]|0;
 $pending$idx2$i = ((($avr)) + 7966|0);
 $pending$idx2$val$i = HEAP16[$pending$idx2$i>>1]|0;
 $cmp$i$i = ($pending$idx$val$i<<16>>16)!=($pending$idx2$val$i<<16>>16);
 $lnot$ext$i = $cmp$i$i&1;
 _avr_raise_irq($arraydecay,$lnot$ext$i);
 $raised6$sroa$0$0$$sroa_idx = ((($vector)) + 8|0);
 $raised6$sroa$0$0$copyload = HEAPU8[$raised6$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$raised6$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$raised6$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$raised6$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i8 = $raised6$sroa$0$0$copyload & 511;
 $tobool$i9 = ($bf$clear$i8|0)==(0);
 if (!($tobool$i9)) {
  $data$i10 = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i10>>2]|0;
  $arrayidx$i11 = (($0) + ($bf$clear$i8)|0);
  $1 = HEAP8[$arrayidx$i11>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i12 = $raised6$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i12 & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $raised6$sroa$0$0$copyload >>> 12;
  $and$i13 = $shr$i & $bf$lshr5$i;
  $tobool = ($and$i13|0)==(0);
  if (!($tobool)) {
   _avr_clear_interrupt($avr,$vector);
   $retval$0 = 1;
   return ($retval$0|0);
  }
 }
 $conv$i = $bf$clear$i8&65535;
 $tobool$i = ($conv$i<<16>>16)==(0);
 if ($tobool$i) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $bf$lshr$i = $raised6$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $raised6$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($avr)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i8)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $3&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $old&255;
 $shl13$i = $conv9$i << $bf$clear5$i;
 $and15$i = $shl13$i & $shl$i;
 $or$i = $and$i | $and15$i;
 $conv16$i = $or$i&255;
 _avr_core_watch_write($avr,$conv$i,$conv16$i);
 $retval$0 = 0;
 return ($retval$0|0);
}
function _avr_interrupt_reti($avr) {
 $avr = $avr|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $add$ptr4 = 0, $add$ptr412 = 0, $add$ptr418 = 0, $arraydecay3 = 0, $arraydecay311 = 0, $arraydecay317 = 0, $arrayidx = 0, $arrayidx10 = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $conv = 0, $conv12 = 0, $dec = 0;
 var $idxprom = 0, $lnot$ext$i = 0, $pending$idx$i = 0, $pending$idx$val$i = 0, $pending$idx2$i = 0, $pending$idx2$val$i = 0, $running_ptr = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $running_ptr = ((($avr)) + 7972|0);
 $0 = HEAP8[$running_ptr>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 $dec = (($0) + -1)<<24>>24;
 if ($tobool) {
  $arraydecay311 = ((($avr)) + 8232|0);
  $add$ptr412 = ((($avr)) + 8256|0);
  $add$ptr418 = $add$ptr412;$arraydecay317 = $arraydecay311;$cond = 0;
 } else {
  $idxprom = $dec&255;
  $arrayidx = (((($avr)) + 7976|0) + ($idxprom<<2)|0);
  HEAP8[$running_ptr>>0] = $dec;
  $1 = HEAP32[$arrayidx>>2]|0;
  $add$ptr = ((($1)) + 36|0);
  _avr_raise_irq($add$ptr,0);
  $$pr = HEAP8[$running_ptr>>0]|0;
  $arraydecay3 = ((($avr)) + 8232|0);
  $add$ptr4 = ((($avr)) + 8256|0);
  $cmp = ($$pr<<24>>24)==(0);
  if ($cmp) {
   $add$ptr418 = $add$ptr4;$arraydecay317 = $arraydecay3;$cond = 0;
  } else {
   $conv = $$pr&255;
   $sub = (($conv) + -1)|0;
   $arrayidx10 = (((($avr)) + 7976|0) + ($sub<<2)|0);
   $2 = HEAP32[$arrayidx10>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv12 = $3&255;
   $add$ptr418 = $add$ptr4;$arraydecay317 = $arraydecay3;$cond = $conv12;
  }
 }
 _avr_raise_irq($add$ptr418,$cond);
 $pending$idx$i = ((($avr)) + 7964|0);
 $pending$idx$val$i = HEAP16[$pending$idx$i>>1]|0;
 $pending$idx2$i = ((($avr)) + 7966|0);
 $pending$idx2$val$i = HEAP16[$pending$idx2$i>>1]|0;
 $cmp$i$i = ($pending$idx$val$i<<16>>16)!=($pending$idx2$val$i<<16>>16);
 $lnot$ext$i = $cmp$i$i&1;
 _avr_raise_irq($arraydecay317,$lnot$ext$i);
 return;
}
function _avr_service_interrupts($avr) {
 $avr = $avr|0;
 var $$pre = 0, $$pre96 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$i = 0, $add$i79 = 0, $add$pre$phiZ2D = 0, $add$ptr71 = 0, $add$ptr74 = 0, $and$i = 0, $and$i61 = 0, $and$i61$peel = 0, $and$i65 = 0, $and$i80 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$peel = 0, $arrayidx$i63 = 0, $arrayidx$i73 = 0, $arrayidx$i81 = 0, $arrayidx39 = 0, $arrayidx84 = 0;
 var $bf$clear = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$clear50 = 0, $bf$clear56 = 0, $bf$load = 0, $bf$load49 = 0, $bf$lshr$i = 0, $bf$lshr5$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i57 = 0, $cmp$i$i70 = 0, $cmp23 = 0, $cmp78 = 0, $cmp8 = 0, $conv$i = 0, $conv1$i = 0, $conv1$i64 = 0;
 var $conv11 = 0, $conv22 = 0, $conv22$peel = 0, $conv52 = 0, $conv61 = 0, $conv66 = 0, $conv67 = 0, $conv76 = 0, $conv77 = 0, $data$i = 0, $enable62$sroa$0$0$$sroa_idx = 0, $enable62$sroa$0$0$copyload = 0, $exitcond = 0, $ii$087 = 0, $inc = 0, $inc29 = 0, $inc83 = 0, $interrupt_state = 0, $lnot$ext$i71 = 0, $min$089 = 0;
 var $mini$0$lcssa = 0, $mini$088 = 0, $mul = 0, $pc = 0, $pending$idx = 0, $pending$idx$i = 0, $pending$idx$val = 0, $pending$idx$val$i = 0, $pending$idx$val$i54 = 0, $pending$idx2$i = 0, $pending$idx2$val$i = 0, $pending$idx2$val$i56 = 0, $pending$idx2$val$i69 = 0, $pending$idx2$val$i69$pre = 0, $pending$idx52 = 0, $pending$idx52$val = 0, $pending45 = 0, $pending48 = 0, $rem = 0, $retval$0$i75 = 0;
 var $running_ptr = 0, $shr$i = 0, $spec$select = 0, $spec$select51 = 0, $sub$i = 0, $switch = 0, $tobool = 0, $tobool$i = 0, $tobool1 = 0, $tobool43 = 0, $tobool46 = 0, $tobool58 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vector_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $arrayidx = ((($avr)) + 127|0);
 $0 = HEAP8[$arrayidx>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $interrupt_state = ((($avr)) + 128|0);
 $1 = HEAP8[$interrupt_state>>0]|0;
 $tobool1 = ($1<<24>>24)==(0);
 if ($tobool1) {
  STACKTOP = sp;return;
 }
 $cmp = ($1<<24>>24)<(0);
 if ($cmp) {
  $inc = (($1) + 1)<<24>>24;
  HEAP8[$interrupt_state>>0] = $inc;
  $cmp8 = ($inc<<24>>24)==(0);
  if (!($cmp8)) {
   STACKTOP = sp;return;
  }
  $pending$idx$i = ((($avr)) + 7964|0);
  $pending$idx$val$i = HEAP16[$pending$idx$i>>1]|0;
  $pending$idx2$i = ((($avr)) + 7966|0);
  $pending$idx2$val$i = HEAP16[$pending$idx2$i>>1]|0;
  $cmp$i$i = ($pending$idx$val$i<<16>>16)!=($pending$idx2$val$i<<16>>16);
  $conv11 = $cmp$i$i&1;
  HEAP8[$interrupt_state>>0] = $conv11;
  STACKTOP = sp;return;
 }
 $pending$idx = ((($avr)) + 7964|0);
 $pending$idx$val = HEAP16[$pending$idx>>1]|0;
 $pending$idx52 = ((($avr)) + 7966|0);
 $pending$idx52$val = HEAP16[$pending$idx52>>1]|0;
 $conv$i = $pending$idx52$val&65535;
 $conv1$i = $pending$idx$val&65535;
 $sub$i = (($conv$i) - ($conv1$i))|0;
 $and$i = $sub$i & 63;
 $switch = ($and$i>>>0)<(2);
 if ($switch) {
  $mini$0$lcssa = 0;
 } else {
  $and$i61$peel = $conv1$i & 63;
  $arrayidx$i$peel = (((($avr)) + 7708|0) + ($and$i61$peel<<2)|0);
  $2 = HEAP32[$arrayidx$i$peel>>2]|0;
  $3 = HEAP8[$2>>0]|0;
  $conv22$peel = $3&255;
  $ii$087 = 1;$min$089 = $conv22$peel;$mini$088 = 0;
  while(1) {
   $add$i = (($ii$087) + ($conv1$i))|0;
   $and$i61 = $add$i & 63;
   $arrayidx$i = (((($avr)) + 7708|0) + ($and$i61<<2)|0);
   $11 = HEAP32[$arrayidx$i>>2]|0;
   $12 = HEAP8[$11>>0]|0;
   $conv22 = $12&255;
   $cmp23 = ($min$089|0)>($conv22|0);
   $spec$select = $cmp23 ? $ii$087 : $mini$088;
   $spec$select51 = $cmp23 ? $conv22 : $min$089;
   $inc29 = (($ii$087) + 1)|0;
   $exitcond = ($inc29|0)==($and$i|0);
   if ($exitcond) {
    $mini$0$lcssa = $spec$select;
    break;
   } else {
    $ii$087 = $inc29;$min$089 = $spec$select51;$mini$088 = $spec$select;
   }
  }
 }
 $add$i79 = (($mini$0$lcssa) + ($conv1$i))|0;
 $and$i80 = $add$i79 & 63;
 $arrayidx$i81 = (((($avr)) + 7708|0) + ($and$i80<<2)|0);
 $4 = HEAP32[$arrayidx$i81>>2]|0;
 $cmp$i = ($pending$idx$val<<16>>16)==($pending$idx52$val<<16>>16);
 if ($cmp$i) {
  $8 = $pending$idx$val;$add$pre$phiZ2D = $add$i79;$pending$idx2$val$i69 = $pending$idx$val;$retval$0$i75 = 0;
 } else {
  $arrayidx$i73 = (((($avr)) + 7708|0) + ($conv1$i<<2)|0);
  $5 = (($pending$idx$val) + 1)<<16>>16;
  $6 = $5 & 63;
  $7 = HEAP32[$arrayidx$i73>>2]|0;
  HEAP16[$pending$idx>>1] = $6;
  $pending$idx2$val$i69$pre = HEAP16[$pending$idx52>>1]|0;
  $$pre = $6&65535;
  $$pre96 = (($mini$0$lcssa) + ($$pre))|0;
  $8 = $6;$add$pre$phiZ2D = $$pre96;$pending$idx2$val$i69 = $pending$idx2$val$i69$pre;$retval$0$i75 = $7;
 }
 $rem = (($add$pre$phiZ2D|0) % 64)&-1;
 $arrayidx39 = (((($avr)) + 7708|0) + ($rem<<2)|0);
 HEAP32[$arrayidx39>>2] = $retval$0$i75;
 $arraydecay = ((($avr)) + 8232|0);
 $cmp$i$i70 = ($8<<16>>16)!=($pending$idx2$val$i69<<16>>16);
 $lnot$ext$i71 = $cmp$i$i70&1;
 _avr_raise_irq($arraydecay,$lnot$ext$i71);
 $enable62$sroa$0$0$$sroa_idx = ((($4)) + 4|0);
 $enable62$sroa$0$0$copyload = HEAPU8[$enable62$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$enable62$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$enable62$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$enable62$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $enable62$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if (!($tobool$i)) {
  $data$i = ((($avr)) + 5892|0);
  $9 = HEAP32[$data$i>>2]|0;
  $arrayidx$i63 = (($9) + ($bf$clear$i)|0);
  $10 = HEAP8[$arrayidx$i63>>0]|0;
  $conv1$i64 = $10&255;
  $bf$lshr$i = $enable62$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i64 >>> $bf$clear3$i;
  $bf$lshr5$i = $enable62$sroa$0$0$copyload >>> 12;
  $and$i65 = $shr$i & $bf$lshr5$i;
  $tobool43 = ($and$i65|0)==(0);
  if (!($tobool43)) {
   $pending45 = ((($4)) + 60|0);
   $bf$load = HEAP8[$pending45>>0]|0;
   $bf$clear = $bf$load & 1;
   $tobool46 = ($bf$clear<<24>>24)==(0);
   if (!($tobool46)) {
    $bf$clear56 = $bf$load & 2;
    $tobool58 = ($bf$clear56<<24>>24)==(0);
    if (!($tobool58)) {
     $13 = HEAP8[$4>>0]|0;
     $conv61 = $13&255;
     HEAP32[$vararg_buffer>>2] = 358803;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $conv61;
     (_printf(358788,$vararg_buffer)|0);
    }
    $pc = ((($avr)) + 132|0);
    $14 = HEAP32[$pc>>2]|0;
    (__avr_push_addr($avr,$14)|0);
    HEAP8[$interrupt_state>>0] = 0;
    HEAP8[$arrayidx>>0] = 0;
    $15 = HEAP8[$4>>0]|0;
    $conv66 = $15&255;
    $vector_size = ((($avr)) + 16|0);
    $16 = HEAP8[$vector_size>>0]|0;
    $conv67 = $16&255;
    $mul = Math_imul($conv67, $conv66)|0;
    HEAP32[$pc>>2] = $mul;
    $add$ptr71 = ((($4)) + 36|0);
    _avr_raise_irq($add$ptr71,1);
    $add$ptr74 = ((($avr)) + 8256|0);
    $17 = HEAP8[$4>>0]|0;
    $conv76 = $17&255;
    _avr_raise_irq($add$ptr74,$conv76);
    $running_ptr = ((($avr)) + 7972|0);
    $18 = HEAP8[$running_ptr>>0]|0;
    $cmp78 = ($18<<24>>24)==(64);
    if ($cmp78) {
     HEAP32[$vararg_buffer2>>2] = 358803;
     _avr_global_logger($avr,1,358826,$vararg_buffer2);
    } else {
     $conv77 = $18&255;
     $inc83 = (($18) + 1)<<24>>24;
     HEAP8[$running_ptr>>0] = $inc83;
     $arrayidx84 = (((($avr)) + 7976|0) + ($conv77<<2)|0);
     HEAP32[$arrayidx84>>2] = $4;
    }
    _avr_clear_interrupt($avr,$4);
    STACKTOP = sp;return;
   }
  }
 }
 $pending48 = ((($4)) + 60|0);
 $bf$load49 = HEAP8[$pending48>>0]|0;
 $bf$clear50 = $bf$load49 & -2;
 HEAP8[$pending48>>0] = $bf$clear50;
 $pending$idx$val$i54 = HEAP16[$pending$idx>>1]|0;
 $pending$idx2$val$i56 = HEAP16[$pending$idx52>>1]|0;
 $cmp$i$i57 = ($pending$idx$val$i54<<16>>16)!=($pending$idx2$val$i56<<16>>16);
 $conv52 = $cmp$i$i57&1;
 HEAP8[$interrupt_state>>0] = $conv52;
 STACKTOP = sp;return;
}
function _avr_core_watch_write($avr,$addr,$v) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$i33 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i24 = 0;
 var $arrayidx$i31 = 0, $arrayidx$i40 = 0, $arrayidx2$i = 0, $arrayidx2$i26 = 0, $arrayidx2$i34 = 0, $arrayidx2$i42 = 0, $avr$idx = 0, $avr$idx$val = 0, $avr$idx23 = 0, $avr$idx23$val = 0, $cmp = 0, $cmp10 = 0, $conv = 0, $conv$i = 0, $conv$i25 = 0, $conv$i32 = 0, $conv$i41 = 0, $conv21 = 0, $conv3$i = 0, $conv3$i27 = 0;
 var $conv3$i35 = 0, $conv3$i43 = 0, $conv8 = 0, $data = 0, $data$i = 0, $data$i39 = 0, $gdb = 0, $or$i = 0, $or$i29 = 0, $or$i37 = 0, $or$i45 = 0, $pc = 0, $pc14 = 0, $ramend = 0, $shl$i = 0, $shl$i28 = 0, $shl$i36 = 0, $shl$i44 = 0, $tobool = 0, $vararg_buffer = 0;
 var $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $conv = $addr&65535;
 $ramend = ((($avr)) + 4|0);
 $0 = HEAP16[$ramend>>1]|0;
 $cmp = ($0&65535)<($addr&65535);
 if ($cmp) {
  $pc = ((($avr)) + 132|0);
  $1 = HEAP32[$pc>>2]|0;
  $data$i = ((($avr)) + 5892|0);
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = ((($2)) + 93|0);
  $3 = HEAP8[$arrayidx$i>>0]|0;
  $conv$i = $3&255;
  $arrayidx2$i = ((($2)) + 94|0);
  $4 = HEAP8[$arrayidx2$i>>0]|0;
  $conv3$i = $4&255;
  $shl$i = $conv3$i << 8;
  $or$i = $shl$i | $conv$i;
  $avr$idx23 = ((($avr)) + 5888|0);
  $avr$idx23$val = HEAP32[$avr$idx23>>2]|0;
  $arrayidx$i24 = (($avr$idx23$val) + ($1)|0);
  $5 = HEAP8[$arrayidx$i24>>0]|0;
  $conv$i25 = $5&255;
  $add$i = (($1) + 1)|0;
  $arrayidx2$i26 = (($avr$idx23$val) + ($add$i)|0);
  $6 = HEAP8[$arrayidx2$i26>>0]|0;
  $conv3$i27 = $6&255;
  $shl$i28 = $conv3$i27 << 8;
  $or$i29 = $shl$i28 | $conv$i25;
  $conv8 = $v&255;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $or$i;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $or$i29;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $conv;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $conv8;
  _avr_global_logger($avr,1,358854,$vararg_buffer);
  _avr_sadly_crashed($avr,0);
 }
 $cmp10 = ($addr&65535)<(32);
 if ($cmp10) {
  $pc14 = ((($avr)) + 132|0);
  $7 = HEAP32[$pc14>>2]|0;
  $data$i39 = ((($avr)) + 5892|0);
  $8 = HEAP32[$data$i39>>2]|0;
  $arrayidx$i40 = ((($8)) + 93|0);
  $9 = HEAP8[$arrayidx$i40>>0]|0;
  $conv$i41 = $9&255;
  $arrayidx2$i42 = ((($8)) + 94|0);
  $10 = HEAP8[$arrayidx2$i42>>0]|0;
  $conv3$i43 = $10&255;
  $shl$i44 = $conv3$i43 << 8;
  $or$i45 = $shl$i44 | $conv$i41;
  $avr$idx = ((($avr)) + 5888|0);
  $avr$idx$val = HEAP32[$avr$idx>>2]|0;
  $arrayidx$i31 = (($avr$idx$val) + ($7)|0);
  $11 = HEAP8[$arrayidx$i31>>0]|0;
  $conv$i32 = $11&255;
  $add$i33 = (($7) + 1)|0;
  $arrayidx2$i34 = (($avr$idx$val) + ($add$i33)|0);
  $12 = HEAP8[$arrayidx2$i34>>0]|0;
  $conv3$i35 = $12&255;
  $shl$i36 = $conv3$i35 << 8;
  $or$i37 = $shl$i36 | $conv$i32;
  $conv21 = $v&255;
  HEAP32[$vararg_buffer5>>2] = $7;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $or$i45;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $or$i37;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $conv;
  $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $conv21;
  _avr_global_logger($avr,1,358939,$vararg_buffer5);
  _avr_sadly_crashed($avr,0);
 }
 $gdb = ((($avr)) + 8292|0);
 $13 = HEAP32[$gdb>>2]|0;
 $tobool = ($13|0)==(0|0);
 if ($tobool) {
  $data = ((($avr)) + 5892|0);
  $14 = HEAP32[$data>>2]|0;
  $arrayidx = (($14) + ($conv)|0);
  HEAP8[$arrayidx>>0] = $v;
  STACKTOP = sp;return;
 }
 _avr_gdb_handle_watchpoints($avr,$addr,4);
 $data = ((($avr)) + 5892|0);
 $14 = HEAP32[$data>>2]|0;
 $arrayidx = (($14) + ($conv)|0);
 HEAP8[$arrayidx>>0] = $v;
 STACKTOP = sp;return;
}
function _avr_core_watch_read($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i14 = 0, $arrayidx2$i = 0, $arrayidx2$i16 = 0, $avr$idx = 0, $avr$idx$val = 0, $cmp = 0, $conv = 0;
 var $conv$i = 0, $conv$i15 = 0, $conv3$i = 0, $conv3$i17 = 0, $conv9 = 0, $data = 0, $data$i = 0, $gdb = 0, $or$i = 0, $or$i19 = 0, $pc = 0, $ramend = 0, $shl$i = 0, $shl$i18 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $conv = $addr&65535;
 $ramend = ((($avr)) + 4|0);
 $0 = HEAP16[$ramend>>1]|0;
 $cmp = ($0&65535)<($addr&65535);
 if ($cmp) {
  $pc = ((($avr)) + 132|0);
  $1 = HEAP32[$pc>>2]|0;
  $data$i = ((($avr)) + 5892|0);
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = ((($2)) + 93|0);
  $3 = HEAP8[$arrayidx$i>>0]|0;
  $conv$i = $3&255;
  $arrayidx2$i = ((($2)) + 94|0);
  $4 = HEAP8[$arrayidx2$i>>0]|0;
  $conv3$i = $4&255;
  $shl$i = $conv3$i << 8;
  $or$i = $shl$i | $conv$i;
  $avr$idx = ((($avr)) + 5888|0);
  $avr$idx$val = HEAP32[$avr$idx>>2]|0;
  $arrayidx$i14 = (($avr$idx$val) + ($1)|0);
  $5 = HEAP8[$arrayidx$i14>>0]|0;
  $conv$i15 = $5&255;
  $add$i = (($1) + 1)|0;
  $arrayidx2$i16 = (($avr$idx$val) + ($add$i)|0);
  $6 = HEAP8[$arrayidx2$i16>>0]|0;
  $conv3$i17 = $6&255;
  $shl$i18 = $conv3$i17 << 8;
  $or$i19 = $shl$i18 | $conv$i15;
  $conv9 = $0&65535;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $or$i;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $or$i19;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $conv;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $conv9;
  _avr_global_logger($avr,1,359027,$vararg_buffer);
  _avr_sadly_crashed($avr,0);
 }
 $gdb = ((($avr)) + 8292|0);
 $7 = HEAP32[$gdb>>2]|0;
 $tobool = ($7|0)==(0|0);
 if ($tobool) {
  $data = ((($avr)) + 5892|0);
  $8 = HEAP32[$data>>2]|0;
  $arrayidx = (($8) + ($conv)|0);
  $9 = HEAP8[$arrayidx>>0]|0;
  STACKTOP = sp;return ($9|0);
 }
 _avr_gdb_handle_watchpoints($avr,$addr,8);
 $data = ((($avr)) + 5892|0);
 $8 = HEAP32[$data>>2]|0;
 $arrayidx = (($8) + ($conv)|0);
 $9 = HEAP8[$arrayidx>>0]|0;
 STACKTOP = sp;return ($9|0);
}
function __avr_sp_set($avr,$sp) {
 $avr = $avr|0;
 $sp = $sp|0;
 var $0 = 0, $conv$i = 0, $conv4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv$i = $sp&255;
 __avr_set_r($avr,93,$conv$i);
 $0 = ($sp&65535) >>> 8;
 $conv4$i = $0&255;
 __avr_set_r($avr,94,$conv4$i);
 return;
}
function __avr_set_r($avr,$r,$v) {
 $avr = $avr|0;
 $r = $r|0;
 $v = $v|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr51$1 = 0, $add$ptr51$2 = 0, $add$ptr51$3 = 0, $add$ptr51$4 = 0, $add$ptr51$5 = 0, $add$ptr51$6 = 0, $add$ptr51$7 = 0, $and = 0, $and$1 = 0, $and$1$lobit = 0, $and$2 = 0, $and$2$lobit = 0, $and$3 = 0, $and$3$lobit = 0, $and$4 = 0;
 var $and$4$lobit = 0, $and$5 = 0, $and$5$lobit = 0, $and$6 = 0, $and$6$lobit = 0, $and$7 = 0, $and$7$lobit = 0, $and53 = 0, $and53$1 = 0, $and53$2 = 0, $and53$3 = 0, $and53$4 = 0, $and53$5 = 0, $and53$6 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx29 = 0, $arrayidx61 = 0, $arrayidx9$i = 0, $arrayidx9$i$1 = 0;
 var $arrayidx9$i$2 = 0, $arrayidx9$i$3 = 0, $arrayidx9$i$4 = 0, $arrayidx9$i$5 = 0, $arrayidx9$i$6 = 0, $c = 0, $cmp = 0, $cmp10 = 0, $cmp6$7 = 0, $conv = 0, $conv40 = 0, $conv5 = 0, $data = 0, $data27 = 0, $data59 = 0, $idxprom = 0, $interrupt_state5$i = 0, $irq = 0, $param = 0, $shr$1 = 0;
 var $shr$2 = 0, $shr$3 = 0, $shr$4 = 0, $shr$5 = 0, $shr$6 = 0, $shr$7 = 0, $tobool = 0, $tobool3$i$7 = 0, $tobool34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $r&65535;
 $cmp = ($r<<16>>16)==(95);
 if ($cmp) {
  $data = ((($avr)) + 5892|0);
  $14 = HEAP32[$data>>2]|0;
  $arrayidx = ((($14)) + 95|0);
  HEAP8[$arrayidx>>0] = $v;
  $conv5 = $v&255;
  $arrayidx$i = ((($avr)) + 127|0);
  $interrupt_state5$i = ((($avr)) + 128|0);
  $and = $conv5 & 1;
  $15 = $and&255;
  $arrayidx9$i = ((($avr)) + 120|0);
  HEAP8[$arrayidx9$i>>0] = $15;
  $and$1 = $conv5 >>> 1;
  $and$1$lobit = $and$1 & 1;
  $16 = $and$1$lobit&255;
  $arrayidx9$i$1 = ((($avr)) + 121|0);
  HEAP8[$arrayidx9$i$1>>0] = $16;
  $and$2 = $conv5 >>> 2;
  $and$2$lobit = $and$2 & 1;
  $17 = $and$2$lobit&255;
  $arrayidx9$i$2 = ((($avr)) + 122|0);
  HEAP8[$arrayidx9$i$2>>0] = $17;
  $and$3 = $conv5 >>> 3;
  $and$3$lobit = $and$3 & 1;
  $18 = $and$3$lobit&255;
  $arrayidx9$i$3 = ((($avr)) + 123|0);
  HEAP8[$arrayidx9$i$3>>0] = $18;
  $and$4 = $conv5 >>> 4;
  $and$4$lobit = $and$4 & 1;
  $19 = $and$4$lobit&255;
  $arrayidx9$i$4 = ((($avr)) + 124|0);
  HEAP8[$arrayidx9$i$4>>0] = $19;
  $and$5 = $conv5 >>> 5;
  $and$5$lobit = $and$5 & 1;
  $20 = $and$5$lobit&255;
  $arrayidx9$i$5 = ((($avr)) + 125|0);
  HEAP8[$arrayidx9$i$5>>0] = $20;
  $and$6 = $conv5 >>> 6;
  $and$6$lobit = $and$6 & 1;
  $21 = $and$6$lobit&255;
  $arrayidx9$i$6 = ((($avr)) + 126|0);
  HEAP8[$arrayidx9$i$6>>0] = $21;
  $and$7$lobit = ($v&255) >>> 7;
  $and$7 = $conv5 & 128;
  $cmp6$7 = ($and$7|0)==(0);
  if ($cmp6$7) {
   $$sink = 0;
   label = 12;
  } else {
   $22 = HEAP8[$arrayidx$i>>0]|0;
   $tobool3$i$7 = ($22<<24>>24)==(0);
   if ($tobool3$i$7) {
    $$sink = -2;
    label = 12;
   }
  }
  if ((label|0) == 12) {
   HEAP8[$interrupt_state5$i>>0] = $$sink;
  }
  HEAP8[$arrayidx$i>>0] = $and$7$lobit;
 } else {
  $cmp10 = ($r&65535)>(31);
  if (!($cmp10)) {
   $data59 = ((($avr)) + 5892|0);
   $13 = HEAP32[$data59>>2]|0;
   $arrayidx61 = (($13) + ($conv)|0);
   HEAP8[$arrayidx61>>0] = $v;
   return;
  }
 }
 $0 = (($r) + -32)<<16>>16;
 $idxprom = $0&65535;
 $c = (((((($avr)) + 140|0) + (($idxprom*20)|0)|0)) + 16|0);
 $1 = HEAP32[$c>>2]|0;
 $tobool = ($1|0)==(0|0);
 if ($tobool) {
  $data27 = ((($avr)) + 5892|0);
  $3 = HEAP32[$data27>>2]|0;
  $arrayidx29 = (($3) + ($conv)|0);
  HEAP8[$arrayidx29>>0] = $v;
 } else {
  $param = (((((($avr)) + 140|0) + (($idxprom*20)|0)|0)) + 12|0);
  $2 = HEAP32[$param>>2]|0;
  FUNCTION_TABLE_viiii[$1 & 255]($avr,$r,$v,$2);
 }
 $irq = (((($avr)) + 140|0) + (($idxprom*20)|0)|0);
 $4 = HEAP32[$irq>>2]|0;
 $tobool34 = ($4|0)==(0|0);
 if ($tobool34) {
  return;
 }
 $add$ptr = ((($4)) + 192|0);
 $conv40 = $v&255;
 _avr_raise_irq($add$ptr,$conv40);
 $5 = HEAP32[$irq>>2]|0;
 $and53 = $conv40 & 1;
 _avr_raise_irq($5,$and53);
 $6 = HEAP32[$irq>>2]|0;
 $add$ptr51$1 = ((($6)) + 24|0);
 $shr$1 = $conv40 >>> 1;
 $and53$1 = $shr$1 & 1;
 _avr_raise_irq($add$ptr51$1,$and53$1);
 $7 = HEAP32[$irq>>2]|0;
 $add$ptr51$2 = ((($7)) + 48|0);
 $shr$2 = $conv40 >>> 2;
 $and53$2 = $shr$2 & 1;
 _avr_raise_irq($add$ptr51$2,$and53$2);
 $8 = HEAP32[$irq>>2]|0;
 $add$ptr51$3 = ((($8)) + 72|0);
 $shr$3 = $conv40 >>> 3;
 $and53$3 = $shr$3 & 1;
 _avr_raise_irq($add$ptr51$3,$and53$3);
 $9 = HEAP32[$irq>>2]|0;
 $add$ptr51$4 = ((($9)) + 96|0);
 $shr$4 = $conv40 >>> 4;
 $and53$4 = $shr$4 & 1;
 _avr_raise_irq($add$ptr51$4,$and53$4);
 $10 = HEAP32[$irq>>2]|0;
 $add$ptr51$5 = ((($10)) + 120|0);
 $shr$5 = $conv40 >>> 5;
 $and53$5 = $shr$5 & 1;
 _avr_raise_irq($add$ptr51$5,$and53$5);
 $11 = HEAP32[$irq>>2]|0;
 $add$ptr51$6 = ((($11)) + 144|0);
 $shr$6 = $conv40 >>> 6;
 $and53$6 = $shr$6 & 1;
 _avr_raise_irq($add$ptr51$6,$and53$6);
 $12 = HEAP32[$irq>>2]|0;
 $add$ptr51$7 = ((($12)) + 168|0);
 $shr$7 = $conv40 >>> 7;
 _avr_raise_irq($add$ptr51$7,$shr$7);
 return;
}
function __avr_push_addr($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $addr$addr$014 = 0, $address_size = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $cmp = 0, $cmp$i = 0, $cmp13 = 0, $conv = 0, $conv$i = 0, $conv2 = 0, $conv3$i = 0, $conv4$i = 0, $conv5 = 0, $data$i = 0;
 var $dec = 0, $extract = 0, $extract$t18 = 0, $extract$t19 = 0, $extract$t21 = 0, $extract20 = 0, $i$016 = 0, $inc = 0, $or$i = 0, $shl$i = 0, $shr = 0, $shr3 = 0, $sp$0$lcssa$off0 = 0, $sp$0$lcssa$off8 = 0, $sp$015 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $data$i = ((($avr)) + 5892|0);
 $0 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = ((($0)) + 93|0);
 $1 = HEAP8[$arrayidx$i>>0]|0;
 $conv$i = $1&255;
 $arrayidx2$i = ((($0)) + 94|0);
 $2 = HEAP8[$arrayidx2$i>>0]|0;
 $conv3$i = $2&255;
 $shl$i = $conv3$i << 8;
 $or$i = $shl$i | $conv$i;
 $conv4$i = $or$i&65535;
 $address_size = ((($avr)) + 28|0);
 $3 = HEAP8[$address_size>>0]|0;
 $cmp13 = ($3<<24>>24)==(0);
 $extract = ($conv4$i&65535) >>> 8;
 $extract$t19 = $extract&255;
 if ($cmp13) {
  $sp$0$lcssa$off0 = $1;$sp$0$lcssa$off8 = $extract$t19;
  __avr_set_r($avr,93,$sp$0$lcssa$off0);
  __avr_set_r($avr,94,$sp$0$lcssa$off8);
  $4 = HEAP8[$address_size>>0]|0;
  $conv5 = $4&255;
  return ($conv5|0);
 }
 $shr = $addr >>> 1;
 $addr$addr$014 = $shr;$i$016 = 0;$sp$015 = $conv4$i;
 while(1) {
  $conv2 = $addr$addr$014&255;
  $cmp$i = ($sp$015&65535)<(311);
  if ($cmp$i) {
   __avr_set_r($avr,$sp$015,$conv2);
  } else {
   _avr_core_watch_write($avr,$sp$015,$conv2);
  }
  $inc = (($i$016) + 1)|0;
  $shr3 = $addr$addr$014 >>> 8;
  $dec = (($sp$015) + -1)<<16>>16;
  $5 = HEAP8[$address_size>>0]|0;
  $conv = $5&255;
  $cmp = ($inc>>>0)<($conv>>>0);
  if ($cmp) {
   $addr$addr$014 = $shr3;$i$016 = $inc;$sp$015 = $dec;
  } else {
   break;
  }
 }
 $extract20 = ($dec&65535) >>> 8;
 $extract$t21 = $extract20&255;
 $extract$t18 = $dec&255;
 $sp$0$lcssa$off0 = $extract$t18;$sp$0$lcssa$off8 = $extract$t21;
 __avr_set_r($avr,93,$sp$0$lcssa$off0);
 __avr_set_r($avr,94,$sp$0$lcssa$off8);
 $4 = HEAP8[$address_size>>0]|0;
 $conv5 = $4&255;
 return ($conv5|0);
}
function __avr_get_ram($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i$i = 0, $add$ptr = 0;
 var $add$ptr68$1 = 0, $add$ptr68$2 = 0, $add$ptr68$3 = 0, $add$ptr68$4 = 0, $add$ptr68$5 = 0, $add$ptr68$6 = 0, $add$ptr68$7 = 0, $addr$off = 0, $and = 0, $and$1 = 0, $and$2 = 0, $and$3 = 0, $and$4 = 0, $and$5 = 0, $and$6 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i14$i = 0, $arrayidx13 = 0;
 var $arrayidx13$1 = 0, $arrayidx13$2 = 0, $arrayidx13$3 = 0, $arrayidx13$4 = 0, $arrayidx13$5 = 0, $arrayidx13$6 = 0, $arrayidx13$7 = 0, $arrayidx2$i$i = 0, $arrayidx2$i16$i = 0, $arrayidx4 = 0, $arrayidx4$1 = 0, $arrayidx4$2 = 0, $arrayidx4$3 = 0, $arrayidx4$4 = 0, $arrayidx4$5 = 0, $arrayidx4$6 = 0, $arrayidx4$7 = 0, $arrayidx43 = 0, $arrayidx52 = 0, $avr$idx$i = 0;
 var $avr$idx$val$i = 0, $c = 0, $call40 = 0, $cmp = 0, $cmp$i = 0, $cmp6 = 0, $cmp6$1 = 0, $cmp6$2 = 0, $cmp6$3 = 0, $cmp6$4 = 0, $cmp6$5 = 0, $cmp6$6 = 0, $cmp6$7 = 0, $conv = 0, $conv$i$i = 0, $conv$i15$i = 0, $conv3$i$i = 0, $conv3$i17$i = 0, $conv57 = 0, $conv9$i = 0;
 var $data = 0, $data$i = 0, $data$i$i = 0, $data41 = 0, $data50 = 0, $gdb$i = 0, $idxprom = 0, $irq = 0, $or$i$i = 0, $or$i19$i = 0, $param = 0, $pc$i = 0, $ramend$i = 0, $shl$i$i = 0, $shl$i18$i = 0, $shr$1 = 0, $shr$2 = 0, $shr$3 = 0, $shr$4 = 0, $shr$5 = 0;
 var $shr$6 = 0, $shr$7 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$4 = 0, $tobool$5 = 0, $tobool$6 = 0, $tobool$7 = 0, $tobool$i = 0, $tobool29 = 0, $tobool48 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $conv = $addr&65535;
 $cmp = ($addr<<16>>16)==(95);
 do {
  if ($cmp) {
   $data = ((($avr)) + 5892|0);
   $0 = HEAP32[$data>>2]|0;
   $arrayidx = ((($0)) + 95|0);
   HEAP8[$arrayidx>>0] = 0;
   $arrayidx4 = ((($avr)) + 120|0);
   $1 = HEAP8[$arrayidx4>>0]|0;
   $cmp6 = ($1&255)>(1);
   if ($cmp6) {
    (_puts(359816)|0);
   } else {
    $tobool = ($1<<24>>24)==(0);
    if (!($tobool)) {
     $2 = HEAP32[$data>>2]|0;
     $arrayidx13 = ((($2)) + 95|0);
     $3 = HEAP8[$arrayidx13>>0]|0;
     $4 = $3 | 1;
     HEAP8[$arrayidx13>>0] = $4;
    }
   }
   $arrayidx4$1 = ((($avr)) + 121|0);
   $5 = HEAP8[$arrayidx4$1>>0]|0;
   $cmp6$1 = ($5&255)>(1);
   if ($cmp6$1) {
    (_puts(359816)|0);
   } else {
    $tobool$1 = ($5<<24>>24)==(0);
    if (!($tobool$1)) {
     $31 = HEAP32[$data>>2]|0;
     $arrayidx13$1 = ((($31)) + 95|0);
     $32 = HEAP8[$arrayidx13$1>>0]|0;
     $33 = $32 | 2;
     HEAP8[$arrayidx13$1>>0] = $33;
    }
   }
   $arrayidx4$2 = ((($avr)) + 122|0);
   $34 = HEAP8[$arrayidx4$2>>0]|0;
   $cmp6$2 = ($34&255)>(1);
   if ($cmp6$2) {
    (_puts(359816)|0);
   } else {
    $tobool$2 = ($34<<24>>24)==(0);
    if (!($tobool$2)) {
     $35 = HEAP32[$data>>2]|0;
     $arrayidx13$2 = ((($35)) + 95|0);
     $36 = HEAP8[$arrayidx13$2>>0]|0;
     $37 = $36 | 4;
     HEAP8[$arrayidx13$2>>0] = $37;
    }
   }
   $arrayidx4$3 = ((($avr)) + 123|0);
   $38 = HEAP8[$arrayidx4$3>>0]|0;
   $cmp6$3 = ($38&255)>(1);
   if ($cmp6$3) {
    (_puts(359816)|0);
   } else {
    $tobool$3 = ($38<<24>>24)==(0);
    if (!($tobool$3)) {
     $39 = HEAP32[$data>>2]|0;
     $arrayidx13$3 = ((($39)) + 95|0);
     $40 = HEAP8[$arrayidx13$3>>0]|0;
     $41 = $40 | 8;
     HEAP8[$arrayidx13$3>>0] = $41;
    }
   }
   $arrayidx4$4 = ((($avr)) + 124|0);
   $42 = HEAP8[$arrayidx4$4>>0]|0;
   $cmp6$4 = ($42&255)>(1);
   if ($cmp6$4) {
    (_puts(359816)|0);
   } else {
    $tobool$4 = ($42<<24>>24)==(0);
    if (!($tobool$4)) {
     $43 = HEAP32[$data>>2]|0;
     $arrayidx13$4 = ((($43)) + 95|0);
     $44 = HEAP8[$arrayidx13$4>>0]|0;
     $45 = $44 | 16;
     HEAP8[$arrayidx13$4>>0] = $45;
    }
   }
   $arrayidx4$5 = ((($avr)) + 125|0);
   $46 = HEAP8[$arrayidx4$5>>0]|0;
   $cmp6$5 = ($46&255)>(1);
   if ($cmp6$5) {
    (_puts(359816)|0);
   } else {
    $tobool$5 = ($46<<24>>24)==(0);
    if (!($tobool$5)) {
     $47 = HEAP32[$data>>2]|0;
     $arrayidx13$5 = ((($47)) + 95|0);
     $48 = HEAP8[$arrayidx13$5>>0]|0;
     $49 = $48 | 32;
     HEAP8[$arrayidx13$5>>0] = $49;
    }
   }
   $arrayidx4$6 = ((($avr)) + 126|0);
   $50 = HEAP8[$arrayidx4$6>>0]|0;
   $cmp6$6 = ($50&255)>(1);
   if ($cmp6$6) {
    (_puts(359816)|0);
   } else {
    $tobool$6 = ($50<<24>>24)==(0);
    if (!($tobool$6)) {
     $51 = HEAP32[$data>>2]|0;
     $arrayidx13$6 = ((($51)) + 95|0);
     $52 = HEAP8[$arrayidx13$6>>0]|0;
     $53 = $52 | 64;
     HEAP8[$arrayidx13$6>>0] = $53;
    }
   }
   $arrayidx4$7 = ((($avr)) + 127|0);
   $54 = HEAP8[$arrayidx4$7>>0]|0;
   $cmp6$7 = ($54&255)>(1);
   if ($cmp6$7) {
    (_puts(359816)|0);
    break;
   }
   $tobool$7 = ($54<<24>>24)==(0);
   if (!($tobool$7)) {
    $55 = HEAP32[$data>>2]|0;
    $arrayidx13$7 = ((($55)) + 95|0);
    $56 = HEAP8[$arrayidx13$7>>0]|0;
    $57 = $56 | -128;
    HEAP8[$arrayidx13$7>>0] = $57;
   }
  } else {
   $addr$off = (($addr) + -32)<<16>>16;
   $6 = ($addr$off&65535)<(279);
   if ($6) {
    $idxprom = $addr$off&65535;
    $c = (((((($avr)) + 140|0) + (($idxprom*20)|0)|0)) + 8|0);
    $7 = HEAP32[$c>>2]|0;
    $tobool29 = ($7|0)==(0|0);
    if (!($tobool29)) {
     $param = (((((($avr)) + 140|0) + (($idxprom*20)|0)|0)) + 4|0);
     $8 = HEAP32[$param>>2]|0;
     $call40 = (FUNCTION_TABLE_iiii[$7 & 255]($avr,$addr,$8)|0);
     $data41 = ((($avr)) + 5892|0);
     $9 = HEAP32[$data41>>2]|0;
     $arrayidx43 = (($9) + ($conv)|0);
     HEAP8[$arrayidx43>>0] = $call40;
    }
    $irq = (((($avr)) + 140|0) + (($idxprom*20)|0)|0);
    $10 = HEAP32[$irq>>2]|0;
    $tobool48 = ($10|0)==(0|0);
    if (!($tobool48)) {
     $data50 = ((($avr)) + 5892|0);
     $11 = HEAP32[$data50>>2]|0;
     $arrayidx52 = (($11) + ($conv)|0);
     $12 = HEAP8[$arrayidx52>>0]|0;
     $add$ptr = ((($10)) + 192|0);
     $conv57 = $12&255;
     _avr_raise_irq($add$ptr,$conv57);
     $13 = HEAP32[$irq>>2]|0;
     $and = $conv57 & 1;
     _avr_raise_irq($13,$and);
     $14 = HEAP32[$irq>>2]|0;
     $add$ptr68$1 = ((($14)) + 24|0);
     $shr$1 = $conv57 >>> 1;
     $and$1 = $shr$1 & 1;
     _avr_raise_irq($add$ptr68$1,$and$1);
     $15 = HEAP32[$irq>>2]|0;
     $add$ptr68$2 = ((($15)) + 48|0);
     $shr$2 = $conv57 >>> 2;
     $and$2 = $shr$2 & 1;
     _avr_raise_irq($add$ptr68$2,$and$2);
     $16 = HEAP32[$irq>>2]|0;
     $add$ptr68$3 = ((($16)) + 72|0);
     $shr$3 = $conv57 >>> 3;
     $and$3 = $shr$3 & 1;
     _avr_raise_irq($add$ptr68$3,$and$3);
     $17 = HEAP32[$irq>>2]|0;
     $add$ptr68$4 = ((($17)) + 96|0);
     $shr$4 = $conv57 >>> 4;
     $and$4 = $shr$4 & 1;
     _avr_raise_irq($add$ptr68$4,$and$4);
     $18 = HEAP32[$irq>>2]|0;
     $add$ptr68$5 = ((($18)) + 120|0);
     $shr$5 = $conv57 >>> 5;
     $and$5 = $shr$5 & 1;
     _avr_raise_irq($add$ptr68$5,$and$5);
     $19 = HEAP32[$irq>>2]|0;
     $add$ptr68$6 = ((($19)) + 144|0);
     $shr$6 = $conv57 >>> 6;
     $and$6 = $shr$6 & 1;
     _avr_raise_irq($add$ptr68$6,$and$6);
     $20 = HEAP32[$irq>>2]|0;
     $add$ptr68$7 = ((($20)) + 168|0);
     $shr$7 = $conv57 >>> 7;
     _avr_raise_irq($add$ptr68$7,$shr$7);
    }
   }
  }
 } while(0);
 $ramend$i = ((($avr)) + 4|0);
 $21 = HEAP16[$ramend$i>>1]|0;
 $cmp$i = ($21&65535)<($addr&65535);
 if ($cmp$i) {
  $pc$i = ((($avr)) + 132|0);
  $22 = HEAP32[$pc$i>>2]|0;
  $data$i$i = ((($avr)) + 5892|0);
  $23 = HEAP32[$data$i$i>>2]|0;
  $arrayidx$i$i = ((($23)) + 93|0);
  $24 = HEAP8[$arrayidx$i$i>>0]|0;
  $conv$i$i = $24&255;
  $arrayidx2$i$i = ((($23)) + 94|0);
  $25 = HEAP8[$arrayidx2$i$i>>0]|0;
  $conv3$i$i = $25&255;
  $shl$i$i = $conv3$i$i << 8;
  $or$i$i = $shl$i$i | $conv$i$i;
  $avr$idx$i = ((($avr)) + 5888|0);
  $avr$idx$val$i = HEAP32[$avr$idx$i>>2]|0;
  $arrayidx$i14$i = (($avr$idx$val$i) + ($22)|0);
  $26 = HEAP8[$arrayidx$i14$i>>0]|0;
  $conv$i15$i = $26&255;
  $add$i$i = (($22) + 1)|0;
  $arrayidx2$i16$i = (($avr$idx$val$i) + ($add$i$i)|0);
  $27 = HEAP8[$arrayidx2$i16$i>>0]|0;
  $conv3$i17$i = $27&255;
  $shl$i18$i = $conv3$i17$i << 8;
  $or$i19$i = $shl$i18$i | $conv$i15$i;
  $conv9$i = $21&65535;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $or$i$i;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $or$i19$i;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $conv;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $conv9$i;
  _avr_global_logger($avr,1,359027,$vararg_buffer);
  _avr_sadly_crashed($avr,0);
 }
 $gdb$i = ((($avr)) + 8292|0);
 $28 = HEAP32[$gdb$i>>2]|0;
 $tobool$i = ($28|0)==(0|0);
 if ($tobool$i) {
  $data$i = ((($avr)) + 5892|0);
  $29 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($29) + ($conv)|0);
  $30 = HEAP8[$arrayidx$i>>0]|0;
  STACKTOP = sp;return ($30|0);
 }
 _avr_gdb_handle_watchpoints($avr,$addr,8);
 $data$i = ((($avr)) + 5892|0);
 $29 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($29) + ($conv)|0);
 $30 = HEAP8[$arrayidx$i>>0]|0;
 STACKTOP = sp;return ($30|0);
}
function _avr_run_one($avr) {
 $avr = $avr|0;
 var $$pr = 0, $$pre = 0, $$pre1426 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$i = 0, $add$i$i1058 = 0, $add$i$i742 = 0, $add$i$i874 = 0, $add$i$i988 = 0, $add$i1207 = 0, $add$i1218 = 0, $add$i1293 = 0;
 var $add$i1301 = 0, $add$i1325 = 0, $add$i1363 = 0, $add100 = 0, $add110 = 0, $add1123 = 0, $add115 = 0, $add1227 = 0, $add1230 = 0, $add1238 = 0, $add1252 = 0, $add1261 = 0, $add1286 = 0, $add1301 = 0, $add1335 = 0, $add1354 = 0, $add1372 = 0, $add1375 = 0, $add1383 = 0, $add1402 = 0;
 var $add142 = 0, $add1420 = 0, $add1423 = 0, $add147 = 0, $add1484 = 0, $add1501 = 0, $add1516 = 0, $add1527 = 0, $add1529 = 0, $add1539 = 0, $add1588 = 0, $add1683 = 0, $add1686 = 0, $add290 = 0, $add293 = 0, $add343 = 0, $add347 = 0, $add44 = 0, $add471 = 0, $add490 = 0;
 var $add516 = 0, $add538 = 0, $add560 = 0, $add607 = 0, $add616 = 0, $add650 = 0, $add659 = 0, $add735 = 0, $add758 = 0, $add960 = 0, $address_size$i = 0, $and$i = 0, $and$i1030 = 0, $and$i1071 = 0, $and$i1101 = 0, $and$i749 = 0, $and$i770 = 0, $and$i846 = 0, $and$i887 = 0, $and$i916 = 0;
 var $and$shrunk = 0, $and$shrunk676 = 0, $and$shrunk677 = 0, $and$shrunk678 = 0, $and$shrunk679 = 0, $and$shrunk680 = 0, $and$shrunk681 = 0, $and$shrunk682 = 0, $and$shrunk683 = 0, $and$shrunk693 = 0, $and$shrunk694 = 0, $and$shrunk698 = 0, $and$shrunk700 = 0, $and$shrunk702 = 0, $and$shrunk704 = 0, $and$shrunk705 = 0, $and$shrunk707 = 0, $and$shrunk708 = 0, $and1036 = 0, $and1047 = 0;
 var $and1063 = 0, $and1079 = 0, $and109 = 0, $and1098 = 0, $and11 = 0, $and1115 = 0, $and1135 = 0, $and1145 = 0, $and1152 = 0, $and1168 = 0, $and1187 = 0, $and12$i = 0, $and12$i1037 = 0, $and12$i1078 = 0, $and12$i1108 = 0, $and12$i756 = 0, $and12$i777 = 0, $and12$i853 = 0, $and12$i894 = 0, $and12$i923 = 0;
 var $and1205 = 0, $and1207 = 0, $and1218 = 0, $and1220 = 0, $and1237 = 0, $and1241 = 0, $and1243 = 0, $and1266 = 0, $and1275 = 0, $and1285 = 0, $and1289 = 0, $and129 = 0, $and1291 = 0, $and1316 = 0, $and1325 = 0, $and1337 = 0, $and1346 = 0, $and1357 = 0, $and1365 = 0, $and1386 = 0;
 var $and1405 = 0, $and141 = 0, $and1413 = 0, $and1428 = 0, $and1432 = 0, $and1433 = 0, $and1438 = 0, $and146 = 0, $and1473 = 0, $and1477 = 0, $and1482 = 0, $and1499 = 0, $and15$i = 0, $and15$i915 = 0, $and150 = 0, $and1538 = 0, $and1544 = 0, $and1549 = 0, $and1557 = 0, $and1559 = 0;
 var $and1593 = 0, $and1600 = 0, $and1610 = 0, $and1623 = 0, $and1630 = 0, $and1635 = 0, $and1642 = 0, $and1649 = 0, $and1656 = 0, $and1662 = 0, $and197 = 0, $and23$i = 0, $and23$i1044 = 0, $and23$i1085 = 0, $and23$i1115 = 0, $and23$i784 = 0, $and23$i860 = 0, $and23$i901 = 0, $and234 = 0, $and238 = 0;
 var $and239 = 0, $and244 = 0, $and25 = 0, $and25$i = 0, $and25$i928 = 0, $and26 = 0, $and26$i = 0, $and26$i1045 = 0, $and26$i1086 = 0, $and26$i1116 = 0, $and26$i785 = 0, $and26$i861 = 0, $and26$i902 = 0, $and263 = 0, $and264 = 0, $and269 = 0, $and30$demorgan16$i = 0, $and30$demorgan16$i929 = 0, $and300 = 0, $and301 = 0;
 var $and306 = 0, $and31 = 0, $and32$i = 0, $and32$i1046 = 0, $and32$i1087 = 0, $and32$i1117 = 0, $and32$i761 = 0, $and32$i786 = 0, $and32$i862 = 0, $and32$i903 = 0, $and32$i931 = 0, $and3217$i = 0, $and3217$i930 = 0, $and324 = 0, $and325 = 0, $and330 = 0, $and360 = 0, $and364 = 0, $and365 = 0, $and370 = 0;
 var $and383701 = 0, $and396 = 0, $and397 = 0, $and4$i = 0, $and4$i752 = 0, $and4$i773 = 0, $and4$i849 = 0, $and4$i890 = 0, $and4$i919 = 0, $and402 = 0, $and415$i = 0, $and415$i10321420 = 0, $and415$i10731419 = 0, $and415$i11031418 = 0, $and415$i772 = 0, $and415$i848 = 0, $and415$i889 = 0, $and427 = 0, $and428 = 0, $and433 = 0;
 var $and456 = 0, $and457 = 0, $and470 = 0, $and475 = 0, $and489 = 0, $and495 = 0, $and5 = 0, $and515 = 0, $and521 = 0, $and537 = 0, $and543 = 0, $and559 = 0, $and56 = 0, $and565 = 0, $and57 = 0, $and575 = 0, $and579 = 0, $and592 = 0, $and596 = 0, $and599 = 0;
 var $and602 = 0, $and62 = 0, $and634 = 0, $and639 = 0, $and642 = 0, $and645 = 0, $and667 = 0, $and672 = 0, $and674 = 0, $and698 = 0, $and699 = 0, $and7 = 0, $and751 = 0, $and777 = 0, $and8 = 0, $and8$i = 0, $and8$i1034 = 0, $and8$i1075 = 0, $and8$i1105 = 0, $and8$i753 = 0;
 var $and8$i774 = 0, $and8$i850 = 0, $and8$i891 = 0, $and8$i920 = 0, $and812 = 0, $and827 = 0, $and857 = 0, $and860 = 0, $and889 = 0, $and90 = 0, $and919 = 0, $and922 = 0, $and952 = 0, $and964 = 0, $and995 = 0, $and998 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i1012 = 0;
 var $arrayidx$i$i1052 = 0, $arrayidx$i$i1056 = 0, $arrayidx$i$i1155 = 0, $arrayidx$i$i1177 = 0, $arrayidx$i$i1201 = 0, $arrayidx$i$i1248 = 0, $arrayidx$i$i1357 = 0, $arrayidx$i$i1368 = 0, $arrayidx$i$i740 = 0, $arrayidx$i$i811 = 0, $arrayidx$i$i828 = 0, $arrayidx$i$i872 = 0, $arrayidx$i$i943 = 0, $arrayidx$i$i960 = 0, $arrayidx$i$i986 = 0, $arrayidx$i1039 = 0, $arrayidx$i1193 = 0, $arrayidx$i1216 = 0, $arrayidx$i1291 = 0, $arrayidx$i1299 = 0;
 var $arrayidx$i1323 = 0, $arrayidx1003 = 0, $arrayidx1006 = 0, $arrayidx101 = 0, $arrayidx1010 = 0, $arrayidx1041 = 0, $arrayidx1052 = 0, $arrayidx1068 = 0, $arrayidx1103 = 0, $arrayidx1120 = 0, $arrayidx1140 = 0, $arrayidx1157 = 0, $arrayidx1173 = 0, $arrayidx1192 = 0, $arrayidx120 = 0, $arrayidx124 = 0, $arrayidx1248 = 0, $arrayidx1253 = 0, $arrayidx1297 = 0, $arrayidx1302 = 0;
 var $arrayidx1443 = 0, $arrayidx1447 = 0, $arrayidx1489 = 0, $arrayidx15 = 0, $arrayidx15$i$i1055 = 0, $arrayidx154 = 0, $arrayidx1564 = 0, $arrayidx158 = 0, $arrayidx1598 = 0, $arrayidx1612 = 0, $arrayidx1628 = 0, $arrayidx1647 = 0, $arrayidx169 = 0, $arrayidx173 = 0, $arrayidx187 = 0, $arrayidx19$i1041 = 0, $arrayidx191 = 0, $arrayidx2$i = 0, $arrayidx2$i$i = 0, $arrayidx2$i$i1014 = 0;
 var $arrayidx2$i$i1059 = 0, $arrayidx2$i$i1157 = 0, $arrayidx2$i$i1179 = 0, $arrayidx2$i$i1203 = 0, $arrayidx2$i$i1250 = 0, $arrayidx2$i$i1359 = 0, $arrayidx2$i$i1370 = 0, $arrayidx2$i$i743 = 0, $arrayidx2$i$i813 = 0, $arrayidx2$i$i830 = 0, $arrayidx2$i$i875 = 0, $arrayidx2$i$i945 = 0, $arrayidx2$i$i962 = 0, $arrayidx2$i$i989 = 0, $arrayidx2$i1219 = 0, $arrayidx2$i1294 = 0, $arrayidx2$i1302 = 0, $arrayidx2$i1326 = 0, $arrayidx205 = 0, $arrayidx209 = 0;
 var $arrayidx249 = 0, $arrayidx253 = 0, $arrayidx274 = 0, $arrayidx278 = 0, $arrayidx311 = 0, $arrayidx315 = 0, $arrayidx335 = 0, $arrayidx339 = 0, $arrayidx36 = 0, $arrayidx375 = 0, $arrayidx379 = 0, $arrayidx38$i1049 = 0, $arrayidx40 = 0, $arrayidx407 = 0, $arrayidx411 = 0, $arrayidx438 = 0, $arrayidx442 = 0, $arrayidx463 = 0, $arrayidx480 = 0, $arrayidx501 = 0;
 var $arrayidx527 = 0, $arrayidx549 = 0, $arrayidx571 = 0, $arrayidx582 = 0, $arrayidx585 = 0, $arrayidx6$i$i1053 = 0, $arrayidx61$i = 0, $arrayidx61$i1227 = 0, $arrayidx61$i1229 = 0, $arrayidx61$i1266 = 0, $arrayidx61$i1268 = 0, $arrayidx61$i1272 = 0, $arrayidx61$i1274 = 0, $arrayidx61$i1282 = 0, $arrayidx61$i1284 = 0, $arrayidx61$i1288 = 0, $arrayidx61$i1290 = 0, $arrayidx61$i1320 = 0, $arrayidx61$i1322 = 0, $arrayidx61$i1343 = 0;
 var $arrayidx61$i1345 = 0, $arrayidx61$i1353 = 0, $arrayidx61$i1355 = 0, $arrayidx61$i807 = 0, $arrayidx61$i984 = 0, $arrayidx611 = 0, $arrayidx624 = 0, $arrayidx627 = 0, $arrayidx654 = 0, $arrayidx67 = 0, $arrayidx705 = 0, $arrayidx708 = 0, $arrayidx71 = 0, $arrayidx717 = 0, $arrayidx739 = 0, $arrayidx742 = 0, $arrayidx749 = 0, $arrayidx769 = 0, $arrayidx772 = 0, $arrayidx781 = 0;
 var $arrayidx793 = 0, $arrayidx796 = 0, $arrayidx803 = 0, $arrayidx815 = 0, $arrayidx834 = 0, $arrayidx838 = 0, $arrayidx865 = 0, $arrayidx868 = 0, $arrayidx872 = 0, $arrayidx895 = 0, $arrayidx899 = 0, $arrayidx9$i = 0, $arrayidx927 = 0, $arrayidx930 = 0, $arrayidx934 = 0, $arrayidx957 = 0, $arrayidx96 = 0, $arrayidx971 = 0, $arrayidx975 = 0, $avr$idx730 = 0;
 var $avr$idx730$val = 0, $avr$idx732$val = 0, $avr$idx733$val = 0, $c$0 = 0, $c$0$in = 0, $call1228 = 0, $call1342 = 0, $call1362 = 0, $call1391 = 0, $call1410 = 0, $call1505 = 0, $call1526 = 0, $call2$i = 0, $call4$i = 0, $call618 = 0, $call661 = 0, $call680 = 0, $call724 = 0, $call760 = 0, $call848 = 0;
 var $call910 = 0, $call986 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i1005 = 0, $cmp$i$i1050 = 0, $cmp$i$i1121 = 0, $cmp$i$i1128 = 0, $cmp$i$i1143 = 0, $cmp$i$i1375 = 0, $cmp$i$i1382 = 0, $cmp$i$i866 = 0, $cmp$i$i907 = 0, $cmp$i$i935 = 0, $cmp$i$i976 = 0, $cmp$i$i999 = 0, $cmp$i1148 = 0, $cmp$i1149 = 0, $cmp$i1171 = 0;
 var $cmp$i1214 = 0, $cmp$i1230 = 0, $cmp$i1275 = 0, $cmp$i1307 = 0, $cmp$i1313 = 0, $cmp$i1331 = 0, $cmp$i1336 = 0, $cmp$i1346 = 0, $cmp$i1387 = 0, $cmp$i1394 = 0, $cmp$i1401 = 0, $cmp$i1409 = 0, $cmp1015 = 0, $cmp1020 = 0, $cmp1084 = 0, $cmp1090 = 0, $cmp1127 = 0, $cmp1199 = 0, $cmp13$i = 0, $cmp134 = 0;
 var $cmp1424 = 0, $cmp1455 = 0, $cmp1560 = 0, $cmp1657 = 0, $cmp1698 = 0, $cmp1706 = 0, $cmp224 = 0, $cmp282 = 0, $cmp668 = 0, $cmp843 = 0, $cmp849 = 0, $cmp877 = 0, $cmp882 = 0, $cmp904 = 0, $cmp911 = 0, $cmp939 = 0, $cmp944 = 0, $cmp980 = 0, $cmp987 = 0, $cond = 0;
 var $cond1 = 0, $cond1616 = 0, $cond2 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i1365 = 0, $conv$i$i$i1379 = 0, $conv$i$i1013 = 0, $conv$i$i1057 = 0, $conv$i$i1156 = 0, $conv$i$i1178 = 0, $conv$i$i1202 = 0, $conv$i$i1249 = 0, $conv$i$i1358 = 0, $conv$i$i1369 = 0, $conv$i$i741 = 0, $conv$i$i812 = 0, $conv$i$i829 = 0, $conv$i$i873 = 0;
 var $conv$i$i944 = 0, $conv$i$i961 = 0, $conv$i$i987 = 0, $conv$i1217 = 0, $conv$i1292 = 0, $conv$i1300 = 0, $conv$i1324 = 0, $conv$i801 = 0, $conv$i804 = 0, $conv$i981 = 0, $conv1$i1208 = 0, $conv1$i1364 = 0, $conv1007 = 0, $conv1011 = 0, $conv1013 = 0, $conv1030 = 0, $conv1057 = 0, $conv106 = 0, $conv1070 = 0, $conv1072 = 0;
 var $conv1073 = 0, $conv1080 = 0, $conv1086 = 0, $conv1092 = 0, $conv1105 = 0, $conv1110 = 0, $conv1111 = 0, $conv1122 = 0, $conv1124 = 0, $conv1125 = 0, $conv1129 = 0, $conv1142 = 0, $conv1147 = 0, $conv1148 = 0, $conv1162 = 0, $conv1179 = 0, $conv1182 = 0, $conv1183 = 0, $conv1194 = 0, $conv1196 = 0;
 var $conv1197 = 0, $conv1201 = 0, $conv121 = 0, $conv1249 = 0, $conv125 = 0, $conv1254 = 0, $conv126 = 0, $conv1262 = 0, $conv1265 = 0, $conv1269 = 0, $conv1278 = 0, $conv1298 = 0, $conv13$i = 0, $conv13$i1038 = 0, $conv13$i1079 = 0, $conv13$i1109 = 0, $conv13$i1136 = 0, $conv13$i1239 = 0, $conv13$i757 = 0, $conv13$i778 = 0;
 var $conv13$i854 = 0, $conv13$i895 = 0, $conv13$i924 = 0, $conv130 = 0, $conv1303 = 0, $conv1311 = 0, $conv1314 = 0, $conv1319 = 0, $conv1328 = 0, $conv1341 = 0, $conv1343 = 0, $conv1347 = 0, $conv136 = 0, $conv1361 = 0, $conv1363 = 0, $conv1390 = 0, $conv1392 = 0, $conv1395 = 0, $conv1409 = 0, $conv1411 = 0;
 var $conv1449 = 0, $conv1450 = 0, $conv1452 = 0, $conv1457 = 0, $conv1463 = 0, $conv1486 = 0, $conv1503 = 0, $conv1504 = 0, $conv1546 = 0, $conv1547 = 0, $conv155 = 0, $conv159 = 0, $conv16 = 0, $conv1607 = 0, $conv1618 = 0, $conv1619 = 0, $conv1632 = 0, $conv1636 = 0, $conv1660 = 0, $conv17 = 0;
 var $conv17$i = 0, $conv17$i1040 = 0, $conv17$i1081 = 0, $conv17$i1111 = 0, $conv17$i759 = 0, $conv17$i780 = 0, $conv17$i856 = 0, $conv17$i897 = 0, $conv17$i926 = 0, $conv170 = 0, $conv174 = 0, $conv188 = 0, $conv19 = 0, $conv192 = 0, $conv2$i$i = 0, $conv2$i$i1000 = 0, $conv2$i$i1006 = 0, $conv2$i$i1051 = 0, $conv2$i$i1122 = 0, $conv2$i$i1129 = 0;
 var $conv2$i$i1144 = 0, $conv2$i$i1383 = 0, $conv2$i$i867 = 0, $conv2$i$i908 = 0, $conv2$i$i936 = 0, $conv2$i$i977 = 0, $conv2$i1133 = 0, $conv2$i1213 = 0, $conv2$i1231 = 0, $conv2$i1308 = 0, $conv2$i1332 = 0, $conv2$i1378 = 0, $conv2$i1388 = 0, $conv2$i1395 = 0, $conv2$i1402 = 0, $conv2$i1410 = 0, $conv206 = 0, $conv21 = 0, $conv210 = 0, $conv226 = 0;
 var $conv255 = 0, $conv256 = 0, $conv258 = 0, $conv259 = 0, $conv3$i = 0, $conv3$i$i = 0, $conv3$i$i1015 = 0, $conv3$i$i1060 = 0, $conv3$i$i1158 = 0, $conv3$i$i1180 = 0, $conv3$i$i1204 = 0, $conv3$i$i1251 = 0, $conv3$i$i1360 = 0, $conv3$i$i1371 = 0, $conv3$i$i744 = 0, $conv3$i$i814 = 0, $conv3$i$i831 = 0, $conv3$i$i876 = 0, $conv3$i$i946 = 0, $conv3$i$i963 = 0;
 var $conv3$i$i990 = 0, $conv3$i1031 = 0, $conv3$i1072 = 0, $conv3$i1102 = 0, $conv3$i1140 = 0, $conv3$i1220 = 0, $conv3$i1224 = 0, $conv3$i1244 = 0, $conv3$i1263 = 0, $conv3$i1269 = 0, $conv3$i1279 = 0, $conv3$i1285 = 0, $conv3$i1295 = 0, $conv3$i1303 = 0, $conv3$i1317 = 0, $conv3$i1327 = 0, $conv3$i1340 = 0, $conv3$i1350 = 0, $conv3$i736 = 0, $conv3$i750 = 0;
 var $conv3$i771 = 0, $conv3$i847 = 0, $conv3$i888 = 0, $conv3$i917 = 0, $conv317 = 0, $conv318 = 0, $conv320 = 0, $conv341 = 0, $conv342 = 0, $conv346 = 0, $conv348 = 0, $conv356 = 0, $conv36$i = 0, $conv36$i1048 = 0, $conv36$i1089 = 0, $conv36$i1119 = 0, $conv36$i763 = 0, $conv36$i788 = 0, $conv36$i864 = 0, $conv36$i905 = 0;
 var $conv36$i933 = 0, $conv392 = 0, $conv4$i = 0, $conv4$i$i = 0, $conv4$i$i$i = 0, $conv4$i$i$i1366 = 0, $conv4$i$i$i1380 = 0, $conv4$i$i1063 = 0, $conv4$i$i1374 = 0, $conv4$i$i879 = 0, $conv4$i$i993 = 0, $conv4$i1135 = 0, $conv4$i1141 = 0, $conv4$i1223 = 0, $conv4$i1225 = 0, $conv4$i1233 = 0, $conv4$i1245 = 0, $conv4$i1264 = 0, $conv4$i1270 = 0, $conv4$i1280 = 0;
 var $conv4$i1286 = 0, $conv4$i1318 = 0, $conv4$i1330 = 0, $conv4$i1341 = 0, $conv4$i1351 = 0, $conv4$i802 = 0, $conv4$i805 = 0, $conv4$i982 = 0, $conv42 = 0, $conv423 = 0, $conv43 = 0, $conv448 = 0, $conv45 = 0, $conv465 = 0, $conv482 = 0, $conv485 = 0, $conv5$i = 0, $conv503 = 0, $conv508 = 0, $conv510 = 0;
 var $conv511 = 0, $conv52 = 0, $conv529 = 0, $conv532 = 0, $conv533 = 0, $conv551 = 0, $conv554 = 0, $conv555 = 0, $conv573 = 0, $conv576 = 0, $conv577 = 0, $conv583 = 0, $conv586 = 0, $conv608 = 0, $conv613 = 0, $conv617 = 0, $conv625 = 0, $conv628 = 0, $conv651 = 0, $conv656 = 0;
 var $conv660 = 0, $conv706 = 0, $conv709 = 0, $conv718 = 0, $conv73 = 0, $conv733 = 0, $conv74 = 0, $conv740 = 0, $conv743 = 0, $conv759 = 0, $conv770 = 0, $conv773 = 0, $conv776 = 0, $conv778 = 0, $conv78 = 0, $conv794 = 0, $conv797 = 0, $conv8$i = 0, $conv80 = 0, $conv804 = 0;
 var $conv81 = 0, $conv813 = 0, $conv821 = 0, $conv822 = 0, $conv835 = 0, $conv839 = 0, $conv841 = 0, $conv854 = 0, $conv869 = 0, $conv873 = 0, $conv875 = 0, $conv896 = 0, $conv9$i = 0, $conv9$i1210 = 0, $conv9$i1235 = 0, $conv900 = 0, $conv902 = 0, $conv916 = 0, $conv931 = 0, $conv935 = 0;
 var $conv937 = 0, $conv972 = 0, $conv976 = 0, $conv978 = 0, $conv992 = 0, $cycle$1 = 0, $cycle$6$ph = 0, $cycle1695 = 0, $data478 = 0, $dec = 0, $dec1018 = 0, $dec880 = 0, $dec907 = 0, $dec942 = 0, $dec983 = 0, $eind = 0, $flashend = 0, $gdb = 0, $i$016$i = 0, $idxprom716 = 0;
 var $idxprom802 = 0, $inc$i = 0, $inc1023 = 0, $inc6$i = 0, $inc729 = 0, $inc784 = 0, $inc818 = 0, $inc852 = 0, $inc885 = 0, $inc914 = 0, $inc947 = 0, $inc990 = 0, $interrupt_state = 0, $lnot1574 = 0, $mul = 0, $mul1451 = 0, $mul160 = 0, $mul175 = 0, $mul193 = 0, $mul211 = 0;
 var $neg = 0, $neg$i = 0, $neg$i1028 = 0, $neg$i1069 = 0, $neg$i1099 = 0, $neg$i751 = 0, $neg$i768 = 0, $neg$i844 = 0, $neg$i885 = 0, $neg$i918 = 0, $neg1273 = 0, $neg1315 = 0, $neg1324 = 0, $neg1345 = 0, $neg1609 = 0, $neg22$i = 0, $neg22$i1042 = 0, $neg22$i1083 = 0, $neg22$i1113 = 0, $neg22$i782 = 0;
 var $neg22$i858 = 0, $neg22$i899 = 0, $neg25$i = 0, $neg25$i1043 = 0, $neg25$i1084 = 0, $neg25$i1114 = 0, $neg25$i783 = 0, $neg25$i859 = 0, $neg25$i900 = 0, $new_pc$5$ph = 0, $new_pc$5$ph1428 = 0, $or = 0, $or$cond = 0, $or$cond1423 = 0, $or$cond5 = 0, $or$i = 0, $or$i$i = 0, $or$i$i1017 = 0, $or$i$i1062 = 0, $or$i$i1160 = 0;
 var $or$i$i1182 = 0, $or$i$i1206 = 0, $or$i$i1253 = 0, $or$i$i1362 = 0, $or$i$i1373 = 0, $or$i$i746 = 0, $or$i$i816 = 0, $or$i$i833 = 0, $or$i$i878 = 0, $or$i$i948 = 0, $or$i$i965 = 0, $or$i$i992 = 0, $or$i1035 = 0, $or$i1076 = 0, $or$i1106 = 0, $or$i1212 = 0, $or$i1222 = 0, $or$i1297 = 0, $or$i1305 = 0, $or$i1329 = 0;
 var $or$i737 = 0, $or$i754 = 0, $or$i775 = 0, $or$i851 = 0, $or$i892 = 0, $or$i921 = 0, $or1012 = 0, $or1078 = 0, $or1109 = 0, $or1146 = 0, $or1181 = 0, $or1208 = 0, $or1213 = 0, $or1221 = 0, $or1226 = 0, $or1244 = 0, $or1256 = 0, $or1292 = 0, $or1305 = 0, $or1394 = 0;
 var $or1434 = 0, $or1483 = 0, $or1500 = 0, $or1545 = 0, $or1617 = 0, $or240 = 0, $or265 = 0, $or27 = 0, $or302 = 0, $or326 = 0, $or33$i = 0, $or33$i1047 = 0, $or33$i1088 = 0, $or33$i1118 = 0, $or33$i762 = 0, $or33$i787 = 0, $or33$i863 = 0, $or33$i904 = 0, $or33$i932 = 0, $or366 = 0;
 var $or398 = 0, $or429 = 0, $or446697 = 0, $or458 = 0, $or476 = 0, $or496 = 0, $or522 = 0, $or544 = 0, $or553 = 0, $or566 = 0, $or58 = 0, $or588 = 0, $or598 = 0, $or600 = 0, $or630 = 0, $or641 = 0, $or643 = 0, $or711 = 0, $or720 = 0, $or745 = 0;
 var $or775 = 0, $or799 = 0, $or806 = 0, $or840 = 0, $or874 = 0, $or9$i = 0, $or9$i1036 = 0, $or9$i1077 = 0, $or9$i1107 = 0, $or9$i755 = 0, $or9$i776 = 0, $or9$i852 = 0, $or9$i893 = 0, $or9$i922 = 0, $or901 = 0, $or936 = 0, $or977 = 0, $pc = 0, $phitmp$i1209 = 0, $rampz = 0;
 var $res$0$lcssa$i = 0, $res$015$i = 0, $res149$0 = 0, $res149$0$in = 0, $retval$0 = 0, $run_cycle_count = 0, $sext = 0, $sext671 = 0, $shl$i = 0, $shl$i$i = 0, $shl$i$i1016 = 0, $shl$i$i1061 = 0, $shl$i$i1159 = 0, $shl$i$i1181 = 0, $shl$i$i1205 = 0, $shl$i$i1252 = 0, $shl$i$i1361 = 0, $shl$i$i1372 = 0, $shl$i$i745 = 0, $shl$i$i815 = 0;
 var $shl$i$i832 = 0, $shl$i$i877 = 0, $shl$i$i947 = 0, $shl$i$i964 = 0, $shl$i$i991 = 0, $shl$i1211 = 0, $shl$i1221 = 0, $shl$i1296 = 0, $shl$i1304 = 0, $shl$i1328 = 0, $shl1008 = 0, $shl1108 = 0, $shl1211 = 0, $shl1214 = 0, $shl1224 = 0, $shl1231 = 0, $shl1255 = 0, $shl1304 = 0, $shl1338 = 0, $shl1358 = 0;
 var $shl1387 = 0, $shl1406 = 0, $shl1481 = 0, $shl1498 = 0, $shl1552 = 0, $shl1587 = 0, $shl1604 = 0, $shl1653 = 0, $shl200 = 0, $shl587 = 0, $shl629 = 0, $shl710 = 0, $shl719 = 0, $shl728 = 0, $shl744 = 0, $shl774 = 0, $shl798 = 0, $shl805 = 0, $shl836 = 0, $shl870 = 0;
 var $shl897 = 0, $shl91 = 0, $shl932 = 0, $shl973 = 0, $shr = 0, $shr10 = 0, $shr1027 = 0, $shr1035 = 0, $shr1046 = 0, $shr1062 = 0, $shr1097 = 0, $shr1114 = 0, $shr113 = 0, $shr1134 = 0, $shr1151 = 0, $shr1167 = 0, $shr1186 = 0, $shr1206 = 0, $shr1219 = 0, $shr1236 = 0;
 var $shr1242 = 0, $shr1284 = 0, $shr128718 = 0, $shr1290 = 0, $shr1333 = 0, $shr1352 = 0, $shr1381 = 0, $shr1400 = 0, $shr1431 = 0, $shr1437 = 0, $shr145 = 0, $shr1476 = 0, $shr1492 = 0, $shr1513 = 0, $shr1524 = 0, $shr1537 = 0, $shr1543 = 0, $shr1555 = 0, $shr1592 = 0, $shr1622 = 0;
 var $shr1634 = 0, $shr163717 = 0, $shr1641 = 0, $shr178715 = 0, $shr196713 = 0, $shr214712 = 0, $shr237 = 0, $shr24 = 0, $shr243 = 0, $shr262 = 0, $shr268 = 0, $shr299 = 0, $shr30 = 0, $shr305 = 0, $shr323 = 0, $shr329 = 0, $shr363 = 0, $shr369 = 0, $shr395 = 0, $shr401 = 0;
 var $shr426 = 0, $shr432 = 0, $shr451 = 0, $shr455 = 0, $shr469 = 0, $shr474 = 0, $shr488 = 0, $shr494 = 0, $shr514 = 0, $shr520 = 0, $shr536 = 0, $shr542 = 0, $shr55 = 0, $shr558 = 0, $shr564 = 0, $shr591 = 0, $shr595 = 0, $shr597 = 0, $shr61 = 0, $shr633 = 0;
 var $shr638 = 0, $shr640 = 0, $shr671 = 0, $shr754 = 0, $shr764 = 0, $shr808 = 0, $shr820 = 0, $shr829 = 0, $shr859 = 0, $shr891 = 0, $shr921 = 0, $shr951 = 0, $shr966 = 0, $shr997 = 0, $sp$0$lcssa$i = 0, $sp$014$i = 0, $spec$select = 0, $spec$select720 = 0, $spec$select721 = 0, $spec$select722 = 0;
 var $spec$select723 = 0, $spec$select724 = 0, $spec$select725 = 0, $state1697 = 0, $storemerge = 0, $sub = 0, $sub$i = 0, $sub$i1377 = 0, $sub1071 = 0, $sub1195 = 0, $sub1310 = 0, $sub20 = 0, $sub257 = 0, $sub319 = 0, $sub484 = 0, $sub505 = 0, $sub509 = 0, $sub531 = 0, $sub75 = 0, $sub79 = 0;
 var $tobool$i = 0, $tobool$i$i = 0, $tobool$i$i1091 = 0, $tobool$i$i790 = 0, $tobool1178 = 0, $tobool1367 = 0, $tobool1415 = 0, $tobool1566 = 0, $tobool1572 = 0, $tobool1614 = 0, $tobool1663 = 0, $tobool3$i = 0, $tobool3$i1194 = 0, $tobool603 = 0, $tobool646 = 0, $tobool681 = 0, $tobool684 = 0, $tobool688 = 0, $tobool700 = 0, $tobool701 = 0;
 var $tobool722 = 0, $tobool782 = 0, $tobool788 = 0, $tobool816 = 0, $trunc = 0, $trunc$clear = 0, $trunc670 = 0, $trunc670$clear = 0, $trunc672 = 0, $trunc675 = 0, $trunc691 = 0, $trunc691$clear = 0, $trunc692 = 0, $trunc695 = 0, $trunc695$clear = 0, $trunc703 = 0, $trunc703$clear = 0, $trunc706 = 0, $trunc709 = 0, $trunc710 = 0;
 var $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer33 = 0, $vararg_buffer38 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0;
 var $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $x832$1 = 0, $x866$1 = 0, $xor$i = 0, $xor$i1238 = 0, $xor10$i = 0, $xor10$i1406 = 0, $xor6$i = 0, $xor6$i$i = 0, $xor6$i$i1054 = 0, $xor6$i$i1095 = 0, $xor6$i$i1125 = 0, $xor6$i$i766 = 0, $xor6$i$i794 = 0;
 var $xor6$i$i870 = 0, $xor6$i$i911 = 0, $xor6$i$i939 = 0, $xor6$i1392 = 0, $xor6$i1399 = 0, $xor699 = 0, $y$1 = 0, $y928$1 = 0, $z$0 = 0, $z1004$1 = 0, $z969$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $pc = ((($avr)) + 132|0);
 $0 = HEAP32[$pc>>2]|0;
 $flashend = ((($avr)) + 8|0);
 $1 = HEAP32[$flashend>>2]|0;
 $cmp1424 = ($0>>>0)<($1>>>0);
 L1: do {
  if ($cmp1424) {
   $avr$idx730 = ((($avr)) + 5888|0);
   $cycle1695 = ((($avr)) + 56|0);
   $state1697 = ((($avr)) + 36|0);
   $data478 = ((($avr)) + 5892|0);
   $arrayidx$i1039 = ((($avr)) + 125|0);
   $arrayidx19$i1041 = ((($avr)) + 120|0);
   $arrayidx38$i1049 = ((($avr)) + 123|0);
   $arrayidx$i$i1052 = ((($avr)) + 121|0);
   $arrayidx6$i$i1053 = ((($avr)) + 122|0);
   $arrayidx15$i$i1055 = ((($avr)) + 124|0);
   $run_cycle_count = ((($avr)) + 64|0);
   $arrayidx1612 = ((($avr)) + 126|0);
   $interrupt_state = ((($avr)) + 128|0);
   $gdb = ((($avr)) + 8292|0);
   $arrayidx$i1193 = ((($avr)) + 127|0);
   $address_size$i = ((($avr)) + 28|0);
   $rampz = ((($avr)) + 24|0);
   $eind = ((($avr)) + 26|0);
   $2 = $0;
   L3: while(1) {
    $avr$idx730$val = HEAP32[$avr$idx730>>2]|0;
    $arrayidx$i = (($avr$idx730$val) + ($2)|0);
    $3 = HEAP8[$arrayidx$i>>0]|0;
    $conv$i = $3&255;
    $add$i = (($2) + 1)|0;
    $arrayidx2$i = (($avr$idx730$val) + ($add$i)|0);
    $4 = HEAP8[$arrayidx2$i>>0]|0;
    $conv3$i = $4&255;
    $shl$i = $conv3$i << 8;
    $or$i = $shl$i | $conv$i;
    $conv4$i = $or$i&65535;
    $add = (($2) + 2)|0;
    $5 = ($conv4$i&65535) >>> 12;
    $trunc = $5&255;
    $trunc$clear = $trunc & 15;
    L5: do {
     switch ($trunc$clear<<24>>24) {
     case 0:  {
      $cond2 = ($conv4$i<<16>>16)==(0);
      if ($cond2) {
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
      } else {
       $and5 = $shl$i & 64512;
       $trunc706 = $and5&65535;
       switch ($trunc706<<16>>16) {
       case 1024:  {
        $shr = $conv3$i << 3;
        $and7 = $shr & 16;
        $and8 = $conv$i & 15;
        $or = $and7 | $and8;
        $shr10 = $or$i >>> 4;
        $and11 = $shr10 & 31;
        $6 = HEAP32[$data478>>2]|0;
        $arrayidx = (($6) + ($and11)|0);
        $7 = HEAP8[$arrayidx>>0]|0;
        $arrayidx15 = (($6) + ($or)|0);
        $8 = HEAP8[$arrayidx15>>0]|0;
        $conv16 = $7&255;
        $conv17 = $8&255;
        $sub = (($conv16) - ($conv17))|0;
        $9 = HEAP8[$arrayidx19$i1041>>0]|0;
        $conv19 = $9&255;
        $sub20 = (($sub) - ($conv19))|0;
        $conv21 = $sub20&255;
        $neg$i = $conv16 ^ -1;
        $and$i = $conv17 & $neg$i;
        $conv3$i736 = $sub20 & 255;
        $and415$i = $8 & $conv21;
        $and4$i = $and415$i&255;
        $and8$i = $conv3$i736 & $neg$i;
        $or$i737 = $and8$i | $and$i;
        $or9$i = $or$i737 | $and4$i;
        $10 = $or9$i >>> 3;
        $and12$i = $10 & 1;
        $conv13$i = $and12$i&255;
        HEAP8[$arrayidx$i1039>>0] = $conv13$i;
        $11 = $or9$i >>> 7;
        $conv17$i = $11&255;
        HEAP8[$arrayidx19$i1041>>0] = $conv17$i;
        $neg22$i = $conv17 ^ 128;
        $neg25$i = $sub20 ^ 128;
        $and23$i = $neg22$i & $conv16;
        $and26$i = $and23$i & $neg25$i;
        $and32$i = $sub20 & $and$i;
        $or33$i = $and26$i | $and32$i;
        $12 = $or33$i >>> 7;
        $conv36$i = $12&255;
        HEAP8[$arrayidx38$i1049>>0] = $conv36$i;
        $tobool$i$i = ($conv21<<24>>24)==(0);
        if (!($tobool$i$i)) {
         HEAP8[$arrayidx$i$i1052>>0] = 0;
        }
        $13 = ($conv21&255) >>> 7;
        HEAP8[$arrayidx6$i$i1053>>0] = $13;
        $xor6$i$i = $13 ^ $conv36$i;
        HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i;
        $cycle$6$ph = 1;$new_pc$5$ph = $add;
        break L5;
        break;
       }
       case 3072:  {
        $shr24 = $conv3$i << 3;
        $and25 = $shr24 & 16;
        $and26 = $conv$i & 15;
        $or27 = $and25 | $and26;
        $shr30 = $or$i >>> 4;
        $and31 = $shr30 & 31;
        $14 = HEAP32[$data478>>2]|0;
        $arrayidx36 = (($14) + ($and31)|0);
        $15 = HEAP8[$arrayidx36>>0]|0;
        $arrayidx40 = (($14) + ($or27)|0);
        $16 = HEAP8[$arrayidx40>>0]|0;
        $conv42 = $15&255;
        $conv43 = $16&255;
        $add44 = (($conv43) + ($conv42))|0;
        $conv45 = $add44&255;
        $and$shrunk708 = $shr30&65535;
        $conv52 = $and$shrunk708 & 31;
        __avr_set_r($avr,$conv52,$conv45);
        $and15$i = $16 & $15;
        $and$i749 = $and15$i&255;
        $conv3$i750 = $add44 & 255;
        $neg$i751 = $conv3$i750 ^ -1;
        $and4$i752 = $neg$i751 & $conv43;
        $and8$i753 = $neg$i751 & $conv42;
        $or$i754 = $and8$i753 | $and$i749;
        $or9$i755 = $or$i754 | $and4$i752;
        $17 = $or9$i755 >>> 3;
        $and12$i756 = $17 & 1;
        $conv13$i757 = $and12$i756&255;
        HEAP8[$arrayidx$i1039>>0] = $conv13$i757;
        $18 = $or9$i755 >>> 7;
        $conv17$i759 = $18&255;
        HEAP8[$arrayidx19$i1041>>0] = $conv17$i759;
        $and25$i = $neg$i751 & $and$i749;
        $and30$demorgan16$i = $16 | $15;
        $19 = $and30$demorgan16$i ^ -128;
        $and3217$i = $19 & $conv45;
        $and32$i761 = $and3217$i&255;
        $or33$i762 = $and25$i | $and32$i761;
        $20 = $or33$i762 >>> 7;
        $conv36$i763 = $20&255;
        HEAP8[$arrayidx38$i1049>>0] = $conv36$i763;
        $cmp$i$i = ($conv45<<24>>24)==(0);
        $conv2$i$i = $cmp$i$i&1;
        HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i;
        $21 = ($conv45&255) >>> 7;
        HEAP8[$arrayidx6$i$i1053>>0] = $21;
        $xor6$i$i766 = $21 ^ $conv36$i763;
        HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i766;
        $cycle$6$ph = 1;$new_pc$5$ph = $add;
        break L5;
        break;
       }
       case 2048:  {
        $shr55 = $conv3$i << 3;
        $and56 = $shr55 & 16;
        $and57 = $conv$i & 15;
        $or58 = $and56 | $and57;
        $shr61 = $or$i >>> 4;
        $and62 = $shr61 & 31;
        $22 = HEAP32[$data478>>2]|0;
        $arrayidx67 = (($22) + ($and62)|0);
        $23 = HEAP8[$arrayidx67>>0]|0;
        $arrayidx71 = (($22) + ($or58)|0);
        $24 = HEAP8[$arrayidx71>>0]|0;
        $conv73 = $23&255;
        $conv74 = $24&255;
        $sub75 = (($conv73) - ($conv74))|0;
        $25 = HEAP8[$arrayidx19$i1041>>0]|0;
        $conv78 = $25&255;
        $sub79 = (($sub75) - ($conv78))|0;
        $conv80 = $sub79&255;
        $and$shrunk707 = $shr61&65535;
        $conv81 = $and$shrunk707 & 31;
        __avr_set_r($avr,$conv81,$conv80);
        $neg$i768 = $conv73 ^ -1;
        $and$i770 = $conv74 & $neg$i768;
        $conv3$i771 = $sub79 & 255;
        $and415$i772 = $24 & $conv80;
        $and4$i773 = $and415$i772&255;
        $and8$i774 = $conv3$i771 & $neg$i768;
        $or$i775 = $and8$i774 | $and$i770;
        $or9$i776 = $or$i775 | $and4$i773;
        $26 = $or9$i776 >>> 3;
        $and12$i777 = $26 & 1;
        $conv13$i778 = $and12$i777&255;
        HEAP8[$arrayidx$i1039>>0] = $conv13$i778;
        $27 = $or9$i776 >>> 7;
        $conv17$i780 = $27&255;
        HEAP8[$arrayidx19$i1041>>0] = $conv17$i780;
        $neg22$i782 = $conv74 ^ 128;
        $neg25$i783 = $sub79 ^ 128;
        $and23$i784 = $neg22$i782 & $conv73;
        $and26$i785 = $and23$i784 & $neg25$i783;
        $and32$i786 = $sub79 & $and$i770;
        $or33$i787 = $and26$i785 | $and32$i786;
        $28 = $or33$i787 >>> 7;
        $conv36$i788 = $28&255;
        HEAP8[$arrayidx38$i1049>>0] = $conv36$i788;
        $tobool$i$i790 = ($conv80<<24>>24)==(0);
        if (!($tobool$i$i790)) {
         HEAP8[$arrayidx$i$i1052>>0] = 0;
        }
        $29 = ($conv80&255) >>> 7;
        HEAP8[$arrayidx6$i$i1053>>0] = $29;
        $xor6$i$i794 = $29 ^ $conv36$i788;
        HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i794;
        $cycle$6$ph = 1;$new_pc$5$ph = $add;
        break L5;
        break;
       }
       default: {
        $trunc709 = $shl$i&65535;
        switch ($trunc709<<16>>16) {
        case 256:  {
         $and90 = $conv$i << 1;
         $shl91 = $and90 & 30;
         $30 = HEAP32[$data478>>2]|0;
         $arrayidx96 = (($30) + ($shl91)|0);
         $31 = HEAP8[$arrayidx96>>0]|0;
         $add100 = $shl91 | 1;
         $arrayidx101 = (($30) + ($add100)|0);
         $32 = HEAP8[$arrayidx101>>0]|0;
         $33 = ($conv4$i&65535) >>> 3;
         $conv106 = $33 & 30;
         __avr_set_r($avr,$conv106,$31);
         $34 = $conv106 | 1;
         __avr_set_r($avr,$34,$32);
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case 512:  {
         $and109 = $conv$i & 15;
         $add110 = $and109 | 16;
         $shr113 = $conv$i >>> 4;
         $add115 = $shr113 | 16;
         $35 = HEAP32[$data478>>2]|0;
         $arrayidx120 = (($35) + ($add110)|0);
         $36 = HEAP8[$arrayidx120>>0]|0;
         $conv121 = $36 << 24 >> 24;
         $arrayidx124 = (($35) + ($add115)|0);
         $37 = HEAP8[$arrayidx124>>0]|0;
         $conv125 = $37 << 24 >> 24;
         $mul = Math_imul($conv125, $conv121)|0;
         $conv126 = $mul&65535;
         $conv$i801 = $mul&255;
         HEAP8[$35>>0] = $conv$i801;
         $38 = ($conv126&65535) >>> 8;
         $conv4$i802 = $38&255;
         $39 = HEAP32[$data478>>2]|0;
         $arrayidx61$i = ((($39)) + 1|0);
         HEAP8[$arrayidx61$i>>0] = $conv4$i802;
         $shr128718 = $mul >>> 15;
         $and129 = $shr128718 & 1;
         $conv130 = $and129&255;
         HEAP8[$arrayidx19$i1041>>0] = $conv130;
         $cmp134 = ($mul|0)==(0);
         $conv136 = $cmp134&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv136;
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case 768:  {
         $and141 = $conv$i & 7;
         $add142 = $and141 | 16;
         $shr145 = $conv$i >>> 4;
         $and146 = $shr145 & 7;
         $add147 = $and146 | 16;
         $and150 = $conv$i & 136;
         $trunc710 = $and150&255;
         switch ($trunc710<<24>>24) {
         case 0:  {
          $40 = HEAP32[$data478>>2]|0;
          $arrayidx154 = (($40) + ($add142)|0);
          $41 = HEAP8[$arrayidx154>>0]|0;
          $conv155 = $41&255;
          $arrayidx158 = (($40) + ($add147)|0);
          $42 = HEAP8[$arrayidx158>>0]|0;
          $conv159 = $42 << 24 >> 24;
          $mul160 = Math_imul($conv159, $conv155)|0;
          $43 = $mul160 >>> 15;
          $shr163717 = $43 & 1;
          $56 = $40;$c$0$in = $shr163717;$res149$0$in = $mul160;
          break;
         }
         case 8:  {
          $44 = HEAP32[$data478>>2]|0;
          $arrayidx169 = (($44) + ($add142)|0);
          $45 = HEAP8[$arrayidx169>>0]|0;
          $conv170 = $45&255;
          $arrayidx173 = (($44) + ($add147)|0);
          $46 = HEAP8[$arrayidx173>>0]|0;
          $conv174 = $46&255;
          $mul175 = Math_imul($conv174, $conv170)|0;
          $shr178715 = $mul175 >>> 15;
          $47 = $mul175 << 1;
          $56 = $44;$c$0$in = $shr178715;$res149$0$in = $47;
          break;
         }
         case -128:  {
          $48 = HEAP32[$data478>>2]|0;
          $arrayidx187 = (($48) + ($add142)|0);
          $49 = HEAP8[$arrayidx187>>0]|0;
          $conv188 = $49 << 24 >> 24;
          $arrayidx191 = (($48) + ($add147)|0);
          $50 = HEAP8[$arrayidx191>>0]|0;
          $conv192 = $50 << 24 >> 24;
          $mul193 = Math_imul($conv192, $conv188)|0;
          $shr196713 = $mul193 >>> 15;
          $and197 = $shr196713 & 1;
          $shl200 = $mul193 << 1;
          $56 = $48;$c$0$in = $and197;$res149$0$in = $shl200;
          break;
         }
         case -120:  {
          $51 = HEAP32[$data478>>2]|0;
          $arrayidx205 = (($51) + ($add142)|0);
          $52 = HEAP8[$arrayidx205>>0]|0;
          $conv206 = $52&255;
          $arrayidx209 = (($51) + ($add147)|0);
          $53 = HEAP8[$arrayidx209>>0]|0;
          $conv210 = $53 << 24 >> 24;
          $mul211 = Math_imul($conv210, $conv206)|0;
          $54 = $mul211 >>> 15;
          $shr214712 = $54 & 1;
          $55 = $mul211 << 1;
          $56 = $51;$c$0$in = $shr214712;$res149$0$in = $55;
          break;
         }
         default: {
          label = 22;
          break L3;
         }
         }
         $res149$0 = $res149$0$in&65535;
         $c$0 = $c$0$in&255;
         $conv$i804 = $res149$0$in&255;
         HEAP8[$56>>0] = $conv$i804;
         $57 = ($res149$0&65535) >>> 8;
         $conv4$i805 = $57&255;
         $58 = HEAP32[$data478>>2]|0;
         $arrayidx61$i807 = ((($58)) + 1|0);
         HEAP8[$arrayidx61$i807>>0] = $conv4$i805;
         HEAP8[$arrayidx19$i1041>>0] = $c$0;
         $cmp224 = ($res149$0<<16>>16)==(0);
         $conv226 = $cmp224&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv226;
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        default: {
         $59 = HEAP32[$data478>>2]|0;
         $arrayidx$i$i828 = ((($59)) + 93|0);
         $60 = HEAP8[$arrayidx$i$i828>>0]|0;
         $conv$i$i829 = $60&255;
         $arrayidx2$i$i830 = ((($59)) + 94|0);
         $61 = HEAP8[$arrayidx2$i$i830>>0]|0;
         $conv3$i$i831 = $61&255;
         $shl$i$i832 = $conv3$i$i831 << 8;
         $or$i$i833 = $shl$i$i832 | $conv$i$i829;
         HEAP32[$vararg_buffer>>2] = $2;
         $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
         HEAP32[$vararg_ptr1>>2] = $or$i$i833;
         $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
         HEAP32[$vararg_ptr2>>2] = $or$i;
         _avr_global_logger($avr,1,359122,$vararg_buffer);
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
        }
        }
       }
       }
      }
      break;
     }
     case 1:  {
      $and234 = $shl$i & 64512;
      $62 = (($and234) + -4096)|0;
      $trunc703 = $62 >>> 10;
      $trunc703$clear = $trunc703 & 4194303;
      switch ($trunc703$clear|0) {
      case 2:  {
       $shr237 = $conv3$i << 3;
       $and238 = $shr237 & 16;
       $and239 = $conv$i & 15;
       $or240 = $and238 | $and239;
       $shr243 = $or$i >>> 4;
       $and244 = $shr243 & 31;
       $63 = HEAP32[$data478>>2]|0;
       $arrayidx249 = (($63) + ($and244)|0);
       $64 = HEAP8[$arrayidx249>>0]|0;
       $arrayidx253 = (($63) + ($or240)|0);
       $65 = HEAP8[$arrayidx253>>0]|0;
       $conv255 = $64&255;
       $conv256 = $65&255;
       $sub257 = (($conv255) - ($conv256))|0;
       $conv258 = $sub257&255;
       $and$shrunk705 = $shr243&65535;
       $conv259 = $and$shrunk705 & 31;
       __avr_set_r($avr,$conv259,$conv258);
       $neg$i844 = $conv255 ^ -1;
       $and$i846 = $conv256 & $neg$i844;
       $conv3$i847 = $sub257 & 255;
       $and415$i848 = $65 & $conv258;
       $and4$i849 = $and415$i848&255;
       $and8$i850 = $conv3$i847 & $neg$i844;
       $or$i851 = $and8$i850 | $and$i846;
       $or9$i852 = $or$i851 | $and4$i849;
       $66 = $or9$i852 >>> 3;
       $and12$i853 = $66 & 1;
       $conv13$i854 = $and12$i853&255;
       HEAP8[$arrayidx$i1039>>0] = $conv13$i854;
       $67 = $or9$i852 >>> 7;
       $conv17$i856 = $67&255;
       HEAP8[$arrayidx19$i1041>>0] = $conv17$i856;
       $neg22$i858 = $conv256 ^ 128;
       $neg25$i859 = $sub257 ^ 128;
       $and23$i860 = $neg22$i858 & $conv255;
       $and26$i861 = $and23$i860 & $neg25$i859;
       $and32$i862 = $sub257 & $and$i846;
       $or33$i863 = $and26$i861 | $and32$i862;
       $68 = $or33$i863 >>> 7;
       $conv36$i864 = $68&255;
       HEAP8[$arrayidx38$i1049>>0] = $conv36$i864;
       $cmp$i$i866 = ($conv258<<24>>24)==(0);
       $conv2$i$i867 = $cmp$i$i866&1;
       HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i867;
       $69 = ($conv258&255) >>> 7;
       HEAP8[$arrayidx6$i$i1053>>0] = $69;
       $xor6$i$i870 = $69 ^ $conv36$i864;
       HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i870;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case 0:  {
       $shr262 = $conv3$i << 3;
       $and263 = $shr262 & 16;
       $and264 = $conv$i & 15;
       $or265 = $and263 | $and264;
       $shr268 = $or$i >>> 4;
       $and269 = $shr268 & 31;
       $70 = HEAP32[$data478>>2]|0;
       $arrayidx274 = (($70) + ($and269)|0);
       $71 = HEAP8[$arrayidx274>>0]|0;
       $arrayidx278 = (($70) + ($or265)|0);
       $72 = HEAP8[$arrayidx278>>0]|0;
       $cmp282 = ($71<<24>>24)==($72<<24>>24);
       if (!($cmp282)) {
        $cycle$6$ph = 1;$new_pc$5$ph = $add;
        break L5;
       }
       $arrayidx$i$i872 = (($avr$idx730$val) + ($add)|0);
       $73 = HEAP8[$arrayidx$i$i872>>0]|0;
       $conv$i$i873 = $73&255;
       $add$i$i874 = (($2) + 3)|0;
       $arrayidx2$i$i875 = (($avr$idx730$val) + ($add$i$i874)|0);
       $74 = HEAP8[$arrayidx2$i$i875>>0]|0;
       $conv3$i$i876 = $74&255;
       $shl$i$i877 = $conv3$i$i876 << 8;
       $or$i$i878 = $shl$i$i877 | $conv$i$i873;
       $conv4$i$i879 = $or$i$i878&65535;
       $75 = $conv4$i$i879 & -1009;
       switch ($75<<16>>16) {
       case -27633: case -27634: case -27635: case -27636: case -28672:  {
        $add290 = (($2) + 6)|0;
        $cycle$6$ph = 3;$new_pc$5$ph = $add290;
        break L5;
        break;
       }
       default: {
        $add293 = (($2) + 4)|0;
        $cycle$6$ph = 2;$new_pc$5$ph = $add293;
        break L5;
       }
       }
       break;
      }
      case 1:  {
       $shr299 = $conv3$i << 3;
       $and300 = $shr299 & 16;
       $and301 = $conv$i & 15;
       $or302 = $and300 | $and301;
       $shr305 = $or$i >>> 4;
       $and306 = $shr305 & 31;
       $76 = HEAP32[$data478>>2]|0;
       $arrayidx311 = (($76) + ($and306)|0);
       $77 = HEAP8[$arrayidx311>>0]|0;
       $arrayidx315 = (($76) + ($or302)|0);
       $78 = HEAP8[$arrayidx315>>0]|0;
       $conv317 = $77&255;
       $conv318 = $78&255;
       $sub319 = (($conv317) - ($conv318))|0;
       $conv320 = $sub319&255;
       $neg$i885 = $conv317 ^ -1;
       $and$i887 = $conv318 & $neg$i885;
       $conv3$i888 = $sub319 & 255;
       $and415$i889 = $78 & $conv320;
       $and4$i890 = $and415$i889&255;
       $and8$i891 = $conv3$i888 & $neg$i885;
       $or$i892 = $and8$i891 | $and$i887;
       $or9$i893 = $or$i892 | $and4$i890;
       $79 = $or9$i893 >>> 3;
       $and12$i894 = $79 & 1;
       $conv13$i895 = $and12$i894&255;
       HEAP8[$arrayidx$i1039>>0] = $conv13$i895;
       $80 = $or9$i893 >>> 7;
       $conv17$i897 = $80&255;
       HEAP8[$arrayidx19$i1041>>0] = $conv17$i897;
       $neg22$i899 = $conv318 ^ 128;
       $neg25$i900 = $sub319 ^ 128;
       $and23$i901 = $neg22$i899 & $conv317;
       $and26$i902 = $and23$i901 & $neg25$i900;
       $and32$i903 = $sub319 & $and$i887;
       $or33$i904 = $and26$i902 | $and32$i903;
       $81 = $or33$i904 >>> 7;
       $conv36$i905 = $81&255;
       HEAP8[$arrayidx38$i1049>>0] = $conv36$i905;
       $cmp$i$i907 = ($conv320<<24>>24)==(0);
       $conv2$i$i908 = $cmp$i$i907&1;
       HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i908;
       $82 = ($conv320&255) >>> 7;
       HEAP8[$arrayidx6$i$i1053>>0] = $82;
       $xor6$i$i911 = $82 ^ $conv36$i905;
       HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i911;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case 3:  {
       $shr323 = $conv3$i << 3;
       $and324 = $shr323 & 16;
       $and325 = $conv$i & 15;
       $or326 = $and324 | $and325;
       $shr329 = $or$i >>> 4;
       $and330 = $shr329 & 31;
       $83 = HEAP32[$data478>>2]|0;
       $arrayidx335 = (($83) + ($and330)|0);
       $84 = HEAP8[$arrayidx335>>0]|0;
       $arrayidx339 = (($83) + ($or326)|0);
       $85 = HEAP8[$arrayidx339>>0]|0;
       $conv341 = $84&255;
       $conv342 = $85&255;
       $add343 = (($conv342) + ($conv341))|0;
       $86 = HEAP8[$arrayidx19$i1041>>0]|0;
       $conv346 = $86&255;
       $add347 = (($add343) + ($conv346))|0;
       $conv348 = $add347&255;
       $and$shrunk704 = $shr329&65535;
       $conv356 = $and$shrunk704 & 31;
       __avr_set_r($avr,$conv356,$conv348);
       $and15$i915 = $85 & $84;
       $and$i916 = $and15$i915&255;
       $conv3$i917 = $add347 & 255;
       $neg$i918 = $conv3$i917 ^ -1;
       $and4$i919 = $neg$i918 & $conv342;
       $and8$i920 = $neg$i918 & $conv341;
       $or$i921 = $and8$i920 | $and$i916;
       $or9$i922 = $or$i921 | $and4$i919;
       $87 = $or9$i922 >>> 3;
       $and12$i923 = $87 & 1;
       $conv13$i924 = $and12$i923&255;
       HEAP8[$arrayidx$i1039>>0] = $conv13$i924;
       $88 = $or9$i922 >>> 7;
       $conv17$i926 = $88&255;
       HEAP8[$arrayidx19$i1041>>0] = $conv17$i926;
       $and25$i928 = $neg$i918 & $and$i916;
       $and30$demorgan16$i929 = $85 | $84;
       $89 = $and30$demorgan16$i929 ^ -128;
       $and3217$i930 = $89 & $conv348;
       $and32$i931 = $and3217$i930&255;
       $or33$i932 = $and25$i928 | $and32$i931;
       $90 = $or33$i932 >>> 7;
       $conv36$i933 = $90&255;
       HEAP8[$arrayidx38$i1049>>0] = $conv36$i933;
       $cmp$i$i935 = ($conv348<<24>>24)==(0);
       $conv2$i$i936 = $cmp$i$i935&1;
       HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i936;
       $91 = ($conv348&255) >>> 7;
       HEAP8[$arrayidx6$i$i1053>>0] = $91;
       $xor6$i$i939 = $91 ^ $conv36$i933;
       HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i939;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      default: {
       $92 = HEAP32[$data478>>2]|0;
       $arrayidx$i$i960 = ((($92)) + 93|0);
       $93 = HEAP8[$arrayidx$i$i960>>0]|0;
       $conv$i$i961 = $93&255;
       $arrayidx2$i$i962 = ((($92)) + 94|0);
       $94 = HEAP8[$arrayidx2$i$i962>>0]|0;
       $conv3$i$i963 = $94&255;
       $shl$i$i964 = $conv3$i$i963 << 8;
       $or$i$i965 = $shl$i$i964 | $conv$i$i961;
       HEAP32[$vararg_buffer3>>2] = $2;
       $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
       HEAP32[$vararg_ptr6>>2] = $or$i$i965;
       $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
       HEAP32[$vararg_ptr7>>2] = $or$i;
       _avr_global_logger($avr,1,359122,$vararg_buffer3);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
      }
      }
      break;
     }
     case 2:  {
      $and360 = $shl$i & 64512;
      $95 = (($and360) + -8192)|0;
      $trunc695 = $95 >>> 10;
      $trunc695$clear = $trunc695 & 4194303;
      switch ($trunc695$clear|0) {
      case 0:  {
       $shr363 = $conv3$i << 3;
       $and364 = $shr363 & 16;
       $and365 = $conv$i & 15;
       $or366 = $and364 | $and365;
       $shr369 = $or$i >>> 4;
       $and370 = $shr369 & 31;
       $96 = HEAP32[$data478>>2]|0;
       $arrayidx375 = (($96) + ($and370)|0);
       $97 = HEAP8[$arrayidx375>>0]|0;
       $arrayidx379 = (($96) + ($or366)|0);
       $98 = HEAP8[$arrayidx379>>0]|0;
       $and383701 = $98 & $97;
       $and$shrunk702 = $shr369&65535;
       $conv392 = $and$shrunk702 & 31;
       __avr_set_r($avr,$conv392,$and383701);
       HEAP8[$arrayidx38$i1049>>0] = 0;
       $cmp$i$i976 = ($and383701<<24>>24)==(0);
       $conv2$i$i977 = $cmp$i$i976&1;
       HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i977;
       $99 = ($and383701&255) >>> 7;
       HEAP8[$arrayidx6$i$i1053>>0] = $99;
       HEAP8[$arrayidx15$i$i1055>>0] = $99;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case 1:  {
       $shr395 = $conv3$i << 3;
       $and396 = $shr395 & 16;
       $and397 = $conv$i & 15;
       $or398 = $and396 | $and397;
       $shr401 = $or$i >>> 4;
       $and402 = $shr401 & 31;
       $100 = HEAP32[$data478>>2]|0;
       $arrayidx407 = (($100) + ($and402)|0);
       $101 = HEAP8[$arrayidx407>>0]|0;
       $arrayidx411 = (($100) + ($or398)|0);
       $102 = HEAP8[$arrayidx411>>0]|0;
       $xor699 = $102 ^ $101;
       $and$shrunk700 = $shr401&65535;
       $conv423 = $and$shrunk700 & 31;
       __avr_set_r($avr,$conv423,$xor699);
       HEAP8[$arrayidx38$i1049>>0] = 0;
       $cmp$i$i999 = ($xor699<<24>>24)==(0);
       $conv2$i$i1000 = $cmp$i$i999&1;
       HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i1000;
       $103 = ($xor699&255) >>> 7;
       HEAP8[$arrayidx6$i$i1053>>0] = $103;
       HEAP8[$arrayidx15$i$i1055>>0] = $103;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case 2:  {
       $shr426 = $conv3$i << 3;
       $and427 = $shr426 & 16;
       $and428 = $conv$i & 15;
       $or429 = $and427 | $and428;
       $shr432 = $or$i >>> 4;
       $and433 = $shr432 & 31;
       $104 = HEAP32[$data478>>2]|0;
       $arrayidx438 = (($104) + ($and433)|0);
       $105 = HEAP8[$arrayidx438>>0]|0;
       $arrayidx442 = (($104) + ($or429)|0);
       $106 = HEAP8[$arrayidx442>>0]|0;
       $or446697 = $106 | $105;
       $and$shrunk698 = $shr432&65535;
       $conv448 = $and$shrunk698 & 31;
       __avr_set_r($avr,$conv448,$or446697);
       HEAP8[$arrayidx38$i1049>>0] = 0;
       $cmp$i$i1005 = ($or446697<<24>>24)==(0);
       $conv2$i$i1006 = $cmp$i$i1005&1;
       HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i1006;
       $107 = ($or446697&255) >>> 7;
       HEAP8[$arrayidx6$i$i1053>>0] = $107;
       HEAP8[$arrayidx15$i$i1055>>0] = $107;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case 3:  {
       $shr455 = $conv3$i << 3;
       $and456 = $shr455 & 16;
       $and457 = $conv$i & 15;
       $or458 = $and456 | $and457;
       $108 = HEAP32[$data478>>2]|0;
       $arrayidx463 = (($108) + ($or458)|0);
       $109 = HEAP8[$arrayidx463>>0]|0;
       $shr451 = ($conv4$i&65535) >>> 4;
       $conv465 = $shr451 & 31;
       __avr_set_r($avr,$conv465,$109);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      default: {
       $110 = HEAP32[$data478>>2]|0;
       $arrayidx$i$i1012 = ((($110)) + 93|0);
       $111 = HEAP8[$arrayidx$i$i1012>>0]|0;
       $conv$i$i1013 = $111&255;
       $arrayidx2$i$i1014 = ((($110)) + 94|0);
       $112 = HEAP8[$arrayidx2$i$i1014>>0]|0;
       $conv3$i$i1015 = $112&255;
       $shl$i$i1016 = $conv3$i$i1015 << 8;
       $or$i$i1017 = $shl$i$i1016 | $conv$i$i1013;
       HEAP32[$vararg_buffer8>>2] = $2;
       $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
       HEAP32[$vararg_ptr11>>2] = $or$i$i1017;
       $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
       HEAP32[$vararg_ptr12>>2] = $or$i;
       _avr_global_logger($avr,1,359122,$vararg_buffer8);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
      }
      }
      break;
     }
     case 3:  {
      $shr469 = $or$i >>> 4;
      $and470 = $shr469 & 15;
      $add471 = $and470 | 16;
      $shr474 = $shr469 & 240;
      $and475 = $conv$i & 15;
      $or476 = $shr474 | $and475;
      $113 = HEAP32[$data478>>2]|0;
      $arrayidx480 = (($113) + ($add471)|0);
      $114 = HEAP8[$arrayidx480>>0]|0;
      $conv482 = $114&255;
      $sub484 = (($conv482) - ($or476))|0;
      $conv485 = $sub484&255;
      $neg$i1028 = $conv482 ^ -1;
      $and$i1030 = $or476 & $neg$i1028;
      $and415$i10321420 = $sub484 & $or476;
      $115 = $114 ^ -1;
      $conv3$i1031 = $115&255;
      $and8$i1034 = $sub484 & $conv3$i1031;
      $or$i1035 = $and415$i10321420 | $and$i1030;
      $or9$i1036 = $or$i1035 | $and8$i1034;
      $116 = $or9$i1036 >>> 3;
      $and12$i1037 = $116 & 1;
      $conv13$i1038 = $and12$i1037&255;
      HEAP8[$arrayidx$i1039>>0] = $conv13$i1038;
      $117 = $or9$i1036 >>> 7;
      $conv17$i1040 = $117&255;
      HEAP8[$arrayidx19$i1041>>0] = $conv17$i1040;
      $neg22$i1042 = $shr469 ^ 128;
      $neg25$i1043 = $sub484 ^ 128;
      $and23$i1044 = $neg22$i1042 & $conv482;
      $and26$i1045 = $and23$i1044 & $neg25$i1043;
      $and32$i1046 = $sub484 & $and$i1030;
      $or33$i1047 = $and26$i1045 | $and32$i1046;
      $118 = $or33$i1047 >>> 7;
      $conv36$i1048 = $118&255;
      HEAP8[$arrayidx38$i1049>>0] = $conv36$i1048;
      $cmp$i$i1050 = ($conv485<<24>>24)==(0);
      $conv2$i$i1051 = $cmp$i$i1050&1;
      HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i1051;
      $119 = ($conv485&255) >>> 7;
      HEAP8[$arrayidx6$i$i1053>>0] = $119;
      $xor6$i$i1054 = $119 ^ $conv36$i1048;
      HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i1054;
      $cycle$6$ph = 1;$new_pc$5$ph = $add;
      break;
     }
     case 4:  {
      $shr488 = $or$i >>> 4;
      $and489 = $shr488 & 15;
      $add490 = $and489 | 16;
      $shr494 = $shr488 & 240;
      $and495 = $conv$i & 15;
      $or496 = $shr494 | $and495;
      $120 = HEAP32[$data478>>2]|0;
      $arrayidx501 = (($120) + ($add490)|0);
      $121 = HEAP8[$arrayidx501>>0]|0;
      $conv503 = $121&255;
      $sub505 = (($conv503) - ($or496))|0;
      $122 = HEAP8[$arrayidx19$i1041>>0]|0;
      $conv508 = $122&255;
      $sub509 = (($sub505) - ($conv508))|0;
      $conv510 = $sub509&255;
      $123 = $add490&65535;
      $conv511 = $123 & 255;
      __avr_set_r($avr,$conv511,$conv510);
      $neg$i1069 = $conv503 ^ -1;
      $and$i1071 = $or496 & $neg$i1069;
      $and415$i10731419 = $sub509 & $or496;
      $124 = $121 ^ -1;
      $conv3$i1072 = $124&255;
      $and8$i1075 = $sub509 & $conv3$i1072;
      $or$i1076 = $and415$i10731419 | $and$i1071;
      $or9$i1077 = $or$i1076 | $and8$i1075;
      $125 = $or9$i1077 >>> 3;
      $and12$i1078 = $125 & 1;
      $conv13$i1079 = $and12$i1078&255;
      HEAP8[$arrayidx$i1039>>0] = $conv13$i1079;
      $126 = $or9$i1077 >>> 7;
      $conv17$i1081 = $126&255;
      HEAP8[$arrayidx19$i1041>>0] = $conv17$i1081;
      $neg22$i1083 = $shr488 ^ 128;
      $neg25$i1084 = $sub509 ^ 128;
      $and23$i1085 = $neg22$i1083 & $conv503;
      $and26$i1086 = $and23$i1085 & $neg25$i1084;
      $and32$i1087 = $sub509 & $and$i1071;
      $or33$i1088 = $and26$i1086 | $and32$i1087;
      $127 = $or33$i1088 >>> 7;
      $conv36$i1089 = $127&255;
      HEAP8[$arrayidx38$i1049>>0] = $conv36$i1089;
      $tobool$i$i1091 = ($conv510<<24>>24)==(0);
      if (!($tobool$i$i1091)) {
       HEAP8[$arrayidx$i$i1052>>0] = 0;
      }
      $128 = ($conv510&255) >>> 7;
      HEAP8[$arrayidx6$i$i1053>>0] = $128;
      $xor6$i$i1095 = $128 ^ $conv36$i1089;
      HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i1095;
      $cycle$6$ph = 1;$new_pc$5$ph = $add;
      break;
     }
     case 5:  {
      $shr514 = $or$i >>> 4;
      $and515 = $shr514 & 15;
      $add516 = $and515 | 16;
      $shr520 = $shr514 & 240;
      $and521 = $conv$i & 15;
      $or522 = $shr520 | $and521;
      $129 = HEAP32[$data478>>2]|0;
      $arrayidx527 = (($129) + ($add516)|0);
      $130 = HEAP8[$arrayidx527>>0]|0;
      $conv529 = $130&255;
      $sub531 = (($conv529) - ($or522))|0;
      $conv532 = $sub531&255;
      $131 = $add516&65535;
      $conv533 = $131 & 255;
      __avr_set_r($avr,$conv533,$conv532);
      $neg$i1099 = $conv529 ^ -1;
      $and$i1101 = $or522 & $neg$i1099;
      $and415$i11031418 = $sub531 & $or522;
      $132 = $130 ^ -1;
      $conv3$i1102 = $132&255;
      $and8$i1105 = $sub531 & $conv3$i1102;
      $or$i1106 = $and415$i11031418 | $and$i1101;
      $or9$i1107 = $or$i1106 | $and8$i1105;
      $133 = $or9$i1107 >>> 3;
      $and12$i1108 = $133 & 1;
      $conv13$i1109 = $and12$i1108&255;
      HEAP8[$arrayidx$i1039>>0] = $conv13$i1109;
      $134 = $or9$i1107 >>> 7;
      $conv17$i1111 = $134&255;
      HEAP8[$arrayidx19$i1041>>0] = $conv17$i1111;
      $neg22$i1113 = $shr514 ^ 128;
      $neg25$i1114 = $sub531 ^ 128;
      $and23$i1115 = $neg22$i1113 & $conv529;
      $and26$i1116 = $and23$i1115 & $neg25$i1114;
      $and32$i1117 = $sub531 & $and$i1101;
      $or33$i1118 = $and26$i1116 | $and32$i1117;
      $135 = $or33$i1118 >>> 7;
      $conv36$i1119 = $135&255;
      HEAP8[$arrayidx38$i1049>>0] = $conv36$i1119;
      $cmp$i$i1121 = ($conv532<<24>>24)==(0);
      $conv2$i$i1122 = $cmp$i$i1121&1;
      HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i1122;
      $136 = ($conv532&255) >>> 7;
      HEAP8[$arrayidx6$i$i1053>>0] = $136;
      $xor6$i$i1125 = $136 ^ $conv36$i1119;
      HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i$i1125;
      $cycle$6$ph = 1;$new_pc$5$ph = $add;
      break;
     }
     case 6:  {
      $shr536 = $or$i >>> 4;
      $and537 = $shr536 & 15;
      $add538 = $and537 | 16;
      $shr542 = $shr536 & 240;
      $and543 = $conv$i & 15;
      $or544 = $shr542 | $and543;
      $137 = HEAP32[$data478>>2]|0;
      $arrayidx549 = (($137) + ($add538)|0);
      $138 = HEAP8[$arrayidx549>>0]|0;
      $conv551 = $138&255;
      $or553 = $or544 | $conv551;
      $conv554 = $or553&255;
      $139 = $add538&65535;
      $conv555 = $139 & 255;
      __avr_set_r($avr,$conv555,$conv554);
      HEAP8[$arrayidx38$i1049>>0] = 0;
      $cmp$i$i1128 = ($conv554<<24>>24)==(0);
      $conv2$i$i1129 = $cmp$i$i1128&1;
      HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i1129;
      $140 = ($conv554&255) >>> 7;
      HEAP8[$arrayidx6$i$i1053>>0] = $140;
      HEAP8[$arrayidx15$i$i1055>>0] = $140;
      $cycle$6$ph = 1;$new_pc$5$ph = $add;
      break;
     }
     case 7:  {
      $shr558 = $or$i >>> 4;
      $and559 = $shr558 & 15;
      $add560 = $and559 | 16;
      $shr564 = $shr558 & 240;
      $and565 = $conv$i & 15;
      $or566 = $shr564 | $and565;
      $141 = HEAP32[$data478>>2]|0;
      $arrayidx571 = (($141) + ($add560)|0);
      $142 = HEAP8[$arrayidx571>>0]|0;
      $conv573 = $142&255;
      $and575 = $or566 & $conv573;
      $conv576 = $and575&255;
      $143 = $add560&65535;
      $conv577 = $143 & 255;
      __avr_set_r($avr,$conv577,$conv576);
      HEAP8[$arrayidx38$i1049>>0] = 0;
      $cmp$i$i1143 = ($conv576<<24>>24)==(0);
      $conv2$i$i1144 = $cmp$i$i1143&1;
      HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i1144;
      $144 = ($conv576&255) >>> 7;
      HEAP8[$arrayidx6$i$i1053>>0] = $144;
      HEAP8[$arrayidx15$i$i1055>>0] = $144;
      $cycle$6$ph = 1;$new_pc$5$ph = $add;
      break;
     }
     case 8: case 10:  {
      $and579 = $or$i & 53256;
      $trunc692 = $and579&65535;
      switch ($trunc692<<16>>16) {
      case -32760:  {
       $149 = HEAP32[$data478>>2]|0;
       $arrayidx624 = ((($149)) + 28|0);
       $150 = HEAP8[$arrayidx624>>0]|0;
       $conv625 = $150&255;
       $arrayidx627 = ((($149)) + 29|0);
       $151 = HEAP8[$arrayidx627>>0]|0;
       $conv628 = $151&255;
       $shl629 = $conv628 << 8;
       $or630 = $shl629 | $conv625;
       $shr633 = $or$i >>> 4;
       $shr638 = $conv3$i & 32;
       $and639 = $conv3$i << 1;
       $shr640 = $and639 & 24;
       $and642 = $conv$i & 7;
       $or641 = $shr638 | $and642;
       $or643 = $or641 | $shr640;
       $and645 = $conv3$i & 2;
       $tobool646 = ($and645|0)==(0);
       if ($tobool646) {
        $and$shrunk694 = $shr633&65535;
        $conv656 = $and$shrunk694 & 31;
        $add659 = (($or630) + ($or643))|0;
        $conv660 = $add659&65535;
        $call661 = (__avr_get_ram($avr,$conv660)|0);
        __avr_set_r($avr,$conv656,$call661);
        $cycle$6$ph = 2;$new_pc$5$ph = $add;
        break L5;
       }
       $and634 = $shr633 & 31;
       $add650 = (($or630) + ($or643))|0;
       $conv651 = $add650&65535;
       $arrayidx654 = (($149) + ($and634)|0);
       $152 = HEAP8[$arrayidx654>>0]|0;
       $cmp$i1149 = ($conv651&65535)<(311);
       if ($cmp$i1149) {
        __avr_set_r($avr,$conv651,$152);
        $cycle$6$ph = 2;$new_pc$5$ph = $add;
        break L5;
       } else {
        _avr_core_watch_write($avr,$conv651,$152);
        $cycle$6$ph = 2;$new_pc$5$ph = $add;
        break L5;
       }
       break;
      }
      case -32768:  {
       $145 = HEAP32[$data478>>2]|0;
       $arrayidx582 = ((($145)) + 30|0);
       $146 = HEAP8[$arrayidx582>>0]|0;
       $conv583 = $146&255;
       $arrayidx585 = ((($145)) + 31|0);
       $147 = HEAP8[$arrayidx585>>0]|0;
       $conv586 = $147&255;
       $shl587 = $conv586 << 8;
       $or588 = $shl587 | $conv583;
       $shr591 = $or$i >>> 4;
       $shr595 = $conv3$i & 32;
       $and596 = $conv3$i << 1;
       $shr597 = $and596 & 24;
       $and599 = $conv$i & 7;
       $or598 = $shr595 | $and599;
       $or600 = $or598 | $shr597;
       $and602 = $conv3$i & 2;
       $tobool603 = ($and602|0)==(0);
       if ($tobool603) {
        $and$shrunk693 = $shr591&65535;
        $conv613 = $and$shrunk693 & 31;
        $add616 = (($or588) + ($or600))|0;
        $conv617 = $add616&65535;
        $call618 = (__avr_get_ram($avr,$conv617)|0);
        __avr_set_r($avr,$conv613,$call618);
        $cycle$6$ph = 2;$new_pc$5$ph = $add;
        break L5;
       }
       $and592 = $shr591 & 31;
       $add607 = (($or588) + ($or600))|0;
       $conv608 = $add607&65535;
       $arrayidx611 = (($145) + ($and592)|0);
       $148 = HEAP8[$arrayidx611>>0]|0;
       $cmp$i1148 = ($conv608&65535)<(311);
       if ($cmp$i1148) {
        __avr_set_r($avr,$conv608,$148);
        $cycle$6$ph = 2;$new_pc$5$ph = $add;
        break L5;
       } else {
        _avr_core_watch_write($avr,$conv608,$148);
        $cycle$6$ph = 2;$new_pc$5$ph = $add;
        break L5;
       }
       break;
      }
      default: {
       $153 = HEAP32[$data478>>2]|0;
       $arrayidx$i$i1155 = ((($153)) + 93|0);
       $154 = HEAP8[$arrayidx$i$i1155>>0]|0;
       $conv$i$i1156 = $154&255;
       $arrayidx2$i$i1157 = ((($153)) + 94|0);
       $155 = HEAP8[$arrayidx2$i$i1157>>0]|0;
       $conv3$i$i1158 = $155&255;
       $shl$i$i1159 = $conv3$i$i1158 << 8;
       $or$i$i1160 = $shl$i$i1159 | $conv$i$i1156;
       HEAP32[$vararg_buffer13>>2] = $2;
       $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
       HEAP32[$vararg_ptr16>>2] = $or$i$i1160;
       $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
       HEAP32[$vararg_ptr17>>2] = $or$i;
       _avr_global_logger($avr,1,359122,$vararg_buffer13);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
      }
      }
      break;
     }
     case 9:  {
      $and667 = $or$i & 65295;
      $cmp668 = ($and667|0)==(37896);
      if ($cmp668) {
       $shr671 = $conv$i >>> 4;
       $and672 = $shr671 & 7;
       $and674 = $conv$i >>> 7;
       $156 = $and674 ^ 1;
       $157 = $156&255;
       $cmp$i1171 = ($and672|0)==(7);
       do {
        if ($cmp$i1171) {
         $tobool$i = ($157<<24>>24)==(0);
         if ($tobool$i) {
          HEAP8[$interrupt_state>>0] = 0;
          break;
         }
         $158 = HEAP8[$arrayidx$i1193>>0]|0;
         $tobool3$i = ($158<<24>>24)==(0);
         if ($tobool3$i) {
          HEAP8[$interrupt_state>>0] = -2;
         }
        }
       } while(0);
       $arrayidx9$i = (((($avr)) + 120|0) + ($and672)|0);
       HEAP8[$arrayidx9$i>>0] = $157;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
      }
      switch ($conv4$i<<16>>16) {
      case -27256:  {
       $call680 = (_avr_has_pending_interrupts($avr)|0);
       $tobool681 = ($call680|0)==(0);
       if ($tobool681) {
        $367 = 1;$368 = 0;$new_pc$5$ph1428 = $add;$storemerge = 3;
        label = 165;
        break L3;
       }
       $159 = HEAP8[$arrayidx$i1193>>0]|0;
       $tobool684 = ($159<<24>>24)==(0);
       if ($tobool684) {
        $367 = 1;$368 = 0;$new_pc$5$ph1428 = $add;$storemerge = 3;
        label = 165;
        break L3;
       } else {
        $cycle$6$ph = 1;$new_pc$5$ph = $add;
        break L5;
       }
       break;
      }
      case -27240:  {
       $160 = HEAP32[$gdb>>2]|0;
       $tobool688 = ($160|0)==(0|0);
       if ($tobool688) {
        $cycle$6$ph = 1;$new_pc$5$ph = $add;
        break L5;
       } else {
        $367 = 0;$368 = 0;$new_pc$5$ph1428 = $2;$storemerge = 5;
        label = 165;
        break L3;
       }
       break;
      }
      case -27224:  {
       (_avr_ioctl($avr,2003072114,0)|0);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case -27160:  {
       (_avr_ioctl($avr,1718841453,0)|0);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case -27367: case -27383: case -27623: case -27639:  {
       $and698 = $conv$i & 16;
       $and699 = $conv3$i & 1;
       $tobool700 = ($and698|0)!=(0);
       if ($tobool700) {
        $161 = HEAP16[$eind>>1]|0;
        $tobool701 = ($161<<16>>16)==(0);
        if ($tobool701) {
         $162 = HEAP32[$data478>>2]|0;
         $arrayidx$i$i1177 = ((($162)) + 93|0);
         $163 = HEAP8[$arrayidx$i$i1177>>0]|0;
         $conv$i$i1178 = $163&255;
         $arrayidx2$i$i1179 = ((($162)) + 94|0);
         $164 = HEAP8[$arrayidx2$i$i1179>>0]|0;
         $conv3$i$i1180 = $164&255;
         $shl$i$i1181 = $conv3$i$i1180 << 8;
         $or$i$i1182 = $shl$i$i1181 | $conv$i$i1178;
         HEAP32[$vararg_buffer18>>2] = $2;
         $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
         HEAP32[$vararg_ptr21>>2] = $or$i$i1182;
         $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
         HEAP32[$vararg_ptr22>>2] = $or$i;
         _avr_global_logger($avr,1,359122,$vararg_buffer18);
        }
       }
       $165 = HEAP32[$data478>>2]|0;
       $arrayidx705 = ((($165)) + 30|0);
       $166 = HEAP8[$arrayidx705>>0]|0;
       $conv706 = $166&255;
       $arrayidx708 = ((($165)) + 31|0);
       $167 = HEAP8[$arrayidx708>>0]|0;
       $conv709 = $167&255;
       $shl710 = $conv709 << 8;
       $or711 = $shl710 | $conv706;
       if ($tobool700) {
        $168 = HEAP16[$eind>>1]|0;
        $idxprom716 = $168&65535;
        $arrayidx717 = (($165) + ($idxprom716)|0);
        $169 = HEAP8[$arrayidx717>>0]|0;
        $conv718 = $169&255;
        $shl719 = $conv718 << 16;
        $or720 = $shl719 | $or711;
        $z$0 = $or720;
       } else {
        $z$0 = $or711;
       }
       $tobool722 = ($and699|0)==(0);
       if ($tobool722) {
        $cycle$1 = 1;
       } else {
        $call724 = (__avr_push_addr($avr,$add)|0);
        $cycle$1 = $call724;
       }
       $shl728 = $z$0 << 1;
       $inc729 = (($cycle$1) + 1)|0;
       $cycle$6$ph = $inc729;$new_pc$5$ph = $shl728;
       break L5;
       break;
      }
      case -27368:  {
       $170 = HEAP8[$arrayidx$i1193>>0]|0;
       $tobool3$i1194 = ($170<<24>>24)==(0);
       if ($tobool3$i1194) {
        HEAP8[$interrupt_state>>0] = -2;
       }
       HEAP8[$arrayidx$i1193>>0] = 1;
       _avr_interrupt_reti($avr);
       break;
      }
      case -27384:  {
       break;
      }
      case -27192:  {
       $178 = HEAP32[$data478>>2]|0;
       $arrayidx739 = ((($178)) + 30|0);
       $179 = HEAP8[$arrayidx739>>0]|0;
       $conv740 = $179&255;
       $arrayidx742 = ((($178)) + 31|0);
       $180 = HEAP8[$arrayidx742>>0]|0;
       $conv743 = $180&255;
       $shl744 = $conv743 << 8;
       $or745 = $shl744 | $conv740;
       $arrayidx749 = (($avr$idx730$val) + ($or745)|0);
       $181 = HEAP8[$arrayidx749>>0]|0;
       HEAP8[$178>>0] = $181;
       $cycle$6$ph = 3;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      default: {
       $and751 = $or$i & 65039;
       $trunc675 = $and751&65535;
       do {
        switch ($trunc675<<16>>16) {
        case -28672:  {
         $arrayidx$i1216 = (($avr$idx730$val) + ($add)|0);
         $182 = HEAP8[$arrayidx$i1216>>0]|0;
         $conv$i1217 = $182&255;
         $add$i1218 = (($2) + 3)|0;
         $arrayidx2$i1219 = (($avr$idx730$val) + ($add$i1218)|0);
         $183 = HEAP8[$arrayidx2$i1219>>0]|0;
         $conv3$i1220 = $183&255;
         $shl$i1221 = $conv3$i1220 << 8;
         $or$i1222 = $shl$i1221 | $conv$i1217;
         $conv4$i1223 = $or$i1222&65535;
         $add758 = (($2) + 4)|0;
         $shr754 = ($conv4$i&65535) >>> 4;
         $conv759 = $shr754 & 31;
         $call760 = (__avr_get_ram($avr,$conv4$i1223)|0);
         __avr_set_r($avr,$conv759,$call760);
         $cycle$6$ph = 2;$new_pc$5$ph = $add758;
         break L5;
         break;
        }
        case -28668: case -28667:  {
         $184 = HEAP32[$data478>>2]|0;
         $arrayidx769 = ((($184)) + 30|0);
         $185 = HEAP8[$arrayidx769>>0]|0;
         $conv770 = $185&255;
         $arrayidx772 = ((($184)) + 31|0);
         $186 = HEAP8[$arrayidx772>>0]|0;
         $conv773 = $186&255;
         $shl774 = $conv773 << 8;
         $or775 = $shl774 | $conv770;
         $and777 = $conv$i & 1;
         $shr764 = ($conv4$i&65535) >>> 4;
         $conv778 = $shr764 & 31;
         $arrayidx781 = (($avr$idx730$val) + ($or775)|0);
         $187 = HEAP8[$arrayidx781>>0]|0;
         __avr_set_r($avr,$conv778,$187);
         $tobool782 = ($and777|0)==(0);
         if ($tobool782) {
          $cycle$6$ph = 3;$new_pc$5$ph = $add;
          break L5;
         }
         $conv776 = $or775&65535;
         $inc784 = (($conv776) + 1)<<16>>16;
         $188 = ($inc784&65535) >>> 8;
         $conv3$i1224 = $188&255;
         $189 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1229 = ((($189)) + 31|0);
         HEAP8[$arrayidx61$i1229>>0] = $conv3$i1224;
         $conv4$i1225 = $inc784&255;
         $190 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1227 = ((($190)) + 30|0);
         HEAP8[$arrayidx61$i1227>>0] = $conv4$i1225;
         $cycle$6$ph = 3;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28665: case -28666:  {
         $191 = HEAP16[$rampz>>1]|0;
         $tobool788 = ($191<<16>>16)==(0);
         if ($tobool788) {
          $192 = HEAP32[$data478>>2]|0;
          $arrayidx$i$i1248 = ((($192)) + 93|0);
          $193 = HEAP8[$arrayidx$i$i1248>>0]|0;
          $conv$i$i1249 = $193&255;
          $arrayidx2$i$i1250 = ((($192)) + 94|0);
          $194 = HEAP8[$arrayidx2$i$i1250>>0]|0;
          $conv3$i$i1251 = $194&255;
          $shl$i$i1252 = $conv3$i$i1251 << 8;
          $or$i$i1253 = $shl$i$i1252 | $conv$i$i1249;
          HEAP32[$vararg_buffer23>>2] = $2;
          $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
          HEAP32[$vararg_ptr26>>2] = $or$i$i1253;
          $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
          HEAP32[$vararg_ptr27>>2] = $or$i;
          _avr_global_logger($avr,1,359122,$vararg_buffer23);
          $$pre = HEAP16[$rampz>>1]|0;
          $$pre1426 = HEAP32[$avr$idx730>>2]|0;
          $198 = $$pre;$200 = $$pre1426;
         } else {
          $198 = $191;$200 = $avr$idx730$val;
         }
         $195 = HEAP32[$data478>>2]|0;
         $arrayidx793 = ((($195)) + 30|0);
         $196 = HEAP8[$arrayidx793>>0]|0;
         $conv794 = $196&255;
         $arrayidx796 = ((($195)) + 31|0);
         $197 = HEAP8[$arrayidx796>>0]|0;
         $conv797 = $197&255;
         $shl798 = $conv797 << 8;
         $or799 = $shl798 | $conv794;
         $idxprom802 = $198&65535;
         $arrayidx803 = (($195) + ($idxprom802)|0);
         $199 = HEAP8[$arrayidx803>>0]|0;
         $conv804 = $199&255;
         $shl805 = $conv804 << 16;
         $or806 = $or799 | $shl805;
         $and812 = $conv$i & 1;
         $shr808 = ($conv4$i&65535) >>> 4;
         $conv813 = $shr808 & 31;
         $arrayidx815 = (($200) + ($or806)|0);
         $201 = HEAP8[$arrayidx815>>0]|0;
         __avr_set_r($avr,$conv813,$201);
         $tobool816 = ($and812|0)==(0);
         if ($tobool816) {
          $cycle$6$ph = 3;$new_pc$5$ph = $add;
          break L5;
         }
         $inc818 = (($or806) + 1)|0;
         $202 = HEAP16[$rampz>>1]|0;
         $shr820 = $inc818 >>> 16;
         $conv821 = $shr820&255;
         __avr_set_r($avr,$202,$conv821);
         $conv822 = $inc818&65535;
         $203 = ($conv822&65535) >>> 8;
         $conv3$i1263 = $203&255;
         $204 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1268 = ((($204)) + 31|0);
         HEAP8[$arrayidx61$i1268>>0] = $conv3$i1263;
         $conv4$i1264 = $inc818&255;
         $205 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1266 = ((($205)) + 30|0);
         HEAP8[$arrayidx61$i1266>>0] = $conv4$i1264;
         $cycle$6$ph = 3;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28658: case -28659: case -28660:  {
         $and827 = $conv$i & 3;
         $206 = HEAP32[$data478>>2]|0;
         $arrayidx834 = ((($206)) + 27|0);
         $207 = HEAP8[$arrayidx834>>0]|0;
         $conv835 = $207&255;
         $shl836 = $conv835 << 8;
         $arrayidx838 = ((($206)) + 26|0);
         $208 = HEAP8[$arrayidx838>>0]|0;
         $conv839 = $208&255;
         $or840 = $shl836 | $conv839;
         $conv841 = $or840&65535;
         $cmp843 = ($and827|0)==(2);
         $dec = $cmp843 << 31 >> 31;
         $spec$select = (($conv841) + ($dec))<<16>>16;
         $call848 = (__avr_get_ram($avr,$spec$select)|0);
         $cmp849 = ($and827|0)==(1);
         $inc852 = $cmp849&1;
         $x832$1 = (($spec$select) + ($inc852))<<16>>16;
         $209 = ($x832$1&65535) >>> 8;
         $conv3$i1269 = $209&255;
         $210 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1274 = ((($210)) + 27|0);
         HEAP8[$arrayidx61$i1274>>0] = $conv3$i1269;
         $conv4$i1270 = $x832$1&255;
         $211 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1272 = ((($211)) + 26|0);
         HEAP8[$arrayidx61$i1272>>0] = $conv4$i1270;
         $shr829 = ($conv4$i&65535) >>> 4;
         $conv854 = $shr829 & 31;
         __avr_set_r($avr,$conv854,$call848);
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28146: case -28147: case -28148:  {
         $and857 = $conv$i & 3;
         $shr859 = $or$i >>> 4;
         $and860 = $shr859 & 31;
         $212 = HEAP32[$data478>>2]|0;
         $arrayidx865 = (($212) + ($and860)|0);
         $213 = HEAP8[$arrayidx865>>0]|0;
         $arrayidx868 = ((($212)) + 27|0);
         $214 = HEAP8[$arrayidx868>>0]|0;
         $conv869 = $214&255;
         $shl870 = $conv869 << 8;
         $arrayidx872 = ((($212)) + 26|0);
         $215 = HEAP8[$arrayidx872>>0]|0;
         $conv873 = $215&255;
         $or874 = $shl870 | $conv873;
         $conv875 = $or874&65535;
         $cmp877 = ($and857|0)==(2);
         $dec880 = $cmp877 << 31 >> 31;
         $spec$select720 = (($conv875) + ($dec880))<<16>>16;
         $cmp$i1275 = ($spec$select720&65535)<(311);
         if ($cmp$i1275) {
          __avr_set_r($avr,$spec$select720,$213);
         } else {
          _avr_core_watch_write($avr,$spec$select720,$213);
         }
         $cmp882 = ($and857|0)==(1);
         $inc885 = $cmp882&1;
         $x866$1 = (($spec$select720) + ($inc885))<<16>>16;
         $216 = ($x866$1&65535) >>> 8;
         $conv3$i1279 = $216&255;
         $217 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1284 = ((($217)) + 27|0);
         HEAP8[$arrayidx61$i1284>>0] = $conv3$i1279;
         $conv4$i1280 = $x866$1&255;
         $218 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1282 = ((($218)) + 26|0);
         HEAP8[$arrayidx61$i1282>>0] = $conv4$i1280;
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28662: case -28663:  {
         $and889 = $conv$i & 3;
         $219 = HEAP32[$data478>>2]|0;
         $arrayidx895 = ((($219)) + 29|0);
         $220 = HEAP8[$arrayidx895>>0]|0;
         $conv896 = $220&255;
         $shl897 = $conv896 << 8;
         $arrayidx899 = ((($219)) + 28|0);
         $221 = HEAP8[$arrayidx899>>0]|0;
         $conv900 = $221&255;
         $or901 = $shl897 | $conv900;
         $conv902 = $or901&65535;
         $cmp904 = ($and889|0)==(2);
         $dec907 = $cmp904 << 31 >> 31;
         $spec$select721 = (($conv902) + ($dec907))<<16>>16;
         $call910 = (__avr_get_ram($avr,$spec$select721)|0);
         $cmp911 = ($and889|0)==(1);
         $inc914 = $cmp911&1;
         $y$1 = (($spec$select721) + ($inc914))<<16>>16;
         $222 = ($y$1&65535) >>> 8;
         $conv3$i1285 = $222&255;
         $223 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1290 = ((($223)) + 29|0);
         HEAP8[$arrayidx61$i1290>>0] = $conv3$i1285;
         $conv4$i1286 = $y$1&255;
         $224 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1288 = ((($224)) + 28|0);
         HEAP8[$arrayidx61$i1288>>0] = $conv4$i1286;
         $shr891 = ($conv4$i&65535) >>> 4;
         $conv916 = $shr891 & 31;
         __avr_set_r($avr,$conv916,$call910);
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28150: case -28151:  {
         $and919 = $conv$i & 3;
         $shr921 = $or$i >>> 4;
         $and922 = $shr921 & 31;
         $225 = HEAP32[$data478>>2]|0;
         $arrayidx927 = (($225) + ($and922)|0);
         $226 = HEAP8[$arrayidx927>>0]|0;
         $arrayidx930 = ((($225)) + 29|0);
         $227 = HEAP8[$arrayidx930>>0]|0;
         $conv931 = $227&255;
         $shl932 = $conv931 << 8;
         $arrayidx934 = ((($225)) + 28|0);
         $228 = HEAP8[$arrayidx934>>0]|0;
         $conv935 = $228&255;
         $or936 = $shl932 | $conv935;
         $conv937 = $or936&65535;
         $cmp939 = ($and919|0)==(2);
         $dec942 = $cmp939 << 31 >> 31;
         $spec$select722 = (($conv937) + ($dec942))<<16>>16;
         $cmp$i1313 = ($spec$select722&65535)<(311);
         if ($cmp$i1313) {
          __avr_set_r($avr,$spec$select722,$226);
         } else {
          _avr_core_watch_write($avr,$spec$select722,$226);
         }
         $cmp944 = ($and919|0)==(1);
         $inc947 = $cmp944&1;
         $y928$1 = (($spec$select722) + ($inc947))<<16>>16;
         $229 = ($y928$1&65535) >>> 8;
         $conv3$i1317 = $229&255;
         $230 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1322 = ((($230)) + 29|0);
         HEAP8[$arrayidx61$i1322>>0] = $conv3$i1317;
         $conv4$i1318 = $y928$1&255;
         $231 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1320 = ((($231)) + 28|0);
         HEAP8[$arrayidx61$i1320>>0] = $conv4$i1318;
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28160:  {
         $shr951 = $or$i >>> 4;
         $and952 = $shr951 & 31;
         $232 = HEAP32[$data478>>2]|0;
         $arrayidx957 = (($232) + ($and952)|0);
         $233 = HEAP8[$arrayidx957>>0]|0;
         $arrayidx$i1323 = (($avr$idx730$val) + ($add)|0);
         $234 = HEAP8[$arrayidx$i1323>>0]|0;
         $conv$i1324 = $234&255;
         $add$i1325 = (($2) + 3)|0;
         $arrayidx2$i1326 = (($avr$idx730$val) + ($add$i1325)|0);
         $235 = HEAP8[$arrayidx2$i1326>>0]|0;
         $conv3$i1327 = $235&255;
         $shl$i1328 = $conv3$i1327 << 8;
         $or$i1329 = $shl$i1328 | $conv$i1324;
         $conv4$i1330 = $or$i1329&65535;
         $add960 = (($2) + 4)|0;
         $cmp$i1336 = ($conv4$i1330&65535)<(311);
         if ($cmp$i1336) {
          __avr_set_r($avr,$conv4$i1330,$233);
          $cycle$6$ph = 2;$new_pc$5$ph = $add960;
          break L5;
         } else {
          _avr_core_watch_write($avr,$conv4$i1330,$233);
          $cycle$6$ph = 2;$new_pc$5$ph = $add960;
          break L5;
         }
         break;
        }
        case -28670: case -28671:  {
         $and964 = $conv$i & 3;
         $236 = HEAP32[$data478>>2]|0;
         $arrayidx971 = ((($236)) + 31|0);
         $237 = HEAP8[$arrayidx971>>0]|0;
         $conv972 = $237&255;
         $shl973 = $conv972 << 8;
         $arrayidx975 = ((($236)) + 30|0);
         $238 = HEAP8[$arrayidx975>>0]|0;
         $conv976 = $238&255;
         $or977 = $shl973 | $conv976;
         $conv978 = $or977&65535;
         $cmp980 = ($and964|0)==(2);
         $dec983 = $cmp980 << 31 >> 31;
         $spec$select723 = (($conv978) + ($dec983))<<16>>16;
         $call986 = (__avr_get_ram($avr,$spec$select723)|0);
         $cmp987 = ($and964|0)==(1);
         $inc990 = $cmp987&1;
         $z969$1 = (($spec$select723) + ($inc990))<<16>>16;
         $239 = ($z969$1&65535) >>> 8;
         $conv3$i1340 = $239&255;
         $240 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1345 = ((($240)) + 31|0);
         HEAP8[$arrayidx61$i1345>>0] = $conv3$i1340;
         $conv4$i1341 = $z969$1&255;
         $241 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1343 = ((($241)) + 30|0);
         HEAP8[$arrayidx61$i1343>>0] = $conv4$i1341;
         $shr966 = ($conv4$i&65535) >>> 4;
         $conv992 = $shr966 & 31;
         __avr_set_r($avr,$conv992,$call986);
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28158: case -28159:  {
         $and995 = $conv$i & 3;
         $shr997 = $or$i >>> 4;
         $and998 = $shr997 & 31;
         $242 = HEAP32[$data478>>2]|0;
         $arrayidx1003 = (($242) + ($and998)|0);
         $243 = HEAP8[$arrayidx1003>>0]|0;
         $arrayidx1006 = ((($242)) + 31|0);
         $244 = HEAP8[$arrayidx1006>>0]|0;
         $conv1007 = $244&255;
         $shl1008 = $conv1007 << 8;
         $arrayidx1010 = ((($242)) + 30|0);
         $245 = HEAP8[$arrayidx1010>>0]|0;
         $conv1011 = $245&255;
         $or1012 = $shl1008 | $conv1011;
         $conv1013 = $or1012&65535;
         $cmp1015 = ($and995|0)==(2);
         $dec1018 = $cmp1015 << 31 >> 31;
         $spec$select724 = (($conv1013) + ($dec1018))<<16>>16;
         $cmp$i1346 = ($spec$select724&65535)<(311);
         if ($cmp$i1346) {
          __avr_set_r($avr,$spec$select724,$243);
         } else {
          _avr_core_watch_write($avr,$spec$select724,$243);
         }
         $cmp1020 = ($and995|0)==(1);
         $inc1023 = $cmp1020&1;
         $z1004$1 = (($spec$select724) + ($inc1023))<<16>>16;
         $246 = ($z1004$1&65535) >>> 8;
         $conv3$i1350 = $246&255;
         $247 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1355 = ((($247)) + 31|0);
         HEAP8[$arrayidx61$i1355>>0] = $conv3$i1350;
         $conv4$i1351 = $z1004$1&255;
         $248 = HEAP32[$data478>>2]|0;
         $arrayidx61$i1353 = ((($248)) + 30|0);
         HEAP8[$arrayidx61$i1353>>0] = $conv4$i1351;
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28657:  {
         $shr1027 = ($conv4$i&65535) >>> 4;
         $conv1030 = $shr1027 & 31;
         $249 = HEAP32[$data478>>2]|0;
         $arrayidx$i$i1357 = ((($249)) + 93|0);
         $250 = HEAP8[$arrayidx$i$i1357>>0]|0;
         $conv$i$i1358 = $250&255;
         $arrayidx2$i$i1359 = ((($249)) + 94|0);
         $251 = HEAP8[$arrayidx2$i$i1359>>0]|0;
         $conv3$i$i1360 = $251&255;
         $shl$i$i1361 = $conv3$i$i1360 << 8;
         $or$i$i1362 = $shl$i$i1361 | $conv$i$i1358;
         $add$i1363 = (($or$i$i1362) + 1)|0;
         $conv1$i1364 = $add$i1363&65535;
         $call2$i = (__avr_get_ram($avr,$conv1$i1364)|0);
         $conv$i$i$i1365 = $add$i1363&255;
         __avr_set_r($avr,93,$conv$i$i$i1365);
         $252 = ($conv1$i1364&65535) >>> 8;
         $conv4$i$i$i1366 = $252&255;
         __avr_set_r($avr,94,$conv4$i$i$i1366);
         __avr_set_r($avr,$conv1030,$call2$i);
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -28145:  {
         $shr1035 = $or$i >>> 4;
         $and1036 = $shr1035 & 31;
         $253 = HEAP32[$data478>>2]|0;
         $arrayidx1041 = (($253) + ($and1036)|0);
         $254 = HEAP8[$arrayidx1041>>0]|0;
         $arrayidx$i$i1368 = ((($253)) + 93|0);
         $255 = HEAP8[$arrayidx$i$i1368>>0]|0;
         $conv$i$i1369 = $255&255;
         $arrayidx2$i$i1370 = ((($253)) + 94|0);
         $256 = HEAP8[$arrayidx2$i$i1370>>0]|0;
         $conv3$i$i1371 = $256&255;
         $shl$i$i1372 = $conv3$i$i1371 << 8;
         $or$i$i1373 = $shl$i$i1372 | $conv$i$i1369;
         $conv4$i$i1374 = $or$i$i1373&65535;
         $cmp$i$i1375 = ($conv4$i$i1374&65535)<(311);
         if ($cmp$i$i1375) {
          __avr_set_r($avr,$conv4$i$i1374,$254);
         } else {
          _avr_core_watch_write($avr,$conv4$i$i1374,$254);
         }
         $sub$i1377 = (($or$i$i1373) + 65535)|0;
         $conv2$i1378 = $sub$i1377&65535;
         $conv$i$i$i1379 = $sub$i1377&255;
         __avr_set_r($avr,93,$conv$i$i$i1379);
         $257 = ($conv2$i1378&65535) >>> 8;
         $conv4$i$i$i1380 = $257&255;
         __avr_set_r($avr,94,$conv4$i$i$i1380);
         $cycle$6$ph = 2;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27648:  {
         $shr1046 = $or$i >>> 4;
         $and1047 = $shr1046 & 31;
         $258 = HEAP32[$data478>>2]|0;
         $arrayidx1052 = (($258) + ($and1047)|0);
         $259 = HEAP8[$arrayidx1052>>0]|0;
         $260 = $259 ^ -1;
         $and$shrunk683 = $shr1046&65535;
         $conv1057 = $and$shrunk683 & 31;
         __avr_set_r($avr,$conv1057,$260);
         HEAP8[$arrayidx38$i1049>>0] = 0;
         $cmp$i$i1382 = ($259<<24>>24)==(-1);
         $conv2$i$i1383 = $cmp$i$i1382&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv2$i$i1383;
         $261 = ($260&255) >>> 7;
         HEAP8[$arrayidx6$i$i1053>>0] = $261;
         HEAP8[$arrayidx15$i$i1055>>0] = $261;
         HEAP8[$arrayidx19$i1041>>0] = 1;
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27647:  {
         $shr1062 = $or$i >>> 4;
         $and1063 = $shr1062 & 31;
         $262 = HEAP32[$data478>>2]|0;
         $arrayidx1068 = (($262) + ($and1063)|0);
         $263 = HEAP8[$arrayidx1068>>0]|0;
         $conv1070 = $263&255;
         $sub1071 = (0 - ($conv1070))|0;
         $conv1072 = $sub1071&255;
         $and$shrunk682 = $shr1062&65535;
         $conv1073 = $and$shrunk682 & 31;
         __avr_set_r($avr,$conv1073,$conv1072);
         $264 = (0 - ($263))<<24>>24;
         $265 = $263 | $264;
         $266 = $265&255;
         $or1078 = $266 >>> 3;
         $and1079 = $or1078 & 1;
         $conv1080 = $and1079&255;
         HEAP8[$arrayidx$i1039>>0] = $conv1080;
         $cmp1084 = ($264<<24>>24)==(-128);
         $conv1086 = $cmp1084&1;
         HEAP8[$arrayidx38$i1049>>0] = $conv1086;
         $cmp1090 = ($263<<24>>24)!=(0);
         $conv1092 = $cmp1090&1;
         HEAP8[$arrayidx19$i1041>>0] = $conv1092;
         $cmp$i1387 = ($conv1072<<24>>24)==(0);
         $conv2$i1388 = $cmp$i1387&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1388;
         $267 = ($conv1072&255) >>> 7;
         HEAP8[$arrayidx6$i$i1053>>0] = $267;
         $xor6$i1392 = $267 ^ $conv1086;
         HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i1392;
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27646:  {
         $shr1097 = $or$i >>> 4;
         $and1098 = $shr1097 & 31;
         $268 = HEAP32[$data478>>2]|0;
         $arrayidx1103 = (($268) + ($and1098)|0);
         $269 = HEAP8[$arrayidx1103>>0]|0;
         $conv1105 = $269&255;
         $270 = $conv1105 >>> 4;
         $shl1108 = $conv1105 << 4;
         $or1109 = $270 | $shl1108;
         $conv1110 = $or1109&255;
         $and$shrunk681 = $shr1097&65535;
         $conv1111 = $and$shrunk681 & 31;
         __avr_set_r($avr,$conv1111,$conv1110);
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27645:  {
         $shr1114 = $or$i >>> 4;
         $and1115 = $shr1114 & 31;
         $271 = HEAP32[$data478>>2]|0;
         $arrayidx1120 = (($271) + ($and1115)|0);
         $272 = HEAP8[$arrayidx1120>>0]|0;
         $conv1122 = $272&255;
         $add1123 = (($conv1122) + 1)|0;
         $conv1124 = $add1123&255;
         $and$shrunk680 = $shr1114&65535;
         $conv1125 = $and$shrunk680 & 31;
         __avr_set_r($avr,$conv1125,$conv1124);
         $cmp1127 = ($272<<24>>24)==(127);
         $conv1129 = $cmp1127&1;
         HEAP8[$arrayidx38$i1049>>0] = $conv1129;
         $cmp$i1394 = ($conv1124<<24>>24)==(0);
         $conv2$i1395 = $cmp$i1394&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1395;
         $273 = ($conv1124&255) >>> 7;
         HEAP8[$arrayidx6$i$i1053>>0] = $273;
         $xor6$i1399 = $273 ^ $conv1129;
         HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i1399;
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27643:  {
         $shr1134 = $or$i >>> 4;
         $and1135 = $shr1134 & 31;
         $274 = HEAP32[$data478>>2]|0;
         $arrayidx1140 = (($274) + ($and1135)|0);
         $275 = HEAP8[$arrayidx1140>>0]|0;
         $conv1142 = $275&255;
         $276 = $conv1142 >>> 1;
         $and1145 = $conv1142 & 128;
         $or1146 = $276 | $and1145;
         $conv1147 = $or1146&255;
         $and$shrunk679 = $shr1134&65535;
         $conv1148 = $and$shrunk679 & 31;
         __avr_set_r($avr,$conv1148,$conv1147);
         $cmp$i1401 = ($conv1147<<24>>24)==(0);
         $conv2$i1402 = $cmp$i1401&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1402;
         $277 = $275 & 1;
         HEAP8[$arrayidx19$i1041>>0] = $277;
         $278 = ($conv1147&255) >>> 7;
         HEAP8[$arrayidx6$i$i1053>>0] = $278;
         $xor10$i1406 = $278 ^ $277;
         HEAP8[$arrayidx38$i1049>>0] = $xor10$i1406;
         HEAP8[$arrayidx15$i$i1055>>0] = $277;
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27642:  {
         $shr1151 = $or$i >>> 4;
         $and1152 = $shr1151 & 31;
         $279 = HEAP32[$data478>>2]|0;
         $arrayidx1157 = (($279) + ($and1152)|0);
         $280 = HEAP8[$arrayidx1157>>0]|0;
         $281 = ($280&255) >>> 1;
         $and$shrunk678 = $shr1151&65535;
         $conv1162 = $and$shrunk678 & 31;
         __avr_set_r($avr,$conv1162,$281);
         HEAP8[$arrayidx6$i$i1053>>0] = 0;
         $cmp$i1409 = ($281<<24>>24)==(0);
         $conv2$i1410 = $cmp$i1409&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1410;
         $282 = $280 & 1;
         HEAP8[$arrayidx19$i1041>>0] = $282;
         HEAP8[$arrayidx38$i1049>>0] = $282;
         HEAP8[$arrayidx15$i$i1055>>0] = $282;
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27641:  {
         $shr1167 = $or$i >>> 4;
         $and1168 = $shr1167 & 31;
         $283 = HEAP32[$data478>>2]|0;
         $arrayidx1173 = (($283) + ($and1168)|0);
         $284 = HEAP8[$arrayidx1173>>0]|0;
         $285 = HEAP8[$arrayidx19$i1041>>0]|0;
         $tobool1178 = ($285<<24>>24)==(0);
         $cond = $tobool1178 ? 0 : 128;
         $conv1179 = $284&255;
         $286 = $conv1179 >>> 1;
         $or1181 = $cond | $286;
         $conv1182 = $or1181&255;
         $and$shrunk677 = $shr1167&65535;
         $conv1183 = $and$shrunk677 & 31;
         __avr_set_r($avr,$conv1183,$conv1182);
         $cmp$i1331 = ($conv1182<<24>>24)==(0);
         $conv2$i1332 = $cmp$i1331&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1332;
         $287 = $284 & 1;
         HEAP8[$arrayidx19$i1041>>0] = $287;
         $288 = ($conv1182&255) >>> 7;
         HEAP8[$arrayidx6$i$i1053>>0] = $288;
         $xor10$i = $288 ^ $287;
         HEAP8[$arrayidx38$i1049>>0] = $xor10$i;
         HEAP8[$arrayidx15$i$i1055>>0] = $287;
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27638:  {
         $shr1186 = $or$i >>> 4;
         $and1187 = $shr1186 & 31;
         $289 = HEAP32[$data478>>2]|0;
         $arrayidx1192 = (($289) + ($and1187)|0);
         $290 = HEAP8[$arrayidx1192>>0]|0;
         $conv1194 = $290&255;
         $sub1195 = (($conv1194) + 255)|0;
         $conv1196 = $sub1195&255;
         $and$shrunk676 = $shr1186&65535;
         $conv1197 = $and$shrunk676 & 31;
         __avr_set_r($avr,$conv1197,$conv1196);
         $cmp1199 = ($290<<24>>24)==(-128);
         $conv1201 = $cmp1199&1;
         HEAP8[$arrayidx38$i1049>>0] = $conv1201;
         $cmp$i1307 = ($conv1196<<24>>24)==(0);
         $conv2$i1308 = $cmp$i1307&1;
         HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1308;
         $291 = ($conv1196&255) >>> 7;
         HEAP8[$arrayidx6$i$i1053>>0] = $291;
         $xor6$i = $291 ^ $conv1201;
         HEAP8[$arrayidx15$i$i1055>>0] = $xor6$i;
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
         break;
        }
        case -27635: case -27636:  {
         $and1205 = $or$i >>> 3;
         $shr1206 = $and1205 & 62;
         $and1207 = $conv$i & 1;
         $or1208 = $shr1206 | $and1207;
         $arrayidx$i1299 = (($avr$idx730$val) + ($add)|0);
         $292 = HEAP8[$arrayidx$i1299>>0]|0;
         $conv$i1300 = $292&255;
         $add$i1301 = (($2) + 3)|0;
         $arrayidx2$i1302 = (($avr$idx730$val) + ($add$i1301)|0);
         $293 = HEAP8[$arrayidx2$i1302>>0]|0;
         $conv3$i1303 = $293&255;
         $shl$i1304 = $conv3$i1303 << 8;
         $shl1211 = $or1208 << 16;
         $or$i1305 = $shl1211 | $conv$i1300;
         $or1213 = $or$i1305 | $shl$i1304;
         $shl1214 = $or1213 << 1;
         $cycle$6$ph = 3;$new_pc$5$ph = $shl1214;
         break L5;
         break;
        }
        case -27633: case -27634:  {
         $and1218 = $or$i >>> 3;
         $shr1219 = $and1218 & 62;
         $and1220 = $conv$i & 1;
         $or1221 = $shr1219 | $and1220;
         $arrayidx$i1291 = (($avr$idx730$val) + ($add)|0);
         $294 = HEAP8[$arrayidx$i1291>>0]|0;
         $conv$i1292 = $294&255;
         $add$i1293 = (($2) + 3)|0;
         $arrayidx2$i1294 = (($avr$idx730$val) + ($add$i1293)|0);
         $295 = HEAP8[$arrayidx2$i1294>>0]|0;
         $conv3$i1295 = $295&255;
         $shl$i1296 = $conv3$i1295 << 8;
         $shl1224 = $or1221 << 16;
         $or$i1297 = $shl1224 | $conv$i1292;
         $or1226 = $or$i1297 | $shl$i1296;
         $add1227 = (($2) + 4)|0;
         $call1228 = (__avr_push_addr($avr,$add1227)|0);
         $add1230 = (($call1228) + 2)|0;
         $shl1231 = $or1226 << 1;
         $cycle$6$ph = $add1230;$new_pc$5$ph = $shl1231;
         break L5;
         break;
        }
        default: {
         $296 = (($shl$i) + -38400)|0;
         $trunc691 = $296 >>> 8;
         $trunc691$clear = $trunc691 & 16777215;
         switch ($trunc691$clear|0) {
         case 0:  {
          $shr1236 = $conv$i >>> 3;
          $and1237 = $shr1236 & 6;
          $add1238 = $and1237 | 24;
          $and1241 = $conv$i >>> 2;
          $shr1242 = $and1241 & 48;
          $and1243 = $conv$i & 15;
          $or1244 = $shr1242 | $and1243;
          $297 = HEAP32[$data478>>2]|0;
          $arrayidx1248 = (($297) + ($add1238)|0);
          $298 = HEAP8[$arrayidx1248>>0]|0;
          $conv1249 = $298&255;
          $add1252 = $shr1236 | 25;
          $arrayidx1253 = (($297) + ($add1252)|0);
          $299 = HEAP8[$arrayidx1253>>0]|0;
          $conv1254 = $299&255;
          $shl1255 = $conv1254 << 8;
          $or1256 = $shl1255 | $conv1249;
          $add1261 = (($or1256) + ($or1244))|0;
          $conv1262 = $add1261&65535;
          $300 = $add1238&65535;
          $301 = $300 | 1;
          $302 = ($conv1262&65535) >>> 8;
          $conv3$i1244 = $302&255;
          __avr_set_r($avr,$301,$conv3$i1244);
          $conv4$i1245 = $add1261&255;
          __avr_set_r($avr,$300,$conv4$i1245);
          $neg = $shl1255 ^ 32768;
          $conv1265 = $add1261 & 32768;
          $and1266 = $add1261 & $neg;
          $303 = $and1266 >>> 15;
          $conv1269 = $303&255;
          HEAP8[$arrayidx38$i1049>>0] = $conv1269;
          $neg1273 = $conv1265 ^ 32768;
          $and1275 = $neg1273 & $shl1255;
          $304 = $and1275 >>> 15;
          $conv1278 = $304&255;
          HEAP8[$arrayidx19$i1041>>0] = $conv1278;
          $cmp$i1230 = ($conv1262<<16>>16)==(0);
          $conv2$i1231 = $cmp$i1230&1;
          HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1231;
          $305 = ($conv1262&65535) >>> 15;
          $conv4$i1233 = $305&255;
          HEAP8[$arrayidx6$i$i1053>>0] = $conv4$i1233;
          $conv9$i1235 = $305&65535;
          $xor$i1238 = $303 ^ $conv9$i1235;
          $conv13$i1239 = $xor$i1238&255;
          HEAP8[$arrayidx15$i$i1055>>0] = $conv13$i1239;
          $cycle$6$ph = 2;$new_pc$5$ph = $add;
          break L5;
          break;
         }
         case 1:  {
          $shr1284 = $conv$i >>> 3;
          $and1285 = $shr1284 & 6;
          $add1286 = $and1285 | 24;
          $and1289 = $conv$i >>> 2;
          $shr1290 = $and1289 & 48;
          $and1291 = $conv$i & 15;
          $or1292 = $shr1290 | $and1291;
          $306 = HEAP32[$data478>>2]|0;
          $arrayidx1297 = (($306) + ($add1286)|0);
          $307 = HEAP8[$arrayidx1297>>0]|0;
          $conv1298 = $307&255;
          $add1301 = $shr1284 | 25;
          $arrayidx1302 = (($306) + ($add1301)|0);
          $308 = HEAP8[$arrayidx1302>>0]|0;
          $conv1303 = $308&255;
          $shl1304 = $conv1303 << 8;
          $or1305 = $shl1304 | $conv1298;
          $sub1310 = (($or1305) - ($or1292))|0;
          $conv1311 = $sub1310&65535;
          $309 = $add1286&65535;
          $310 = $309 | 1;
          $311 = ($conv1311&65535) >>> 8;
          $conv3$i1140 = $311&255;
          __avr_set_r($avr,$310,$conv3$i1140);
          $conv4$i1141 = $sub1310&255;
          __avr_set_r($avr,$309,$conv4$i1141);
          $neg1315 = $sub1310 ^ 32768;
          $and1316 = $neg1315 & $shl1304;
          $312 = $and1316 >>> 15;
          $conv1319 = $312&255;
          HEAP8[$arrayidx38$i1049>>0] = $conv1319;
          $neg1324 = $shl1304 & 32768;
          $conv1314 = $neg1324 ^ 32768;
          $and1325 = $conv1314 & $sub1310;
          $313 = $and1325 >>> 15;
          $conv1328 = $313&255;
          HEAP8[$arrayidx19$i1041>>0] = $conv1328;
          $cmp$i = ($conv1311<<16>>16)==(0);
          $conv2$i1133 = $cmp$i&1;
          HEAP8[$arrayidx$i$i1052>>0] = $conv2$i1133;
          $314 = ($conv1311&65535) >>> 15;
          $conv4$i1135 = $314&255;
          HEAP8[$arrayidx6$i$i1053>>0] = $conv4$i1135;
          $conv9$i = $314&65535;
          $xor$i = $312 ^ $conv9$i;
          $conv13$i1136 = $xor$i&255;
          HEAP8[$arrayidx15$i$i1055>>0] = $conv13$i1136;
          $cycle$6$ph = 2;$new_pc$5$ph = $add;
          break L5;
          break;
         }
         case 2:  {
          $shr1333 = $conv$i >>> 3;
          $add1335 = $shr1333 | 32;
          $and1337 = $conv$i & 7;
          $shl1338 = 1 << $and1337;
          $315 = $add1335&65535;
          $conv1341 = $315 & 255;
          $call1342 = (__avr_get_ram($avr,$conv1341)|0);
          $conv1343 = $call1342&255;
          $neg1345 = $shl1338 ^ 255;
          $and1346 = $neg1345 & $conv1343;
          $conv1347 = $and1346&255;
          __avr_set_r($avr,$conv1341,$conv1347);
          $cycle$6$ph = 2;$new_pc$5$ph = $add;
          break L5;
          break;
         }
         case 3:  {
          $shr1352 = $conv$i >>> 3;
          $add1354 = $shr1352 | 32;
          $and1357 = $conv$i & 7;
          $shl1358 = 1 << $and1357;
          $316 = $add1354&65535;
          $conv1361 = $316 & 255;
          $call1362 = (__avr_get_ram($avr,$conv1361)|0);
          $conv1363 = $call1362&255;
          $and1365 = $shl1358 & $conv1363;
          $tobool1367 = ($and1365|0)==(0);
          if (!($tobool1367)) {
           $cycle$6$ph = 1;$new_pc$5$ph = $add;
           break L5;
          }
          $avr$idx733$val = HEAP32[$avr$idx730>>2]|0;
          $arrayidx$i$i1056 = (($avr$idx733$val) + ($add)|0);
          $317 = HEAP8[$arrayidx$i$i1056>>0]|0;
          $conv$i$i1057 = $317&255;
          $add$i$i1058 = (($2) + 3)|0;
          $arrayidx2$i$i1059 = (($avr$idx733$val) + ($add$i$i1058)|0);
          $318 = HEAP8[$arrayidx2$i$i1059>>0]|0;
          $conv3$i$i1060 = $318&255;
          $shl$i$i1061 = $conv3$i$i1060 << 8;
          $or$i$i1062 = $shl$i$i1061 | $conv$i$i1057;
          $conv4$i$i1063 = $or$i$i1062&65535;
          $319 = $conv4$i$i1063 & -1009;
          switch ($319<<16>>16) {
          case -27633: case -27634: case -27635: case -27636: case -28672:  {
           $add1372 = (($2) + 6)|0;
           $cycle$6$ph = 3;$new_pc$5$ph = $add1372;
           break L5;
           break;
          }
          default: {
           $add1375 = (($2) + 4)|0;
           $cycle$6$ph = 2;$new_pc$5$ph = $add1375;
           break L5;
          }
          }
          break;
         }
         case 4:  {
          $shr1381 = $conv$i >>> 3;
          $add1383 = $shr1381 | 32;
          $and1386 = $conv$i & 7;
          $shl1387 = 1 << $and1386;
          $320 = $add1383&65535;
          $conv1390 = $320 & 255;
          $call1391 = (__avr_get_ram($avr,$conv1390)|0);
          $conv1392 = $call1391&255;
          $or1394 = $shl1387 | $conv1392;
          $conv1395 = $or1394&255;
          __avr_set_r($avr,$conv1390,$conv1395);
          $cycle$6$ph = 2;$new_pc$5$ph = $add;
          break L5;
          break;
         }
         case 5:  {
          $shr1400 = $conv$i >>> 3;
          $add1402 = $shr1400 | 32;
          $and1405 = $conv$i & 7;
          $shl1406 = 1 << $and1405;
          $321 = $add1402&65535;
          $conv1409 = $321 & 255;
          $call1410 = (__avr_get_ram($avr,$conv1409)|0);
          $conv1411 = $call1410&255;
          $and1413 = $shl1406 & $conv1411;
          $tobool1415 = ($and1413|0)==(0);
          if ($tobool1415) {
           $cycle$6$ph = 1;$new_pc$5$ph = $add;
           break L5;
          }
          $avr$idx732$val = HEAP32[$avr$idx730>>2]|0;
          $arrayidx$i$i986 = (($avr$idx732$val) + ($add)|0);
          $322 = HEAP8[$arrayidx$i$i986>>0]|0;
          $conv$i$i987 = $322&255;
          $add$i$i988 = (($2) + 3)|0;
          $arrayidx2$i$i989 = (($avr$idx732$val) + ($add$i$i988)|0);
          $323 = HEAP8[$arrayidx2$i$i989>>0]|0;
          $conv3$i$i990 = $323&255;
          $shl$i$i991 = $conv3$i$i990 << 8;
          $or$i$i992 = $shl$i$i991 | $conv$i$i987;
          $conv4$i$i993 = $or$i$i992&65535;
          $324 = $conv4$i$i993 & -1009;
          switch ($324<<16>>16) {
          case -27633: case -27634: case -27635: case -27636: case -28672:  {
           $add1420 = (($2) + 6)|0;
           $cycle$6$ph = 3;$new_pc$5$ph = $add1420;
           break L5;
           break;
          }
          default: {
           $add1423 = (($2) + 4)|0;
           $cycle$6$ph = 2;$new_pc$5$ph = $add1423;
           break L5;
          }
          }
          break;
         }
         default: {
          $and1428 = $conv3$i & 252;
          $cond1 = ($and1428|0)==(156);
          if ($cond1) {
           $shr1431 = $conv3$i << 3;
           $and1432 = $shr1431 & 16;
           $and1433 = $conv$i & 15;
           $or1434 = $and1432 | $and1433;
           $shr1437 = $or$i >>> 4;
           $and1438 = $shr1437 & 31;
           $325 = HEAP32[$data478>>2]|0;
           $arrayidx1443 = (($325) + ($and1438)|0);
           $326 = HEAP8[$arrayidx1443>>0]|0;
           $arrayidx1447 = (($325) + ($or1434)|0);
           $327 = HEAP8[$arrayidx1447>>0]|0;
           $conv1449 = $326&255;
           $conv1450 = $327&255;
           $mul1451 = Math_imul($conv1450, $conv1449)|0;
           $conv1452 = $mul1451&65535;
           $conv$i981 = $mul1451&255;
           HEAP8[$325>>0] = $conv$i981;
           $328 = ($conv1452&65535) >>> 8;
           $conv4$i982 = $328&255;
           $329 = HEAP32[$data478>>2]|0;
           $arrayidx61$i984 = ((($329)) + 1|0);
           HEAP8[$arrayidx61$i984>>0] = $conv4$i982;
           $cmp1455 = ($mul1451|0)==(0);
           $conv1457 = $cmp1455&1;
           HEAP8[$arrayidx$i$i1052>>0] = $conv1457;
           $330 = $mul1451 >>> 15;
           $conv1463 = $330&255;
           HEAP8[$arrayidx19$i1041>>0] = $conv1463;
           $cycle$6$ph = 2;$new_pc$5$ph = $add;
           break L5;
          } else {
           $331 = HEAP32[$data478>>2]|0;
           $arrayidx$i$i943 = ((($331)) + 93|0);
           $332 = HEAP8[$arrayidx$i$i943>>0]|0;
           $conv$i$i944 = $332&255;
           $arrayidx2$i$i945 = ((($331)) + 94|0);
           $333 = HEAP8[$arrayidx2$i$i945>>0]|0;
           $conv3$i$i946 = $333&255;
           $shl$i$i947 = $conv3$i$i946 << 8;
           $or$i$i948 = $shl$i$i947 | $conv$i$i944;
           HEAP32[$vararg_buffer28>>2] = $2;
           $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
           HEAP32[$vararg_ptr31>>2] = $or$i$i948;
           $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
           HEAP32[$vararg_ptr32>>2] = $or$i;
           _avr_global_logger($avr,1,359122,$vararg_buffer28);
           $cycle$6$ph = 1;$new_pc$5$ph = $add;
           break L5;
          }
         }
         }
        }
        }
       } while(0);
      }
      }
      $171 = HEAP32[$data478>>2]|0;
      $arrayidx$i$i1201 = ((($171)) + 93|0);
      $172 = HEAP8[$arrayidx$i$i1201>>0]|0;
      $conv$i$i1202 = $172&255;
      $arrayidx2$i$i1203 = ((($171)) + 94|0);
      $173 = HEAP8[$arrayidx2$i$i1203>>0]|0;
      $conv3$i$i1204 = $173&255;
      $shl$i$i1205 = $conv3$i$i1204 << 8;
      $or$i$i1206 = $shl$i$i1205 | $conv$i$i1202;
      $add$i1207 = (($or$i$i1206) + 1)|0;
      $conv1$i1208 = $add$i1207&65535;
      $174 = HEAP8[$address_size$i>>0]|0;
      $cmp13$i = ($174<<24>>24)==(0);
      if ($cmp13$i) {
       $res$0$lcssa$i = 0;$sp$0$lcssa$i = $conv1$i1208;
      } else {
       $i$016$i = 0;$res$015$i = 0;$sp$014$i = $conv1$i1208;
       while(1) {
        $shl$i1211 = $res$015$i << 8;
        $call4$i = (__avr_get_ram($avr,$sp$014$i)|0);
        $conv5$i = $call4$i&255;
        $or$i1212 = $shl$i1211 | $conv5$i;
        $inc$i = (($i$016$i) + 1)|0;
        $inc6$i = (($sp$014$i) + 1)<<16>>16;
        $175 = HEAP8[$address_size$i>>0]|0;
        $conv2$i1213 = $175&255;
        $cmp$i1214 = ($inc$i>>>0)<($conv2$i1213>>>0);
        if ($cmp$i1214) {
         $i$016$i = $inc$i;$res$015$i = $or$i1212;$sp$014$i = $inc6$i;
        } else {
         break;
        }
       }
       $phitmp$i1209 = $or$i1212 << 1;
       $res$0$lcssa$i = $phitmp$i1209;$sp$0$lcssa$i = $inc6$i;
      }
      $conv8$i = $sp$0$lcssa$i&65535;
      $sub$i = (($conv8$i) + 65535)|0;
      $conv9$i1210 = $sub$i&65535;
      $conv$i$i$i = $sub$i&255;
      __avr_set_r($avr,93,$conv$i$i$i);
      $176 = ($conv9$i1210&65535) >>> 8;
      $conv4$i$i$i = $176&255;
      __avr_set_r($avr,94,$conv4$i$i$i);
      $177 = HEAP8[$address_size$i>>0]|0;
      $conv733 = $177&255;
      $add735 = (($conv733) + 2)|0;
      $cycle$6$ph = $add735;$new_pc$5$ph = $res$0$lcssa$i;
      break;
     }
     case 11:  {
      $and1473 = $shl$i & 63488;
      $trunc672 = $and1473&65535;
      switch ($trunc672<<16>>16) {
      case -18432:  {
       $shr1476 = $or$i >>> 4;
       $and1477 = $shr1476 & 31;
       $334 = $conv3$i << 3;
       $shl1481 = $334 & 48;
       $and1482 = $conv$i & 15;
       $or1483 = $shl1481 | $and1482;
       $add1484 = (($or1483) + 32)|0;
       $335 = $add1484&65535;
       $conv1486 = $335 & 255;
       $336 = HEAP32[$data478>>2]|0;
       $arrayidx1489 = (($336) + ($and1477)|0);
       $337 = HEAP8[$arrayidx1489>>0]|0;
       __avr_set_r($avr,$conv1486,$337);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case -20480:  {
       $338 = $conv3$i << 3;
       $shl1498 = $338 & 48;
       $and1499 = $conv$i & 15;
       $or1500 = $shl1498 | $and1499;
       $add1501 = (($or1500) + 32)|0;
       $shr1492 = ($conv4$i&65535) >>> 4;
       $conv1503 = $shr1492 & 31;
       $339 = $add1501&65535;
       $conv1504 = $339 & 255;
       $call1505 = (__avr_get_ram($avr,$conv1504)|0);
       __avr_set_r($avr,$conv1503,$call1505);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      default: {
       $340 = HEAP32[$data478>>2]|0;
       $arrayidx$i$i811 = ((($340)) + 93|0);
       $341 = HEAP8[$arrayidx$i$i811>>0]|0;
       $conv$i$i812 = $341&255;
       $arrayidx2$i$i813 = ((($340)) + 94|0);
       $342 = HEAP8[$arrayidx2$i$i813>>0]|0;
       $conv3$i$i814 = $342&255;
       $shl$i$i815 = $conv3$i$i814 << 8;
       $or$i$i816 = $shl$i$i815 | $conv$i$i812;
       HEAP32[$vararg_buffer33>>2] = $2;
       $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
       HEAP32[$vararg_ptr36>>2] = $or$i$i816;
       $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
       HEAP32[$vararg_ptr37>>2] = $or$i;
       _avr_global_logger($avr,1,359122,$vararg_buffer33);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
      }
      }
      break;
     }
     case 12:  {
      $sext671 = $or$i << 20;
      $shr1513 = $sext671 >> 19;
      $add1516 = (($shr1513) + ($add))|0;
      $cycle$6$ph = 2;$new_pc$5$ph = $add1516;
      break;
     }
     case 13:  {
      $sext = $or$i << 20;
      $shr1524 = $sext >> 19;
      $call1526 = (__avr_push_addr($avr,$add)|0);
      $add1527 = (($call1526) + 1)|0;
      $add1529 = (($shr1524) + ($add))|0;
      $cycle$6$ph = $add1527;$new_pc$5$ph = $add1529;
      break;
     }
     case 14:  {
      $shr1537 = $or$i >>> 4;
      $and1538 = $shr1537 & 15;
      $add1539 = $and1538 | 16;
      $shr1543 = $shr1537 & 240;
      $and1544 = $conv$i & 15;
      $or1545 = $shr1543 | $and1544;
      $conv1546 = $or1545&255;
      $343 = $add1539&65535;
      $conv1547 = $343 & 255;
      __avr_set_r($avr,$conv1547,$conv1546);
      $cycle$6$ph = 1;$new_pc$5$ph = $add;
      break;
     }
     case 15:  {
      $and1549 = $shl$i & 65024;
      $344 = (($and1549) + -61440)|0;
      $trunc670 = $344 >>> 9;
      $trunc670$clear = $trunc670 & 8388607;
      switch ($trunc670$clear|0) {
      case 3: case 2: case 1: case 0:  {
       $shl1552 = $or$i << 22;
       $shr1555 = $shl1552 >> 25;
       $and1557 = $conv$i & 7;
       $and1559 = $conv3$i & 4;
       $cmp1560 = ($and1559|0)==(0);
       $arrayidx1564 = (((($avr)) + 120|0) + ($and1557)|0);
       $345 = HEAP8[$arrayidx1564>>0]|0;
       $tobool1566 = ($345<<24>>24)!=(0);
       $or$cond = $cmp1560 & $tobool1566;
       if (!($or$cond)) {
        $tobool1572 = ($345<<24>>24)==(0);
        $lnot1574 = $cmp1560 ^ 1;
        $spec$select725 = $tobool1572 & $lnot1574;
        if (!($spec$select725)) {
         $cycle$6$ph = 1;$new_pc$5$ph = $add;
         break L5;
        }
       }
       $shl1587 = $shr1555 << 1;
       $add1588 = (($shl1587) + ($add))|0;
       $cycle$6$ph = 2;$new_pc$5$ph = $add1588;
       break L5;
       break;
      }
      case 4:  {
       $shr1592 = $or$i >>> 4;
       $and1593 = $shr1592 & 31;
       $346 = HEAP32[$data478>>2]|0;
       $arrayidx1598 = (($346) + ($and1593)|0);
       $347 = HEAP8[$arrayidx1598>>0]|0;
       $and1600 = $conv$i & 7;
       $shl1604 = 1 << $and1600;
       $conv1607 = $347&255;
       $neg1609 = $shl1604 ^ 255;
       $and1610 = $neg1609 & $conv1607;
       $348 = HEAP8[$arrayidx1612>>0]|0;
       $tobool1614 = ($348<<24>>24)==(0);
       $cond1616 = $tobool1614 ? 0 : $shl1604;
       $or1617 = $cond1616 | $and1610;
       $conv1618 = $or1617&255;
       $and$shrunk = $shr1592&65535;
       $conv1619 = $and$shrunk & 31;
       __avr_set_r($avr,$conv1619,$conv1618);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      case 6: case 7:  {
       $shr1641 = $or$i >>> 4;
       $and1642 = $shr1641 & 31;
       $351 = HEAP32[$data478>>2]|0;
       $arrayidx1647 = (($351) + ($and1642)|0);
       $352 = HEAP8[$arrayidx1647>>0]|0;
       $and1649 = $conv$i & 7;
       $shl1653 = 1 << $and1649;
       $and1656 = $conv3$i & 2;
       $cmp1657 = ($and1656|0)!=(0);
       $conv1660 = $352&255;
       $and1662 = $shl1653 & $conv1660;
       $tobool1663 = ($and1662|0)!=(0);
       $or$cond5 = $cmp1657 & $tobool1663;
       $353 = $and1662 | $and1656;
       $354 = ($353|0)==(0);
       $or$cond1423 = $or$cond5 | $354;
       if (!($or$cond1423)) {
        $cycle$6$ph = 1;$new_pc$5$ph = $add;
        break L5;
       }
       $arrayidx$i$i740 = (($avr$idx730$val) + ($add)|0);
       $355 = HEAP8[$arrayidx$i$i740>>0]|0;
       $conv$i$i741 = $355&255;
       $add$i$i742 = (($2) + 3)|0;
       $arrayidx2$i$i743 = (($avr$idx730$val) + ($add$i$i742)|0);
       $356 = HEAP8[$arrayidx2$i$i743>>0]|0;
       $conv3$i$i744 = $356&255;
       $shl$i$i745 = $conv3$i$i744 << 8;
       $or$i$i746 = $shl$i$i745 | $conv$i$i741;
       $conv4$i$i = $or$i$i746&65535;
       $357 = $conv4$i$i & -1009;
       switch ($357<<16>>16) {
       case -27633: case -27634: case -27635: case -27636: case -28672:  {
        $add1683 = (($2) + 6)|0;
        $cycle$6$ph = 3;$new_pc$5$ph = $add1683;
        break L5;
        break;
       }
       default: {
        $add1686 = (($2) + 4)|0;
        $cycle$6$ph = 2;$new_pc$5$ph = $add1686;
        break L5;
       }
       }
       break;
      }
      case 5:  {
       $shr1622 = $or$i >>> 4;
       $and1623 = $shr1622 & 31;
       $349 = HEAP32[$data478>>2]|0;
       $arrayidx1628 = (($349) + ($and1623)|0);
       $350 = HEAP8[$arrayidx1628>>0]|0;
       $and1630 = $conv$i & 7;
       $conv1632 = $350&255;
       $shr1634 = $conv1632 >>> $and1630;
       $and1635 = $shr1634 & 1;
       $conv1636 = $and1635&255;
       HEAP8[$arrayidx1612>>0] = $conv1636;
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
       break;
      }
      default: {
       $358 = HEAP32[$data478>>2]|0;
       $arrayidx$i$i = ((($358)) + 93|0);
       $359 = HEAP8[$arrayidx$i$i>>0]|0;
       $conv$i$i = $359&255;
       $arrayidx2$i$i = ((($358)) + 94|0);
       $360 = HEAP8[$arrayidx2$i$i>>0]|0;
       $conv3$i$i = $360&255;
       $shl$i$i = $conv3$i$i << 8;
       $or$i$i = $shl$i$i | $conv$i$i;
       HEAP32[$vararg_buffer38>>2] = $2;
       $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
       HEAP32[$vararg_ptr41>>2] = $or$i$i;
       $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
       HEAP32[$vararg_ptr42>>2] = $or$i;
       _avr_global_logger($avr,1,359122,$vararg_buffer38);
       $cycle$6$ph = 1;$new_pc$5$ph = $add;
       break L5;
      }
      }
      break;
     }
     default: {
      label = 164;
      break L3;
     }
     }
    } while(0);
    $$pr = HEAP32[$state1697>>2]|0;
    $375 = ($cycle$6$ph|0)<(0);
    $376 = $375 << 31 >> 31;
    $377 = $cycle1695;
    $378 = $377;
    $379 = HEAP32[$378>>2]|0;
    $380 = (($377) + 4)|0;
    $381 = $380;
    $382 = HEAP32[$381>>2]|0;
    $383 = (_i64Add(($379|0),($382|0),($cycle$6$ph|0),($376|0))|0);
    $384 = (getTempRet0() | 0);
    $385 = $cycle1695;
    $386 = $385;
    HEAP32[$386>>2] = $383;
    $387 = (($385) + 4)|0;
    $388 = $387;
    HEAP32[$388>>2] = $384;
    $cmp1698 = ($$pr|0)==(2);
    if (!($cmp1698)) {
     $retval$0 = $new_pc$5$ph;
     label = 170;
     break;
    }
    $389 = $run_cycle_count;
    $390 = $389;
    $391 = HEAP32[$390>>2]|0;
    $392 = (($389) + 4)|0;
    $393 = $392;
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394>>>0)>($376>>>0);
    $396 = ($391>>>0)>($cycle$6$ph>>>0);
    $397 = ($394|0)==($376|0);
    $398 = $397 & $396;
    $399 = $395 | $398;
    if (!($399)) {
     $retval$0 = $new_pc$5$ph;
     label = 170;
     break;
    }
    $400 = HEAP8[$interrupt_state>>0]|0;
    $cmp1706 = ($400<<24>>24)==(0);
    if (!($cmp1706)) {
     $retval$0 = $new_pc$5$ph;
     label = 170;
     break;
    }
    $401 = (_i64Subtract(($391|0),($394|0),($cycle$6$ph|0),($376|0))|0);
    $402 = (getTempRet0() | 0);
    $403 = $run_cycle_count;
    $404 = $403;
    HEAP32[$404>>2] = $401;
    $405 = (($403) + 4)|0;
    $406 = $405;
    HEAP32[$406>>2] = $402;
    HEAP32[$pc>>2] = $new_pc$5$ph;
    $407 = HEAP32[$flashend>>2]|0;
    $cmp = ($new_pc$5$ph>>>0)<($407>>>0);
    if ($cmp) {
     $2 = $new_pc$5$ph;
    } else {
     break L1;
    }
   }
   if ((label|0) == 22) {
    // unreachable;
   }
   else if ((label|0) == 164) {
    // unreachable;
   }
   else if ((label|0) == 165) {
    HEAP32[$state1697>>2] = $storemerge;
    $361 = $cycle1695;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = (($361) + 4)|0;
    $365 = $364;
    $366 = HEAP32[$365>>2]|0;
    $369 = (_i64Add(($363|0),($366|0),($367|0),($368|0))|0);
    $370 = (getTempRet0() | 0);
    $371 = $cycle1695;
    $372 = $371;
    HEAP32[$372>>2] = $369;
    $373 = (($371) + 4)|0;
    $374 = $373;
    HEAP32[$374>>2] = $370;
    $retval$0 = $new_pc$5$ph1428;
    STACKTOP = sp;return ($retval$0|0);
   }
   else if ((label|0) == 170) {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 _avr_sadly_crashed($avr,0);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _avr_gdb_handle_watchpoints($avr,$addr,$type) {
 $avr = $avr|0;
 $addr = $addr|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$i17 = 0, $add8$i = 0, $addr1$i = 0, $and = 0;
 var $and17 = 0, $and20 = 0, $and24 = 0, $and25 = 0, $and27 = 0, $arrayidx10 = 0, $arrayidx14 = 0, $arrayidx6 = 0, $check$0$lcssa$i = 0, $check$012$i = 0, $cmd = 0, $cmd$addr$010$i = 0, $cmp$i = 0, $cmp12$i = 0, $cmp14$i = 0, $cmp2$i = 0, $cond = 0, $conv = 0, $conv1$i = 0, $conv11 = 0;
 var $conv15 = 0, $conv7 = 0, $conv8$i = 0, $data = 0, $dst$0$lcssa$i = 0, $dst$011$i = 0, $gdb = 0, $i$015$i = 0, $inc$i = 0, $incdec$ptr$i = 0, $incdec$ptr3$i = 0, $incdec$ptr4$i = 0, $kind3 = 0, $len$i = 0, $or = 0, $pc = 0, $phitmp$i = 0, $reply$i = 0, $s$i = 0, $shr = 0;
 var $shr23 = 0, $size$i = 0, $spec$select = 0, $state = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, $tobool$i = 0, $tobool26 = 0, $tobool28 = 0, $tobool9$i = 0, $vararg_buffer = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1152|0);
 $vararg_buffer9 = sp + 1144|0;
 $vararg_buffer = sp + 1104|0;
 $reply$i = sp + 80|0;
 $cmd = sp;
 $gdb = ((($avr)) + 8292|0);
 $0 = HEAP32[$gdb>>2]|0;
 $conv = $addr&65535;
 $len$i = ((($0)) + 400|0);
 $1 = HEAP32[$len$i>>2]|0;
 $cmp14$i = ($1|0)==(0);
 if ($cmp14$i) {
  STACKTOP = sp;return;
 }
 $i$015$i = 0;
 while(1) {
  $addr1$i = (((($0)) + 404|0) + (($i$015$i*12)|0)|0);
  $2 = HEAP32[$addr1$i>>2]|0;
  $cmp2$i = ($2>>>0)>($conv>>>0);
  if ($cmp2$i) {
   label = 12;
   break;
  }
  $size$i = (((((($0)) + 404|0) + (($i$015$i*12)|0)|0)) + 4|0);
  $3 = HEAP32[$size$i>>2]|0;
  $add$i = (($3) + ($2))|0;
  $cmp12$i = ($add$i>>>0)>($conv>>>0);
  if ($cmp12$i) {
   label = 6;
   break;
  }
  $inc$i = (($i$015$i) + 1)|0;
  $cmp$i = ($inc$i>>>0)<($1>>>0);
  if ($cmp$i) {
   $i$015$i = $inc$i;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 6) {
  $kind3 = (((((($0)) + 404|0) + (($i$015$i*12)|0)|0)) + 8|0);
  $4 = HEAP32[$kind3>>2]|0;
  $and = $4 & $type;
  $tobool = ($and|0)==(0);
  if ($tobool) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[$0>>2]|0;
  $data = ((($5)) + 5892|0);
  $6 = HEAP32[$data>>2]|0;
  $arrayidx6 = ((($6)) + 95|0);
  $7 = HEAP8[$arrayidx6>>0]|0;
  $conv7 = $7&255;
  $arrayidx10 = ((($6)) + 93|0);
  $8 = HEAP8[$arrayidx10>>0]|0;
  $conv11 = $8&255;
  $arrayidx14 = ((($6)) + 94|0);
  $9 = HEAP8[$arrayidx14>>0]|0;
  $conv15 = $9&255;
  $pc = ((($5)) + 132|0);
  $10 = HEAP32[$pc>>2]|0;
  $and17 = $10 & 255;
  $shr = $10 >>> 8;
  $and20 = $shr & 255;
  $shr23 = $10 >>> 16;
  $and24 = $shr23 & 255;
  $and25 = $4 & 12;
  $tobool26 = ($and25|0)==(0);
  $and27 = $4 & 4;
  $tobool28 = ($and27|0)==(0);
  $cond = $tobool28 ? 359179 : 359186;
  $spec$select = $tobool26 ? $cond : 359192;
  $or = $conv | 8388608;
  HEAP32[$vararg_buffer>>2] = 5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $conv11;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $conv15;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $and17;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $and20;
  $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
  HEAP32[$vararg_ptr6>>2] = $and24;
  $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
  HEAP32[$vararg_ptr7>>2] = $spec$select;
  $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
  HEAP32[$vararg_ptr8>>2] = $or;
  (_sprintf($cmd,359199,$vararg_buffer)|0);
  $incdec$ptr$i = ((($reply$i)) + 1|0);
  HEAP8[$reply$i>>0] = 36;
  $11 = HEAP8[$cmd>>0]|0;
  $tobool9$i = ($11<<24>>24)==(0);
  if ($tobool9$i) {
   $check$0$lcssa$i = 0;$dst$0$lcssa$i = $incdec$ptr$i;
  } else {
   $12 = $11;$check$012$i = 0;$cmd$addr$010$i = $cmd;$dst$011$i = $incdec$ptr$i;
   while(1) {
    $conv8$i = $12&255;
    $conv1$i = $check$012$i & 255;
    $add$i17 = (($conv1$i) + ($conv8$i))|0;
    $incdec$ptr3$i = ((($cmd$addr$010$i)) + 1|0);
    $incdec$ptr4$i = ((($dst$011$i)) + 1|0);
    HEAP8[$dst$011$i>>0] = $12;
    $13 = HEAP8[$incdec$ptr3$i>>0]|0;
    $tobool$i = ($13<<24>>24)==(0);
    if ($tobool$i) {
     break;
    } else {
     $12 = $13;$check$012$i = $add$i17;$cmd$addr$010$i = $incdec$ptr3$i;$dst$011$i = $incdec$ptr4$i;
    }
   }
   $phitmp$i = $add$i17 & 255;
   $check$0$lcssa$i = $phitmp$i;$dst$0$lcssa$i = $incdec$ptr4$i;
  }
  HEAP32[$vararg_buffer9>>2] = $check$0$lcssa$i;
  (_sprintf($dst$0$lcssa$i,359251,$vararg_buffer9)|0);
  $s$i = ((($0)) + 8|0);
  $14 = HEAP32[$s$i>>2]|0;
  $sub$ptr$lhs$cast$i = $dst$0$lcssa$i;
  $sub$ptr$rhs$cast$i = $reply$i;
  $sub$ptr$sub$i = (3 - ($sub$ptr$rhs$cast$i))|0;
  $add8$i = (($sub$ptr$sub$i) + ($sub$ptr$lhs$cast$i))|0;
  (_send($14,$reply$i,$add8$i,0)|0);
  $state = ((($avr)) + 36|0);
  HEAP32[$state>>2] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _avr_gdb_processor($avr,$sleep) {
 $avr = $avr|0;
 $sleep = $sleep|0;
 var $$lobit$i$i = 0, $$lobit$i464$i = 0, $$lobit20$i$i = 0, $$lobit20$i466$i = 0, $$lobit21$i$i = 0, $$lobit21$i468$i = 0, $$lobit22$i$i = 0, $$lobit22$i470$i = 0, $$lobit23$i$i = 0, $$lobit23$i472$i = 0, $$lobit24$i$i = 0, $$lobit24$i474$i = 0, $$lobit25$i$i = 0, $$lobit25$i476$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre497$i = 0, $$pre498$i = 0, $$pre662$i$i = 0, $$sink = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i$i = 0, $add$i147$i$i = 0, $add$i206$i$i = 0, $add$i232$i$i = 0, $add$i358$i$i = 0, $add$ptr$1$i$i = 0, $add$ptr$10$i$i = 0, $add$ptr$11$i$i = 0, $add$ptr$12$i$i = 0;
 var $add$ptr$13$i$i = 0, $add$ptr$14$i$i = 0, $add$ptr$15$i$i = 0, $add$ptr$16$i$i = 0, $add$ptr$17$i$i = 0, $add$ptr$18$i$i = 0, $add$ptr$19$i$i = 0, $add$ptr$2$i$i = 0, $add$ptr$20$i$i = 0, $add$ptr$21$i$i = 0, $add$ptr$22$i$i = 0, $add$ptr$23$i$i = 0, $add$ptr$24$i$i = 0, $add$ptr$25$i$i = 0, $add$ptr$26$i$i = 0, $add$ptr$27$i$i = 0, $add$ptr$28$i$i = 0, $add$ptr$29$i$i = 0, $add$ptr$3$i$i = 0, $add$ptr$30$i$i = 0;
 var $add$ptr$31$i$i = 0, $add$ptr$32$i$i = 0, $add$ptr$33$i$i = 0, $add$ptr$4$i$i = 0, $add$ptr$5$i$i = 0, $add$ptr$6$i$i = 0, $add$ptr$7$i$i = 0, $add$ptr$8$i$i = 0, $add$ptr$9$i$i = 0, $add$ptr$i$i = 0, $add$ptr134$i$i = 0, $add$ptr152$i$i = 0, $add$ptr154$i$i = 0, $add$ptr168$i$i = 0, $add$ptr170$i$i = 0, $add$ptr171$i$i = 0, $add$ptr184$i$i = 0, $add$ptr44$1$i$i = 0, $add$ptr44$10$i$i = 0, $add$ptr44$11$i$i = 0;
 var $add$ptr44$12$i$i = 0, $add$ptr44$13$i$i = 0, $add$ptr44$14$i$i = 0, $add$ptr44$15$i$i = 0, $add$ptr44$16$i$i = 0, $add$ptr44$17$i$i = 0, $add$ptr44$18$i$i = 0, $add$ptr44$19$i$i = 0, $add$ptr44$2$i$i = 0, $add$ptr44$20$i$i = 0, $add$ptr44$21$i$i = 0, $add$ptr44$22$i$i = 0, $add$ptr44$23$i$i = 0, $add$ptr44$24$i$i = 0, $add$ptr44$25$i$i = 0, $add$ptr44$26$i$i = 0, $add$ptr44$27$i$i = 0, $add$ptr44$28$i$i = 0, $add$ptr44$29$i$i = 0, $add$ptr44$3$i$i = 0;
 var $add$ptr44$30$i$i = 0, $add$ptr44$31$i$i = 0, $add$ptr44$32$i$i = 0, $add$ptr44$33$i$i = 0, $add$ptr44$4$i$i = 0, $add$ptr44$5$i$i = 0, $add$ptr44$6$i$i = 0, $add$ptr44$7$i$i = 0, $add$ptr44$8$i$i = 0, $add$ptr44$9$i$i = 0, $add$ptr44$i$i = 0, $add$ptr74$i$i = 0, $add$ptr83$i$i = 0, $add$ptr84$i$i = 0, $add121$i$i = 0, $add20$i$i = 0, $add8$i$i$i = 0, $add8$i116$i$i = 0, $add8$i137$i$i = 0, $add8$i158$i$i = 0;
 var $add8$i170$i$i = 0, $add8$i194$i$i = 0, $add8$i220$i$i = 0, $add8$i246$i$i = 0, $add8$i271$i$i = 0, $add8$i296$i$i = 0, $add8$i321$i$i = 0, $add8$i346$i$i = 0, $add8$i372$i$i = 0, $add8$i397$i$i = 0, $add8$i422$i$i = 0, $add8$i447$i$i = 0, $add8$i472$i$i = 0, $add8$i497$i$i = 0, $add8$i522$i$i = 0, $add8$i547$i$i = 0, $add8$i572$i$i = 0, $add8$i597$i$i = 0, $add8$i609$i$i = 0, $add8$i620$i$i = 0;
 var $add88$i$i = 0, $add89$i$i = 0, $addr$i$i = 0, $addr1$i = 0, $addr142$i$i = 0, $addr215$i$i = 0, $and$i = 0, $and$i$i = 0, $and$i48$i = 0, $and231$i$i = 0, $and33$i$i = 0, $and37$i$i = 0, $and49$i = 0, $arrayidx$i = 0, $arrayidx$i$7$i$i = 0, $arrayidx$i$7$i480$i = 0, $arrayidx$i$i = 0, $arrayidx$i102$i = 0, $arrayidx$i106$i = 0, $arrayidx$i110$i = 0;
 var $arrayidx$i118$i = 0, $arrayidx$i122$i = 0, $arrayidx$i126$i = 0, $arrayidx$i134$i = 0, $arrayidx$i138$i = 0, $arrayidx$i142$i = 0, $arrayidx$i150$i = 0, $arrayidx$i154$i = 0, $arrayidx$i158$i = 0, $arrayidx$i166$i = 0, $arrayidx$i170$i = 0, $arrayidx$i174$i = 0, $arrayidx$i182$i = 0, $arrayidx$i186$i = 0, $arrayidx$i190$i = 0, $arrayidx$i198$i = 0, $arrayidx$i202$i = 0, $arrayidx$i206$i = 0, $arrayidx$i214$i = 0, $arrayidx$i218$i = 0;
 var $arrayidx$i222$i = 0, $arrayidx$i230$i = 0, $arrayidx$i234$i = 0, $arrayidx$i238$i = 0, $arrayidx$i246$i = 0, $arrayidx$i250$i = 0, $arrayidx$i254$i = 0, $arrayidx$i262$i = 0, $arrayidx$i266$i = 0, $arrayidx$i270$i = 0, $arrayidx$i278$i = 0, $arrayidx$i282$i = 0, $arrayidx$i286$i = 0, $arrayidx$i294$i = 0, $arrayidx$i298$i = 0, $arrayidx$i309$i = 0, $arrayidx$i317$i = 0, $arrayidx$i325$i = 0, $arrayidx$i333$i = 0, $arrayidx$i341$i = 0;
 var $arrayidx$i349$i = 0, $arrayidx$i357$i = 0, $arrayidx$i365$i = 0, $arrayidx$i373$i = 0, $arrayidx$i381$i = 0, $arrayidx$i389$i = 0, $arrayidx$i397$i = 0, $arrayidx$i405$i = 0, $arrayidx$i413$i = 0, $arrayidx$i421$i = 0, $arrayidx$i429$i = 0, $arrayidx$i437$i = 0, $arrayidx$i66$i = 0, $arrayidx$i70$i = 0, $arrayidx$i74$i = 0, $arrayidx$i78$i = 0, $arrayidx$i86$i = 0, $arrayidx$i90$i = 0, $arrayidx$i94$i = 0, $arrayidx10$i = 0;
 var $arrayidx10$i$sink = 0, $arrayidx14$i$i = 0, $arrayidx14$i441$i = 0, $arrayidx15$i$i = 0, $arrayidx15$i442$i = 0, $arrayidx18$i$i = 0, $arrayidx18$i444$i = 0, $arrayidx22$i = 0, $arrayidx22$i$i = 0, $arrayidx22$i304$i = 0, $arrayidx22$i446$i = 0, $arrayidx25$i$i = 0, $arrayidx25$i450$i = 0, $arrayidx26$i$i = 0, $arrayidx29$i$i = 0, $arrayidx29$i454$i = 0, $arrayidx4$i$i = 0, $arrayidx4$i462$i = 0, $arrayidx45$i = 0, $arrayidx68$i = 0;
 var $arrayidx9$i$1$i$i = 0, $arrayidx9$i$1$i465$i = 0, $arrayidx9$i$2$i$i = 0, $arrayidx9$i$2$i467$i = 0, $arrayidx9$i$3$i$i = 0, $arrayidx9$i$3$i469$i = 0, $arrayidx9$i$4$i$i = 0, $arrayidx9$i$4$i471$i = 0, $arrayidx9$i$5$i$i = 0, $arrayidx9$i$5$i473$i = 0, $arrayidx9$i$6$i$i = 0, $arrayidx9$i$6$i475$i = 0, $arrayidx9$i$7$i$pre$phi$iZZZZ2D = 0, $arrayidx9$i$7$i485$pre$phi$iZZZZ2D = 0, $arrayidx9$i$i$i = 0, $arrayidx9$i$i463$i = 0, $breakpoints$i$i = 0, $buffer$i = 0, $call$i = 0, $call$i$i = 0;
 var $call13$i$i = 0, $call145$i$i = 0, $call156$i$i = 0, $call173$i$i = 0, $call187$i$i = 0, $call225$i$i = 0, $call238$i$i = 0, $call29$i = 0, $call29$i$i = 0, $call3$i$i = 0, $call39$i114$i = 0, $call39$i130$i = 0, $call39$i146$i = 0, $call39$i162$i = 0, $call39$i178$i = 0, $call39$i194$i = 0, $call39$i210$i = 0, $call39$i226$i = 0, $call39$i242$i = 0, $call39$i258$i = 0;
 var $call39$i274$i = 0, $call39$i290$i = 0, $call39$i302$i = 0, $call39$i313$i = 0, $call39$i321$i = 0, $call39$i329$i = 0, $call39$i337$i = 0, $call39$i345$i = 0, $call39$i353$i = 0, $call39$i361$i = 0, $call39$i369$i = 0, $call39$i377$i = 0, $call39$i385$i = 0, $call39$i393$i = 0, $call39$i401$i = 0, $call39$i409$i = 0, $call39$i417$i = 0, $call39$i425$i = 0, $call39$i433$i = 0, $call39$i53$i = 0;
 var $call39$i59$i = 0, $call39$i82$i = 0, $call39$i98$i = 0, $call43$32$i$i = 0, $call54$i = 0, $call56$i$i = 0, $call62$i$i = 0, $call8$i$i = 0, $check$0$lcssa$i$i$i = 0, $check$0$lcssa$i214$i$i = 0, $check$0$lcssa$i240$i$i = 0, $check$0$lcssa$i366$i$i = 0, $check$012$i142$i$i = 0, $check$012$i201$i$i = 0, $check$012$i227$i$i = 0, $check$012$i353$i$i = 0, $cmd$addr$010$i144$i$i = 0, $cmd$addr$010$i203$i$i = 0, $cmd$addr$010$i229$i$i = 0, $cmd$addr$010$i355$i$i = 0;
 var $cmp$i = 0, $cmp$i$i = 0, $cmp$i12 = 0, $cmp101$i$i = 0, $cmp14$i$i = 0, $cmp149$i$i = 0, $cmp159$i$i = 0, $cmp16$i = 0, $cmp165$i$i = 0, $cmp176$i$i = 0, $cmp181$i$i = 0, $cmp2$i = 0, $cmp218$i$i = 0, $cmp223$i$i = 0, $cmp226$i$i = 0, $cmp234$i$i = 0, $cmp239$i$i = 0, $cmp32$i = 0, $cmp4$i$i = 0, $cmp41$i = 0;
 var $cmp6$i = 0, $cmp7$7$i$i = 0, $cmp7$7$i477$i = 0, $cmp71$i$i = 0, $cmp76$i$i = 0, $cmp8$i = 0, $cmp80$i$i = 0, $cmp86$i = 0, $cmp9$i$i = 0, $cmp90$i$i = 0, $cmp92$i = 0, $cmp92490$i = 0, $cmp93$i$i = 0, $cmp95$i = 0, $cmp97$i$i = 0, $conv$i$i = 0, $conv$i111$i = 0, $conv$i127$i = 0, $conv$i143$i = 0, $conv$i159$i = 0;
 var $conv$i175$i = 0, $conv$i191$i = 0, $conv$i207$i = 0, $conv$i223$i = 0, $conv$i239$i = 0, $conv$i255$i = 0, $conv$i271$i = 0, $conv$i287$i = 0, $conv$i299$i = 0, $conv$i310$i = 0, $conv$i318$i = 0, $conv$i326$i = 0, $conv$i334$i = 0, $conv$i342$i = 0, $conv$i350$i = 0, $conv$i358$i = 0, $conv$i366$i = 0, $conv$i374$i = 0, $conv$i382$i = 0, $conv$i390$i = 0;
 var $conv$i398$i = 0, $conv$i406$i = 0, $conv$i414$i = 0, $conv$i422$i = 0, $conv$i430$i = 0, $conv$i79$i = 0, $conv$i95$i = 0, $conv1$i146$i$i = 0, $conv1$i205$i$i = 0, $conv1$i231$i$i = 0, $conv1$i357$i$i = 0, $conv106$i$i = 0, $conv132$i$i = 0, $conv164$i$i = 0, $conv18$i$i = 0, $conv194$i$i = 0, $conv21$i$i = 0, $conv21$i445$i = 0, $conv219$i$i = 0, $conv23$i$i = 0;
 var $conv23$i305$i = 0, $conv23$i447$i = 0, $conv233$i$i = 0, $conv26$i$i = 0, $conv26$i451$i = 0, $conv27$i$i = 0, $conv30$i$i = 0, $conv30$i455$i = 0, $conv79$i$i = 0, $conv8$i145$i$i = 0, $conv8$i204$i$i = 0, $conv8$i230$i$i = 0, $conv8$i356$i$i = 0, $conv87$pre$phi$i$iZ2D = 0, $data$i$i = 0, $data$i101$i = 0, $data$i105$i = 0, $data$i109$i = 0, $data$i117$i = 0, $data$i121$i = 0;
 var $data$i125$i = 0, $data$i133$i = 0, $data$i137$i = 0, $data$i141$i = 0, $data$i149$i = 0, $data$i153$i = 0, $data$i157$i = 0, $data$i165$i = 0, $data$i169$i = 0, $data$i173$i = 0, $data$i181$i = 0, $data$i185$i = 0, $data$i189$i = 0, $data$i197$i = 0, $data$i201$i = 0, $data$i205$i = 0, $data$i213$i = 0, $data$i217$i = 0, $data$i221$i = 0, $data$i229$i = 0;
 var $data$i233$i = 0, $data$i237$i = 0, $data$i245$i = 0, $data$i249$i = 0, $data$i253$i = 0, $data$i261$i = 0, $data$i265$i = 0, $data$i269$i = 0, $data$i277$i = 0, $data$i281$i = 0, $data$i285$i = 0, $data$i293$i = 0, $data$i297$i = 0, $data$i308$i = 0, $data$i316$i = 0, $data$i324$i = 0, $data$i332$i = 0, $data$i340$i = 0, $data$i348$i = 0, $data$i356$i = 0;
 var $data$i364$i = 0, $data$i372$i = 0, $data$i380$i = 0, $data$i388$i = 0, $data$i396$i = 0, $data$i404$i = 0, $data$i412$i = 0, $data$i420$i = 0, $data$i428$i = 0, $data$i436$i = 0, $data$i51$i = 0, $data$i56$i = 0, $data$i62$i = 0, $data$i65$i = 0, $data$i69$i = 0, $data$i73$i = 0, $data$i77$i = 0, $data$i85$i = 0, $data$i89$i = 0, $data$i93$i = 0;
 var $data13$i$i = 0, $data13$i440$i = 0, $data169$i$i = 0, $data17$i$i = 0, $data17$i443$i = 0, $data21$i$i = 0, $data3$i$i = 0, $data3$i461$i = 0, $dec$i$i = 0, $dec627$i$i = 0, $div$i = 0, $div14$i = 0, $div21$i = 0, $div44$i = 0, $div9$i = 0, $dst$0$lcssa$i$i$i = 0, $dst$0$lcssa$i213$i$i = 0, $dst$0$lcssa$i239$i$i = 0, $dst$0$lcssa$i365$i$i = 0, $dst$011$i143$i$i = 0;
 var $dst$011$i202$i$i = 0, $dst$011$i228$i$i = 0, $dst$011$i354$i$i = 0, $dst128$0$lcssa$i$i = 0, $dst128$0630$i$i = 0, $e2end$i$i = 0, $e2end180$i$i = 0, $ee$i$i = 0, $ee189$i$i = 0, $end$0$i = 0, $end$0$lcssa$i = 0, $end$0489$i = 0, $end$0491$i = 0, $flash$i$i = 0, $flash153$i$i = 0, $flashend$i$i = 0, $flashend222$i$i = 0, $flashend70$i$i = 0, $gdb = 0, $i$09$i = 0;
 var $i$i = 0, $inc$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i120$i$i = 0, $incdec$ptr$i141$i$i = 0, $incdec$ptr$i162$i$i = 0, $incdec$ptr$i173$i$i = 0, $incdec$ptr$i198$i$i = 0, $incdec$ptr$i224$i$i = 0, $incdec$ptr$i250$i$i = 0, $incdec$ptr$i275$i$i = 0, $incdec$ptr$i300$i$i = 0, $incdec$ptr$i325$i$i = 0, $incdec$ptr$i350$i$i = 0, $incdec$ptr$i376$i$i = 0, $incdec$ptr$i401$i$i = 0, $incdec$ptr$i426$i$i = 0, $incdec$ptr$i451$i$i = 0, $incdec$ptr$i476$i$i = 0;
 var $incdec$ptr$i501$i$i = 0, $incdec$ptr$i526$i$i = 0, $incdec$ptr$i551$i$i = 0, $incdec$ptr$i576$i$i = 0, $incdec$ptr$i601$i$i = 0, $incdec$ptr$i612$i$i = 0, $incdec$ptr$i99$i$i = 0, $incdec$ptr100$i = 0, $incdec$ptr131$i$i = 0, $incdec$ptr3$i148$i$i = 0, $incdec$ptr3$i207$i$i = 0, $incdec$ptr3$i233$i$i = 0, $incdec$ptr3$i359$i$i = 0, $incdec$ptr4$i$1$i$i = 0, $incdec$ptr4$i$10$i$i = 0, $incdec$ptr4$i$11$i$i = 0, $incdec$ptr4$i$12$i$i = 0, $incdec$ptr4$i$13$i$i = 0, $incdec$ptr4$i$14$i$i = 0, $incdec$ptr4$i$15$i$i = 0;
 var $incdec$ptr4$i$16$i$i = 0, $incdec$ptr4$i$17$i$i = 0, $incdec$ptr4$i$18$i$i = 0, $incdec$ptr4$i$19$i$i = 0, $incdec$ptr4$i$2$i$i = 0, $incdec$ptr4$i$20$i$i = 0, $incdec$ptr4$i$3$i$i = 0, $incdec$ptr4$i$4$i$i = 0, $incdec$ptr4$i$5$i$i = 0, $incdec$ptr4$i$6$i$i = 0, $incdec$ptr4$i$7$i$i = 0, $incdec$ptr4$i$8$i$i = 0, $incdec$ptr4$i$9$i$i = 0, $incdec$ptr4$i$i$i = 0, $incdec$ptr4$i128$1$i$i = 0, $incdec$ptr4$i128$10$i$i = 0, $incdec$ptr4$i128$11$i$i = 0, $incdec$ptr4$i128$12$i$i = 0, $incdec$ptr4$i128$17$i$i = 0, $incdec$ptr4$i128$18$i$i = 0;
 var $incdec$ptr4$i128$19$i$i = 0, $incdec$ptr4$i128$2$i$i = 0, $incdec$ptr4$i128$20$i$i = 0, $incdec$ptr4$i128$21$i$i = 0, $incdec$ptr4$i128$22$i$i = 0, $incdec$ptr4$i128$23$i$i = 0, $incdec$ptr4$i128$3$i$i = 0, $incdec$ptr4$i128$4$i$i = 0, $incdec$ptr4$i128$5$i$i = 0, $incdec$ptr4$i128$6$i$i = 0, $incdec$ptr4$i128$7$i$i = 0, $incdec$ptr4$i128$8$i$i = 0, $incdec$ptr4$i128$9$i$i = 0, $incdec$ptr4$i128$i$i = 0, $incdec$ptr4$i149$i$i = 0, $incdec$ptr4$i182$i$i = 0, $incdec$ptr4$i208$i$i = 0, $incdec$ptr4$i234$i$i = 0, $incdec$ptr4$i259$i$i = 0, $incdec$ptr4$i309$1$i$i = 0;
 var $incdec$ptr4$i309$i$i = 0, $incdec$ptr4$i334$1$i$i = 0, $incdec$ptr4$i334$i$i = 0, $incdec$ptr4$i360$i$i = 0, $incdec$ptr4$i385$1$i$i = 0, $incdec$ptr4$i385$i$i = 0, $incdec$ptr4$i410$i$i = 0, $incdec$ptr4$i435$i$i = 0, $incdec$ptr4$i460$i$i = 0, $incdec$ptr4$i485$1$i$i = 0, $incdec$ptr4$i485$i$i = 0, $incdec$ptr4$i510$1$i$i = 0, $incdec$ptr4$i510$i$i = 0, $incdec$ptr4$i535$i$i = 0, $incdec$ptr4$i560$1$i$i = 0, $incdec$ptr4$i560$i$i = 0, $incdec$ptr4$i585$i$i = 0, $incdec$ptr59$i$i = 0, $incdec$ptr75$i = 0, $incdec$ptr80$i = 0;
 var $interrupt_state$i$7$i$i = 0, $interrupt_state$i$7$i483$i = 0, $interrupt_state5$i$7$i$i = 0, $interrupt_state5$i$7$i478$i = 0, $kind$i$i = 0, $len$i = 0, $len$i$i = 0, $len$i47$i = 0, $len$i50$i = 0, $len143$i$i = 0, $len216$i$i = 0, $listen$i = 0, $listen20$i = 0, $max$0$i = 0, $max$0$in$i = 0, $offset$i$i = 0, $offset192$i$i = 0, $or$cond$i$i = 0, $or$i$i = 0, $or$i449$i = 0;
 var $or11$i = 0, $or28$i$i = 0, $or28$i453$i = 0, $or32$i$i = 0, $or32$i457$i = 0, $pc = 0, $pc$i$i = 0, $pc$i306$i = 0, $pc$i459$i = 0, $phitmp$i152$i$i = 0, $phitmp$i211$i$i = 0, $phitmp$i237$i$i = 0, $phitmp$i363$i$i = 0, $ramend$i$i = 0, $ramend163$i$i = 0, $ramend232$i$i = 0, $ramend78$i$i = 0, $ramend86$phi$trans$insert$i$i = 0, $read_set$i = 0, $regi$i$i = 0;
 var $regi55$i$i = 0, $rem$i = 0, $rem24$i = 0, $rem47$i = 0, $rem5$i = 0, $rep$i$i = 0, $reply$i$i$i = 0, $retval$0 = 0, $retval$1$i = 0, $s$i = 0, $scevgep$i$i = 0, $scevgep631$i$i = 0, $scevgep632$i$i = 0, $scevgep634$i$i = 0, $scevgep636$i$i = 0, $scevgep638$i$i = 0, $scevgep640$i$i = 0, $scevgep642$i$i = 0, $scevgep644$i$i = 0, $scevgep646$i$i = 0;
 var $scevgep648$i$i = 0, $scevgep650$i$i = 0, $scevgep652$i$i = 0, $scevgep654$i$i = 0, $scevgep656$i$i = 0, $scevgep658$i$i = 0, $scevgep660$i$i = 0, $shl$i = 0, $shl$i$i = 0, $shl237$i$i = 0, $shl24$i$i = 0, $shl24$i448$i = 0, $shl25$i = 0, $shl27$i$i = 0, $shl27$i452$i = 0, $shl31$i$i = 0, $shl31$i456$i = 0, $shl48$i = 0, $shl6$i = 0, $shl6$i$sink = 0;
 var $shr$i$i = 0, $shr36$i$i = 0, $size$i$i = 0, $size195$i$i = 0, $src$0$i = 0, $src$1$i = 0, $src69$1$i$i = 0, $src69$2629$i$i = 0, $state = 0, $state$i = 0, $state$i$i = 0, $state211$i$i = 0, $state213$i$i = 0, $state61$i = 0, $state82$i = 0, $sub$i$i = 0, $sub$ptr$lhs$cast$i$i$i = 0, $sub$ptr$lhs$cast$i113$i$i = 0, $sub$ptr$lhs$cast$i134$i$i = 0, $sub$ptr$lhs$cast$i155$i$i = 0;
 var $sub$ptr$lhs$cast$i167$i$i = 0, $sub$ptr$lhs$cast$i191$i$i = 0, $sub$ptr$lhs$cast$i217$i$i = 0, $sub$ptr$lhs$cast$i243$i$i = 0, $sub$ptr$lhs$cast$i268$i$i = 0, $sub$ptr$lhs$cast$i293$i$i = 0, $sub$ptr$lhs$cast$i318$i$i = 0, $sub$ptr$lhs$cast$i343$i$i = 0, $sub$ptr$lhs$cast$i369$i$i = 0, $sub$ptr$lhs$cast$i394$i$i = 0, $sub$ptr$lhs$cast$i419$i$i = 0, $sub$ptr$lhs$cast$i444$i$i = 0, $sub$ptr$lhs$cast$i469$i$i = 0, $sub$ptr$lhs$cast$i494$i$i = 0, $sub$ptr$lhs$cast$i519$i$i = 0, $sub$ptr$lhs$cast$i544$i$i = 0, $sub$ptr$lhs$cast$i569$i$i = 0, $sub$ptr$lhs$cast$i594$i$i = 0, $sub$ptr$lhs$cast$i606$i$i = 0, $sub$ptr$lhs$cast$i617$i$i = 0;
 var $sub$ptr$rhs$cast$i$i$i = 0, $sub$ptr$rhs$cast$i114$i$i = 0, $sub$ptr$rhs$cast$i135$i$i = 0, $sub$ptr$rhs$cast$i156$i$i = 0, $sub$ptr$rhs$cast$i168$i$i = 0, $sub$ptr$rhs$cast$i192$i$i = 0, $sub$ptr$rhs$cast$i218$i$i = 0, $sub$ptr$rhs$cast$i244$i$i = 0, $sub$ptr$rhs$cast$i269$i$i = 0, $sub$ptr$rhs$cast$i294$i$i = 0, $sub$ptr$rhs$cast$i319$i$i = 0, $sub$ptr$rhs$cast$i344$i$i = 0, $sub$ptr$rhs$cast$i370$i$i = 0, $sub$ptr$rhs$cast$i395$i$i = 0, $sub$ptr$rhs$cast$i420$i$i = 0, $sub$ptr$rhs$cast$i445$i$i = 0, $sub$ptr$rhs$cast$i470$i$i = 0, $sub$ptr$rhs$cast$i495$i$i = 0, $sub$ptr$rhs$cast$i520$i$i = 0, $sub$ptr$rhs$cast$i545$i$i = 0;
 var $sub$ptr$rhs$cast$i570$i$i = 0, $sub$ptr$rhs$cast$i595$i$i = 0, $sub$ptr$rhs$cast$i607$i$i = 0, $sub$ptr$rhs$cast$i618$i$i = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i115$i$i = 0, $sub$ptr$sub$i136$i$i = 0, $sub$ptr$sub$i157$i$i = 0, $sub$ptr$sub$i169$i$i = 0, $sub$ptr$sub$i193$i$i = 0, $sub$ptr$sub$i219$i$i = 0, $sub$ptr$sub$i245$i$i = 0, $sub$ptr$sub$i270$i$i = 0, $sub$ptr$sub$i295$i$i = 0, $sub$ptr$sub$i320$i$i = 0, $sub$ptr$sub$i345$i$i = 0, $sub$ptr$sub$i371$i$i = 0, $sub$ptr$sub$i396$i$i = 0, $sub$ptr$sub$i421$i$i = 0, $sub$ptr$sub$i446$i$i = 0;
 var $sub$ptr$sub$i471$i$i = 0, $sub$ptr$sub$i496$i$i = 0, $sub$ptr$sub$i521$i$i = 0, $sub$ptr$sub$i546$i$i = 0, $sub$ptr$sub$i571$i$i = 0, $sub$ptr$sub$i596$i$i = 0, $sub$ptr$sub$i608$i$i = 0, $sub$ptr$sub$i619$i$i = 0, $sub100$i$i = 0, $sub162$i$i = 0, $sub179$i$i = 0, $timo$i = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i150$i$i = 0, $tobool$i209$i$i = 0, $tobool$i235$i$i = 0, $tobool$i361$i$i = 0, $tobool1 = 0, $tobool109$i$i = 0;
 var $tobool130$i$i = 0, $tobool130628$i$i = 0, $tobool146$i$i = 0, $tobool26$i = 0, $tobool3$i$7$i$i = 0, $tobool3$i$7$i481$i = 0, $tobool50$i = 0, $tobool9$i$i$i = 0, $tobool9$i199$i$i = 0, $tobool9$i225$i$i = 0, $tobool9$i351$i$i = 0, $tv_usec$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer101 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0;
 var $vararg_buffer116 = 0, $vararg_buffer119 = 0, $vararg_buffer122 = 0, $vararg_buffer126 = 0, $vararg_buffer13 = 0, $vararg_buffer131 = 0, $vararg_buffer134 = 0, $vararg_buffer137 = 0, $vararg_buffer140 = 0, $vararg_buffer143 = 0, $vararg_buffer146 = 0, $vararg_buffer150 = 0, $vararg_buffer154 = 0, $vararg_buffer157 = 0, $vararg_buffer160 = 0, $vararg_buffer165 = 0, $vararg_buffer168 = 0, $vararg_buffer17 = 0, $vararg_buffer171 = 0, $vararg_buffer174 = 0;
 var $vararg_buffer178 = 0, $vararg_buffer181 = 0, $vararg_buffer184 = 0, $vararg_buffer187 = 0, $vararg_buffer190 = 0, $vararg_buffer194 = 0, $vararg_buffer197 = 0, $vararg_buffer20 = 0, $vararg_buffer202 = 0, $vararg_buffer205 = 0, $vararg_buffer208 = 0, $vararg_buffer211 = 0, $vararg_buffer214 = 0, $vararg_buffer217 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer92 = 0;
 var $vararg_buffer95 = 0, $vararg_buffer98 = 0, $vararg_ptr125 = 0, $vararg_ptr129 = 0, $vararg_ptr130 = 0, $vararg_ptr149 = 0, $vararg_ptr153 = 0, $vararg_ptr16 = 0, $vararg_ptr163 = 0, $vararg_ptr164 = 0, $vararg_ptr177 = 0, $vararg_ptr193 = 0, $vararg_ptr200 = 0, $vararg_ptr201 = 0, $watchpoints$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3856|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3856|0);
 $vararg_buffer217 = sp + 3648|0;
 $vararg_buffer214 = sp + 3640|0;
 $vararg_buffer211 = sp + 3632|0;
 $vararg_buffer208 = sp + 3624|0;
 $vararg_buffer205 = sp + 3616|0;
 $vararg_buffer202 = sp + 3608|0;
 $vararg_buffer197 = sp + 3592|0;
 $vararg_buffer194 = sp + 3584|0;
 $vararg_buffer190 = sp + 3576|0;
 $vararg_buffer187 = sp + 3568|0;
 $vararg_buffer184 = sp + 3560|0;
 $vararg_buffer181 = sp + 3552|0;
 $vararg_buffer178 = sp + 3544|0;
 $vararg_buffer174 = sp + 3536|0;
 $vararg_buffer171 = sp + 3528|0;
 $vararg_buffer168 = sp + 3520|0;
 $vararg_buffer165 = sp + 3512|0;
 $vararg_buffer160 = sp + 3496|0;
 $vararg_buffer157 = sp + 3488|0;
 $vararg_buffer154 = sp + 3480|0;
 $vararg_buffer150 = sp + 3472|0;
 $vararg_buffer146 = sp + 3464|0;
 $vararg_buffer143 = sp + 3456|0;
 $vararg_buffer140 = sp + 3448|0;
 $vararg_buffer137 = sp + 3440|0;
 $vararg_buffer134 = sp + 3432|0;
 $vararg_buffer131 = sp + 3424|0;
 $vararg_buffer126 = sp + 3408|0;
 $vararg_buffer122 = sp + 3400|0;
 $vararg_buffer119 = sp + 3392|0;
 $vararg_buffer116 = sp + 3384|0;
 $vararg_buffer113 = sp + 3376|0;
 $vararg_buffer110 = sp + 3368|0;
 $vararg_buffer107 = sp + 3360|0;
 $vararg_buffer104 = sp + 3352|0;
 $vararg_buffer101 = sp + 3344|0;
 $vararg_buffer98 = sp + 3336|0;
 $vararg_buffer95 = sp + 3328|0;
 $vararg_buffer92 = sp + 3320|0;
 $vararg_buffer89 = sp + 3312|0;
 $vararg_buffer86 = sp + 3304|0;
 $vararg_buffer83 = sp + 3296|0;
 $vararg_buffer80 = sp + 3288|0;
 $vararg_buffer77 = sp + 3280|0;
 $vararg_buffer74 = sp + 3272|0;
 $vararg_buffer71 = sp + 3264|0;
 $vararg_buffer68 = sp + 3256|0;
 $vararg_buffer65 = sp + 3248|0;
 $vararg_buffer62 = sp + 3240|0;
 $vararg_buffer59 = sp + 3232|0;
 $vararg_buffer56 = sp + 3224|0;
 $vararg_buffer53 = sp + 3216|0;
 $vararg_buffer50 = sp + 3208|0;
 $vararg_buffer47 = sp + 3200|0;
 $vararg_buffer44 = sp + 3192|0;
 $vararg_buffer41 = sp + 3184|0;
 $vararg_buffer38 = sp + 3176|0;
 $vararg_buffer35 = sp + 3168|0;
 $vararg_buffer32 = sp + 3160|0;
 $vararg_buffer29 = sp + 3152|0;
 $vararg_buffer26 = sp + 3144|0;
 $vararg_buffer23 = sp + 3136|0;
 $vararg_buffer20 = sp + 3128|0;
 $vararg_buffer17 = sp + 3120|0;
 $vararg_buffer13 = sp + 3112|0;
 $vararg_buffer10 = sp + 3104|0;
 $vararg_buffer7 = sp + 3096|0;
 $vararg_buffer4 = sp + 3088|0;
 $vararg_buffer1 = sp + 3080|0;
 $vararg_buffer = sp + 3072|0;
 $reply$i$i$i = sp + 2048|0;
 $rep$i$i = sp + 1024|0;
 $regi$i$i = sp + 3848|0;
 $regi55$i$i = sp + 3844|0;
 $addr$i$i = sp + 3840|0;
 $len$i47$i = sp + 3836|0;
 $ee$i$i = sp + 3824|0;
 $addr142$i$i = sp + 3820|0;
 $len143$i$i = sp + 3816|0;
 $ee189$i$i = sp + 3804|0;
 $kind$i$i = sp + 3800|0;
 $addr215$i$i = sp + 3796|0;
 $len216$i$i = sp + 3792|0;
 $read_set$i = sp + 3664|0;
 $timo$i = sp + 3656|0;
 $i$i = sp + 3652|0;
 $buffer$i = sp;
 $tobool = ($avr|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $gdb = ((($avr)) + 8292|0);
 $0 = HEAP32[$gdb>>2]|0;
 $tobool1 = ($0|0)==(0|0);
 if ($tobool1) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $state = ((($avr)) + 36|0);
 $1 = HEAP32[$state>>2]|0;
 L7: do {
  switch ($1|0) {
  case 2:  {
   $pc = ((($avr)) + 132|0);
   $2 = HEAP32[$pc>>2]|0;
   $len$i = ((($0)) + 12|0);
   $3 = HEAP32[$len$i>>2]|0;
   $cmp8$i = ($3|0)==(0);
   if (!($cmp8$i)) {
    $i$09$i = 0;
    while(1) {
     $addr1$i = (((($0)) + 16|0) + (($i$09$i*12)|0)|0);
     $4 = HEAP32[$addr1$i>>2]|0;
     $cmp2$i = ($4>>>0)>($2>>>0);
     if ($cmp2$i) {
      break L7;
     }
     $cmp6$i = ($4|0)==($2|0);
     if ($cmp6$i) {
      break;
     }
     $inc$i = (($i$09$i) + 1)|0;
     $cmp$i = ($inc$i>>>0)<($3>>>0);
     if ($cmp$i) {
      $i$09$i = $inc$i;
     } else {
      break L7;
     }
    }
    _gdb_send_quick_status($0);
    HEAP32[$state>>2] = 1;
   }
   break;
  }
  case 5:  {
   _gdb_send_quick_status($0);
   HEAP32[$state>>2] = 1;
   break;
  }
  default: {
  }
  }
 } while(0);
 dest=$read_set$i; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $s$i = ((($0)) + 8|0);
 $5 = HEAP32[$s$i>>2]|0;
 $cmp$i12 = ($5|0)==(-1);
 if ($cmp$i12) {
  $listen$i = ((($0)) + 4|0);
  $7 = HEAP32[$listen$i>>2]|0;
  $rem5$i = $7 & 31;
  $shl6$i = 1 << $rem5$i;
  $div9$i = $7 >>> 5;
  $arrayidx10$i = (($read_set$i) + ($div9$i<<2)|0);
  $8 = HEAP32[$arrayidx10$i>>2]|0;
  $$sink = $8;$arrayidx10$i$sink = $arrayidx10$i;$max$0$in$i = $7;$shl6$i$sink = $shl6$i;
 } else {
  $rem$i = $5 & 31;
  $shl$i = 1 << $rem$i;
  $div$i = $5 >>> 5;
  $arrayidx$i = (($read_set$i) + ($div$i<<2)|0);
  $6 = HEAP32[$arrayidx$i>>2]|0;
  $$sink = $shl$i;$arrayidx10$i$sink = $arrayidx$i;$max$0$in$i = $5;$shl6$i$sink = $6;
 }
 $or11$i = $shl6$i$sink | $$sink;
 HEAP32[$arrayidx10$i$sink>>2] = $or11$i;
 $max$0$i = (($max$0$in$i) + 1)|0;
 $div14$i = (($sleep>>>0) / 1000000)&-1;
 HEAP32[$timo$i>>2] = $div14$i;
 $tv_usec$i = ((($timo$i)) + 4|0);
 $9 = ($div14$i*1000000)|0;
 $10 = (($sleep) - ($9))|0;
 HEAP32[$tv_usec$i>>2] = $10;
 $call$i = (_select($max$0$i,$read_set$i,0,0,$timo$i)|0);
 $cmp16$i = ($call$i|0)==(0);
 L21: do {
  if ($cmp16$i) {
   $retval$1$i = 0;
  } else {
   $listen20$i = ((($0)) + 4|0);
   $11 = HEAP32[$listen20$i>>2]|0;
   $div21$i = $11 >>> 5;
   $arrayidx22$i = (($read_set$i) + ($div21$i<<2)|0);
   $12 = HEAP32[$arrayidx22$i>>2]|0;
   $rem24$i = $11 & 31;
   $shl25$i = 1 << $rem24$i;
   $and$i = $shl25$i & $12;
   $tobool26$i = ($and$i|0)==(0);
   do {
    if (!($tobool26$i)) {
     $call29$i = (_accept($11,0,0)|0);
     HEAP32[$s$i>>2] = $call29$i;
     $cmp32$i = ($call29$i|0)==(-1);
     if ($cmp32$i) {
      _perror(359257);
      (_sleep(5)|0);
      $retval$1$i = 1;
      break L21;
     } else {
      HEAP32[$i$i>>2] = 1;
      (_setsockopt($call29$i,6,1,$i$i,4)|0);
      $13 = HEAP32[$0>>2]|0;
      $state$i = ((($13)) + 36|0);
      HEAP32[$state$i>>2] = 1;
      HEAP32[$vararg_buffer>>2] = 359306;
      (_printf(359284,$vararg_buffer)|0);
      break;
     }
    }
   } while(0);
   $14 = HEAP32[$s$i>>2]|0;
   $cmp41$i = ($14|0)==(-1);
   if ($cmp41$i) {
    $retval$1$i = 1;
   } else {
    $div44$i = $14 >>> 5;
    $arrayidx45$i = (($read_set$i) + ($div44$i<<2)|0);
    $15 = HEAP32[$arrayidx45$i>>2]|0;
    $rem47$i = $14 & 31;
    $shl48$i = 1 << $rem47$i;
    $and49$i = $15 & $shl48$i;
    $tobool50$i = ($and49$i|0)==(0);
    if ($tobool50$i) {
     $retval$1$i = 1;
    } else {
     $call54$i = (_recv($14,$buffer$i,1023,0)|0);
     switch ($call54$i|0) {
     case 0:  {
      HEAP32[$vararg_buffer1>>2] = 359306;
      (_printf(359326,$vararg_buffer1)|0);
      $16 = HEAP32[$s$i>>2]|0;
      (_close($16)|0);
      $len$i$i = ((($0)) + 12|0);
      HEAP32[$len$i$i>>2] = 0;
      $len$i50$i = ((($0)) + 400|0);
      HEAP32[$len$i50$i>>2] = 0;
      $17 = HEAP32[$0>>2]|0;
      $state61$i = ((($17)) + 36|0);
      HEAP32[$state61$i>>2] = 2;
      HEAP32[$s$i>>2] = -1;
      $retval$1$i = 1;
      break L21;
      break;
     }
     case -1:  {
      _perror(359348);
      (_sleep(1)|0);
      $retval$1$i = 1;
      break L21;
      break;
     }
     default: {
      $arrayidx68$i = (($buffer$i) + ($call54$i)|0);
      HEAP8[$arrayidx68$i>>0] = 0;
      $src$0$i = $buffer$i;
      L33: while(1) {
       $18 = HEAP8[$src$0$i>>0]|0;
       switch ($18<<24>>24) {
       case 3:  {
        label = 27;
        break L33;
        break;
       }
       case 43: case 45:  {
        break;
       }
       default: {
        $20 = $18;$src$1$i = $src$0$i;
        break L33;
       }
       }
       $incdec$ptr75$i = ((($src$0$i)) + 1|0);
       $src$0$i = $incdec$ptr75$i;
      }
      if ((label|0) == 27) {
       $incdec$ptr80$i = ((($src$0$i)) + 1|0);
       $19 = HEAP32[$0>>2]|0;
       $state82$i = ((($19)) + 36|0);
       HEAP32[$state82$i>>2] = 5;
       (_puts(359373)|0);
       $$pre$i = HEAP8[$incdec$ptr80$i>>0]|0;
       $20 = $$pre$i;$src$1$i = $incdec$ptr80$i;
      }
      $cmp86$i = ($20<<24>>24)==(36);
      if ($cmp86$i) {
       $end$0489$i = ((($arrayidx68$i)) + -1|0);
       $cmp92490$i = ($end$0489$i>>>0)>($src$1$i>>>0);
       L41: do {
        if ($cmp92490$i) {
         $end$0491$i = $end$0489$i;
         while(1) {
          $21 = HEAP8[$end$0491$i>>0]|0;
          $cmp95$i = ($21<<24>>24)==(35);
          HEAP8[$end$0491$i>>0] = 0;
          if ($cmp95$i) {
           break L41;
          }
          $end$0$i = ((($end$0491$i)) + -1|0);
          $cmp92$i = ($end$0$i>>>0)>($src$1$i>>>0);
          if ($cmp92$i) {
           $end$0491$i = $end$0$i;
          } else {
           $end$0$lcssa$i = $end$0$i;
           label = 33;
           break;
          }
         }
        } else {
         $end$0$lcssa$i = $end$0489$i;
         label = 33;
        }
       } while(0);
       if ((label|0) == 33) {
        HEAP8[$end$0$lcssa$i>>0] = 0;
       }
       $incdec$ptr100$i = ((($src$1$i)) + 1|0);
       $22 = HEAP32[$s$i>>2]|0;
       (_send($22,359391,1,0)|0);
       $23 = HEAP32[$0>>2]|0;
       $incdec$ptr$i$i = ((($src$1$i)) + 2|0);
       $24 = HEAP8[$incdec$ptr100$i>>0]|0;
       L49: do {
        switch ($24<<24>>24) {
        case 113:  {
         $call$i$i = (_strncmp($incdec$ptr$i$i,359393,9)|0);
         $cmp$i$i = ($call$i$i|0)==(0);
         if ($cmp$i$i) {
          $incdec$ptr$i$i$i = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $incdec$ptr4$i$i$i = ((($reply$i$i$i)) + 2|0);
          HEAP8[$incdec$ptr$i$i$i>>0] = 113;
          $incdec$ptr4$i$1$i$i = ((($reply$i$i$i)) + 3|0);
          HEAP8[$incdec$ptr4$i$i$i>>0] = 88;
          $incdec$ptr4$i$2$i$i = ((($reply$i$i$i)) + 4|0);
          HEAP8[$incdec$ptr4$i$1$i$i>>0] = 102;
          $incdec$ptr4$i$3$i$i = ((($reply$i$i$i)) + 5|0);
          HEAP8[$incdec$ptr4$i$2$i$i>>0] = 101;
          $incdec$ptr4$i$4$i$i = ((($reply$i$i$i)) + 6|0);
          HEAP8[$incdec$ptr4$i$3$i$i>>0] = 114;
          $incdec$ptr4$i$5$i$i = ((($reply$i$i$i)) + 7|0);
          HEAP8[$incdec$ptr4$i$4$i$i>>0] = 58;
          $incdec$ptr4$i$6$i$i = ((($reply$i$i$i)) + 8|0);
          HEAP8[$incdec$ptr4$i$5$i$i>>0] = 109;
          $incdec$ptr4$i$7$i$i = ((($reply$i$i$i)) + 9|0);
          HEAP8[$incdec$ptr4$i$6$i$i>>0] = 101;
          $incdec$ptr4$i$8$i$i = ((($reply$i$i$i)) + 10|0);
          HEAP8[$incdec$ptr4$i$7$i$i>>0] = 109;
          $incdec$ptr4$i$9$i$i = ((($reply$i$i$i)) + 11|0);
          HEAP8[$incdec$ptr4$i$8$i$i>>0] = 111;
          $incdec$ptr4$i$10$i$i = ((($reply$i$i$i)) + 12|0);
          HEAP8[$incdec$ptr4$i$9$i$i>>0] = 114;
          $incdec$ptr4$i$11$i$i = ((($reply$i$i$i)) + 13|0);
          HEAP8[$incdec$ptr4$i$10$i$i>>0] = 121;
          $incdec$ptr4$i$12$i$i = ((($reply$i$i$i)) + 14|0);
          HEAP8[$incdec$ptr4$i$11$i$i>>0] = 45;
          $incdec$ptr4$i$13$i$i = ((($reply$i$i$i)) + 15|0);
          HEAP8[$incdec$ptr4$i$12$i$i>>0] = 109;
          $incdec$ptr4$i$14$i$i = ((($reply$i$i$i)) + 16|0);
          HEAP8[$incdec$ptr4$i$13$i$i>>0] = 97;
          $incdec$ptr4$i$15$i$i = ((($reply$i$i$i)) + 17|0);
          HEAP8[$incdec$ptr4$i$14$i$i>>0] = 112;
          $incdec$ptr4$i$16$i$i = ((($reply$i$i$i)) + 18|0);
          HEAP8[$incdec$ptr4$i$15$i$i>>0] = 58;
          $incdec$ptr4$i$17$i$i = ((($reply$i$i$i)) + 19|0);
          HEAP8[$incdec$ptr4$i$16$i$i>>0] = 114;
          $incdec$ptr4$i$18$i$i = ((($reply$i$i$i)) + 20|0);
          HEAP8[$incdec$ptr4$i$17$i$i>>0] = 101;
          $incdec$ptr4$i$19$i$i = ((($reply$i$i$i)) + 21|0);
          HEAP8[$incdec$ptr4$i$18$i$i>>0] = 97;
          $incdec$ptr4$i$20$i$i = ((($reply$i$i$i)) + 22|0);
          HEAP8[$incdec$ptr4$i$19$i$i>>0] = 100;
          HEAP8[$incdec$ptr4$i$20$i$i>>0] = 43;
          $scevgep$i$i = ((($reply$i$i$i)) + 23|0);
          HEAP32[$vararg_buffer4>>2] = 69;
          (_sprintf($scevgep$i$i,359251,$vararg_buffer4)|0);
          $25 = HEAP32[$s$i>>2]|0;
          $sub$ptr$lhs$cast$i$i$i = $scevgep$i$i;
          $sub$ptr$rhs$cast$i$i$i = $reply$i$i$i;
          $sub$ptr$sub$i$i$i = (3 - ($sub$ptr$rhs$cast$i$i$i))|0;
          $add8$i$i$i = (($sub$ptr$sub$i$i$i) + ($sub$ptr$lhs$cast$i$i$i))|0;
          (_send($25,$reply$i$i$i,$add8$i$i$i,0)|0);
          break L49;
         }
         $call3$i$i = (_strncmp($incdec$ptr$i$i,359403,8)|0);
         $cmp4$i$i = ($call3$i$i|0)==(0);
         if ($cmp4$i$i) {
          $incdec$ptr$i99$i$i = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          HEAP8[$incdec$ptr$i99$i$i>>0] = 49;
          $scevgep631$i$i = ((($reply$i$i$i)) + 2|0);
          HEAP32[$vararg_buffer7>>2] = 49;
          (_sprintf($scevgep631$i$i,359251,$vararg_buffer7)|0);
          $26 = HEAP32[$s$i>>2]|0;
          $sub$ptr$lhs$cast$i113$i$i = $scevgep631$i$i;
          $sub$ptr$rhs$cast$i114$i$i = $reply$i$i$i;
          $sub$ptr$sub$i115$i$i = (3 - ($sub$ptr$rhs$cast$i114$i$i))|0;
          $add8$i116$i$i = (($sub$ptr$sub$i115$i$i) + ($sub$ptr$lhs$cast$i113$i$i))|0;
          (_send($26,$reply$i$i$i,$add8$i116$i$i,0)|0);
          break L49;
         }
         $call8$i$i = (_strncmp($incdec$ptr$i$i,359412,7)|0);
         $cmp9$i$i = ($call8$i$i|0)==(0);
         if ($cmp9$i$i) {
          $incdec$ptr$i120$i$i = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $incdec$ptr4$i128$i$i = ((($reply$i$i$i)) + 2|0);
          HEAP8[$incdec$ptr$i120$i$i>>0] = 84;
          $incdec$ptr4$i128$1$i$i = ((($reply$i$i$i)) + 3|0);
          HEAP8[$incdec$ptr4$i128$i$i>>0] = 101;
          $incdec$ptr4$i128$2$i$i = ((($reply$i$i$i)) + 4|0);
          HEAP8[$incdec$ptr4$i128$1$i$i>>0] = 120;
          $incdec$ptr4$i128$3$i$i = ((($reply$i$i$i)) + 5|0);
          HEAP8[$incdec$ptr4$i128$2$i$i>>0] = 116;
          $incdec$ptr4$i128$4$i$i = ((($reply$i$i$i)) + 6|0);
          HEAP8[$incdec$ptr4$i128$3$i$i>>0] = 61;
          $incdec$ptr4$i128$5$i$i = ((($reply$i$i$i)) + 7|0);
          HEAP8[$incdec$ptr4$i128$4$i$i>>0] = 48;
          $incdec$ptr4$i128$6$i$i = ((($reply$i$i$i)) + 8|0);
          HEAP8[$incdec$ptr4$i128$5$i$i>>0] = 59;
          $incdec$ptr4$i128$7$i$i = ((($reply$i$i$i)) + 9|0);
          HEAP8[$incdec$ptr4$i128$6$i$i>>0] = 68;
          $incdec$ptr4$i128$8$i$i = ((($reply$i$i$i)) + 10|0);
          HEAP8[$incdec$ptr4$i128$7$i$i>>0] = 97;
          $incdec$ptr4$i128$9$i$i = ((($reply$i$i$i)) + 11|0);
          HEAP8[$incdec$ptr4$i128$8$i$i>>0] = 116;
          $incdec$ptr4$i128$10$i$i = ((($reply$i$i$i)) + 12|0);
          HEAP8[$incdec$ptr4$i128$9$i$i>>0] = 97;
          $incdec$ptr4$i128$11$i$i = ((($reply$i$i$i)) + 13|0);
          HEAP8[$incdec$ptr4$i128$10$i$i>>0] = 61;
          $incdec$ptr4$i128$12$i$i = ((($reply$i$i$i)) + 14|0);
          HEAP8[$incdec$ptr4$i128$11$i$i>>0] = 56;
          $incdec$ptr4$i128$17$i$i = ((($reply$i$i$i)) + 19|0);
          $incdec$ptr4$i128$18$i$i = ((($reply$i$i$i)) + 20|0);
          ;HEAP16[$incdec$ptr4$i128$12$i$i>>1]=12336|0;HEAP16[$incdec$ptr4$i128$12$i$i+2>>1]=12336|0;HEAP8[$incdec$ptr4$i128$12$i$i+4>>0]=48|0;
          HEAP8[$incdec$ptr4$i128$17$i$i>>0] = 59;
          $incdec$ptr4$i128$19$i$i = ((($reply$i$i$i)) + 21|0);
          HEAP8[$incdec$ptr4$i128$18$i$i>>0] = 66;
          $incdec$ptr4$i128$20$i$i = ((($reply$i$i$i)) + 22|0);
          HEAP8[$incdec$ptr4$i128$19$i$i>>0] = 115;
          $incdec$ptr4$i128$21$i$i = ((($reply$i$i$i)) + 23|0);
          HEAP8[$incdec$ptr4$i128$20$i$i>>0] = 115;
          $incdec$ptr4$i128$22$i$i = ((($reply$i$i$i)) + 24|0);
          HEAP8[$incdec$ptr4$i128$21$i$i>>0] = 61;
          $incdec$ptr4$i128$23$i$i = ((($reply$i$i$i)) + 25|0);
          HEAP8[$incdec$ptr4$i128$22$i$i>>0] = 56;
          $scevgep632$i$i = ((($reply$i$i$i)) + 30|0);
          ;HEAP8[$incdec$ptr4$i128$23$i$i>>0]=48|0;HEAP8[$incdec$ptr4$i128$23$i$i+1>>0]=48|0;HEAP8[$incdec$ptr4$i128$23$i$i+2>>0]=48|0;HEAP8[$incdec$ptr4$i128$23$i$i+3>>0]=48|0;HEAP8[$incdec$ptr4$i128$23$i$i+4>>0]=48|0;
          HEAP32[$vararg_buffer10>>2] = 244;
          (_sprintf($scevgep632$i$i,359251,$vararg_buffer10)|0);
          $27 = HEAP32[$s$i>>2]|0;
          $sub$ptr$lhs$cast$i134$i$i = $scevgep632$i$i;
          $sub$ptr$rhs$cast$i135$i$i = $reply$i$i$i;
          $sub$ptr$sub$i136$i$i = (3 - ($sub$ptr$rhs$cast$i135$i$i))|0;
          $add8$i137$i$i = (($sub$ptr$sub$i136$i$i) + ($sub$ptr$lhs$cast$i134$i$i))|0;
          (_send($27,$reply$i$i$i,$add8$i137$i$i,0)|0);
          break L49;
         }
         $call13$i$i = (_strncmp($incdec$ptr$i$i,359420,20)|0);
         $cmp14$i$i = ($call13$i$i|0)==(0);
         if (!($cmp14$i$i)) {
          $incdec$ptr$i162$i$i = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          HEAP32[$vararg_buffer20>>2] = 0;
          (_sprintf($incdec$ptr$i162$i$i,359251,$vararg_buffer20)|0);
          $34 = HEAP32[$s$i>>2]|0;
          $sub$ptr$lhs$cast$i167$i$i = $incdec$ptr$i162$i$i;
          $sub$ptr$rhs$cast$i168$i$i = $reply$i$i$i;
          $sub$ptr$sub$i169$i$i = (3 - ($sub$ptr$rhs$cast$i168$i$i))|0;
          $add8$i170$i$i = (($sub$ptr$sub$i169$i$i) + ($sub$ptr$lhs$cast$i167$i$i))|0;
          (_send($34,$reply$i$i$i,$add8$i170$i$i,0)|0);
          break L49;
         }
         $ramend$i$i = ((($23)) + 4|0);
         $28 = HEAP16[$ramend$i$i>>1]|0;
         $conv18$i$i = $28&65535;
         $add$i$i = (($conv18$i$i) + 1)|0;
         $flashend$i$i = ((($23)) + 8|0);
         $29 = HEAP32[$flashend$i$i>>2]|0;
         $add20$i$i = (($29) + 1)|0;
         HEAP32[$vararg_buffer13>>2] = $add$i$i;
         $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
         HEAP32[$vararg_ptr16>>2] = $add20$i$i;
         (_snprintf($rep$i$i,1024,359441,$vararg_buffer13)|0);
         $incdec$ptr$i141$i$i = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $30 = HEAP8[$rep$i$i>>0]|0;
         $tobool9$i$i$i = ($30<<24>>24)==(0);
         if ($tobool9$i$i$i) {
          $check$0$lcssa$i$i$i = 0;$dst$0$lcssa$i$i$i = $incdec$ptr$i141$i$i;
         } else {
          $31 = $30;$check$012$i142$i$i = 0;$cmd$addr$010$i144$i$i = $rep$i$i;$dst$011$i143$i$i = $incdec$ptr$i141$i$i;
          while(1) {
           $conv8$i145$i$i = $31&255;
           $conv1$i146$i$i = $check$012$i142$i$i & 255;
           $add$i147$i$i = (($conv1$i146$i$i) + ($conv8$i145$i$i))|0;
           $incdec$ptr3$i148$i$i = ((($cmd$addr$010$i144$i$i)) + 1|0);
           $incdec$ptr4$i149$i$i = ((($dst$011$i143$i$i)) + 1|0);
           HEAP8[$dst$011$i143$i$i>>0] = $31;
           $32 = HEAP8[$incdec$ptr3$i148$i$i>>0]|0;
           $tobool$i150$i$i = ($32<<24>>24)==(0);
           if ($tobool$i150$i$i) {
            break;
           } else {
            $31 = $32;$check$012$i142$i$i = $add$i147$i$i;$cmd$addr$010$i144$i$i = $incdec$ptr3$i148$i$i;$dst$011$i143$i$i = $incdec$ptr4$i149$i$i;
           }
          }
          $phitmp$i152$i$i = $add$i147$i$i & 255;
          $check$0$lcssa$i$i$i = $phitmp$i152$i$i;$dst$0$lcssa$i$i$i = $incdec$ptr4$i149$i$i;
         }
         HEAP32[$vararg_buffer17>>2] = $check$0$lcssa$i$i$i;
         (_sprintf($dst$0$lcssa$i$i$i,359251,$vararg_buffer17)|0);
         $33 = HEAP32[$s$i>>2]|0;
         $sub$ptr$lhs$cast$i155$i$i = $dst$0$lcssa$i$i$i;
         $sub$ptr$rhs$cast$i156$i$i = $reply$i$i$i;
         $sub$ptr$sub$i157$i$i = (3 - ($sub$ptr$rhs$cast$i156$i$i))|0;
         $add8$i158$i$i = (($sub$ptr$sub$i157$i$i) + ($sub$ptr$lhs$cast$i155$i$i))|0;
         (_send($33,$reply$i$i$i,$add8$i158$i$i,0)|0);
         break;
        }
        case 63:  {
         _gdb_send_quick_status($0);
         break;
        }
        case 71:  {
         $call29$i$i = (_strlen($incdec$ptr$i$i)|0);
         (_read_hex_string($incdec$ptr$i$i,$rep$i$i,$call29$i$i)|0);
         $35 = HEAP8[$rep$i$i>>0]|0;
         $36 = HEAP32[$0>>2]|0;
         $data$i51$i = ((($36)) + 5892|0);
         $37 = HEAP32[$data$i51$i>>2]|0;
         HEAP8[$37>>0] = $35;
         $add$ptr$i$i = ((($rep$i$i)) + 1|0);
         $38 = HEAP8[$add$ptr$i$i>>0]|0;
         $39 = HEAP32[$0>>2]|0;
         $data$i62$i = ((($39)) + 5892|0);
         $40 = HEAP32[$data$i62$i>>2]|0;
         $arrayidx$i$i = ((($40)) + 1|0);
         HEAP8[$arrayidx$i$i>>0] = $38;
         $add$ptr$1$i$i = ((($rep$i$i)) + 2|0);
         $41 = HEAP8[$add$ptr$1$i$i>>0]|0;
         $42 = HEAP32[$0>>2]|0;
         $data$i65$i = ((($42)) + 5892|0);
         $43 = HEAP32[$data$i65$i>>2]|0;
         $arrayidx$i66$i = ((($43)) + 2|0);
         HEAP8[$arrayidx$i66$i>>0] = $41;
         $add$ptr$2$i$i = ((($rep$i$i)) + 3|0);
         $44 = HEAP8[$add$ptr$2$i$i>>0]|0;
         $45 = HEAP32[$0>>2]|0;
         $data$i69$i = ((($45)) + 5892|0);
         $46 = HEAP32[$data$i69$i>>2]|0;
         $arrayidx$i70$i = ((($46)) + 3|0);
         HEAP8[$arrayidx$i70$i>>0] = $44;
         $add$ptr$3$i$i = ((($rep$i$i)) + 4|0);
         $47 = HEAP8[$add$ptr$3$i$i>>0]|0;
         $48 = HEAP32[$0>>2]|0;
         $data$i73$i = ((($48)) + 5892|0);
         $49 = HEAP32[$data$i73$i>>2]|0;
         $arrayidx$i74$i = ((($49)) + 4|0);
         HEAP8[$arrayidx$i74$i>>0] = $47;
         $add$ptr$4$i$i = ((($rep$i$i)) + 5|0);
         $50 = HEAP8[$add$ptr$4$i$i>>0]|0;
         $51 = HEAP32[$0>>2]|0;
         $data$i85$i = ((($51)) + 5892|0);
         $52 = HEAP32[$data$i85$i>>2]|0;
         $arrayidx$i86$i = ((($52)) + 5|0);
         HEAP8[$arrayidx$i86$i>>0] = $50;
         $add$ptr$5$i$i = ((($rep$i$i)) + 6|0);
         $53 = HEAP8[$add$ptr$5$i$i>>0]|0;
         $54 = HEAP32[$0>>2]|0;
         $data$i89$i = ((($54)) + 5892|0);
         $55 = HEAP32[$data$i89$i>>2]|0;
         $arrayidx$i90$i = ((($55)) + 6|0);
         HEAP8[$arrayidx$i90$i>>0] = $53;
         $add$ptr$6$i$i = ((($rep$i$i)) + 7|0);
         $56 = HEAP8[$add$ptr$6$i$i>>0]|0;
         $57 = HEAP32[$0>>2]|0;
         $data$i101$i = ((($57)) + 5892|0);
         $58 = HEAP32[$data$i101$i>>2]|0;
         $arrayidx$i102$i = ((($58)) + 7|0);
         HEAP8[$arrayidx$i102$i>>0] = $56;
         $add$ptr$7$i$i = ((($rep$i$i)) + 8|0);
         $59 = HEAP8[$add$ptr$7$i$i>>0]|0;
         $60 = HEAP32[$0>>2]|0;
         $data$i105$i = ((($60)) + 5892|0);
         $61 = HEAP32[$data$i105$i>>2]|0;
         $arrayidx$i106$i = ((($61)) + 8|0);
         HEAP8[$arrayidx$i106$i>>0] = $59;
         $add$ptr$8$i$i = ((($rep$i$i)) + 9|0);
         $62 = HEAP8[$add$ptr$8$i$i>>0]|0;
         $63 = HEAP32[$0>>2]|0;
         $data$i117$i = ((($63)) + 5892|0);
         $64 = HEAP32[$data$i117$i>>2]|0;
         $arrayidx$i118$i = ((($64)) + 9|0);
         HEAP8[$arrayidx$i118$i>>0] = $62;
         $add$ptr$9$i$i = ((($rep$i$i)) + 10|0);
         $65 = HEAP8[$add$ptr$9$i$i>>0]|0;
         $66 = HEAP32[$0>>2]|0;
         $data$i121$i = ((($66)) + 5892|0);
         $67 = HEAP32[$data$i121$i>>2]|0;
         $arrayidx$i122$i = ((($67)) + 10|0);
         HEAP8[$arrayidx$i122$i>>0] = $65;
         $add$ptr$10$i$i = ((($rep$i$i)) + 11|0);
         $68 = HEAP8[$add$ptr$10$i$i>>0]|0;
         $69 = HEAP32[$0>>2]|0;
         $data$i133$i = ((($69)) + 5892|0);
         $70 = HEAP32[$data$i133$i>>2]|0;
         $arrayidx$i134$i = ((($70)) + 11|0);
         HEAP8[$arrayidx$i134$i>>0] = $68;
         $add$ptr$11$i$i = ((($rep$i$i)) + 12|0);
         $71 = HEAP8[$add$ptr$11$i$i>>0]|0;
         $72 = HEAP32[$0>>2]|0;
         $data$i137$i = ((($72)) + 5892|0);
         $73 = HEAP32[$data$i137$i>>2]|0;
         $arrayidx$i138$i = ((($73)) + 12|0);
         HEAP8[$arrayidx$i138$i>>0] = $71;
         $add$ptr$12$i$i = ((($rep$i$i)) + 13|0);
         $74 = HEAP8[$add$ptr$12$i$i>>0]|0;
         $75 = HEAP32[$0>>2]|0;
         $data$i149$i = ((($75)) + 5892|0);
         $76 = HEAP32[$data$i149$i>>2]|0;
         $arrayidx$i150$i = ((($76)) + 13|0);
         HEAP8[$arrayidx$i150$i>>0] = $74;
         $add$ptr$13$i$i = ((($rep$i$i)) + 14|0);
         $77 = HEAP8[$add$ptr$13$i$i>>0]|0;
         $78 = HEAP32[$0>>2]|0;
         $data$i153$i = ((($78)) + 5892|0);
         $79 = HEAP32[$data$i153$i>>2]|0;
         $arrayidx$i154$i = ((($79)) + 14|0);
         HEAP8[$arrayidx$i154$i>>0] = $77;
         $add$ptr$14$i$i = ((($rep$i$i)) + 15|0);
         $80 = HEAP8[$add$ptr$14$i$i>>0]|0;
         $81 = HEAP32[$0>>2]|0;
         $data$i165$i = ((($81)) + 5892|0);
         $82 = HEAP32[$data$i165$i>>2]|0;
         $arrayidx$i166$i = ((($82)) + 15|0);
         HEAP8[$arrayidx$i166$i>>0] = $80;
         $add$ptr$15$i$i = ((($rep$i$i)) + 16|0);
         $83 = HEAP8[$add$ptr$15$i$i>>0]|0;
         $84 = HEAP32[$0>>2]|0;
         $data$i169$i = ((($84)) + 5892|0);
         $85 = HEAP32[$data$i169$i>>2]|0;
         $arrayidx$i170$i = ((($85)) + 16|0);
         HEAP8[$arrayidx$i170$i>>0] = $83;
         $add$ptr$16$i$i = ((($rep$i$i)) + 17|0);
         $86 = HEAP8[$add$ptr$16$i$i>>0]|0;
         $87 = HEAP32[$0>>2]|0;
         $data$i181$i = ((($87)) + 5892|0);
         $88 = HEAP32[$data$i181$i>>2]|0;
         $arrayidx$i182$i = ((($88)) + 17|0);
         HEAP8[$arrayidx$i182$i>>0] = $86;
         $add$ptr$17$i$i = ((($rep$i$i)) + 18|0);
         $89 = HEAP8[$add$ptr$17$i$i>>0]|0;
         $90 = HEAP32[$0>>2]|0;
         $data$i185$i = ((($90)) + 5892|0);
         $91 = HEAP32[$data$i185$i>>2]|0;
         $arrayidx$i186$i = ((($91)) + 18|0);
         HEAP8[$arrayidx$i186$i>>0] = $89;
         $add$ptr$18$i$i = ((($rep$i$i)) + 19|0);
         $92 = HEAP8[$add$ptr$18$i$i>>0]|0;
         $93 = HEAP32[$0>>2]|0;
         $data$i197$i = ((($93)) + 5892|0);
         $94 = HEAP32[$data$i197$i>>2]|0;
         $arrayidx$i198$i = ((($94)) + 19|0);
         HEAP8[$arrayidx$i198$i>>0] = $92;
         $add$ptr$19$i$i = ((($rep$i$i)) + 20|0);
         $95 = HEAP8[$add$ptr$19$i$i>>0]|0;
         $96 = HEAP32[$0>>2]|0;
         $data$i201$i = ((($96)) + 5892|0);
         $97 = HEAP32[$data$i201$i>>2]|0;
         $arrayidx$i202$i = ((($97)) + 20|0);
         HEAP8[$arrayidx$i202$i>>0] = $95;
         $add$ptr$20$i$i = ((($rep$i$i)) + 21|0);
         $98 = HEAP8[$add$ptr$20$i$i>>0]|0;
         $99 = HEAP32[$0>>2]|0;
         $data$i213$i = ((($99)) + 5892|0);
         $100 = HEAP32[$data$i213$i>>2]|0;
         $arrayidx$i214$i = ((($100)) + 21|0);
         HEAP8[$arrayidx$i214$i>>0] = $98;
         $add$ptr$21$i$i = ((($rep$i$i)) + 22|0);
         $101 = HEAP8[$add$ptr$21$i$i>>0]|0;
         $102 = HEAP32[$0>>2]|0;
         $data$i217$i = ((($102)) + 5892|0);
         $103 = HEAP32[$data$i217$i>>2]|0;
         $arrayidx$i218$i = ((($103)) + 22|0);
         HEAP8[$arrayidx$i218$i>>0] = $101;
         $add$ptr$22$i$i = ((($rep$i$i)) + 23|0);
         $104 = HEAP8[$add$ptr$22$i$i>>0]|0;
         $105 = HEAP32[$0>>2]|0;
         $data$i229$i = ((($105)) + 5892|0);
         $106 = HEAP32[$data$i229$i>>2]|0;
         $arrayidx$i230$i = ((($106)) + 23|0);
         HEAP8[$arrayidx$i230$i>>0] = $104;
         $add$ptr$23$i$i = ((($rep$i$i)) + 24|0);
         $107 = HEAP8[$add$ptr$23$i$i>>0]|0;
         $108 = HEAP32[$0>>2]|0;
         $data$i233$i = ((($108)) + 5892|0);
         $109 = HEAP32[$data$i233$i>>2]|0;
         $arrayidx$i234$i = ((($109)) + 24|0);
         HEAP8[$arrayidx$i234$i>>0] = $107;
         $add$ptr$24$i$i = ((($rep$i$i)) + 25|0);
         $110 = HEAP8[$add$ptr$24$i$i>>0]|0;
         $111 = HEAP32[$0>>2]|0;
         $data$i245$i = ((($111)) + 5892|0);
         $112 = HEAP32[$data$i245$i>>2]|0;
         $arrayidx$i246$i = ((($112)) + 25|0);
         HEAP8[$arrayidx$i246$i>>0] = $110;
         $add$ptr$25$i$i = ((($rep$i$i)) + 26|0);
         $113 = HEAP8[$add$ptr$25$i$i>>0]|0;
         $114 = HEAP32[$0>>2]|0;
         $data$i249$i = ((($114)) + 5892|0);
         $115 = HEAP32[$data$i249$i>>2]|0;
         $arrayidx$i250$i = ((($115)) + 26|0);
         HEAP8[$arrayidx$i250$i>>0] = $113;
         $add$ptr$26$i$i = ((($rep$i$i)) + 27|0);
         $116 = HEAP8[$add$ptr$26$i$i>>0]|0;
         $117 = HEAP32[$0>>2]|0;
         $data$i261$i = ((($117)) + 5892|0);
         $118 = HEAP32[$data$i261$i>>2]|0;
         $arrayidx$i262$i = ((($118)) + 27|0);
         HEAP8[$arrayidx$i262$i>>0] = $116;
         $add$ptr$27$i$i = ((($rep$i$i)) + 28|0);
         $119 = HEAP8[$add$ptr$27$i$i>>0]|0;
         $120 = HEAP32[$0>>2]|0;
         $data$i265$i = ((($120)) + 5892|0);
         $121 = HEAP32[$data$i265$i>>2]|0;
         $arrayidx$i266$i = ((($121)) + 28|0);
         HEAP8[$arrayidx$i266$i>>0] = $119;
         $add$ptr$28$i$i = ((($rep$i$i)) + 29|0);
         $122 = HEAP8[$add$ptr$28$i$i>>0]|0;
         $123 = HEAP32[$0>>2]|0;
         $data$i277$i = ((($123)) + 5892|0);
         $124 = HEAP32[$data$i277$i>>2]|0;
         $arrayidx$i278$i = ((($124)) + 29|0);
         HEAP8[$arrayidx$i278$i>>0] = $122;
         $add$ptr$29$i$i = ((($rep$i$i)) + 30|0);
         $125 = HEAP8[$add$ptr$29$i$i>>0]|0;
         $126 = HEAP32[$0>>2]|0;
         $data$i281$i = ((($126)) + 5892|0);
         $127 = HEAP32[$data$i281$i>>2]|0;
         $arrayidx$i282$i = ((($127)) + 30|0);
         HEAP8[$arrayidx$i282$i>>0] = $125;
         $add$ptr$30$i$i = ((($rep$i$i)) + 31|0);
         $128 = HEAP8[$add$ptr$30$i$i>>0]|0;
         $129 = HEAP32[$0>>2]|0;
         $data$i293$i = ((($129)) + 5892|0);
         $130 = HEAP32[$data$i293$i>>2]|0;
         $arrayidx$i294$i = ((($130)) + 31|0);
         HEAP8[$arrayidx$i294$i>>0] = $128;
         $add$ptr$31$i$i = ((($rep$i$i)) + 32|0);
         $131 = HEAP8[$add$ptr$31$i$i>>0]|0;
         $132 = HEAP32[$0>>2]|0;
         $data3$i$i = ((($132)) + 5892|0);
         $133 = HEAP32[$data3$i$i>>2]|0;
         $arrayidx4$i$i = ((($133)) + 95|0);
         HEAP8[$arrayidx4$i$i>>0] = $131;
         $134 = HEAP32[$0>>2]|0;
         $135 = $131 & 1;
         $arrayidx9$i$i$i = ((($134)) + 120|0);
         HEAP8[$arrayidx9$i$i$i>>0] = $135;
         $136 = HEAP32[$0>>2]|0;
         $137 = ($131&255) >>> 1;
         $$lobit$i$i = $137 & 1;
         $arrayidx9$i$1$i$i = ((($136)) + 121|0);
         HEAP8[$arrayidx9$i$1$i$i>>0] = $$lobit$i$i;
         $138 = HEAP32[$0>>2]|0;
         $139 = ($131&255) >>> 2;
         $$lobit20$i$i = $139 & 1;
         $arrayidx9$i$2$i$i = ((($138)) + 122|0);
         HEAP8[$arrayidx9$i$2$i$i>>0] = $$lobit20$i$i;
         $140 = HEAP32[$0>>2]|0;
         $141 = ($131&255) >>> 3;
         $$lobit21$i$i = $141 & 1;
         $arrayidx9$i$3$i$i = ((($140)) + 123|0);
         HEAP8[$arrayidx9$i$3$i$i>>0] = $$lobit21$i$i;
         $142 = HEAP32[$0>>2]|0;
         $143 = ($131&255) >>> 4;
         $$lobit22$i$i = $143 & 1;
         $arrayidx9$i$4$i$i = ((($142)) + 124|0);
         HEAP8[$arrayidx9$i$4$i$i>>0] = $$lobit22$i$i;
         $144 = HEAP32[$0>>2]|0;
         $145 = ($131&255) >>> 5;
         $$lobit23$i$i = $145 & 1;
         $arrayidx9$i$5$i$i = ((($144)) + 125|0);
         HEAP8[$arrayidx9$i$5$i$i>>0] = $$lobit23$i$i;
         $146 = HEAP32[$0>>2]|0;
         $147 = ($131&255) >>> 6;
         $$lobit24$i$i = $147 & 1;
         $arrayidx9$i$6$i$i = ((($146)) + 126|0);
         HEAP8[$arrayidx9$i$6$i$i>>0] = $$lobit24$i$i;
         $148 = HEAP32[$0>>2]|0;
         $$lobit25$i$i = ($131&255) >>> 7;
         $cmp7$7$i$i = ($131<<24>>24)<(0);
         if ($cmp7$7$i$i) {
          $arrayidx$i$7$i$i = ((($148)) + 127|0);
          $149 = HEAP8[$arrayidx$i$7$i$i>>0]|0;
          $tobool3$i$7$i$i = ($149<<24>>24)==(0);
          if ($tobool3$i$7$i$i) {
           $interrupt_state$i$7$i$i = ((($148)) + 128|0);
           HEAP8[$interrupt_state$i$7$i$i>>0] = -2;
           $arrayidx9$i$7$i$pre$phi$iZZZZ2D = $arrayidx$i$7$i$i;
          } else {
           $arrayidx9$i$7$i$pre$phi$iZZZZ2D = $arrayidx$i$7$i$i;
          }
         } else {
          $interrupt_state5$i$7$i$i = ((($148)) + 128|0);
          HEAP8[$interrupt_state5$i$7$i$i>>0] = 0;
          $$pre497$i = ((($148)) + 127|0);
          $arrayidx9$i$7$i$pre$phi$iZZZZ2D = $$pre497$i;
         }
         HEAP8[$arrayidx9$i$7$i$pre$phi$iZZZZ2D>>0] = $$lobit25$i$i;
         $add$ptr$32$i$i = ((($rep$i$i)) + 33|0);
         $150 = HEAP8[$add$ptr$32$i$i>>0]|0;
         $151 = HEAP32[$0>>2]|0;
         $data13$i$i = ((($151)) + 5892|0);
         $152 = HEAP32[$data13$i$i>>2]|0;
         $arrayidx14$i$i = ((($152)) + 93|0);
         HEAP8[$arrayidx14$i$i>>0] = $150;
         $arrayidx15$i$i = ((($rep$i$i)) + 34|0);
         $153 = HEAP8[$arrayidx15$i$i>>0]|0;
         $154 = HEAP32[$0>>2]|0;
         $data17$i$i = ((($154)) + 5892|0);
         $155 = HEAP32[$data17$i$i>>2]|0;
         $arrayidx18$i$i = ((($155)) + 94|0);
         HEAP8[$arrayidx18$i$i>>0] = $153;
         $add$ptr$33$i$i = ((($rep$i$i)) + 35|0);
         $156 = HEAP8[$add$ptr$33$i$i>>0]|0;
         $conv21$i$i = $156&255;
         $arrayidx22$i304$i = ((($rep$i$i)) + 36|0);
         $157 = HEAP8[$arrayidx22$i304$i>>0]|0;
         $conv23$i305$i = $157&255;
         $shl24$i$i = $conv23$i305$i << 8;
         $or$i$i = $shl24$i$i | $conv21$i$i;
         $arrayidx25$i$i = ((($rep$i$i)) + 37|0);
         $158 = HEAP8[$arrayidx25$i$i>>0]|0;
         $conv26$i$i = $158&255;
         $shl27$i$i = $conv26$i$i << 16;
         $or28$i$i = $or$i$i | $shl27$i$i;
         $arrayidx29$i$i = ((($rep$i$i)) + 38|0);
         $159 = HEAP8[$arrayidx29$i$i>>0]|0;
         $conv30$i$i = $159&255;
         $shl31$i$i = $conv30$i$i << 24;
         $or32$i$i = $or28$i$i | $shl31$i$i;
         $160 = HEAP32[$0>>2]|0;
         $pc$i306$i = ((($160)) + 132|0);
         HEAP32[$pc$i306$i>>2] = $or32$i$i;
         $incdec$ptr$i173$i$i = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $incdec$ptr4$i182$i$i = ((($reply$i$i$i)) + 2|0);
         HEAP8[$incdec$ptr$i173$i$i>>0] = 79;
         HEAP8[$incdec$ptr4$i182$i$i>>0] = 75;
         $scevgep634$i$i = ((($reply$i$i$i)) + 3|0);
         HEAP32[$vararg_buffer23>>2] = 154;
         (_sprintf($scevgep634$i$i,359251,$vararg_buffer23)|0);
         $161 = HEAP32[$s$i>>2]|0;
         $sub$ptr$lhs$cast$i191$i$i = $scevgep634$i$i;
         $sub$ptr$rhs$cast$i192$i$i = $reply$i$i$i;
         $sub$ptr$sub$i193$i$i = (3 - ($sub$ptr$rhs$cast$i192$i$i))|0;
         $add8$i194$i$i = (($sub$ptr$sub$i193$i$i) + ($sub$ptr$lhs$cast$i191$i$i))|0;
         (_send($161,$reply$i$i$i,$add8$i194$i$i,0)|0);
         break;
        }
        case 103:  {
         $data$i56$i = ((($23)) + 5892|0);
         $162 = HEAP32[$data$i56$i>>2]|0;
         $163 = HEAP8[$162>>0]|0;
         $conv$i$i = $163&255;
         HEAP32[$vararg_buffer26>>2] = $conv$i$i;
         (_sprintf($rep$i$i,359623,$vararg_buffer26)|0);
         $call39$i59$i = (_strlen($rep$i$i)|0);
         $add$ptr44$i$i = (($rep$i$i) + ($call39$i59$i)|0);
         $164 = HEAP32[$0>>2]|0;
         $data$i316$i = ((($164)) + 5892|0);
         $165 = HEAP32[$data$i316$i>>2]|0;
         $arrayidx$i317$i = ((($165)) + 1|0);
         $166 = HEAP8[$arrayidx$i317$i>>0]|0;
         $conv$i318$i = $166&255;
         HEAP32[$vararg_buffer29>>2] = $conv$i318$i;
         (_sprintf($add$ptr44$i$i,359623,$vararg_buffer29)|0);
         $call39$i321$i = (_strlen($add$ptr44$i$i)|0);
         $add$ptr44$1$i$i = (($add$ptr44$i$i) + ($call39$i321$i)|0);
         $167 = HEAP32[$0>>2]|0;
         $data$i324$i = ((($167)) + 5892|0);
         $168 = HEAP32[$data$i324$i>>2]|0;
         $arrayidx$i325$i = ((($168)) + 2|0);
         $169 = HEAP8[$arrayidx$i325$i>>0]|0;
         $conv$i326$i = $169&255;
         HEAP32[$vararg_buffer32>>2] = $conv$i326$i;
         (_sprintf($add$ptr44$1$i$i,359623,$vararg_buffer32)|0);
         $call39$i329$i = (_strlen($add$ptr44$1$i$i)|0);
         $add$ptr44$2$i$i = (($add$ptr44$1$i$i) + ($call39$i329$i)|0);
         $170 = HEAP32[$0>>2]|0;
         $data$i332$i = ((($170)) + 5892|0);
         $171 = HEAP32[$data$i332$i>>2]|0;
         $arrayidx$i333$i = ((($171)) + 3|0);
         $172 = HEAP8[$arrayidx$i333$i>>0]|0;
         $conv$i334$i = $172&255;
         HEAP32[$vararg_buffer35>>2] = $conv$i334$i;
         (_sprintf($add$ptr44$2$i$i,359623,$vararg_buffer35)|0);
         $call39$i337$i = (_strlen($add$ptr44$2$i$i)|0);
         $add$ptr44$3$i$i = (($add$ptr44$2$i$i) + ($call39$i337$i)|0);
         $173 = HEAP32[$0>>2]|0;
         $data$i340$i = ((($173)) + 5892|0);
         $174 = HEAP32[$data$i340$i>>2]|0;
         $arrayidx$i341$i = ((($174)) + 4|0);
         $175 = HEAP8[$arrayidx$i341$i>>0]|0;
         $conv$i342$i = $175&255;
         HEAP32[$vararg_buffer38>>2] = $conv$i342$i;
         (_sprintf($add$ptr44$3$i$i,359623,$vararg_buffer38)|0);
         $call39$i345$i = (_strlen($add$ptr44$3$i$i)|0);
         $add$ptr44$4$i$i = (($add$ptr44$3$i$i) + ($call39$i345$i)|0);
         $176 = HEAP32[$0>>2]|0;
         $data$i348$i = ((($176)) + 5892|0);
         $177 = HEAP32[$data$i348$i>>2]|0;
         $arrayidx$i349$i = ((($177)) + 5|0);
         $178 = HEAP8[$arrayidx$i349$i>>0]|0;
         $conv$i350$i = $178&255;
         HEAP32[$vararg_buffer41>>2] = $conv$i350$i;
         (_sprintf($add$ptr44$4$i$i,359623,$vararg_buffer41)|0);
         $call39$i353$i = (_strlen($add$ptr44$4$i$i)|0);
         $add$ptr44$5$i$i = (($add$ptr44$4$i$i) + ($call39$i353$i)|0);
         $179 = HEAP32[$0>>2]|0;
         $data$i356$i = ((($179)) + 5892|0);
         $180 = HEAP32[$data$i356$i>>2]|0;
         $arrayidx$i357$i = ((($180)) + 6|0);
         $181 = HEAP8[$arrayidx$i357$i>>0]|0;
         $conv$i358$i = $181&255;
         HEAP32[$vararg_buffer44>>2] = $conv$i358$i;
         (_sprintf($add$ptr44$5$i$i,359623,$vararg_buffer44)|0);
         $call39$i361$i = (_strlen($add$ptr44$5$i$i)|0);
         $add$ptr44$6$i$i = (($add$ptr44$5$i$i) + ($call39$i361$i)|0);
         $182 = HEAP32[$0>>2]|0;
         $data$i364$i = ((($182)) + 5892|0);
         $183 = HEAP32[$data$i364$i>>2]|0;
         $arrayidx$i365$i = ((($183)) + 7|0);
         $184 = HEAP8[$arrayidx$i365$i>>0]|0;
         $conv$i366$i = $184&255;
         HEAP32[$vararg_buffer47>>2] = $conv$i366$i;
         (_sprintf($add$ptr44$6$i$i,359623,$vararg_buffer47)|0);
         $call39$i369$i = (_strlen($add$ptr44$6$i$i)|0);
         $add$ptr44$7$i$i = (($add$ptr44$6$i$i) + ($call39$i369$i)|0);
         $185 = HEAP32[$0>>2]|0;
         $data$i372$i = ((($185)) + 5892|0);
         $186 = HEAP32[$data$i372$i>>2]|0;
         $arrayidx$i373$i = ((($186)) + 8|0);
         $187 = HEAP8[$arrayidx$i373$i>>0]|0;
         $conv$i374$i = $187&255;
         HEAP32[$vararg_buffer50>>2] = $conv$i374$i;
         (_sprintf($add$ptr44$7$i$i,359623,$vararg_buffer50)|0);
         $call39$i377$i = (_strlen($add$ptr44$7$i$i)|0);
         $add$ptr44$8$i$i = (($add$ptr44$7$i$i) + ($call39$i377$i)|0);
         $188 = HEAP32[$0>>2]|0;
         $data$i380$i = ((($188)) + 5892|0);
         $189 = HEAP32[$data$i380$i>>2]|0;
         $arrayidx$i381$i = ((($189)) + 9|0);
         $190 = HEAP8[$arrayidx$i381$i>>0]|0;
         $conv$i382$i = $190&255;
         HEAP32[$vararg_buffer53>>2] = $conv$i382$i;
         (_sprintf($add$ptr44$8$i$i,359623,$vararg_buffer53)|0);
         $call39$i385$i = (_strlen($add$ptr44$8$i$i)|0);
         $add$ptr44$9$i$i = (($add$ptr44$8$i$i) + ($call39$i385$i)|0);
         $191 = HEAP32[$0>>2]|0;
         $data$i388$i = ((($191)) + 5892|0);
         $192 = HEAP32[$data$i388$i>>2]|0;
         $arrayidx$i389$i = ((($192)) + 10|0);
         $193 = HEAP8[$arrayidx$i389$i>>0]|0;
         $conv$i390$i = $193&255;
         HEAP32[$vararg_buffer56>>2] = $conv$i390$i;
         (_sprintf($add$ptr44$9$i$i,359623,$vararg_buffer56)|0);
         $call39$i393$i = (_strlen($add$ptr44$9$i$i)|0);
         $add$ptr44$10$i$i = (($add$ptr44$9$i$i) + ($call39$i393$i)|0);
         $194 = HEAP32[$0>>2]|0;
         $data$i396$i = ((($194)) + 5892|0);
         $195 = HEAP32[$data$i396$i>>2]|0;
         $arrayidx$i397$i = ((($195)) + 11|0);
         $196 = HEAP8[$arrayidx$i397$i>>0]|0;
         $conv$i398$i = $196&255;
         HEAP32[$vararg_buffer59>>2] = $conv$i398$i;
         (_sprintf($add$ptr44$10$i$i,359623,$vararg_buffer59)|0);
         $call39$i401$i = (_strlen($add$ptr44$10$i$i)|0);
         $add$ptr44$11$i$i = (($add$ptr44$10$i$i) + ($call39$i401$i)|0);
         $197 = HEAP32[$0>>2]|0;
         $data$i404$i = ((($197)) + 5892|0);
         $198 = HEAP32[$data$i404$i>>2]|0;
         $arrayidx$i405$i = ((($198)) + 12|0);
         $199 = HEAP8[$arrayidx$i405$i>>0]|0;
         $conv$i406$i = $199&255;
         HEAP32[$vararg_buffer62>>2] = $conv$i406$i;
         (_sprintf($add$ptr44$11$i$i,359623,$vararg_buffer62)|0);
         $call39$i409$i = (_strlen($add$ptr44$11$i$i)|0);
         $add$ptr44$12$i$i = (($add$ptr44$11$i$i) + ($call39$i409$i)|0);
         $200 = HEAP32[$0>>2]|0;
         $data$i412$i = ((($200)) + 5892|0);
         $201 = HEAP32[$data$i412$i>>2]|0;
         $arrayidx$i413$i = ((($201)) + 13|0);
         $202 = HEAP8[$arrayidx$i413$i>>0]|0;
         $conv$i414$i = $202&255;
         HEAP32[$vararg_buffer65>>2] = $conv$i414$i;
         (_sprintf($add$ptr44$12$i$i,359623,$vararg_buffer65)|0);
         $call39$i417$i = (_strlen($add$ptr44$12$i$i)|0);
         $add$ptr44$13$i$i = (($add$ptr44$12$i$i) + ($call39$i417$i)|0);
         $203 = HEAP32[$0>>2]|0;
         $data$i420$i = ((($203)) + 5892|0);
         $204 = HEAP32[$data$i420$i>>2]|0;
         $arrayidx$i421$i = ((($204)) + 14|0);
         $205 = HEAP8[$arrayidx$i421$i>>0]|0;
         $conv$i422$i = $205&255;
         HEAP32[$vararg_buffer68>>2] = $conv$i422$i;
         (_sprintf($add$ptr44$13$i$i,359623,$vararg_buffer68)|0);
         $call39$i425$i = (_strlen($add$ptr44$13$i$i)|0);
         $add$ptr44$14$i$i = (($add$ptr44$13$i$i) + ($call39$i425$i)|0);
         $206 = HEAP32[$0>>2]|0;
         $data$i428$i = ((($206)) + 5892|0);
         $207 = HEAP32[$data$i428$i>>2]|0;
         $arrayidx$i429$i = ((($207)) + 15|0);
         $208 = HEAP8[$arrayidx$i429$i>>0]|0;
         $conv$i430$i = $208&255;
         HEAP32[$vararg_buffer71>>2] = $conv$i430$i;
         (_sprintf($add$ptr44$14$i$i,359623,$vararg_buffer71)|0);
         $call39$i433$i = (_strlen($add$ptr44$14$i$i)|0);
         $add$ptr44$15$i$i = (($add$ptr44$14$i$i) + ($call39$i433$i)|0);
         $209 = HEAP32[$0>>2]|0;
         $data$i308$i = ((($209)) + 5892|0);
         $210 = HEAP32[$data$i308$i>>2]|0;
         $arrayidx$i309$i = ((($210)) + 16|0);
         $211 = HEAP8[$arrayidx$i309$i>>0]|0;
         $conv$i310$i = $211&255;
         HEAP32[$vararg_buffer74>>2] = $conv$i310$i;
         (_sprintf($add$ptr44$15$i$i,359623,$vararg_buffer74)|0);
         $call39$i313$i = (_strlen($add$ptr44$15$i$i)|0);
         $add$ptr44$16$i$i = (($add$ptr44$15$i$i) + ($call39$i313$i)|0);
         $212 = HEAP32[$0>>2]|0;
         $data$i297$i = ((($212)) + 5892|0);
         $213 = HEAP32[$data$i297$i>>2]|0;
         $arrayidx$i298$i = ((($213)) + 17|0);
         $214 = HEAP8[$arrayidx$i298$i>>0]|0;
         $conv$i299$i = $214&255;
         HEAP32[$vararg_buffer77>>2] = $conv$i299$i;
         (_sprintf($add$ptr44$16$i$i,359623,$vararg_buffer77)|0);
         $call39$i302$i = (_strlen($add$ptr44$16$i$i)|0);
         $add$ptr44$17$i$i = (($add$ptr44$16$i$i) + ($call39$i302$i)|0);
         $215 = HEAP32[$0>>2]|0;
         $data$i285$i = ((($215)) + 5892|0);
         $216 = HEAP32[$data$i285$i>>2]|0;
         $arrayidx$i286$i = ((($216)) + 18|0);
         $217 = HEAP8[$arrayidx$i286$i>>0]|0;
         $conv$i287$i = $217&255;
         HEAP32[$vararg_buffer80>>2] = $conv$i287$i;
         (_sprintf($add$ptr44$17$i$i,359623,$vararg_buffer80)|0);
         $call39$i290$i = (_strlen($add$ptr44$17$i$i)|0);
         $add$ptr44$18$i$i = (($add$ptr44$17$i$i) + ($call39$i290$i)|0);
         $218 = HEAP32[$0>>2]|0;
         $data$i269$i = ((($218)) + 5892|0);
         $219 = HEAP32[$data$i269$i>>2]|0;
         $arrayidx$i270$i = ((($219)) + 19|0);
         $220 = HEAP8[$arrayidx$i270$i>>0]|0;
         $conv$i271$i = $220&255;
         HEAP32[$vararg_buffer83>>2] = $conv$i271$i;
         (_sprintf($add$ptr44$18$i$i,359623,$vararg_buffer83)|0);
         $call39$i274$i = (_strlen($add$ptr44$18$i$i)|0);
         $add$ptr44$19$i$i = (($add$ptr44$18$i$i) + ($call39$i274$i)|0);
         $221 = HEAP32[$0>>2]|0;
         $data$i253$i = ((($221)) + 5892|0);
         $222 = HEAP32[$data$i253$i>>2]|0;
         $arrayidx$i254$i = ((($222)) + 20|0);
         $223 = HEAP8[$arrayidx$i254$i>>0]|0;
         $conv$i255$i = $223&255;
         HEAP32[$vararg_buffer86>>2] = $conv$i255$i;
         (_sprintf($add$ptr44$19$i$i,359623,$vararg_buffer86)|0);
         $call39$i258$i = (_strlen($add$ptr44$19$i$i)|0);
         $add$ptr44$20$i$i = (($add$ptr44$19$i$i) + ($call39$i258$i)|0);
         $224 = HEAP32[$0>>2]|0;
         $data$i237$i = ((($224)) + 5892|0);
         $225 = HEAP32[$data$i237$i>>2]|0;
         $arrayidx$i238$i = ((($225)) + 21|0);
         $226 = HEAP8[$arrayidx$i238$i>>0]|0;
         $conv$i239$i = $226&255;
         HEAP32[$vararg_buffer89>>2] = $conv$i239$i;
         (_sprintf($add$ptr44$20$i$i,359623,$vararg_buffer89)|0);
         $call39$i242$i = (_strlen($add$ptr44$20$i$i)|0);
         $add$ptr44$21$i$i = (($add$ptr44$20$i$i) + ($call39$i242$i)|0);
         $227 = HEAP32[$0>>2]|0;
         $data$i221$i = ((($227)) + 5892|0);
         $228 = HEAP32[$data$i221$i>>2]|0;
         $arrayidx$i222$i = ((($228)) + 22|0);
         $229 = HEAP8[$arrayidx$i222$i>>0]|0;
         $conv$i223$i = $229&255;
         HEAP32[$vararg_buffer92>>2] = $conv$i223$i;
         (_sprintf($add$ptr44$21$i$i,359623,$vararg_buffer92)|0);
         $call39$i226$i = (_strlen($add$ptr44$21$i$i)|0);
         $add$ptr44$22$i$i = (($add$ptr44$21$i$i) + ($call39$i226$i)|0);
         $230 = HEAP32[$0>>2]|0;
         $data$i205$i = ((($230)) + 5892|0);
         $231 = HEAP32[$data$i205$i>>2]|0;
         $arrayidx$i206$i = ((($231)) + 23|0);
         $232 = HEAP8[$arrayidx$i206$i>>0]|0;
         $conv$i207$i = $232&255;
         HEAP32[$vararg_buffer95>>2] = $conv$i207$i;
         (_sprintf($add$ptr44$22$i$i,359623,$vararg_buffer95)|0);
         $call39$i210$i = (_strlen($add$ptr44$22$i$i)|0);
         $add$ptr44$23$i$i = (($add$ptr44$22$i$i) + ($call39$i210$i)|0);
         $233 = HEAP32[$0>>2]|0;
         $data$i189$i = ((($233)) + 5892|0);
         $234 = HEAP32[$data$i189$i>>2]|0;
         $arrayidx$i190$i = ((($234)) + 24|0);
         $235 = HEAP8[$arrayidx$i190$i>>0]|0;
         $conv$i191$i = $235&255;
         HEAP32[$vararg_buffer98>>2] = $conv$i191$i;
         (_sprintf($add$ptr44$23$i$i,359623,$vararg_buffer98)|0);
         $call39$i194$i = (_strlen($add$ptr44$23$i$i)|0);
         $add$ptr44$24$i$i = (($add$ptr44$23$i$i) + ($call39$i194$i)|0);
         $236 = HEAP32[$0>>2]|0;
         $data$i173$i = ((($236)) + 5892|0);
         $237 = HEAP32[$data$i173$i>>2]|0;
         $arrayidx$i174$i = ((($237)) + 25|0);
         $238 = HEAP8[$arrayidx$i174$i>>0]|0;
         $conv$i175$i = $238&255;
         HEAP32[$vararg_buffer101>>2] = $conv$i175$i;
         (_sprintf($add$ptr44$24$i$i,359623,$vararg_buffer101)|0);
         $call39$i178$i = (_strlen($add$ptr44$24$i$i)|0);
         $add$ptr44$25$i$i = (($add$ptr44$24$i$i) + ($call39$i178$i)|0);
         $239 = HEAP32[$0>>2]|0;
         $data$i157$i = ((($239)) + 5892|0);
         $240 = HEAP32[$data$i157$i>>2]|0;
         $arrayidx$i158$i = ((($240)) + 26|0);
         $241 = HEAP8[$arrayidx$i158$i>>0]|0;
         $conv$i159$i = $241&255;
         HEAP32[$vararg_buffer104>>2] = $conv$i159$i;
         (_sprintf($add$ptr44$25$i$i,359623,$vararg_buffer104)|0);
         $call39$i162$i = (_strlen($add$ptr44$25$i$i)|0);
         $add$ptr44$26$i$i = (($add$ptr44$25$i$i) + ($call39$i162$i)|0);
         $242 = HEAP32[$0>>2]|0;
         $data$i141$i = ((($242)) + 5892|0);
         $243 = HEAP32[$data$i141$i>>2]|0;
         $arrayidx$i142$i = ((($243)) + 27|0);
         $244 = HEAP8[$arrayidx$i142$i>>0]|0;
         $conv$i143$i = $244&255;
         HEAP32[$vararg_buffer107>>2] = $conv$i143$i;
         (_sprintf($add$ptr44$26$i$i,359623,$vararg_buffer107)|0);
         $call39$i146$i = (_strlen($add$ptr44$26$i$i)|0);
         $add$ptr44$27$i$i = (($add$ptr44$26$i$i) + ($call39$i146$i)|0);
         $245 = HEAP32[$0>>2]|0;
         $data$i125$i = ((($245)) + 5892|0);
         $246 = HEAP32[$data$i125$i>>2]|0;
         $arrayidx$i126$i = ((($246)) + 28|0);
         $247 = HEAP8[$arrayidx$i126$i>>0]|0;
         $conv$i127$i = $247&255;
         HEAP32[$vararg_buffer110>>2] = $conv$i127$i;
         (_sprintf($add$ptr44$27$i$i,359623,$vararg_buffer110)|0);
         $call39$i130$i = (_strlen($add$ptr44$27$i$i)|0);
         $add$ptr44$28$i$i = (($add$ptr44$27$i$i) + ($call39$i130$i)|0);
         $248 = HEAP32[$0>>2]|0;
         $data$i109$i = ((($248)) + 5892|0);
         $249 = HEAP32[$data$i109$i>>2]|0;
         $arrayidx$i110$i = ((($249)) + 29|0);
         $250 = HEAP8[$arrayidx$i110$i>>0]|0;
         $conv$i111$i = $250&255;
         HEAP32[$vararg_buffer113>>2] = $conv$i111$i;
         (_sprintf($add$ptr44$28$i$i,359623,$vararg_buffer113)|0);
         $call39$i114$i = (_strlen($add$ptr44$28$i$i)|0);
         $add$ptr44$29$i$i = (($add$ptr44$28$i$i) + ($call39$i114$i)|0);
         $251 = HEAP32[$0>>2]|0;
         $data$i93$i = ((($251)) + 5892|0);
         $252 = HEAP32[$data$i93$i>>2]|0;
         $arrayidx$i94$i = ((($252)) + 30|0);
         $253 = HEAP8[$arrayidx$i94$i>>0]|0;
         $conv$i95$i = $253&255;
         HEAP32[$vararg_buffer116>>2] = $conv$i95$i;
         (_sprintf($add$ptr44$29$i$i,359623,$vararg_buffer116)|0);
         $call39$i98$i = (_strlen($add$ptr44$29$i$i)|0);
         $add$ptr44$30$i$i = (($add$ptr44$29$i$i) + ($call39$i98$i)|0);
         $254 = HEAP32[$0>>2]|0;
         $data$i77$i = ((($254)) + 5892|0);
         $255 = HEAP32[$data$i77$i>>2]|0;
         $arrayidx$i78$i = ((($255)) + 31|0);
         $256 = HEAP8[$arrayidx$i78$i>>0]|0;
         $conv$i79$i = $256&255;
         HEAP32[$vararg_buffer119>>2] = $conv$i79$i;
         (_sprintf($add$ptr44$30$i$i,359623,$vararg_buffer119)|0);
         $call39$i82$i = (_strlen($add$ptr44$30$i$i)|0);
         $add$ptr44$31$i$i = (($add$ptr44$30$i$i) + ($call39$i82$i)|0);
         $call43$32$i$i = (_gdb_read_register($0,32,$add$ptr44$31$i$i)|0);
         $add$ptr44$32$i$i = (($add$ptr44$31$i$i) + ($call43$32$i$i)|0);
         $257 = HEAP32[$0>>2]|0;
         $data21$i$i = ((($257)) + 5892|0);
         $258 = HEAP32[$data21$i$i>>2]|0;
         $arrayidx22$i$i = ((($258)) + 93|0);
         $259 = HEAP8[$arrayidx22$i$i>>0]|0;
         $conv23$i$i = $259&255;
         $arrayidx26$i$i = ((($258)) + 94|0);
         $260 = HEAP8[$arrayidx26$i$i>>0]|0;
         $conv27$i$i = $260&255;
         HEAP32[$vararg_buffer122>>2] = $conv23$i$i;
         $vararg_ptr125 = ((($vararg_buffer122)) + 4|0);
         HEAP32[$vararg_ptr125>>2] = $conv27$i$i;
         (_sprintf($add$ptr44$32$i$i,359628,$vararg_buffer122)|0);
         $call39$i53$i = (_strlen($add$ptr44$32$i$i)|0);
         $add$ptr44$33$i$i = (($add$ptr44$32$i$i) + ($call39$i53$i)|0);
         $261 = HEAP32[$0>>2]|0;
         $pc$i$i = ((($261)) + 132|0);
         $262 = HEAP32[$pc$i$i>>2]|0;
         $and$i48$i = $262 & 255;
         $shr$i$i = $262 >>> 8;
         $and33$i$i = $shr$i$i & 255;
         $shr36$i$i = $262 >>> 16;
         $and37$i$i = $shr36$i$i & 255;
         HEAP32[$vararg_buffer126>>2] = $and$i48$i;
         $vararg_ptr129 = ((($vararg_buffer126)) + 4|0);
         HEAP32[$vararg_ptr129>>2] = $and33$i$i;
         $vararg_ptr130 = ((($vararg_buffer126)) + 8|0);
         HEAP32[$vararg_ptr130>>2] = $and37$i$i;
         (_sprintf($add$ptr44$33$i$i,359637,$vararg_buffer126)|0);
         $incdec$ptr$i198$i$i = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $263 = HEAP8[$rep$i$i>>0]|0;
         $tobool9$i199$i$i = ($263<<24>>24)==(0);
         if ($tobool9$i199$i$i) {
          $check$0$lcssa$i214$i$i = 0;$dst$0$lcssa$i213$i$i = $incdec$ptr$i198$i$i;
         } else {
          $264 = $263;$check$012$i201$i$i = 0;$cmd$addr$010$i203$i$i = $rep$i$i;$dst$011$i202$i$i = $incdec$ptr$i198$i$i;
          while(1) {
           $conv8$i204$i$i = $264&255;
           $conv1$i205$i$i = $check$012$i201$i$i & 255;
           $add$i206$i$i = (($conv1$i205$i$i) + ($conv8$i204$i$i))|0;
           $incdec$ptr3$i207$i$i = ((($cmd$addr$010$i203$i$i)) + 1|0);
           $incdec$ptr4$i208$i$i = ((($dst$011$i202$i$i)) + 1|0);
           HEAP8[$dst$011$i202$i$i>>0] = $264;
           $265 = HEAP8[$incdec$ptr3$i207$i$i>>0]|0;
           $tobool$i209$i$i = ($265<<24>>24)==(0);
           if ($tobool$i209$i$i) {
            break;
           } else {
            $264 = $265;$check$012$i201$i$i = $add$i206$i$i;$cmd$addr$010$i203$i$i = $incdec$ptr3$i207$i$i;$dst$011$i202$i$i = $incdec$ptr4$i208$i$i;
           }
          }
          $phitmp$i211$i$i = $add$i206$i$i & 255;
          $check$0$lcssa$i214$i$i = $phitmp$i211$i$i;$dst$0$lcssa$i213$i$i = $incdec$ptr4$i208$i$i;
         }
         HEAP32[$vararg_buffer131>>2] = $check$0$lcssa$i214$i$i;
         (_sprintf($dst$0$lcssa$i213$i$i,359251,$vararg_buffer131)|0);
         $266 = HEAP32[$s$i>>2]|0;
         $sub$ptr$lhs$cast$i217$i$i = $dst$0$lcssa$i213$i$i;
         $sub$ptr$rhs$cast$i218$i$i = $reply$i$i$i;
         $sub$ptr$sub$i219$i$i = (3 - ($sub$ptr$rhs$cast$i218$i$i))|0;
         $add8$i220$i$i = (($sub$ptr$sub$i219$i$i) + ($sub$ptr$lhs$cast$i217$i$i))|0;
         (_send($266,$reply$i$i$i,$add8$i220$i$i,0)|0);
         break;
        }
        case 112:  {
         HEAP32[$regi$i$i>>2] = 0;
         HEAP32[$vararg_buffer134>>2] = $regi$i$i;
         (_sscanf($incdec$ptr$i$i,359652,$vararg_buffer134)|0);
         $267 = HEAP32[$regi$i$i>>2]|0;
         (_gdb_read_register($0,$267,$rep$i$i)|0);
         $incdec$ptr$i224$i$i = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $268 = HEAP8[$rep$i$i>>0]|0;
         $tobool9$i225$i$i = ($268<<24>>24)==(0);
         if ($tobool9$i225$i$i) {
          $check$0$lcssa$i240$i$i = 0;$dst$0$lcssa$i239$i$i = $incdec$ptr$i224$i$i;
         } else {
          $269 = $268;$check$012$i227$i$i = 0;$cmd$addr$010$i229$i$i = $rep$i$i;$dst$011$i228$i$i = $incdec$ptr$i224$i$i;
          while(1) {
           $conv8$i230$i$i = $269&255;
           $conv1$i231$i$i = $check$012$i227$i$i & 255;
           $add$i232$i$i = (($conv1$i231$i$i) + ($conv8$i230$i$i))|0;
           $incdec$ptr3$i233$i$i = ((($cmd$addr$010$i229$i$i)) + 1|0);
           $incdec$ptr4$i234$i$i = ((($dst$011$i228$i$i)) + 1|0);
           HEAP8[$dst$011$i228$i$i>>0] = $269;
           $270 = HEAP8[$incdec$ptr3$i233$i$i>>0]|0;
           $tobool$i235$i$i = ($270<<24>>24)==(0);
           if ($tobool$i235$i$i) {
            break;
           } else {
            $269 = $270;$check$012$i227$i$i = $add$i232$i$i;$cmd$addr$010$i229$i$i = $incdec$ptr3$i233$i$i;$dst$011$i228$i$i = $incdec$ptr4$i234$i$i;
           }
          }
          $phitmp$i237$i$i = $add$i232$i$i & 255;
          $check$0$lcssa$i240$i$i = $phitmp$i237$i$i;$dst$0$lcssa$i239$i$i = $incdec$ptr4$i234$i$i;
         }
         HEAP32[$vararg_buffer137>>2] = $check$0$lcssa$i240$i$i;
         (_sprintf($dst$0$lcssa$i239$i$i,359251,$vararg_buffer137)|0);
         $271 = HEAP32[$s$i>>2]|0;
         $sub$ptr$lhs$cast$i243$i$i = $dst$0$lcssa$i239$i$i;
         $sub$ptr$rhs$cast$i244$i$i = $reply$i$i$i;
         $sub$ptr$sub$i245$i$i = (3 - ($sub$ptr$rhs$cast$i244$i$i))|0;
         $add8$i246$i$i = (($sub$ptr$sub$i245$i$i) + ($sub$ptr$lhs$cast$i243$i$i))|0;
         (_send($271,$reply$i$i$i,$add8$i246$i$i,0)|0);
         break;
        }
        case 80:  {
         HEAP32[$regi55$i$i>>2] = 0;
         $call56$i$i = (_strchr($incdec$ptr$i$i,61)|0);
         $tobool$i$i = ($call56$i$i|0)==(0|0);
         if (!($tobool$i$i)) {
          $incdec$ptr59$i$i = ((($call56$i$i)) + 1|0);
          HEAP8[$call56$i$i>>0] = 0;
          HEAP32[$vararg_buffer140>>2] = $regi55$i$i;
          (_sscanf($incdec$ptr$i$i,359652,$vararg_buffer140)|0);
          $call62$i$i = (_strlen($incdec$ptr59$i$i)|0);
          (_read_hex_string($incdec$ptr59$i$i,$rep$i$i,$call62$i$i)|0);
          $272 = HEAP32[$regi55$i$i>>2]|0;
          switch ($272|0) {
          case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
           $273 = HEAP8[$rep$i$i>>0]|0;
           $274 = HEAP32[$0>>2]|0;
           $data$i436$i = ((($274)) + 5892|0);
           $275 = HEAP32[$data$i436$i>>2]|0;
           $arrayidx$i437$i = (($275) + ($272)|0);
           HEAP8[$arrayidx$i437$i>>0] = $273;
           break;
          }
          case 32:  {
           $287 = HEAP8[$rep$i$i>>0]|0;
           $288 = HEAP32[$0>>2]|0;
           $data3$i461$i = ((($288)) + 5892|0);
           $289 = HEAP32[$data3$i461$i>>2]|0;
           $arrayidx4$i462$i = ((($289)) + 95|0);
           HEAP8[$arrayidx4$i462$i>>0] = $287;
           $290 = HEAP32[$0>>2]|0;
           $291 = $287 & 1;
           $arrayidx9$i$i463$i = ((($290)) + 120|0);
           HEAP8[$arrayidx9$i$i463$i>>0] = $291;
           $292 = HEAP32[$0>>2]|0;
           $293 = ($287&255) >>> 1;
           $$lobit$i464$i = $293 & 1;
           $arrayidx9$i$1$i465$i = ((($292)) + 121|0);
           HEAP8[$arrayidx9$i$1$i465$i>>0] = $$lobit$i464$i;
           $294 = HEAP32[$0>>2]|0;
           $295 = ($287&255) >>> 2;
           $$lobit20$i466$i = $295 & 1;
           $arrayidx9$i$2$i467$i = ((($294)) + 122|0);
           HEAP8[$arrayidx9$i$2$i467$i>>0] = $$lobit20$i466$i;
           $296 = HEAP32[$0>>2]|0;
           $297 = ($287&255) >>> 3;
           $$lobit21$i468$i = $297 & 1;
           $arrayidx9$i$3$i469$i = ((($296)) + 123|0);
           HEAP8[$arrayidx9$i$3$i469$i>>0] = $$lobit21$i468$i;
           $298 = HEAP32[$0>>2]|0;
           $299 = ($287&255) >>> 4;
           $$lobit22$i470$i = $299 & 1;
           $arrayidx9$i$4$i471$i = ((($298)) + 124|0);
           HEAP8[$arrayidx9$i$4$i471$i>>0] = $$lobit22$i470$i;
           $300 = HEAP32[$0>>2]|0;
           $301 = ($287&255) >>> 5;
           $$lobit23$i472$i = $301 & 1;
           $arrayidx9$i$5$i473$i = ((($300)) + 125|0);
           HEAP8[$arrayidx9$i$5$i473$i>>0] = $$lobit23$i472$i;
           $302 = HEAP32[$0>>2]|0;
           $303 = ($287&255) >>> 6;
           $$lobit24$i474$i = $303 & 1;
           $arrayidx9$i$6$i475$i = ((($302)) + 126|0);
           HEAP8[$arrayidx9$i$6$i475$i>>0] = $$lobit24$i474$i;
           $304 = HEAP32[$0>>2]|0;
           $$lobit25$i476$i = ($287&255) >>> 7;
           $cmp7$7$i477$i = ($287<<24>>24)<(0);
           if ($cmp7$7$i477$i) {
            $arrayidx$i$7$i480$i = ((($304)) + 127|0);
            $305 = HEAP8[$arrayidx$i$7$i480$i>>0]|0;
            $tobool3$i$7$i481$i = ($305<<24>>24)==(0);
            if ($tobool3$i$7$i481$i) {
             $interrupt_state$i$7$i483$i = ((($304)) + 128|0);
             HEAP8[$interrupt_state$i$7$i483$i>>0] = -2;
             $arrayidx9$i$7$i485$pre$phi$iZZZZ2D = $arrayidx$i$7$i480$i;
            } else {
             $arrayidx9$i$7$i485$pre$phi$iZZZZ2D = $arrayidx$i$7$i480$i;
            }
           } else {
            $interrupt_state5$i$7$i478$i = ((($304)) + 128|0);
            HEAP8[$interrupt_state5$i$7$i478$i>>0] = 0;
            $$pre498$i = ((($304)) + 127|0);
            $arrayidx9$i$7$i485$pre$phi$iZZZZ2D = $$pre498$i;
           }
           HEAP8[$arrayidx9$i$7$i485$pre$phi$iZZZZ2D>>0] = $$lobit25$i476$i;
           break;
          }
          case 33:  {
           $276 = HEAP8[$rep$i$i>>0]|0;
           $277 = HEAP32[$0>>2]|0;
           $data13$i440$i = ((($277)) + 5892|0);
           $278 = HEAP32[$data13$i440$i>>2]|0;
           $arrayidx14$i441$i = ((($278)) + 93|0);
           HEAP8[$arrayidx14$i441$i>>0] = $276;
           $arrayidx15$i442$i = ((($rep$i$i)) + 1|0);
           $279 = HEAP8[$arrayidx15$i442$i>>0]|0;
           $280 = HEAP32[$0>>2]|0;
           $data17$i443$i = ((($280)) + 5892|0);
           $281 = HEAP32[$data17$i443$i>>2]|0;
           $arrayidx18$i444$i = ((($281)) + 94|0);
           HEAP8[$arrayidx18$i444$i>>0] = $279;
           break;
          }
          case 34:  {
           $282 = HEAP8[$rep$i$i>>0]|0;
           $conv21$i445$i = $282&255;
           $arrayidx22$i446$i = ((($rep$i$i)) + 1|0);
           $283 = HEAP8[$arrayidx22$i446$i>>0]|0;
           $conv23$i447$i = $283&255;
           $shl24$i448$i = $conv23$i447$i << 8;
           $or$i449$i = $shl24$i448$i | $conv21$i445$i;
           $arrayidx25$i450$i = ((($rep$i$i)) + 2|0);
           $284 = HEAP8[$arrayidx25$i450$i>>0]|0;
           $conv26$i451$i = $284&255;
           $shl27$i452$i = $conv26$i451$i << 16;
           $or28$i453$i = $or$i449$i | $shl27$i452$i;
           $arrayidx29$i454$i = ((($rep$i$i)) + 3|0);
           $285 = HEAP8[$arrayidx29$i454$i>>0]|0;
           $conv30$i455$i = $285&255;
           $shl31$i456$i = $conv30$i455$i << 24;
           $or32$i457$i = $or28$i453$i | $shl31$i456$i;
           $286 = HEAP32[$0>>2]|0;
           $pc$i459$i = ((($286)) + 132|0);
           HEAP32[$pc$i459$i>>2] = $or32$i457$i;
           break;
          }
          default: {
          }
          }
          $incdec$ptr$i250$i$i = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $incdec$ptr4$i259$i$i = ((($reply$i$i$i)) + 2|0);
          HEAP8[$incdec$ptr$i250$i$i>>0] = 79;
          HEAP8[$incdec$ptr4$i259$i$i>>0] = 75;
          $scevgep636$i$i = ((($reply$i$i$i)) + 3|0);
          HEAP32[$vararg_buffer143>>2] = 154;
          (_sprintf($scevgep636$i$i,359251,$vararg_buffer143)|0);
          $306 = HEAP32[$s$i>>2]|0;
          $sub$ptr$lhs$cast$i268$i$i = $scevgep636$i$i;
          $sub$ptr$rhs$cast$i269$i$i = $reply$i$i$i;
          $sub$ptr$sub$i270$i$i = (3 - ($sub$ptr$rhs$cast$i269$i$i))|0;
          $add8$i271$i$i = (($sub$ptr$sub$i270$i$i) + ($sub$ptr$lhs$cast$i268$i$i))|0;
          (_send($306,$reply$i$i$i,$add8$i271$i$i,0)|0);
         }
         break;
        }
        case 109:  {
         HEAP32[$vararg_buffer146>>2] = $addr$i$i;
         $vararg_ptr149 = ((($vararg_buffer146)) + 4|0);
         HEAP32[$vararg_ptr149>>2] = $len$i47$i;
         (_sscanf($incdec$ptr$i$i,359655,$vararg_buffer146)|0);
         $307 = HEAP32[$addr$i$i>>2]|0;
         $and$i$i = $307 & 16777215;
         HEAP32[$addr$i$i>>2] = $and$i$i;
         $flashend70$i$i = ((($23)) + 8|0);
         $308 = HEAP32[$flashend70$i$i>>2]|0;
         $cmp71$i$i = ($and$i$i>>>0)<($308>>>0);
         do {
          if ($cmp71$i$i) {
           $flash$i$i = ((($23)) + 5888|0);
           $309 = HEAP32[$flash$i$i>>2]|0;
           $add$ptr74$i$i = (($309) + ($and$i$i)|0);
           $src69$1$i$i = $add$ptr74$i$i;
           label = 90;
          } else {
           $cmp76$i$i = ($and$i$i>>>0)>(8388607);
           if ($cmp76$i$i) {
            $sub$i$i = (($and$i$i) + -8388608)|0;
            $ramend78$i$i = ((($23)) + 4|0);
            $310 = HEAP16[$ramend78$i$i>>1]|0;
            $conv79$i$i = $310&65535;
            $cmp80$i$i = ($sub$i$i>>>0)>($conv79$i$i>>>0);
            if ($cmp80$i$i) {
             $conv87$pre$phi$i$iZ2D = $conv79$i$i;
            } else {
             $data$i$i = ((($23)) + 5892|0);
             $311 = HEAP32[$data$i$i>>2]|0;
             $add$ptr83$i$i = (($311) + ($and$i$i)|0);
             $add$ptr84$i$i = ((($add$ptr83$i$i)) + -8388608|0);
             $src69$1$i$i = $add$ptr84$i$i;
             label = 90;
             break;
            }
           } else {
            $ramend86$phi$trans$insert$i$i = ((($23)) + 4|0);
            $$pre$i$i = HEAP16[$ramend86$phi$trans$insert$i$i>>1]|0;
            $$pre662$i$i = $$pre$i$i&65535;
            $conv87$pre$phi$i$iZ2D = $$pre662$i$i;
           }
           $add88$i$i = $conv87$pre$phi$i$iZ2D | 8388608;
           $add89$i$i = (($add88$i$i) + 1)|0;
           $cmp90$i$i = ($and$i$i|0)==($add89$i$i|0);
           $312 = HEAP32[$len$i47$i>>2]|0;
           $cmp93$i$i = ($312|0)==(2);
           $or$cond$i$i = $cmp93$i$i & $cmp90$i$i;
           if ($or$cond$i$i) {
            HEAP32[$vararg_buffer150>>2] = $and$i$i;
            $vararg_ptr153 = ((($vararg_buffer150)) + 4|0);
            HEAP32[$vararg_ptr153>>2] = 2;
            _avr_global_logger($23,3,359661,$vararg_buffer150);
            $incdec$ptr$i275$i$i = ((($reply$i$i$i)) + 1|0);
            HEAP8[$reply$i$i$i>>0] = 36;
            $scevgep638$i$i = ((($reply$i$i$i)) + 5|0);
            HEAP8[$incdec$ptr$i275$i$i>>0]=808464432&255;HEAP8[$incdec$ptr$i275$i$i+1>>0]=(808464432>>8)&255;HEAP8[$incdec$ptr$i275$i$i+2>>0]=(808464432>>16)&255;HEAP8[$incdec$ptr$i275$i$i+3>>0]=808464432>>24;
            HEAP32[$vararg_buffer154>>2] = 192;
            (_sprintf($scevgep638$i$i,359251,$vararg_buffer154)|0);
            $313 = HEAP32[$s$i>>2]|0;
            $sub$ptr$lhs$cast$i293$i$i = $scevgep638$i$i;
            $sub$ptr$rhs$cast$i294$i$i = $reply$i$i$i;
            $sub$ptr$sub$i295$i$i = (3 - ($sub$ptr$rhs$cast$i294$i$i))|0;
            $add8$i296$i$i = (($sub$ptr$sub$i295$i$i) + ($sub$ptr$lhs$cast$i293$i$i))|0;
            (_send($313,$reply$i$i$i,$add8$i296$i$i,0)|0);
            break;
           }
           $cmp97$i$i = ($and$i$i>>>0)>(8454143);
           if ($cmp97$i$i) {
            $sub100$i$i = (($and$i$i) + -8454144)|0;
            $e2end$i$i = ((($23)) + 12|0);
            $314 = HEAP32[$e2end$i$i>>2]|0;
            $cmp101$i$i = ($sub100$i$i>>>0)>($314>>>0);
            if (!($cmp101$i$i)) {
             HEAP32[$ee$i$i>>2] = 0;
             $offset$i$i = ((($ee$i$i)) + 4|0);
             $conv106$i$i = $307&65535;
             HEAP16[$offset$i$i>>1] = $conv106$i$i;
             $size$i$i = ((($ee$i$i)) + 8|0);
             HEAP32[$size$i$i>>2] = 0;
             (_avr_ioctl($23,1701144432,$ee$i$i)|0);
             $315 = HEAP32[$ee$i$i>>2]|0;
             $tobool109$i$i = ($315|0)==(0|0);
             if ($tobool109$i$i) {
              $incdec$ptr$i300$i$i = ((($reply$i$i$i)) + 1|0);
              HEAP8[$reply$i$i$i>>0] = 36;
              $incdec$ptr4$i309$i$i = ((($reply$i$i$i)) + 2|0);
              HEAP8[$incdec$ptr$i300$i$i>>0] = 69;
              $incdec$ptr4$i309$1$i$i = ((($reply$i$i$i)) + 3|0);
              HEAP8[$incdec$ptr4$i309$i$i>>0] = 48;
              HEAP8[$incdec$ptr4$i309$1$i$i>>0] = 49;
              $scevgep642$i$i = ((($reply$i$i$i)) + 4|0);
              HEAP32[$vararg_buffer157>>2] = 166;
              (_sprintf($scevgep642$i$i,359251,$vararg_buffer157)|0);
              $316 = HEAP32[$s$i>>2]|0;
              $sub$ptr$lhs$cast$i318$i$i = $scevgep642$i$i;
              $sub$ptr$rhs$cast$i319$i$i = $reply$i$i$i;
              $sub$ptr$sub$i320$i$i = (3 - ($sub$ptr$rhs$cast$i319$i$i))|0;
              $add8$i321$i$i = (($sub$ptr$sub$i320$i$i) + ($sub$ptr$lhs$cast$i318$i$i))|0;
              (_send($316,$reply$i$i$i,$add8$i321$i$i,0)|0);
              break;
             } else {
              $src69$1$i$i = $315;
              label = 90;
              break;
             }
            }
           }
           $add121$i$i = (($conv87$pre$phi$i$iZ2D) + 1)|0;
           HEAP32[$vararg_buffer160>>2] = $and$i$i;
           $vararg_ptr163 = ((($vararg_buffer160)) + 4|0);
           HEAP32[$vararg_ptr163>>2] = $312;
           $vararg_ptr164 = ((($vararg_buffer160)) + 8|0);
           HEAP32[$vararg_ptr164>>2] = $add121$i$i;
           _avr_global_logger($23,1,359722,$vararg_buffer160);
           $incdec$ptr$i325$i$i = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $incdec$ptr4$i334$i$i = ((($reply$i$i$i)) + 2|0);
           HEAP8[$incdec$ptr$i325$i$i>>0] = 69;
           $incdec$ptr4$i334$1$i$i = ((($reply$i$i$i)) + 3|0);
           HEAP8[$incdec$ptr4$i334$i$i>>0] = 48;
           HEAP8[$incdec$ptr4$i334$1$i$i>>0] = 49;
           $scevgep640$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer165>>2] = 166;
           (_sprintf($scevgep640$i$i,359251,$vararg_buffer165)|0);
           $317 = HEAP32[$s$i>>2]|0;
           $sub$ptr$lhs$cast$i343$i$i = $scevgep640$i$i;
           $sub$ptr$rhs$cast$i344$i$i = $reply$i$i$i;
           $sub$ptr$sub$i345$i$i = (3 - ($sub$ptr$rhs$cast$i344$i$i))|0;
           $add8$i346$i$i = (($sub$ptr$sub$i345$i$i) + ($sub$ptr$lhs$cast$i343$i$i))|0;
           (_send($317,$reply$i$i$i,$add8$i346$i$i,0)|0);
          }
         } while(0);
         if ((label|0) == 90) {
          $318 = HEAP32[$len$i47$i>>2]|0;
          $dec627$i$i = (($318) + -1)|0;
          HEAP32[$len$i47$i>>2] = $dec627$i$i;
          $tobool130628$i$i = ($318|0)==(0);
          if ($tobool130628$i$i) {
           $dst128$0$lcssa$i$i = $rep$i$i;
          } else {
           $dst128$0630$i$i = $rep$i$i;$src69$2629$i$i = $src69$1$i$i;
           while(1) {
            $incdec$ptr131$i$i = ((($src69$2629$i$i)) + 1|0);
            $319 = HEAP8[$src69$2629$i$i>>0]|0;
            $conv132$i$i = $319&255;
            HEAP32[$vararg_buffer168>>2] = $conv132$i$i;
            (_sprintf($dst128$0630$i$i,359623,$vararg_buffer168)|0);
            $add$ptr134$i$i = ((($dst128$0630$i$i)) + 2|0);
            $320 = HEAP32[$len$i47$i>>2]|0;
            $dec$i$i = (($320) + -1)|0;
            HEAP32[$len$i47$i>>2] = $dec$i$i;
            $tobool130$i$i = ($320|0)==(0);
            if ($tobool130$i$i) {
             $dst128$0$lcssa$i$i = $add$ptr134$i$i;
             break;
            } else {
             $dst128$0630$i$i = $add$ptr134$i$i;$src69$2629$i$i = $incdec$ptr131$i$i;
            }
           }
          }
          HEAP8[$dst128$0$lcssa$i$i>>0] = 0;
          $incdec$ptr$i350$i$i = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $321 = HEAP8[$rep$i$i>>0]|0;
          $tobool9$i351$i$i = ($321<<24>>24)==(0);
          if ($tobool9$i351$i$i) {
           $check$0$lcssa$i366$i$i = 0;$dst$0$lcssa$i365$i$i = $incdec$ptr$i350$i$i;
          } else {
           $322 = $321;$check$012$i353$i$i = 0;$cmd$addr$010$i355$i$i = $rep$i$i;$dst$011$i354$i$i = $incdec$ptr$i350$i$i;
           while(1) {
            $conv8$i356$i$i = $322&255;
            $conv1$i357$i$i = $check$012$i353$i$i & 255;
            $add$i358$i$i = (($conv1$i357$i$i) + ($conv8$i356$i$i))|0;
            $incdec$ptr3$i359$i$i = ((($cmd$addr$010$i355$i$i)) + 1|0);
            $incdec$ptr4$i360$i$i = ((($dst$011$i354$i$i)) + 1|0);
            HEAP8[$dst$011$i354$i$i>>0] = $322;
            $323 = HEAP8[$incdec$ptr3$i359$i$i>>0]|0;
            $tobool$i361$i$i = ($323<<24>>24)==(0);
            if ($tobool$i361$i$i) {
             break;
            } else {
             $322 = $323;$check$012$i353$i$i = $add$i358$i$i;$cmd$addr$010$i355$i$i = $incdec$ptr3$i359$i$i;$dst$011$i354$i$i = $incdec$ptr4$i360$i$i;
            }
           }
           $phitmp$i363$i$i = $add$i358$i$i & 255;
           $check$0$lcssa$i366$i$i = $phitmp$i363$i$i;$dst$0$lcssa$i365$i$i = $incdec$ptr4$i360$i$i;
          }
          HEAP32[$vararg_buffer171>>2] = $check$0$lcssa$i366$i$i;
          (_sprintf($dst$0$lcssa$i365$i$i,359251,$vararg_buffer171)|0);
          $324 = HEAP32[$s$i>>2]|0;
          $sub$ptr$lhs$cast$i369$i$i = $dst$0$lcssa$i365$i$i;
          $sub$ptr$rhs$cast$i370$i$i = $reply$i$i$i;
          $sub$ptr$sub$i371$i$i = (3 - ($sub$ptr$rhs$cast$i370$i$i))|0;
          $add8$i372$i$i = (($sub$ptr$sub$i371$i$i) + ($sub$ptr$lhs$cast$i369$i$i))|0;
          (_send($324,$reply$i$i$i,$add8$i372$i$i,0)|0);
         }
         break;
        }
        case 77:  {
         HEAP32[$vararg_buffer174>>2] = $addr142$i$i;
         $vararg_ptr177 = ((($vararg_buffer174)) + 4|0);
         HEAP32[$vararg_ptr177>>2] = $len143$i$i;
         (_sscanf($incdec$ptr$i$i,359655,$vararg_buffer174)|0);
         $call145$i$i = (_strchr($incdec$ptr$i$i,58)|0);
         $tobool146$i$i = ($call145$i$i|0)==(0|0);
         L140: do {
          if ($tobool146$i$i) {
           $incdec$ptr$i376$i$i = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $incdec$ptr4$i385$i$i = ((($reply$i$i$i)) + 2|0);
           HEAP8[$incdec$ptr$i376$i$i>>0] = 69;
           $incdec$ptr4$i385$1$i$i = ((($reply$i$i$i)) + 3|0);
           HEAP8[$incdec$ptr4$i385$i$i>>0] = 48;
           HEAP8[$incdec$ptr4$i385$1$i$i>>0] = 49;
           $scevgep644$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer178>>2] = 166;
           (_sprintf($scevgep644$i$i,359251,$vararg_buffer178)|0);
           $325 = HEAP32[$s$i>>2]|0;
           $sub$ptr$lhs$cast$i394$i$i = $scevgep644$i$i;
           $sub$ptr$rhs$cast$i395$i$i = $reply$i$i$i;
           $sub$ptr$sub$i396$i$i = (3 - ($sub$ptr$rhs$cast$i395$i$i))|0;
           $add8$i397$i$i = (($sub$ptr$sub$i396$i$i) + ($sub$ptr$lhs$cast$i394$i$i))|0;
           (_send($325,$reply$i$i$i,$add8$i397$i$i,0)|0);
          } else {
           $326 = HEAP32[$addr142$i$i>>2]|0;
           $cmp149$i$i = ($326>>>0)<(65535);
           if ($cmp149$i$i) {
            $add$ptr152$i$i = ((($call145$i$i)) + 1|0);
            $flash153$i$i = ((($23)) + 5888|0);
            $327 = HEAP32[$flash153$i$i>>2]|0;
            $add$ptr154$i$i = (($327) + ($326)|0);
            $call156$i$i = (_strlen($add$ptr152$i$i)|0);
            (_read_hex_string($add$ptr152$i$i,$add$ptr154$i$i,$call156$i$i)|0);
            $incdec$ptr$i401$i$i = ((($reply$i$i$i)) + 1|0);
            HEAP8[$reply$i$i$i>>0] = 36;
            $incdec$ptr4$i410$i$i = ((($reply$i$i$i)) + 2|0);
            HEAP8[$incdec$ptr$i401$i$i>>0] = 79;
            HEAP8[$incdec$ptr4$i410$i$i>>0] = 75;
            $scevgep646$i$i = ((($reply$i$i$i)) + 3|0);
            HEAP32[$vararg_buffer181>>2] = 154;
            (_sprintf($scevgep646$i$i,359251,$vararg_buffer181)|0);
            $328 = HEAP32[$s$i>>2]|0;
            $sub$ptr$lhs$cast$i419$i$i = $scevgep646$i$i;
            $sub$ptr$rhs$cast$i420$i$i = $reply$i$i$i;
            $sub$ptr$sub$i421$i$i = (3 - ($sub$ptr$rhs$cast$i420$i$i))|0;
            $add8$i422$i$i = (($sub$ptr$sub$i421$i$i) + ($sub$ptr$lhs$cast$i419$i$i))|0;
            (_send($328,$reply$i$i$i,$add8$i422$i$i,0)|0);
            break;
           }
           $cmp159$i$i = ($326>>>0)>(8388607);
           do {
            if ($cmp159$i$i) {
             $sub162$i$i = (($326) + -8388608)|0;
             $ramend163$i$i = ((($23)) + 4|0);
             $329 = HEAP16[$ramend163$i$i>>1]|0;
             $conv164$i$i = $329&65535;
             $cmp165$i$i = ($sub162$i$i>>>0)>($conv164$i$i>>>0);
             if (!($cmp165$i$i)) {
              $add$ptr168$i$i = ((($call145$i$i)) + 1|0);
              $data169$i$i = ((($23)) + 5892|0);
              $330 = HEAP32[$data169$i$i>>2]|0;
              $add$ptr170$i$i = (($330) + ($326)|0);
              $add$ptr171$i$i = ((($add$ptr170$i$i)) + -8388608|0);
              $call173$i$i = (_strlen($add$ptr168$i$i)|0);
              (_read_hex_string($add$ptr168$i$i,$add$ptr171$i$i,$call173$i$i)|0);
              $incdec$ptr$i426$i$i = ((($reply$i$i$i)) + 1|0);
              HEAP8[$reply$i$i$i>>0] = 36;
              $incdec$ptr4$i435$i$i = ((($reply$i$i$i)) + 2|0);
              HEAP8[$incdec$ptr$i426$i$i>>0] = 79;
              HEAP8[$incdec$ptr4$i435$i$i>>0] = 75;
              $scevgep652$i$i = ((($reply$i$i$i)) + 3|0);
              HEAP32[$vararg_buffer184>>2] = 154;
              (_sprintf($scevgep652$i$i,359251,$vararg_buffer184)|0);
              $331 = HEAP32[$s$i>>2]|0;
              $sub$ptr$lhs$cast$i444$i$i = $scevgep652$i$i;
              $sub$ptr$rhs$cast$i445$i$i = $reply$i$i$i;
              $sub$ptr$sub$i446$i$i = (3 - ($sub$ptr$rhs$cast$i445$i$i))|0;
              $add8$i447$i$i = (($sub$ptr$sub$i446$i$i) + ($sub$ptr$lhs$cast$i444$i$i))|0;
              (_send($331,$reply$i$i$i,$add8$i447$i$i,0)|0);
              break L140;
             }
             $cmp176$i$i = ($326>>>0)>(8454143);
             if ($cmp176$i$i) {
              $sub179$i$i = (($326) + -8454144)|0;
              $e2end180$i$i = ((($23)) + 12|0);
              $332 = HEAP32[$e2end180$i$i>>2]|0;
              $cmp181$i$i = ($sub179$i$i>>>0)>($332>>>0);
              if ($cmp181$i$i) {
               break;
              }
              $add$ptr184$i$i = ((($call145$i$i)) + 1|0);
              $call187$i$i = (_strlen($add$ptr184$i$i)|0);
              (_read_hex_string($add$ptr184$i$i,$rep$i$i,$call187$i$i)|0);
              HEAP32[$ee189$i$i>>2] = $rep$i$i;
              $offset192$i$i = ((($ee189$i$i)) + 4|0);
              $333 = HEAP32[$addr142$i$i>>2]|0;
              $conv194$i$i = $333&65535;
              HEAP16[$offset192$i$i>>1] = $conv194$i$i;
              $size195$i$i = ((($ee189$i$i)) + 8|0);
              $334 = HEAP32[$len143$i$i>>2]|0;
              HEAP32[$size195$i$i>>2] = $334;
              (_avr_ioctl($23,1701147504,$ee189$i$i)|0);
              $incdec$ptr$i451$i$i = ((($reply$i$i$i)) + 1|0);
              HEAP8[$reply$i$i$i>>0] = 36;
              $incdec$ptr4$i460$i$i = ((($reply$i$i$i)) + 2|0);
              HEAP8[$incdec$ptr$i451$i$i>>0] = 79;
              HEAP8[$incdec$ptr4$i460$i$i>>0] = 75;
              $scevgep650$i$i = ((($reply$i$i$i)) + 3|0);
              HEAP32[$vararg_buffer187>>2] = 154;
              (_sprintf($scevgep650$i$i,359251,$vararg_buffer187)|0);
              $335 = HEAP32[$s$i>>2]|0;
              $sub$ptr$lhs$cast$i469$i$i = $scevgep650$i$i;
              $sub$ptr$rhs$cast$i470$i$i = $reply$i$i$i;
              $sub$ptr$sub$i471$i$i = (3 - ($sub$ptr$rhs$cast$i470$i$i))|0;
              $add8$i472$i$i = (($sub$ptr$sub$i471$i$i) + ($sub$ptr$lhs$cast$i469$i$i))|0;
              (_send($335,$reply$i$i$i,$add8$i472$i$i,0)|0);
              break L140;
             }
            }
           } while(0);
           $336 = HEAP32[$len143$i$i>>2]|0;
           HEAP32[$vararg_buffer190>>2] = $326;
           $vararg_ptr193 = ((($vararg_buffer190)) + 4|0);
           HEAP32[$vararg_ptr193>>2] = $336;
           _avr_global_logger($23,1,359771,$vararg_buffer190);
           $incdec$ptr$i476$i$i = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $incdec$ptr4$i485$i$i = ((($reply$i$i$i)) + 2|0);
           HEAP8[$incdec$ptr$i476$i$i>>0] = 69;
           $incdec$ptr4$i485$1$i$i = ((($reply$i$i$i)) + 3|0);
           HEAP8[$incdec$ptr4$i485$i$i>>0] = 48;
           HEAP8[$incdec$ptr4$i485$1$i$i>>0] = 49;
           $scevgep648$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer194>>2] = 166;
           (_sprintf($scevgep648$i$i,359251,$vararg_buffer194)|0);
           $337 = HEAP32[$s$i>>2]|0;
           $sub$ptr$lhs$cast$i494$i$i = $scevgep648$i$i;
           $sub$ptr$rhs$cast$i495$i$i = $reply$i$i$i;
           $sub$ptr$sub$i496$i$i = (3 - ($sub$ptr$rhs$cast$i495$i$i))|0;
           $add8$i497$i$i = (($sub$ptr$sub$i496$i$i) + ($sub$ptr$lhs$cast$i494$i$i))|0;
           (_send($337,$reply$i$i$i,$add8$i497$i$i,0)|0);
          }
         } while(0);
         break;
        }
        case 99:  {
         $state$i$i = ((($23)) + 36|0);
         HEAP32[$state$i$i>>2] = 2;
         break;
        }
        case 115:  {
         $state211$i$i = ((($23)) + 36|0);
         HEAP32[$state211$i$i>>2] = 4;
         break;
        }
        case 114:  {
         $state213$i$i = ((($23)) + 36|0);
         HEAP32[$state213$i$i>>2] = 5;
         _avr_reset($23);
         break;
        }
        case 122: case 90:  {
         $cmp218$i$i = ($24<<24>>24)==(90);
         $conv219$i$i = $cmp218$i$i&1;
         HEAP32[$vararg_buffer197>>2] = $kind$i$i;
         $vararg_ptr200 = ((($vararg_buffer197)) + 4|0);
         HEAP32[$vararg_ptr200>>2] = $addr215$i$i;
         $vararg_ptr201 = ((($vararg_buffer197)) + 8|0);
         HEAP32[$vararg_ptr201>>2] = $len216$i$i;
         (_sscanf($incdec$ptr$i$i,359807,$vararg_buffer197)|0);
         $338 = HEAP32[$kind$i$i>>2]|0;
         L159: do {
          switch ($338|0) {
          case 1: case 0:  {
           $339 = HEAP32[$addr215$i$i>>2]|0;
           $flashend222$i$i = ((($23)) + 8|0);
           $340 = HEAP32[$flashend222$i$i>>2]|0;
           $cmp223$i$i = ($339>>>0)>($340>>>0);
           if (!($cmp223$i$i)) {
            $breakpoints$i$i = ((($0)) + 12|0);
            $shl$i$i = 1 << $338;
            $341 = HEAP32[$len216$i$i>>2]|0;
            $call225$i$i = (_gdb_change_breakpoint($breakpoints$i$i,$conv219$i$i,$shl$i$i,$339,$341)|0);
            $cmp226$i$i = ($call225$i$i|0)==(-1);
            if (!($cmp226$i$i)) {
             $incdec$ptr$i526$i$i = ((($reply$i$i$i)) + 1|0);
             HEAP8[$reply$i$i$i>>0] = 36;
             $incdec$ptr4$i535$i$i = ((($reply$i$i$i)) + 2|0);
             HEAP8[$incdec$ptr$i526$i$i>>0] = 79;
             HEAP8[$incdec$ptr4$i535$i$i>>0] = 75;
             $scevgep656$i$i = ((($reply$i$i$i)) + 3|0);
             HEAP32[$vararg_buffer205>>2] = 154;
             (_sprintf($scevgep656$i$i,359251,$vararg_buffer205)|0);
             $343 = HEAP32[$s$i>>2]|0;
             $sub$ptr$lhs$cast$i544$i$i = $scevgep656$i$i;
             $sub$ptr$rhs$cast$i545$i$i = $reply$i$i$i;
             $sub$ptr$sub$i546$i$i = (3 - ($sub$ptr$rhs$cast$i545$i$i))|0;
             $add8$i547$i$i = (($sub$ptr$sub$i546$i$i) + ($sub$ptr$lhs$cast$i544$i$i))|0;
             (_send($343,$reply$i$i$i,$add8$i547$i$i,0)|0);
             break L159;
            }
           }
           $incdec$ptr$i501$i$i = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $incdec$ptr4$i510$i$i = ((($reply$i$i$i)) + 2|0);
           HEAP8[$incdec$ptr$i501$i$i>>0] = 69;
           $incdec$ptr4$i510$1$i$i = ((($reply$i$i$i)) + 3|0);
           HEAP8[$incdec$ptr4$i510$i$i>>0] = 48;
           HEAP8[$incdec$ptr4$i510$1$i$i>>0] = 49;
           $scevgep654$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer202>>2] = 166;
           (_sprintf($scevgep654$i$i,359251,$vararg_buffer202)|0);
           $342 = HEAP32[$s$i>>2]|0;
           $sub$ptr$lhs$cast$i519$i$i = $scevgep654$i$i;
           $sub$ptr$rhs$cast$i520$i$i = $reply$i$i$i;
           $sub$ptr$sub$i521$i$i = (3 - ($sub$ptr$rhs$cast$i520$i$i))|0;
           $add8$i522$i$i = (($sub$ptr$sub$i521$i$i) + ($sub$ptr$lhs$cast$i519$i$i))|0;
           (_send($342,$reply$i$i$i,$add8$i522$i$i,0)|0);
           break;
          }
          case 4: case 3: case 2:  {
           $344 = HEAP32[$addr215$i$i>>2]|0;
           $and231$i$i = $344 & -8388609;
           HEAP32[$addr215$i$i>>2] = $and231$i$i;
           $ramend232$i$i = ((($23)) + 4|0);
           $345 = HEAP16[$ramend232$i$i>>1]|0;
           $conv233$i$i = $345&65535;
           $cmp234$i$i = ($and231$i$i>>>0)>($conv233$i$i>>>0);
           if (!($cmp234$i$i)) {
            $watchpoints$i$i = ((($0)) + 400|0);
            $shl237$i$i = 1 << $338;
            $346 = HEAP32[$len216$i$i>>2]|0;
            $call238$i$i = (_gdb_change_breakpoint($watchpoints$i$i,$conv219$i$i,$shl237$i$i,$and231$i$i,$346)|0);
            $cmp239$i$i = ($call238$i$i|0)==(-1);
            if (!($cmp239$i$i)) {
             $incdec$ptr$i576$i$i = ((($reply$i$i$i)) + 1|0);
             HEAP8[$reply$i$i$i>>0] = 36;
             $incdec$ptr4$i585$i$i = ((($reply$i$i$i)) + 2|0);
             HEAP8[$incdec$ptr$i576$i$i>>0] = 79;
             HEAP8[$incdec$ptr4$i585$i$i>>0] = 75;
             $scevgep660$i$i = ((($reply$i$i$i)) + 3|0);
             HEAP32[$vararg_buffer211>>2] = 154;
             (_sprintf($scevgep660$i$i,359251,$vararg_buffer211)|0);
             $348 = HEAP32[$s$i>>2]|0;
             $sub$ptr$lhs$cast$i594$i$i = $scevgep660$i$i;
             $sub$ptr$rhs$cast$i595$i$i = $reply$i$i$i;
             $sub$ptr$sub$i596$i$i = (3 - ($sub$ptr$rhs$cast$i595$i$i))|0;
             $add8$i597$i$i = (($sub$ptr$sub$i596$i$i) + ($sub$ptr$lhs$cast$i594$i$i))|0;
             (_send($348,$reply$i$i$i,$add8$i597$i$i,0)|0);
             break L159;
            }
           }
           $incdec$ptr$i551$i$i = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $incdec$ptr4$i560$i$i = ((($reply$i$i$i)) + 2|0);
           HEAP8[$incdec$ptr$i551$i$i>>0] = 69;
           $incdec$ptr4$i560$1$i$i = ((($reply$i$i$i)) + 3|0);
           HEAP8[$incdec$ptr4$i560$i$i>>0] = 48;
           HEAP8[$incdec$ptr4$i560$1$i$i>>0] = 49;
           $scevgep658$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer208>>2] = 166;
           (_sprintf($scevgep658$i$i,359251,$vararg_buffer208)|0);
           $347 = HEAP32[$s$i>>2]|0;
           $sub$ptr$lhs$cast$i569$i$i = $scevgep658$i$i;
           $sub$ptr$rhs$cast$i570$i$i = $reply$i$i$i;
           $sub$ptr$sub$i571$i$i = (3 - ($sub$ptr$rhs$cast$i570$i$i))|0;
           $add8$i572$i$i = (($sub$ptr$sub$i571$i$i) + ($sub$ptr$lhs$cast$i569$i$i))|0;
           (_send($347,$reply$i$i$i,$add8$i572$i$i,0)|0);
           break;
          }
          default: {
           $incdec$ptr$i601$i$i = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           HEAP32[$vararg_buffer214>>2] = 0;
           (_sprintf($incdec$ptr$i601$i$i,359251,$vararg_buffer214)|0);
           $349 = HEAP32[$s$i>>2]|0;
           $sub$ptr$lhs$cast$i606$i$i = $incdec$ptr$i601$i$i;
           $sub$ptr$rhs$cast$i607$i$i = $reply$i$i$i;
           $sub$ptr$sub$i608$i$i = (3 - ($sub$ptr$rhs$cast$i607$i$i))|0;
           $add8$i609$i$i = (($sub$ptr$sub$i608$i$i) + ($sub$ptr$lhs$cast$i606$i$i))|0;
           (_send($349,$reply$i$i$i,$add8$i609$i$i,0)|0);
          }
          }
         } while(0);
         break;
        }
        default: {
         $incdec$ptr$i612$i$i = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         HEAP32[$vararg_buffer217>>2] = 0;
         (_sprintf($incdec$ptr$i612$i$i,359251,$vararg_buffer217)|0);
         $350 = HEAP32[$s$i>>2]|0;
         $sub$ptr$lhs$cast$i617$i$i = $incdec$ptr$i612$i$i;
         $sub$ptr$rhs$cast$i618$i$i = $reply$i$i$i;
         $sub$ptr$sub$i619$i$i = (3 - ($sub$ptr$rhs$cast$i618$i$i))|0;
         $add8$i620$i$i = (($sub$ptr$sub$i619$i$i) + ($sub$ptr$lhs$cast$i617$i$i))|0;
         (_send($350,$reply$i$i$i,$add8$i620$i$i,0)|0);
        }
        }
       } while(0);
      }
      $retval$1$i = 1;
      break L21;
     }
     }
    }
   }
  }
 } while(0);
 $retval$0 = $retval$1$i;
 STACKTOP = sp;return ($retval$0|0);
}
function _gdb_send_quick_status($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add8$i = 0, $and = 0, $and14 = 0, $and18 = 0, $arrayidx = 0, $arrayidx5 = 0, $arrayidx9 = 0, $check$0$lcssa$i = 0, $check$012$i = 0;
 var $cmd = 0, $cmd$addr$010$i = 0, $conv1$i = 0, $conv10 = 0, $conv2 = 0, $conv6 = 0, $conv8$i = 0, $data = 0, $dst$0$lcssa$i = 0, $dst$011$i = 0, $incdec$ptr$i = 0, $incdec$ptr3$i = 0, $incdec$ptr4$i = 0, $pc = 0, $phitmp$i = 0, $reply$i = 0, $s$i = 0, $shr = 0, $shr17 = 0, $sub$ptr$lhs$cast$i = 0;
 var $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i = 0, $tobool9$i = 0, $vararg_buffer = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $vararg_buffer7 = sp + 1120|0;
 $vararg_buffer = sp + 1088|0;
 $reply$i = sp + 64|0;
 $cmd = sp;
 $0 = HEAP32[$g>>2]|0;
 $data = ((($0)) + 5892|0);
 $1 = HEAP32[$data>>2]|0;
 $arrayidx = ((($1)) + 95|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $conv2 = $2&255;
 $arrayidx5 = ((($1)) + 93|0);
 $3 = HEAP8[$arrayidx5>>0]|0;
 $conv6 = $3&255;
 $arrayidx9 = ((($1)) + 94|0);
 $4 = HEAP8[$arrayidx9>>0]|0;
 $conv10 = $4&255;
 $pc = ((($0)) + 132|0);
 $5 = HEAP32[$pc>>2]|0;
 $and = $5 & 255;
 $shr = $5 >>> 8;
 $and14 = $shr & 255;
 $shr17 = $5 >>> 16;
 $and18 = $shr17 & 255;
 HEAP32[$vararg_buffer>>2] = 5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $conv2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $conv6;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $conv10;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $and;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $and14;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $and18;
 (_sprintf($cmd,359834,$vararg_buffer)|0);
 $incdec$ptr$i = ((($reply$i)) + 1|0);
 HEAP8[$reply$i>>0] = 36;
 $6 = HEAP8[$cmd>>0]|0;
 $tobool9$i = ($6<<24>>24)==(0);
 if ($tobool9$i) {
  $check$0$lcssa$i = 0;$dst$0$lcssa$i = $incdec$ptr$i;
 } else {
  $7 = $6;$check$012$i = 0;$cmd$addr$010$i = $cmd;$dst$011$i = $incdec$ptr$i;
  while(1) {
   $conv8$i = $7&255;
   $conv1$i = $check$012$i & 255;
   $add$i = (($conv1$i) + ($conv8$i))|0;
   $incdec$ptr3$i = ((($cmd$addr$010$i)) + 1|0);
   $incdec$ptr4$i = ((($dst$011$i)) + 1|0);
   HEAP8[$dst$011$i>>0] = $7;
   $8 = HEAP8[$incdec$ptr3$i>>0]|0;
   $tobool$i = ($8<<24>>24)==(0);
   if ($tobool$i) {
    break;
   } else {
    $7 = $8;$check$012$i = $add$i;$cmd$addr$010$i = $incdec$ptr3$i;$dst$011$i = $incdec$ptr4$i;
   }
  }
  $phitmp$i = $add$i & 255;
  $check$0$lcssa$i = $phitmp$i;$dst$0$lcssa$i = $incdec$ptr4$i;
 }
 HEAP32[$vararg_buffer7>>2] = $check$0$lcssa$i;
 (_sprintf($dst$0$lcssa$i,359251,$vararg_buffer7)|0);
 $s$i = ((($g)) + 8|0);
 $9 = HEAP32[$s$i>>2]|0;
 $sub$ptr$lhs$cast$i = $dst$0$lcssa$i;
 $sub$ptr$rhs$cast$i = $reply$i;
 $sub$ptr$sub$i = (3 - ($sub$ptr$rhs$cast$i))|0;
 $add8$i = (($sub$ptr$sub$i) + ($sub$ptr$lhs$cast$i))|0;
 (_send($9,$reply$i,$add8$i,0)|0);
 STACKTOP = sp;return;
}
function _gdb_read_register($g,$regi,$rep) {
 $g = $g|0;
 $regi = $regi|0;
 $rep = $rep|0;
 var $$pre = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $$pre24 = 0, $$pre25 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0;
 var $and33 = 0, $and37 = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx26 = 0, $arrayidx5 = 0, $arrayidx5$1 = 0, $arrayidx5$2 = 0, $arrayidx5$3 = 0, $arrayidx5$4 = 0, $arrayidx5$5 = 0, $arrayidx5$6 = 0, $arrayidx5$7 = 0, $call39 = 0, $cmp7 = 0, $cmp7$1 = 0, $cmp7$2 = 0, $cmp7$3 = 0, $cmp7$4 = 0, $cmp7$5 = 0;
 var $cmp7$6 = 0, $cmp7$7 = 0, $conv = 0, $conv17 = 0, $conv23 = 0, $conv27 = 0, $data = 0, $data21 = 0, $pc = 0, $shr = 0, $shr36 = 0, $spec$select = 0, $spec$select27 = 0, $spec$select28 = 0, $spec$select29 = 0, $spec$select30 = 0, $spec$select31 = 0, $spec$select32 = 0, $spec$select33 = 0, $sreg$1 = 0;
 var $sreg$1$1 = 0, $sreg$1$2 = 0, $sreg$1$3 = 0, $sreg$1$4 = 0, $sreg$1$5 = 0, $sreg$1$6 = 0, $sreg$1$7 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$4 = 0, $tobool$5 = 0, $tobool$6 = 0, $tobool$7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 switch ($regi|0) {
 case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  $0 = HEAP32[$g>>2]|0;
  $data = ((($0)) + 5892|0);
  $1 = HEAP32[$data>>2]|0;
  $arrayidx = (($1) + ($regi)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $conv = $2&255;
  HEAP32[$vararg_buffer>>2] = $conv;
  (_sprintf($rep,359623,$vararg_buffer)|0);
  $call39 = (_strlen($rep)|0);
  STACKTOP = sp;return ($call39|0);
  break;
 }
 case 32:  {
  $3 = HEAP32[$g>>2]|0;
  $arrayidx5 = ((($3)) + 120|0);
  $4 = HEAP8[$arrayidx5>>0]|0;
  $cmp7 = ($4&255)>(1);
  if ($cmp7) {
   (_puts(359816)|0);
   $$pre = HEAP32[$g>>2]|0;
   $5 = $$pre;$sreg$1 = 0;
  } else {
   $tobool = ($4<<24>>24)!=(0);
   $spec$select = $tobool&1;
   $5 = $3;$sreg$1 = $spec$select;
  }
  $arrayidx5$1 = ((($5)) + 121|0);
  $6 = HEAP8[$arrayidx5$1>>0]|0;
  $cmp7$1 = ($6&255)>(1);
  if ($cmp7$1) {
   (_puts(359816)|0);
   $$pre21 = HEAP32[$g>>2]|0;
   $14 = $$pre21;$sreg$1$1 = $sreg$1;
  } else {
   $tobool$1 = ($6<<24>>24)==(0);
   $13 = $sreg$1 | 2;
   $spec$select27 = $tobool$1 ? $sreg$1 : $13;
   $14 = $5;$sreg$1$1 = $spec$select27;
  }
  $arrayidx5$2 = ((($14)) + 122|0);
  $15 = HEAP8[$arrayidx5$2>>0]|0;
  $cmp7$2 = ($15&255)>(1);
  if ($cmp7$2) {
   (_puts(359816)|0);
   $$pre22 = HEAP32[$g>>2]|0;
   $17 = $$pre22;$sreg$1$2 = $sreg$1$1;
  } else {
   $tobool$2 = ($15<<24>>24)==(0);
   $16 = $sreg$1$1 | 4;
   $spec$select28 = $tobool$2 ? $sreg$1$1 : $16;
   $17 = $14;$sreg$1$2 = $spec$select28;
  }
  $arrayidx5$3 = ((($17)) + 123|0);
  $18 = HEAP8[$arrayidx5$3>>0]|0;
  $cmp7$3 = ($18&255)>(1);
  if ($cmp7$3) {
   (_puts(359816)|0);
   $$pre23 = HEAP32[$g>>2]|0;
   $20 = $$pre23;$sreg$1$3 = $sreg$1$2;
  } else {
   $tobool$3 = ($18<<24>>24)==(0);
   $19 = $sreg$1$2 | 8;
   $spec$select29 = $tobool$3 ? $sreg$1$2 : $19;
   $20 = $17;$sreg$1$3 = $spec$select29;
  }
  $arrayidx5$4 = ((($20)) + 124|0);
  $21 = HEAP8[$arrayidx5$4>>0]|0;
  $cmp7$4 = ($21&255)>(1);
  if ($cmp7$4) {
   (_puts(359816)|0);
   $$pre24 = HEAP32[$g>>2]|0;
   $23 = $$pre24;$sreg$1$4 = $sreg$1$3;
  } else {
   $tobool$4 = ($21<<24>>24)==(0);
   $22 = $sreg$1$3 | 16;
   $spec$select30 = $tobool$4 ? $sreg$1$3 : $22;
   $23 = $20;$sreg$1$4 = $spec$select30;
  }
  $arrayidx5$5 = ((($23)) + 125|0);
  $24 = HEAP8[$arrayidx5$5>>0]|0;
  $cmp7$5 = ($24&255)>(1);
  if ($cmp7$5) {
   (_puts(359816)|0);
   $$pre25 = HEAP32[$g>>2]|0;
   $26 = $$pre25;$sreg$1$5 = $sreg$1$4;
  } else {
   $tobool$5 = ($24<<24>>24)==(0);
   $25 = $sreg$1$4 | 32;
   $spec$select31 = $tobool$5 ? $sreg$1$4 : $25;
   $26 = $23;$sreg$1$5 = $spec$select31;
  }
  $arrayidx5$6 = ((($26)) + 126|0);
  $27 = HEAP8[$arrayidx5$6>>0]|0;
  $cmp7$6 = ($27&255)>(1);
  if ($cmp7$6) {
   (_puts(359816)|0);
   $$pre26 = HEAP32[$g>>2]|0;
   $29 = $$pre26;$sreg$1$6 = $sreg$1$5;
  } else {
   $tobool$6 = ($27<<24>>24)==(0);
   $28 = $sreg$1$5 | 64;
   $spec$select32 = $tobool$6 ? $sreg$1$5 : $28;
   $29 = $26;$sreg$1$6 = $spec$select32;
  }
  $arrayidx5$7 = ((($29)) + 127|0);
  $30 = HEAP8[$arrayidx5$7>>0]|0;
  $cmp7$7 = ($30&255)>(1);
  if ($cmp7$7) {
   (_puts(359816)|0);
   $sreg$1$7 = $sreg$1$6;
  } else {
   $tobool$7 = ($30<<24>>24)==(0);
   $31 = $sreg$1$6 | -128;
   $spec$select33 = $tobool$7 ? $sreg$1$6 : $31;
   $sreg$1$7 = $spec$select33;
  }
  $conv17 = $sreg$1$7&255;
  HEAP32[$vararg_buffer10>>2] = $conv17;
  (_sprintf($rep,359623,$vararg_buffer10)|0);
  $call39 = (_strlen($rep)|0);
  STACKTOP = sp;return ($call39|0);
  break;
 }
 case 33:  {
  $7 = HEAP32[$g>>2]|0;
  $data21 = ((($7)) + 5892|0);
  $8 = HEAP32[$data21>>2]|0;
  $arrayidx22 = ((($8)) + 93|0);
  $9 = HEAP8[$arrayidx22>>0]|0;
  $conv23 = $9&255;
  $arrayidx26 = ((($8)) + 94|0);
  $10 = HEAP8[$arrayidx26>>0]|0;
  $conv27 = $10&255;
  HEAP32[$vararg_buffer1>>2] = $conv23;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $conv27;
  (_sprintf($rep,359628,$vararg_buffer1)|0);
  $call39 = (_strlen($rep)|0);
  STACKTOP = sp;return ($call39|0);
  break;
 }
 case 34:  {
  $11 = HEAP32[$g>>2]|0;
  $pc = ((($11)) + 132|0);
  $12 = HEAP32[$pc>>2]|0;
  $and = $12 & 255;
  $shr = $12 >>> 8;
  $and33 = $shr & 255;
  $shr36 = $12 >>> 16;
  $and37 = $shr36 & 255;
  HEAP32[$vararg_buffer5>>2] = $and;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $and33;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $and37;
  (_sprintf($rep,359637,$vararg_buffer5)|0);
  $call39 = (_strlen($rep)|0);
  STACKTOP = sp;return ($call39|0);
  break;
 }
 default: {
  $call39 = (_strlen($rep)|0);
  STACKTOP = sp;return ($call39|0);
 }
 }
 return (0)|0;
}
function _gdb_change_breakpoint($w,$set,$kind,$addr,$size) {
 $w = $w|0;
 $set = $set|0;
 $kind = $kind|0;
 $addr = $addr|0;
 $size = $size|0;
 var $$lcssa$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $addr1$i$i = 0, $addr1$i$i5 = 0, $addr12$i = 0, $addr33$i = 0, $and$i = 0, $arrayidx11$i = 0, $arrayidx23$i = 0, $arrayidx25$i = 0, $arrayidx9$i = 0, $cmp$i$i = 0, $cmp$i$i11 = 0, $cmp13$i = 0;
 var $cmp2$i$i = 0, $cmp2$i$i6 = 0, $cmp20$i = 0, $cmp2034$i = 0, $cmp5$i = 0, $cmp6$i$i = 0, $cmp6$i$i8 = 0, $cmp7$i = 0, $cmp717$i = 0, $cmp8$i$i2 = 0, $cmp9$i = 0, $dec$i = 0, $i$0$i = 0, $i$0$in18$i = 0, $i$0$in18$i$phi = 0, $i$0$lcssa$i = 0, $i$016$i = 0, $i$019$i = 0, $i$037$i = 0, $i$09$i$i = 0;
 var $i$09$i$i4 = 0, $inc$i = 0, $inc$i$i = 0, $inc$i$i10 = 0, $inc17$i = 0, $j$035$i = 0, $kind1$i = 0, $kind30$i = 0, $kind4$i = 0, $neg$i = 0, $or$i = 0, $retval$0 = 0, $size1$i = 0, $size36$i = 0, $sub$i = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($set|0)==(0);
 $0 = HEAP32[$w>>2]|0;
 $cmp8$i$i2 = ($0|0)==(0);
 if ($tobool) {
  if ($cmp8$i$i2) {
   $retval$0 = -1;
   return ($retval$0|0);
  }
  $i$09$i$i4 = 0;
  while(1) {
   $addr1$i$i5 = (((($w)) + 4|0) + (($i$09$i$i4*12)|0)|0);
   $4 = HEAP32[$addr1$i$i5>>2]|0;
   $cmp2$i$i6 = ($4>>>0)>($addr>>>0);
   if ($cmp2$i$i6) {
    $retval$0 = -1;
    label = 26;
    break;
   }
   $cmp6$i$i8 = ($4|0)==($addr|0);
   if ($cmp6$i$i8) {
    label = 21;
    break;
   }
   $inc$i$i10 = (($i$09$i$i4) + 1)|0;
   $cmp$i$i11 = ($inc$i$i10>>>0)<($0>>>0);
   if ($cmp$i$i11) {
    $i$09$i$i4 = $inc$i$i10;
   } else {
    $retval$0 = -1;
    label = 26;
    break;
   }
  }
  if ((label|0) == 21) {
   $neg$i = $kind ^ -1;
   $kind1$i = (((((($w)) + 4|0) + (($i$09$i$i4*12)|0)|0)) + 8|0);
   $5 = HEAP32[$kind1$i>>2]|0;
   $and$i = $5 & $neg$i;
   HEAP32[$kind1$i>>2] = $and$i;
   $tobool$i = ($and$i|0)==(0);
   if (!($tobool$i)) {
    $retval$0 = 0;
    return ($retval$0|0);
   }
   $i$016$i = (($i$09$i$i4) + 1)|0;
   $cmp717$i = ($i$016$i>>>0)<($0>>>0);
   if ($cmp717$i) {
    $i$0$in18$i = $i$09$i$i4;$i$019$i = $i$016$i;
    while(1) {
     $arrayidx9$i = (((($w)) + 4|0) + (($i$0$in18$i*12)|0)|0);
     $arrayidx11$i = (((($w)) + 4|0) + (($i$019$i*12)|0)|0);
     ;HEAP32[$arrayidx9$i>>2]=HEAP32[$arrayidx11$i>>2]|0;HEAP32[$arrayidx9$i+4>>2]=HEAP32[$arrayidx11$i+4>>2]|0;HEAP32[$arrayidx9$i+8>>2]=HEAP32[$arrayidx11$i+8>>2]|0;
     $i$0$i = (($i$019$i) + 1)|0;
     $6 = HEAP32[$w>>2]|0;
     $cmp7$i = ($i$0$i>>>0)<($6>>>0);
     if ($cmp7$i) {
      $i$0$in18$i$phi = $i$019$i;$i$019$i = $i$0$i;$i$0$in18$i = $i$0$in18$i$phi;
     } else {
      $$lcssa$i = $6;
      break;
     }
    }
   } else {
    $$lcssa$i = $0;
   }
   $dec$i = (($$lcssa$i) + -1)|0;
   HEAP32[$w>>2] = $dec$i;
   $retval$0 = 0;
   return ($retval$0|0);
  }
  else if ((label|0) == 26) {
   return ($retval$0|0);
  }
 }
 L24: do {
  if ($cmp8$i$i2) {
   $i$0$lcssa$i = 0;
  } else {
   $i$09$i$i = 0;
   while(1) {
    $addr1$i$i = (((($w)) + 4|0) + (($i$09$i$i*12)|0)|0);
    $1 = HEAP32[$addr1$i$i>>2]|0;
    $cmp2$i$i = ($1>>>0)>($addr>>>0);
    if ($cmp2$i$i) {
     break;
    }
    $cmp6$i$i = ($1|0)==($addr|0);
    if ($cmp6$i$i) {
     label = 7;
     break;
    }
    $inc$i$i = (($i$09$i$i) + 1)|0;
    $cmp$i$i = ($inc$i$i>>>0)<($0>>>0);
    if ($cmp$i$i) {
     $i$09$i$i = $inc$i$i;
    } else {
     break;
    }
   }
   if ((label|0) == 7) {
    $size1$i = (((((($w)) + 4|0) + (($i$09$i$i*12)|0)|0)) + 4|0);
    HEAP32[$size1$i>>2] = $size;
    $kind4$i = (((((($w)) + 4|0) + (($i$09$i$i*12)|0)|0)) + 8|0);
    $2 = HEAP32[$kind4$i>>2]|0;
    $or$i = $2 | $kind;
    HEAP32[$kind4$i>>2] = $or$i;
    $retval$0 = 0;
    return ($retval$0|0);
   }
   $cmp5$i = ($0|0)==(32);
   if ($cmp5$i) {
    $retval$0 = -1;
    return ($retval$0|0);
   }
   $i$037$i = 0;
   while(1) {
    $addr12$i = (((($w)) + 4|0) + (($i$037$i*12)|0)|0);
    $3 = HEAP32[$addr12$i>>2]|0;
    $cmp13$i = ($3>>>0)>($addr>>>0);
    if ($cmp13$i) {
     $i$0$lcssa$i = $i$037$i;
     break L24;
    }
    $inc$i = (($i$037$i) + 1)|0;
    $cmp9$i = ($inc$i>>>0)<($0>>>0);
    if ($cmp9$i) {
     $i$037$i = $inc$i;
    } else {
     $i$0$lcssa$i = $inc$i;
     break;
    }
   }
  }
 } while(0);
 $inc17$i = (($0) + 1)|0;
 HEAP32[$w>>2] = $inc17$i;
 $cmp2034$i = ($inc17$i|0)>($i$0$lcssa$i|0);
 if ($cmp2034$i) {
  $j$035$i = $inc17$i;
  while(1) {
   $arrayidx23$i = (((($w)) + 4|0) + (($j$035$i*12)|0)|0);
   $sub$i = (($j$035$i) + -1)|0;
   $arrayidx25$i = (((($w)) + 4|0) + (($sub$i*12)|0)|0);
   ;HEAP32[$arrayidx23$i>>2]=HEAP32[$arrayidx25$i>>2]|0;HEAP32[$arrayidx23$i+4>>2]=HEAP32[$arrayidx25$i+4>>2]|0;HEAP32[$arrayidx23$i+8>>2]=HEAP32[$arrayidx25$i+8>>2]|0;
   $cmp20$i = ($sub$i|0)>($i$0$lcssa$i|0);
   if ($cmp20$i) {
    $j$035$i = $sub$i;
   } else {
    break;
   }
  }
 }
 $kind30$i = (((((($w)) + 4|0) + (($i$0$lcssa$i*12)|0)|0)) + 8|0);
 HEAP32[$kind30$i>>2] = $kind;
 $addr33$i = (((($w)) + 4|0) + (($i$0$lcssa$i*12)|0)|0);
 HEAP32[$addr33$i>>2] = $addr;
 $size36$i = (((((($w)) + 4|0) + (($i$0$lcssa$i*12)|0)|0)) + 4|0);
 HEAP32[$size36$i>>2] = $size;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _avr_gdb_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $address = 0, $call = 0, $call12 = 0, $call14 = 0, $call18 = 0, $call19 = 0, $call2 = 0, $call24 = 0, $call5 = 0, $call6 = 0, $cmp = 0, $conv = 0, $gdb = 0, $gdb_port = 0, $listen = 0;
 var $optval = 0, $retval$0 = 0, $retval$1 = 0, $run = 0, $s = 0, $sin_port = 0, $sleep = 0, $tobool15 = 0, $tobool25 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $optval = sp + 40|0;
 $address = sp + 24|0;
 $call = (_malloc(788)|0);
 _memset(($call|0),0,788)|0;
 $gdb = ((($avr)) + 8292|0);
 HEAP32[$gdb>>2] = 0;
 $call2 = (_socket(2,1,0)|0);
 $listen = ((($call)) + 4|0);
 HEAP32[$listen>>2] = $call2;
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $call5 = (___errno_location()|0);
  $0 = HEAP32[$call5>>2]|0;
  $call6 = (_strerror($0)|0);
  HEAP32[$vararg_buffer>>2] = $call6;
  _avr_global_logger($avr,1,359878,$vararg_buffer);
  $retval$1 = -1;
  STACKTOP = sp;return ($retval$1|0);
 }
 HEAP32[$optval>>2] = 1;
 (_setsockopt($call2,1,2,$optval,4)|0);
 $1 = ((($address)) + 4|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 HEAP16[$address>>1] = 2;
 $gdb_port = ((($avr)) + 8296|0);
 $2 = HEAP32[$gdb_port>>2]|0;
 $conv = $2&65535;
 $call12 = (_htons($conv)|0);
 $sin_port = ((($address)) + 2|0);
 HEAP16[$sin_port>>1] = $call12;
 $call14 = (_bind($call2,$address,16)|0);
 $tobool15 = ($call14|0)==(0);
 do {
  if ($tobool15) {
   $call24 = (_listen($call2,1)|0);
   $tobool25 = ($call24|0)==(0);
   if ($tobool25) {
    $4 = HEAP32[$gdb_port>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $4;
    (_printf(359943,$vararg_buffer4)|0);
    HEAP32[$call>>2] = $avr;
    $s = ((($call)) + 8|0);
    HEAP32[$s>>2] = -1;
    HEAP32[$gdb>>2] = $call;
    $run = ((($avr)) + 104|0);
    HEAP32[$run>>2] = 93;
    $sleep = ((($avr)) + 108|0);
    HEAP32[$sleep>>2] = 94;
    $retval$0 = 0;
    break;
   } else {
    _perror(359936);
    $retval$0 = -1;
    break;
   }
  } else {
   $call18 = (___errno_location()|0);
   $3 = HEAP32[$call18>>2]|0;
   $call19 = (_strerror($3)|0);
   HEAP32[$vararg_buffer1>>2] = $call19;
   _avr_global_logger($avr,1,359907,$vararg_buffer1);
   $retval$0 = -1;
  }
 } while(0);
 $retval$1 = $retval$0;
 STACKTOP = sp;return ($retval$1|0);
}
function _avr_adc_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $adc = 0, $conv = 0, $conv4 = 0, $conv5 = 0, $conv6 = 0, $r_adch = 0, $r_adcl = 0, $r_adcsra = 0, $r_adcsrb = 0, $tobool = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=354092; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $adc = ((($p)) + 224|0);
 _avr_register_vector($avr,$adc);
 (_avr_io_setirqs($p,1633968928,19,0)|0);
 $r_adcsra = ((($p)) + 100|0);
 $0 = HEAP8[$r_adcsra>>0]|0;
 $conv = $0&255;
 _avr_register_io_write($avr,$conv,95,$p);
 $r_adcsrb = ((($p)) + 130|0);
 $1 = HEAP8[$r_adcsrb>>0]|0;
 $tobool = ($1<<24>>24)==(0);
 if (!($tobool)) {
  $conv4 = $1&255;
  _avr_register_io_write($avr,$conv4,96,$p);
 }
 $r_adcl = ((($p)) + 128|0);
 $2 = HEAP8[$r_adcl>>0]|0;
 $conv5 = $2&255;
 _avr_register_io_read($avr,$conv5,97,$p);
 $r_adch = ((($p)) + 129|0);
 $3 = HEAP8[$r_adch>>0]|0;
 $conv6 = $3&255;
 _avr_register_io_read($avr,$conv6,98,$p);
 return;
}
function _avr_adc_write_adcsra($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $$pre221 = 0, $$pre223 = 0, $$sroa$0$0$copyload = 0, $$sroa$0195$0$copyload = 0, $$sroa$0198$0$copyload = 0, $$sroa$0201$0$$sroa_idx = 0, $$sroa$0201$0$copyload = 0, $$sroa$0207$0$copyload = 0, $$sroa$0213$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $adps = 0, $adsc1 = 0, $and$i = 0, $and$i102 = 0, $and$i116 = 0, $and$i128 = 0, $and$i143 = 0, $and$i158 = 0, $and$i188 = 0, $and$i64 = 0;
 var $and$i64$1 = 0, $and$i64$2 = 0, $and$i80 = 0, $and$i80$1 = 0, $and$i80$2 = 0, $and$i80$3 = 0, $and$i80$4 = 0, $and$i80$5 = 0, $aref = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i114 = 0, $arrayidx$i122 = 0, $arrayidx$i137 = 0, $arrayidx$i152 = 0, $arrayidx$i173 = 0, $arrayidx$i182 = 0, $arrayidx$i61 = 0, $arrayidx$i61$1 = 0, $arrayidx$i61$2 = 0;
 var $arrayidx$i73 = 0, $arrayidx$i73$1 = 0, $arrayidx$i73$2 = 0, $arrayidx$i73$3 = 0, $arrayidx$i73$4 = 0, $arrayidx$i73$5 = 0, $arrayidx$i96 = 0, $arrayidx14 = 0, $arrayidx36 = 0, $avcc = 0, $avr$idx$val = 0, $avr$idx$val$pre = 0, $bf$clear$i = 0, $bf$clear$i108 = 0, $bf$clear$i119 = 0, $bf$clear$i149 = 0, $bf$clear$i179 = 0, $bf$clear$i59 = 0, $bf$clear$i59$1 = 0, $bf$clear$i59$2 = 0;
 var $bf$clear$i70 = 0, $bf$clear$i70$1 = 0, $bf$clear$i70$2 = 0, $bf$clear$i70$3 = 0, $bf$clear$i70$4 = 0, $bf$clear$i70$5 = 0, $bf$clear$i93 = 0, $bf$clear13$pre$phiZZ2D = 0, $bf$clear2$i = 0, $bf$clear2$i168 = 0, $bf$clear3$i = 0, $bf$clear3$i125 = 0, $bf$clear3$i140 = 0, $bf$clear3$i155 = 0, $bf$clear3$i185 = 0, $bf$clear3$i99 = 0, $bf$clear35 = 0, $bf$clear5$i = 0, $bf$clear5$i$1 = 0, $bf$clear5$i$2 = 0;
 var $bf$clear5$i111 = 0, $bf$clear5$i170 = 0, $bf$clear5$i76 = 0, $bf$clear5$i76$1 = 0, $bf$clear5$i76$2 = 0, $bf$clear5$i76$3 = 0, $bf$clear5$i76$4 = 0, $bf$clear5$i76$5 = 0, $bf$load$i58 = 0, $bf$load$i58$1 = 0, $bf$load$i58$2 = 0, $bf$load$i69 = 0, $bf$load$i69$1 = 0, $bf$load$i69$2 = 0, $bf$load$i69$3 = 0, $bf$load$i69$4 = 0, $bf$load$i69$5 = 0, $bf$load12$pre = 0, $bf$load34 = 0, $bf$lshr$i = 0;
 var $bf$lshr$i110 = 0, $bf$lshr$i124 = 0, $bf$lshr$i139 = 0, $bf$lshr$i154 = 0, $bf$lshr$i167 = 0, $bf$lshr$i184 = 0, $bf$lshr$i62 = 0, $bf$lshr$i62$1 = 0, $bf$lshr$i62$2 = 0, $bf$lshr$i75 = 0, $bf$lshr$i75$1 = 0, $bf$lshr$i75$2 = 0, $bf$lshr$i75$3 = 0, $bf$lshr$i75$4 = 0, $bf$lshr$i75$5 = 0, $bf$lshr$i98 = 0, $bf$lshr4$i = 0, $bf$lshr4$i169 = 0, $bf$lshr5$i = 0, $bf$lshr5$i101 = 0;
 var $bf$lshr5$i127 = 0, $bf$lshr5$i142 = 0, $bf$lshr5$i157 = 0, $bf$lshr5$i187 = 0, $bf$lshr7$i = 0, $bf$lshr7$i$1 = 0, $bf$lshr7$i$2 = 0, $bf$lshr7$i78 = 0, $bf$lshr7$i78$1 = 0, $bf$lshr7$i78$2 = 0, $bf$lshr7$i78$3 = 0, $bf$lshr7$i78$4 = 0, $bf$lshr7$i78$5 = 0, $cond56 = 0, $conv$i109 = 0, $conv$i165 = 0, $conv1$i = 0, $conv1$i123 = 0, $conv1$i138 = 0, $conv1$i153 = 0;
 var $conv1$i183 = 0, $conv1$i97 = 0, $conv10$i = 0, $conv10$i$1 = 0, $conv10$i$2 = 0, $conv10$i84 = 0, $conv10$i84$1 = 0, $conv10$i84$2 = 0, $conv10$i84$3 = 0, $conv10$i84$4 = 0, $conv10$i84$5 = 0, $conv3$i = 0, $conv3$i$1 = 0, $conv3$i$2 = 0, $conv3$i74 = 0, $conv3$i74$1 = 0, $conv3$i74$2 = 0, $conv3$i74$3 = 0, $conv3$i74$4 = 0, $conv3$i74$5 = 0;
 var $conv51 = 0, $conv7$i = 0, $conv7$i115 = 0, $conv7$i129 = 0, $conv7$i174 = 0, $conv9$i$1 = 0, $conv9$i$2 = 0, $conv9$i117 = 0, $conv9$i176 = 0, $conv9$i82$1 = 0, $conv9$i82$2 = 0, $conv9$i82$3 = 0, $conv9$i82$4 = 0, $conv9$i82$5 = 0, $data$i = 0, $data$phi$trans$insert = 0, $div$i = 0, $div60 = 0, $div67 = 0, $e$sroa$0$0$$sroa_idx = 0;
 var $e$sroa$0$0$copyload = 0, $frequency = 0, $idxprom = 0, $inc = 0, $incdec$ptr$i = 0, $incdec$ptr$i$1 = 0, $incdec$ptr$i88 = 0, $incdec$ptr$i88$1 = 0, $incdec$ptr$i88$2 = 0, $incdec$ptr$i88$3 = 0, $incdec$ptr$i88$4 = 0, $irq = 0, $mux = 0, $muxmode = 0, $neg$i = 0, $or$i$1 = 0, $or$i$2 = 0, $or$i175 = 0, $or$i83$1 = 0, $or$i83$2 = 0;
 var $or$i83$3 = 0, $or$i83$4 = 0, $or$i83$5 = 0, $phitmp = 0, $phitmp224 = 0, $res$1$i = 0, $res$1$i$1 = 0, $res$1$i$2 = 0, $res$1$i86 = 0, $res$1$i86$1 = 0, $res$1$i86$2 = 0, $res$1$i86$3 = 0, $res$1$i86$4 = 0, $res$1$i86$5 = 0, $retval$0$i = 0, $retval$0$i131 = 0, $shl$i$1 = 0, $shl$i$2 = 0, $shl$i112 = 0, $shl$i171 = 0;
 var $shl$i81$1 = 0, $shl$i81$2 = 0, $shl$i81$3 = 0, $shl$i81$4 = 0, $shl$i81$5 = 0, $shr = 0, $shr$i = 0, $shr$i100 = 0, $shr$i126 = 0, $shr$i141 = 0, $shr$i156 = 0, $shr$i186 = 0, $shr$i63 = 0, $shr$i63$1 = 0, $shr$i63$2 = 0, $shr$i77 = 0, $shr$i77$1 = 0, $shr$i77$2 = 0, $shr$i77$3 = 0, $shr$i77$4 = 0;
 var $shr$i77$5 = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, $tobool$i120 = 0, $tobool$i150 = 0, $tobool$i166 = 0, $tobool$i180 = 0, $tobool$i60 = 0, $tobool$i60$1 = 0, $tobool$i60$2 = 0, $tobool$i71 = 0, $tobool$i71$1 = 0, $tobool$i71$2 = 0, $tobool$i71$3 = 0, $tobool$i71$4 = 0, $tobool$i71$5 = 0, $tobool$i94 = 0, $tobool20 = 0, $tobool28 = 0;
 var $tobool43 = 0, $tobool52 = 0, $tobool56 = 0, $tobool7 = 0, $v$addr$0 = 0, $v$addr$1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 _avr_adc_configure_trigger($avr,$param);
 $adsc1 = ((($param)) + 108|0);
 $$sroa$0$0$copyload = HEAPU8[$adsc1>>0]|(HEAPU8[$adsc1+1>>0]<<8)|(HEAPU8[$adsc1+2>>0]<<16)|(HEAPU8[$adsc1+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $retval$0$i = 0;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $conv7$i = $and$i&255;
  $retval$0$i = $conv7$i;
 }
 $$sroa$0201$0$$sroa_idx = ((($param)) + 104|0);
 $$sroa$0201$0$copyload = HEAPU8[$$sroa$0201$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0201$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0201$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0201$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i119 = $$sroa$0201$0$copyload & 511;
 $tobool$i120 = ($bf$clear$i119|0)==(0);
 $data$phi$trans$insert = ((($avr)) + 5892|0);
 $$pre = HEAP32[$data$phi$trans$insert>>2]|0;
 if ($tobool$i120) {
  $retval$0$i131 = 0;
 } else {
  $arrayidx$i122 = (($$pre) + ($bf$clear$i119)|0);
  $2 = HEAP8[$arrayidx$i122>>0]|0;
  $conv1$i123 = $2&255;
  $bf$lshr$i124 = $$sroa$0201$0$copyload >>> 9;
  $bf$clear3$i125 = $bf$lshr$i124 & 7;
  $shr$i126 = $conv1$i123 >>> $bf$clear3$i125;
  $bf$lshr5$i127 = $$sroa$0201$0$copyload >>> 12;
  $and$i128 = $shr$i126 & $bf$lshr5$i127;
  $conv7$i129 = $and$i128&255;
  $retval$0$i131 = $conv7$i129;
 }
 $arrayidx = (($$pre) + ($bf$clear$i)|0);
 HEAP8[$arrayidx>>0] = $v;
 $tobool = ($retval$0$i<<24>>24)==(0);
 do {
  if ($tobool) {
   $v$addr$0 = $v;
  } else {
   $$sroa$0213$0$copyload = HEAPU8[$adsc1>>0]|(HEAPU8[$adsc1+1>>0]<<8)|(HEAPU8[$adsc1+2>>0]<<16)|(HEAPU8[$adsc1+3>>0]<<24);
   $bf$clear$i179 = $$sroa$0213$0$copyload & 511;
   $tobool$i180 = ($bf$clear$i179|0)==(0);
   if (!($tobool$i180)) {
    $3 = HEAP32[$data$phi$trans$insert>>2]|0;
    $arrayidx$i182 = (($3) + ($bf$clear$i179)|0);
    $4 = HEAP8[$arrayidx$i182>>0]|0;
    $conv1$i183 = $4&255;
    $bf$lshr$i184 = $$sroa$0213$0$copyload >>> 9;
    $bf$clear3$i185 = $bf$lshr$i184 & 7;
    $shr$i186 = $conv1$i183 >>> $bf$clear3$i185;
    $bf$lshr5$i187 = $$sroa$0213$0$copyload >>> 12;
    $and$i188 = $shr$i186 & $bf$lshr5$i187;
    $tobool7 = ($and$i188|0)==(0);
    if (!($tobool7)) {
     $v$addr$0 = $v;
     break;
    }
   }
   $conv$i165 = $bf$clear$i179&65535;
   $tobool$i166 = ($conv$i165<<16>>16)==(0);
   if ($tobool$i166) {
    $bf$clear13$pre$phiZZ2D = $bf$clear$i179;
   } else {
    $bf$lshr$i167 = $$sroa$0213$0$copyload >>> 12;
    $bf$clear2$i168 = $bf$lshr$i167 & 255;
    $bf$lshr4$i169 = $$sroa$0213$0$copyload >>> 9;
    $bf$clear5$i170 = $bf$lshr4$i169 & 7;
    $shl$i171 = $bf$clear2$i168 << $bf$clear5$i170;
    $5 = HEAP32[$data$phi$trans$insert>>2]|0;
    $arrayidx$i173 = (($5) + ($bf$clear$i179)|0);
    $6 = HEAP8[$arrayidx$i173>>0]|0;
    $conv7$i174 = $6&255;
    $or$i175 = $shl$i171 | $conv7$i174;
    $conv9$i176 = $or$i175&255;
    _avr_core_watch_write($avr,$conv$i165,$conv9$i176);
    $bf$load12$pre = HEAP32[$adsc1>>2]|0;
    $$pre223 = $bf$load12$pre & 511;
    $bf$clear13$pre$phiZZ2D = $$pre223;
   }
   $7 = HEAP32[$data$phi$trans$insert>>2]|0;
   $arrayidx14 = (($7) + ($bf$clear13$pre$phiZZ2D)|0);
   $8 = HEAP8[$arrayidx14>>0]|0;
   $v$addr$0 = $8;
  }
 } while(0);
 $cond56 = ($retval$0$i131<<24>>24)==(0);
 $$sroa$0207$0$copyload = HEAPU8[$$sroa$0201$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0201$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0201$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0201$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i149 = $$sroa$0207$0$copyload & 511;
 $tobool$i150 = ($bf$clear$i149|0)==(0);
 do {
  if ($cond56) {
   if ($tobool$i150) {
    $v$addr$1 = $v$addr$0;
   } else {
    $9 = HEAP32[$data$phi$trans$insert>>2]|0;
    $arrayidx$i152 = (($9) + ($bf$clear$i149)|0);
    $10 = HEAP8[$arrayidx$i152>>0]|0;
    $conv1$i153 = $10&255;
    $bf$lshr$i154 = $$sroa$0207$0$copyload >>> 9;
    $bf$clear3$i155 = $bf$lshr$i154 & 7;
    $shr$i156 = $conv1$i153 >>> $bf$clear3$i155;
    $bf$lshr5$i157 = $$sroa$0207$0$copyload >>> 12;
    $and$i158 = $shr$i156 & $bf$lshr5$i157;
    $tobool20 = ($and$i158|0)==(0);
    if ($tobool20) {
     $v$addr$1 = $v$addr$0;
    } else {
     $11 = ((($param)) + 562|0);
     HEAP8[$11>>0] = 1;
     $aref = ((($avr)) + 52|0);
     $12 = HEAP32[$aref>>2]|0;
     $avcc = ((($avr)) + 48|0);
     $13 = HEAP32[$avcc>>2]|0;
     HEAP32[$vararg_buffer>>2] = $12;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $13;
     _avr_global_logger($avr,3,360537,$vararg_buffer);
     $v$addr$1 = $v$addr$0;
    }
   }
  } else {
   if (!($tobool$i150)) {
    $14 = HEAP32[$data$phi$trans$insert>>2]|0;
    $arrayidx$i137 = (($14) + ($bf$clear$i149)|0);
    $15 = HEAP8[$arrayidx$i137>>0]|0;
    $conv1$i138 = $15&255;
    $bf$lshr$i139 = $$sroa$0207$0$copyload >>> 9;
    $bf$clear3$i140 = $bf$lshr$i139 & 7;
    $shr$i141 = $conv1$i138 >>> $bf$clear3$i140;
    $bf$lshr5$i142 = $$sroa$0207$0$copyload >>> 12;
    $and$i143 = $shr$i141 & $bf$lshr5$i142;
    $tobool28 = ($and$i143|0)==(0);
    if (!($tobool28)) {
     $v$addr$1 = $v$addr$0;
     break;
    }
   }
   _avr_cycle_timer_cancel($avr,99,$param);
   $$sroa$0198$0$copyload = HEAPU8[$adsc1>>0]|(HEAPU8[$adsc1+1>>0]<<8)|(HEAPU8[$adsc1+2>>0]<<16)|(HEAPU8[$adsc1+3>>0]<<24);
   $bf$clear$i108 = $$sroa$0198$0$copyload & 511;
   $conv$i109 = $bf$clear$i108&65535;
   $bf$lshr$i110 = $$sroa$0198$0$copyload >>> 12;
   $bf$clear2$i = $bf$lshr$i110 & 255;
   $bf$lshr4$i = $$sroa$0198$0$copyload >>> 9;
   $bf$clear5$i111 = $bf$lshr4$i & 7;
   $shl$i112 = $bf$clear2$i << $bf$clear5$i111;
   $16 = HEAP32[$data$phi$trans$insert>>2]|0;
   $arrayidx$i114 = (($16) + ($bf$clear$i108)|0);
   $17 = HEAP8[$arrayidx$i114>>0]|0;
   $conv7$i115 = $17&255;
   $neg$i = $shl$i112 ^ 255;
   $and$i116 = $neg$i & $conv7$i115;
   $conv9$i117 = $and$i116&255;
   _avr_core_watch_write($avr,$conv$i109,$conv9$i117);
   $18 = HEAP32[$data$phi$trans$insert>>2]|0;
   $bf$load34 = HEAP32[$adsc1>>2]|0;
   $bf$clear35 = $bf$load34 & 511;
   $arrayidx36 = (($18) + ($bf$clear35)|0);
   $19 = HEAP8[$arrayidx36>>0]|0;
   $v$addr$1 = $19;
  }
 } while(0);
 if (!($tobool)) {
  _avr_core_watch_write($avr,$addr,$v$addr$1);
  STACKTOP = sp;return;
 }
 $$sroa$0195$0$copyload = HEAPU8[$adsc1>>0]|(HEAPU8[$adsc1+1>>0]<<8)|(HEAPU8[$adsc1+2>>0]<<16)|(HEAPU8[$adsc1+3>>0]<<24);
 $bf$clear$i93 = $$sroa$0195$0$copyload & 511;
 $tobool$i94 = ($bf$clear$i93|0)==(0);
 if ($tobool$i94) {
  _avr_core_watch_write($avr,$addr,$v$addr$1);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$data$phi$trans$insert>>2]|0;
 $arrayidx$i96 = (($20) + ($bf$clear$i93)|0);
 $21 = HEAP8[$arrayidx$i96>>0]|0;
 $conv1$i97 = $21&255;
 $bf$lshr$i98 = $$sroa$0195$0$copyload >>> 9;
 $bf$clear3$i99 = $bf$lshr$i98 & 7;
 $shr$i100 = $conv1$i97 >>> $bf$clear3$i99;
 $bf$lshr5$i101 = $$sroa$0195$0$copyload >>> 12;
 $and$i102 = $shr$i100 & $bf$lshr5$i101;
 $tobool43 = ($and$i102|0)==(0);
 if ($tobool43) {
  _avr_core_watch_write($avr,$addr,$v$addr$1);
  STACKTOP = sp;return;
 }
 $mux = ((($param)) + 44|0);
 $bf$load$i69 = HEAP32[$mux>>2]|0;
 $bf$clear$i70 = $bf$load$i69 & 511;
 $tobool$i71 = ($bf$clear$i70|0)==(0);
 if ($tobool$i71) {
  $res$1$i86 = 0;
 } else {
  $arrayidx$i73 = (($20) + ($bf$clear$i70)|0);
  $22 = HEAP8[$arrayidx$i73>>0]|0;
  $conv3$i74 = $22&255;
  $bf$lshr$i75 = $bf$load$i69 >>> 9;
  $bf$clear5$i76 = $bf$lshr$i75 & 7;
  $shr$i77 = $conv3$i74 >>> $bf$clear5$i76;
  $bf$lshr7$i78 = $bf$load$i69 >>> 12;
  $and$i80 = $bf$lshr7$i78 & $shr$i77;
  $conv10$i84 = $and$i80&255;
  $res$1$i86 = $conv10$i84;
 }
 $incdec$ptr$i88 = ((($param)) + 48|0);
 $bf$load$i69$1 = HEAP32[$incdec$ptr$i88>>2]|0;
 $bf$clear$i70$1 = $bf$load$i69$1 & 511;
 $tobool$i71$1 = ($bf$clear$i70$1|0)==(0);
 if ($tobool$i71$1) {
  $res$1$i86$1 = $res$1$i86;
 } else {
  $arrayidx$i73$1 = (($20) + ($bf$clear$i70$1)|0);
  $33 = HEAP8[$arrayidx$i73$1>>0]|0;
  $conv3$i74$1 = $33&255;
  $bf$lshr$i75$1 = $bf$load$i69$1 >>> 9;
  $bf$clear5$i76$1 = $bf$lshr$i75$1 & 7;
  $shr$i77$1 = $conv3$i74$1 >>> $bf$clear5$i76$1;
  $bf$lshr7$i78$1 = $bf$load$i69$1 >>> 12;
  $and$i80$1 = $bf$lshr7$i78$1 & $shr$i77$1;
  $shl$i81$1 = $and$i80$1 << 1;
  $conv9$i82$1 = $res$1$i86&255;
  $or$i83$1 = $shl$i81$1 | $conv9$i82$1;
  $conv10$i84$1 = $or$i83$1&255;
  $res$1$i86$1 = $conv10$i84$1;
 }
 $incdec$ptr$i88$1 = ((($param)) + 52|0);
 $bf$load$i69$2 = HEAP32[$incdec$ptr$i88$1>>2]|0;
 $bf$clear$i70$2 = $bf$load$i69$2 & 511;
 $tobool$i71$2 = ($bf$clear$i70$2|0)==(0);
 if ($tobool$i71$2) {
  $res$1$i86$2 = $res$1$i86$1;
 } else {
  $arrayidx$i73$2 = (($20) + ($bf$clear$i70$2)|0);
  $34 = HEAP8[$arrayidx$i73$2>>0]|0;
  $conv3$i74$2 = $34&255;
  $bf$lshr$i75$2 = $bf$load$i69$2 >>> 9;
  $bf$clear5$i76$2 = $bf$lshr$i75$2 & 7;
  $shr$i77$2 = $conv3$i74$2 >>> $bf$clear5$i76$2;
  $bf$lshr7$i78$2 = $bf$load$i69$2 >>> 12;
  $and$i80$2 = $bf$lshr7$i78$2 & $shr$i77$2;
  $shl$i81$2 = $and$i80$2 << 2;
  $conv9$i82$2 = $res$1$i86$1&255;
  $or$i83$2 = $shl$i81$2 | $conv9$i82$2;
  $conv10$i84$2 = $or$i83$2&255;
  $res$1$i86$2 = $conv10$i84$2;
 }
 $incdec$ptr$i88$2 = ((($param)) + 56|0);
 $bf$load$i69$3 = HEAP32[$incdec$ptr$i88$2>>2]|0;
 $bf$clear$i70$3 = $bf$load$i69$3 & 511;
 $tobool$i71$3 = ($bf$clear$i70$3|0)==(0);
 if ($tobool$i71$3) {
  $res$1$i86$3 = $res$1$i86$2;
 } else {
  $arrayidx$i73$3 = (($20) + ($bf$clear$i70$3)|0);
  $35 = HEAP8[$arrayidx$i73$3>>0]|0;
  $conv3$i74$3 = $35&255;
  $bf$lshr$i75$3 = $bf$load$i69$3 >>> 9;
  $bf$clear5$i76$3 = $bf$lshr$i75$3 & 7;
  $shr$i77$3 = $conv3$i74$3 >>> $bf$clear5$i76$3;
  $bf$lshr7$i78$3 = $bf$load$i69$3 >>> 12;
  $and$i80$3 = $bf$lshr7$i78$3 & $shr$i77$3;
  $shl$i81$3 = $and$i80$3 << 3;
  $conv9$i82$3 = $res$1$i86$2&255;
  $or$i83$3 = $shl$i81$3 | $conv9$i82$3;
  $conv10$i84$3 = $or$i83$3&255;
  $res$1$i86$3 = $conv10$i84$3;
 }
 $incdec$ptr$i88$3 = ((($param)) + 60|0);
 $bf$load$i69$4 = HEAP32[$incdec$ptr$i88$3>>2]|0;
 $bf$clear$i70$4 = $bf$load$i69$4 & 511;
 $tobool$i71$4 = ($bf$clear$i70$4|0)==(0);
 if ($tobool$i71$4) {
  $res$1$i86$4 = $res$1$i86$3;
 } else {
  $arrayidx$i73$4 = (($20) + ($bf$clear$i70$4)|0);
  $36 = HEAP8[$arrayidx$i73$4>>0]|0;
  $conv3$i74$4 = $36&255;
  $bf$lshr$i75$4 = $bf$load$i69$4 >>> 9;
  $bf$clear5$i76$4 = $bf$lshr$i75$4 & 7;
  $shr$i77$4 = $conv3$i74$4 >>> $bf$clear5$i76$4;
  $bf$lshr7$i78$4 = $bf$load$i69$4 >>> 12;
  $and$i80$4 = $bf$lshr7$i78$4 & $shr$i77$4;
  $shl$i81$4 = $and$i80$4 << 4;
  $conv9$i82$4 = $res$1$i86$3&255;
  $or$i83$4 = $shl$i81$4 | $conv9$i82$4;
  $conv10$i84$4 = $or$i83$4&255;
  $res$1$i86$4 = $conv10$i84$4;
 }
 $incdec$ptr$i88$4 = ((($param)) + 64|0);
 $bf$load$i69$5 = HEAP32[$incdec$ptr$i88$4>>2]|0;
 $bf$clear$i70$5 = $bf$load$i69$5 & 511;
 $tobool$i71$5 = ($bf$clear$i70$5|0)==(0);
 if ($tobool$i71$5) {
  $res$1$i86$5 = $res$1$i86$4;
 } else {
  $arrayidx$i73$5 = (($20) + ($bf$clear$i70$5)|0);
  $37 = HEAP8[$arrayidx$i73$5>>0]|0;
  $conv3$i74$5 = $37&255;
  $bf$lshr$i75$5 = $bf$load$i69$5 >>> 9;
  $bf$clear5$i76$5 = $bf$lshr$i75$5 & 7;
  $shr$i77$5 = $conv3$i74$5 >>> $bf$clear5$i76$5;
  $bf$lshr7$i78$5 = $bf$load$i69$5 >>> 12;
  $and$i80$5 = $bf$lshr7$i78$5 & $shr$i77$5;
  $shl$i81$5 = $and$i80$5 << 5;
  $conv9$i82$5 = $res$1$i86$4&255;
  $or$i83$5 = $shl$i81$5 | $conv9$i82$5;
  $conv10$i84$5 = $or$i83$5&255;
  $res$1$i86$5 = $conv10$i84$5;
 }
 $muxmode = ((($param)) + 288|0);
 $idxprom = $res$1$i86$5&255;
 $e$sroa$0$0$$sroa_idx = (($muxmode) + ($idxprom<<2)|0);
 $e$sroa$0$0$copyload = HEAP32[$e$sroa$0$0$$sroa_idx>>2]|0;
 $irq = ((($param)) + 24|0);
 $38 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($38)) + 432|0);
 _avr_raise_irq($add$ptr,$e$sroa$0$0$copyload);
 $adps = ((($param)) + 116|0);
 $bf$load$i58 = HEAP32[$adps>>2]|0;
 $bf$clear$i59 = $bf$load$i58 & 511;
 $tobool$i60 = ($bf$clear$i59|0)==(0);
 if ($tobool$i60) {
  $res$1$i = 0;
 } else {
  $23 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$i61 = (($23) + ($bf$clear$i59)|0);
  $24 = HEAP8[$arrayidx$i61>>0]|0;
  $conv3$i = $24&255;
  $bf$lshr$i62 = $bf$load$i58 >>> 9;
  $bf$clear5$i = $bf$lshr$i62 & 7;
  $shr$i63 = $conv3$i >>> $bf$clear5$i;
  $bf$lshr7$i = $bf$load$i58 >>> 12;
  $and$i64 = $bf$lshr7$i & $shr$i63;
  $conv10$i = $and$i64&255;
  $res$1$i = $conv10$i;
 }
 $incdec$ptr$i = ((($param)) + 120|0);
 $bf$load$i58$1 = HEAP32[$incdec$ptr$i>>2]|0;
 $bf$clear$i59$1 = $bf$load$i58$1 & 511;
 $tobool$i60$1 = ($bf$clear$i59$1|0)==(0);
 if ($tobool$i60$1) {
  $res$1$i$1 = $res$1$i;
 } else {
  $27 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$i61$1 = (($27) + ($bf$clear$i59$1)|0);
  $28 = HEAP8[$arrayidx$i61$1>>0]|0;
  $conv3$i$1 = $28&255;
  $bf$lshr$i62$1 = $bf$load$i58$1 >>> 9;
  $bf$clear5$i$1 = $bf$lshr$i62$1 & 7;
  $shr$i63$1 = $conv3$i$1 >>> $bf$clear5$i$1;
  $bf$lshr7$i$1 = $bf$load$i58$1 >>> 12;
  $and$i64$1 = $bf$lshr7$i$1 & $shr$i63$1;
  $shl$i$1 = $and$i64$1 << 1;
  $conv9$i$1 = $res$1$i&255;
  $or$i$1 = $shl$i$1 | $conv9$i$1;
  $conv10$i$1 = $or$i$1&255;
  $res$1$i$1 = $conv10$i$1;
 }
 $incdec$ptr$i$1 = ((($param)) + 124|0);
 $bf$load$i58$2 = HEAP32[$incdec$ptr$i$1>>2]|0;
 $bf$clear$i59$2 = $bf$load$i58$2 & 511;
 $tobool$i60$2 = ($bf$clear$i59$2|0)==(0);
 if ($tobool$i60$2) {
  $res$1$i$2 = $res$1$i$1;
 } else {
  $29 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$i61$2 = (($29) + ($bf$clear$i59$2)|0);
  $30 = HEAP8[$arrayidx$i61$2>>0]|0;
  $conv3$i$2 = $30&255;
  $bf$lshr$i62$2 = $bf$load$i58$2 >>> 9;
  $bf$clear5$i$2 = $bf$lshr$i62$2 & 7;
  $shr$i63$2 = $conv3$i$2 >>> $bf$clear5$i$2;
  $bf$lshr7$i$2 = $bf$load$i58$2 >>> 12;
  $and$i64$2 = $bf$lshr7$i$2 & $shr$i63$2;
  $shl$i$2 = $and$i64$2 << 2;
  $conv9$i$2 = $res$1$i$1&255;
  $or$i$2 = $shl$i$2 | $conv9$i$2;
  $conv10$i$2 = $or$i$2&255;
  $res$1$i$2 = $conv10$i$2;
 }
 $conv51 = $res$1$i$2&255;
 $tobool52 = ($res$1$i$2<<24>>24)==(0);
 $inc = $tobool52&1;
 $spec$select = (($inc) + ($conv51))|0;
 $frequency = ((($avr)) + 40|0);
 $31 = HEAP32[$frequency>>2]|0;
 $shr = $31 >>> $spec$select;
 $25 = ((($param)) + 562|0);
 $32 = HEAP8[$25>>0]|0;
 $tobool56 = ($32<<24>>24)==(0);
 if ($tobool56) {
  $26 = 13;$avr$idx$val = $31;
 } else {
  $div60 = (($shr>>>0) / 1300)&-1;
  HEAP32[$vararg_buffer2>>2] = $div60;
  _avr_global_logger($avr,3,360565,$vararg_buffer2);
  $$pre221 = HEAP8[$25>>0]|0;
  $avr$idx$val$pre = HEAP32[$frequency>>2]|0;
  $phitmp = ($$pre221<<24>>24)==(0);
  $phitmp224 = $phitmp ? 13 : 25;
  $26 = $phitmp224;$avr$idx$val = $avr$idx$val$pre;
 }
 $div67 = (($shr>>>0) / ($26>>>0))&-1;
 $div$i = (($avr$idx$val>>>0) / ($div67>>>0))&-1;
 _avr_cycle_timer_register($avr,$div$i,0,99,$param);
 _avr_core_watch_write($avr,$addr,$v$addr$1);
 STACKTOP = sp;return;
}
function _avr_adc_write_adcsrb($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _avr_adc_configure_trigger($avr,$param);
 return;
}
function _avr_adc_read_l($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adc_values = 0;
 var $adc_values23 = 0, $and$i = 0, $and$i$1 = 0, $and$i$2 = 0, $and$i59 = 0, $and$i75 = 0, $and$i75$1 = 0, $and$i75$2 = 0, $and$i75$3 = 0, $and$i75$4 = 0, $and$i75$5 = 0, $aref = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$1 = 0, $arrayidx$i$2 = 0, $arrayidx$i56 = 0, $arrayidx$i68 = 0, $arrayidx$i68$1 = 0, $arrayidx$i68$2 = 0;
 var $arrayidx$i68$3 = 0, $arrayidx$i68$4 = 0, $arrayidx$i68$5 = 0, $arrayidx100 = 0, $arrayidx12 = 0, $arrayidx26 = 0, $arrayidx35 = 0, $arrayidx96 = 0, $avcc = 0, $bf$clear$i = 0, $bf$clear$i$1 = 0, $bf$clear$i$2 = 0, $bf$clear$i53 = 0, $bf$clear$i65 = 0, $bf$clear$i65$1 = 0, $bf$clear$i65$2 = 0, $bf$clear$i65$3 = 0, $bf$clear$i65$4 = 0, $bf$clear$i65$5 = 0, $bf$clear17 = 0;
 var $bf$clear21 = 0, $bf$clear3$i = 0, $bf$clear30 = 0, $bf$clear34 = 0, $bf$clear5$i = 0, $bf$clear5$i$1 = 0, $bf$clear5$i$2 = 0, $bf$clear5$i71 = 0, $bf$clear5$i71$1 = 0, $bf$clear5$i71$2 = 0, $bf$clear5$i71$3 = 0, $bf$clear5$i71$4 = 0, $bf$clear5$i71$5 = 0, $bf$clear89 = 0, $bf$load$i = 0, $bf$load$i$1 = 0, $bf$load$i$2 = 0, $bf$load$i64 = 0, $bf$load$i64$1 = 0, $bf$load$i64$2 = 0;
 var $bf$load$i64$3 = 0, $bf$load$i64$4 = 0, $bf$load$i64$5 = 0, $bf$lshr = 0, $bf$lshr$i = 0, $bf$lshr$i$1 = 0, $bf$lshr$i$2 = 0, $bf$lshr$i57 = 0, $bf$lshr$i70 = 0, $bf$lshr$i70$1 = 0, $bf$lshr$i70$2 = 0, $bf$lshr$i70$3 = 0, $bf$lshr$i70$4 = 0, $bf$lshr$i70$5 = 0, $bf$lshr25 = 0, $bf$lshr29 = 0, $bf$lshr33 = 0, $bf$lshr45 = 0, $bf$lshr5$i = 0, $bf$lshr7$i = 0;
 var $bf$lshr7$i$1 = 0, $bf$lshr7$i$2 = 0, $bf$lshr7$i73 = 0, $bf$lshr7$i73$1 = 0, $bf$lshr7$i73$2 = 0, $bf$lshr7$i73$3 = 0, $bf$lshr7$i73$4 = 0, $bf$lshr7$i73$5 = 0, $bf$set = 0, $call102 = 0, $cmp = 0, $cmp84 = 0, $conv1$i = 0, $conv10$i = 0, $conv10$i$1 = 0, $conv10$i$2 = 0, $conv10$i79 = 0, $conv10$i79$1 = 0, $conv10$i79$2 = 0, $conv10$i79$3 = 0;
 var $conv10$i79$4 = 0, $conv10$i79$5 = 0, $conv13 = 0, $conv27 = 0, $conv3$i = 0, $conv3$i$1 = 0, $conv3$i$2 = 0, $conv3$i69 = 0, $conv3$i69$1 = 0, $conv3$i69$2 = 0, $conv3$i69$3 = 0, $conv3$i69$4 = 0, $conv3$i69$5 = 0, $conv36 = 0, $conv42 = 0, $conv51 = 0, $conv9$i$1 = 0, $conv9$i$2 = 0, $conv9$i77$1 = 0, $conv9$i77$2 = 0;
 var $conv9$i77$3 = 0, $conv9$i77$4 = 0, $conv9$i77$5 = 0, $conv94 = 0, $conv97 = 0, $data$i = 0, $div = 0, $div83 = 0, $idxprom = 0, $idxprom6 = 0, $idxprom95 = 0, $idxprom99 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$1 = 0, $incdec$ptr$i83 = 0, $incdec$ptr$i83$1 = 0, $incdec$ptr$i83$2 = 0, $incdec$ptr$i83$3 = 0, $incdec$ptr$i83$4 = 0, $mul4051 = 0;
 var $mul82 = 0, $mux = 0, $mux5$sroa$0$0 = 0, $mux5$sroa$0$0$$sroa_idx = 0, $mux5$sroa$0$0$copyload = 0, $mux5$sroa$0$1 = 0, $muxmode = 0, $or$i$1 = 0, $or$i$2 = 0, $or$i78$1 = 0, $or$i78$2 = 0, $or$i78$3 = 0, $or$i78$4 = 0, $or$i78$5 = 0, $phitmp = 0, $phitmp89 = 0, $ref = 0, $ref_values = 0, $reg$0 = 0, $reg$1 = 0;
 var $res$1$i = 0, $res$1$i$1 = 0, $res$1$i$2 = 0, $res$1$i81 = 0, $res$1$i81$1 = 0, $res$1$i81$2 = 0, $res$1$i81$3 = 0, $res$1$i81$4 = 0, $res$1$i81$5 = 0, $retval$0$i = 0, $shl = 0, $shl$i$1 = 0, $shl$i$2 = 0, $shl$i76$1 = 0, $shl$i76$2 = 0, $shl$i76$3 = 0, $shl$i76$4 = 0, $shl$i76$5 = 0, $shr = 0, $shr$i = 0;
 var $shr$i$1 = 0, $shr$i$2 = 0, $shr$i58 = 0, $shr$i72 = 0, $shr$i72$1 = 0, $shr$i72$2 = 0, $shr$i72$3 = 0, $shr$i72$4 = 0, $shr$i72$5 = 0, $sub = 0, $temp = 0, $tobool = 0, $tobool$i = 0, $tobool$i$1 = 0, $tobool$i$2 = 0, $tobool$i54 = 0, $tobool$i66 = 0, $tobool$i66$1 = 0, $tobool$i66$2 = 0, $tobool$i66$3 = 0;
 var $tobool$i66$4 = 0, $tobool$i66$5 = 0, $tobool47 = 0, $tobool54 = 0, $tobool63 = 0, $tobool72 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr9 = 0, $vcc = 0, $vcc53 = 0, $vref$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($param)) + 563|0);
 $1 = HEAP8[$0>>0]|0;
 $tobool = ($1<<24>>24)==(0);
 if (!($tobool)) {
  $call102 = (_avr_core_watch_read($avr,$addr)|0);
  STACKTOP = sp;return ($call102|0);
 }
 $ref = ((($param)) + 68|0);
 $data$i = ((($avr)) + 5892|0);
 $bf$load$i = HEAP32[$ref>>2]|0;
 $bf$clear$i = $bf$load$i & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $res$1$i = 0;
 } else {
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($2) + ($bf$clear$i)|0);
  $3 = HEAP8[$arrayidx$i>>0]|0;
  $conv3$i = $3&255;
  $bf$lshr$i = $bf$load$i >>> 9;
  $bf$clear5$i = $bf$lshr$i & 7;
  $shr$i = $conv3$i >>> $bf$clear5$i;
  $bf$lshr7$i = $bf$load$i >>> 12;
  $and$i = $bf$lshr7$i & $shr$i;
  $conv10$i = $and$i&255;
  $res$1$i = $conv10$i;
 }
 $incdec$ptr$i = ((($param)) + 72|0);
 $bf$load$i$1 = HEAP32[$incdec$ptr$i>>2]|0;
 $bf$clear$i$1 = $bf$load$i$1 & 511;
 $tobool$i$1 = ($bf$clear$i$1|0)==(0);
 if ($tobool$i$1) {
  $res$1$i$1 = $res$1$i;
 } else {
  $33 = HEAP32[$data$i>>2]|0;
  $arrayidx$i$1 = (($33) + ($bf$clear$i$1)|0);
  $34 = HEAP8[$arrayidx$i$1>>0]|0;
  $conv3$i$1 = $34&255;
  $bf$lshr$i$1 = $bf$load$i$1 >>> 9;
  $bf$clear5$i$1 = $bf$lshr$i$1 & 7;
  $shr$i$1 = $conv3$i$1 >>> $bf$clear5$i$1;
  $bf$lshr7$i$1 = $bf$load$i$1 >>> 12;
  $and$i$1 = $bf$lshr7$i$1 & $shr$i$1;
  $shl$i$1 = $and$i$1 << 1;
  $conv9$i$1 = $res$1$i&255;
  $or$i$1 = $shl$i$1 | $conv9$i$1;
  $conv10$i$1 = $or$i$1&255;
  $res$1$i$1 = $conv10$i$1;
 }
 $incdec$ptr$i$1 = ((($param)) + 76|0);
 $bf$load$i$2 = HEAP32[$incdec$ptr$i$1>>2]|0;
 $bf$clear$i$2 = $bf$load$i$2 & 511;
 $tobool$i$2 = ($bf$clear$i$2|0)==(0);
 if ($tobool$i$2) {
  $res$1$i$2 = $res$1$i$1;
 } else {
  $35 = HEAP32[$data$i>>2]|0;
  $arrayidx$i$2 = (($35) + ($bf$clear$i$2)|0);
  $36 = HEAP8[$arrayidx$i$2>>0]|0;
  $conv3$i$2 = $36&255;
  $bf$lshr$i$2 = $bf$load$i$2 >>> 9;
  $bf$clear5$i$2 = $bf$lshr$i$2 & 7;
  $shr$i$2 = $conv3$i$2 >>> $bf$clear5$i$2;
  $bf$lshr7$i$2 = $bf$load$i$2 >>> 12;
  $and$i$2 = $bf$lshr7$i$2 & $shr$i$2;
  $shl$i$2 = $and$i$2 << 2;
  $conv9$i$2 = $res$1$i$1&255;
  $or$i$2 = $shl$i$2 | $conv9$i$2;
  $conv10$i$2 = $or$i$2&255;
  $res$1$i$2 = $conv10$i$2;
 }
 $ref_values = ((($param)) + 80|0);
 $idxprom = $res$1$i$2&255;
 $arrayidx = (($ref_values) + ($idxprom<<1)|0);
 $13 = HEAP16[$arrayidx>>1]|0;
 $mux = ((($param)) + 44|0);
 $bf$load$i64 = HEAP32[$mux>>2]|0;
 $bf$clear$i65 = $bf$load$i64 & 511;
 $tobool$i66 = ($bf$clear$i65|0)==(0);
 if ($tobool$i66) {
  $res$1$i81 = 0;
 } else {
  $4 = HEAP32[$data$i>>2]|0;
  $arrayidx$i68 = (($4) + ($bf$clear$i65)|0);
  $5 = HEAP8[$arrayidx$i68>>0]|0;
  $conv3$i69 = $5&255;
  $bf$lshr$i70 = $bf$load$i64 >>> 9;
  $bf$clear5$i71 = $bf$lshr$i70 & 7;
  $shr$i72 = $conv3$i69 >>> $bf$clear5$i71;
  $bf$lshr7$i73 = $bf$load$i64 >>> 12;
  $and$i75 = $bf$lshr7$i73 & $shr$i72;
  $conv10$i79 = $and$i75&255;
  $res$1$i81 = $conv10$i79;
 }
 $incdec$ptr$i83 = ((($param)) + 48|0);
 $bf$load$i64$1 = HEAP32[$incdec$ptr$i83>>2]|0;
 $bf$clear$i65$1 = $bf$load$i64$1 & 511;
 $tobool$i66$1 = ($bf$clear$i65$1|0)==(0);
 if ($tobool$i66$1) {
  $res$1$i81$1 = $res$1$i81;
 } else {
  $23 = HEAP32[$data$i>>2]|0;
  $arrayidx$i68$1 = (($23) + ($bf$clear$i65$1)|0);
  $24 = HEAP8[$arrayidx$i68$1>>0]|0;
  $conv3$i69$1 = $24&255;
  $bf$lshr$i70$1 = $bf$load$i64$1 >>> 9;
  $bf$clear5$i71$1 = $bf$lshr$i70$1 & 7;
  $shr$i72$1 = $conv3$i69$1 >>> $bf$clear5$i71$1;
  $bf$lshr7$i73$1 = $bf$load$i64$1 >>> 12;
  $and$i75$1 = $bf$lshr7$i73$1 & $shr$i72$1;
  $shl$i76$1 = $and$i75$1 << 1;
  $conv9$i77$1 = $res$1$i81&255;
  $or$i78$1 = $shl$i76$1 | $conv9$i77$1;
  $conv10$i79$1 = $or$i78$1&255;
  $res$1$i81$1 = $conv10$i79$1;
 }
 $incdec$ptr$i83$1 = ((($param)) + 52|0);
 $bf$load$i64$2 = HEAP32[$incdec$ptr$i83$1>>2]|0;
 $bf$clear$i65$2 = $bf$load$i64$2 & 511;
 $tobool$i66$2 = ($bf$clear$i65$2|0)==(0);
 if ($tobool$i66$2) {
  $res$1$i81$2 = $res$1$i81$1;
 } else {
  $25 = HEAP32[$data$i>>2]|0;
  $arrayidx$i68$2 = (($25) + ($bf$clear$i65$2)|0);
  $26 = HEAP8[$arrayidx$i68$2>>0]|0;
  $conv3$i69$2 = $26&255;
  $bf$lshr$i70$2 = $bf$load$i64$2 >>> 9;
  $bf$clear5$i71$2 = $bf$lshr$i70$2 & 7;
  $shr$i72$2 = $conv3$i69$2 >>> $bf$clear5$i71$2;
  $bf$lshr7$i73$2 = $bf$load$i64$2 >>> 12;
  $and$i75$2 = $bf$lshr7$i73$2 & $shr$i72$2;
  $shl$i76$2 = $and$i75$2 << 2;
  $conv9$i77$2 = $res$1$i81$1&255;
  $or$i78$2 = $shl$i76$2 | $conv9$i77$2;
  $conv10$i79$2 = $or$i78$2&255;
  $res$1$i81$2 = $conv10$i79$2;
 }
 $incdec$ptr$i83$2 = ((($param)) + 56|0);
 $bf$load$i64$3 = HEAP32[$incdec$ptr$i83$2>>2]|0;
 $bf$clear$i65$3 = $bf$load$i64$3 & 511;
 $tobool$i66$3 = ($bf$clear$i65$3|0)==(0);
 if ($tobool$i66$3) {
  $res$1$i81$3 = $res$1$i81$2;
 } else {
  $27 = HEAP32[$data$i>>2]|0;
  $arrayidx$i68$3 = (($27) + ($bf$clear$i65$3)|0);
  $28 = HEAP8[$arrayidx$i68$3>>0]|0;
  $conv3$i69$3 = $28&255;
  $bf$lshr$i70$3 = $bf$load$i64$3 >>> 9;
  $bf$clear5$i71$3 = $bf$lshr$i70$3 & 7;
  $shr$i72$3 = $conv3$i69$3 >>> $bf$clear5$i71$3;
  $bf$lshr7$i73$3 = $bf$load$i64$3 >>> 12;
  $and$i75$3 = $bf$lshr7$i73$3 & $shr$i72$3;
  $shl$i76$3 = $and$i75$3 << 3;
  $conv9$i77$3 = $res$1$i81$2&255;
  $or$i78$3 = $shl$i76$3 | $conv9$i77$3;
  $conv10$i79$3 = $or$i78$3&255;
  $res$1$i81$3 = $conv10$i79$3;
 }
 $incdec$ptr$i83$3 = ((($param)) + 60|0);
 $bf$load$i64$4 = HEAP32[$incdec$ptr$i83$3>>2]|0;
 $bf$clear$i65$4 = $bf$load$i64$4 & 511;
 $tobool$i66$4 = ($bf$clear$i65$4|0)==(0);
 if ($tobool$i66$4) {
  $res$1$i81$4 = $res$1$i81$3;
 } else {
  $29 = HEAP32[$data$i>>2]|0;
  $arrayidx$i68$4 = (($29) + ($bf$clear$i65$4)|0);
  $30 = HEAP8[$arrayidx$i68$4>>0]|0;
  $conv3$i69$4 = $30&255;
  $bf$lshr$i70$4 = $bf$load$i64$4 >>> 9;
  $bf$clear5$i71$4 = $bf$lshr$i70$4 & 7;
  $shr$i72$4 = $conv3$i69$4 >>> $bf$clear5$i71$4;
  $bf$lshr7$i73$4 = $bf$load$i64$4 >>> 12;
  $and$i75$4 = $bf$lshr7$i73$4 & $shr$i72$4;
  $shl$i76$4 = $and$i75$4 << 4;
  $conv9$i77$4 = $res$1$i81$3&255;
  $or$i78$4 = $shl$i76$4 | $conv9$i77$4;
  $conv10$i79$4 = $or$i78$4&255;
  $res$1$i81$4 = $conv10$i79$4;
 }
 $incdec$ptr$i83$4 = ((($param)) + 64|0);
 $bf$load$i64$5 = HEAP32[$incdec$ptr$i83$4>>2]|0;
 $bf$clear$i65$5 = $bf$load$i64$5 & 511;
 $tobool$i66$5 = ($bf$clear$i65$5|0)==(0);
 if ($tobool$i66$5) {
  $res$1$i81$5 = $res$1$i81$4;
 } else {
  $31 = HEAP32[$data$i>>2]|0;
  $arrayidx$i68$5 = (($31) + ($bf$clear$i65$5)|0);
  $32 = HEAP8[$arrayidx$i68$5>>0]|0;
  $conv3$i69$5 = $32&255;
  $bf$lshr$i70$5 = $bf$load$i64$5 >>> 9;
  $bf$clear5$i71$5 = $bf$lshr$i70$5 & 7;
  $shr$i72$5 = $conv3$i69$5 >>> $bf$clear5$i71$5;
  $bf$lshr7$i73$5 = $bf$load$i64$5 >>> 12;
  $and$i75$5 = $bf$lshr7$i73$5 & $shr$i72$5;
  $shl$i76$5 = $and$i75$5 << 5;
  $conv9$i77$5 = $res$1$i81$4&255;
  $or$i78$5 = $shl$i76$5 | $conv9$i77$5;
  $conv10$i79$5 = $or$i78$5&255;
  $res$1$i81$5 = $conv10$i79$5;
 }
 $muxmode = ((($param)) + 288|0);
 $idxprom6 = $res$1$i81$5&255;
 $mux5$sroa$0$0$$sroa_idx = (($muxmode) + ($idxprom6<<2)|0);
 $mux5$sroa$0$0$copyload = HEAP32[$mux5$sroa$0$0$$sroa_idx>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 96|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i53 = $$sroa$0$0$copyload & 511;
 $tobool$i54 = ($bf$clear$i53|0)==(0);
 if ($tobool$i54) {
  $retval$0$i = 0;
 } else {
  $6 = HEAP32[$data$i>>2]|0;
  $arrayidx$i56 = (($6) + ($bf$clear$i53)|0);
  $7 = HEAP8[$arrayidx$i56>>0]|0;
  $conv1$i = $7&255;
  $bf$lshr$i57 = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i57 & 7;
  $shr$i58 = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i59 = $shr$i58 & $bf$lshr5$i;
  $phitmp = ($and$i59|0)==(0);
  $phitmp89 = $phitmp ? 0 : 6;
  $retval$0$i = $phitmp89;
 }
 $trunc = $mux5$sroa$0$0$copyload&255;
 $trunc$clear = $trunc & 7;
 L34: do {
  switch ($trunc$clear<<24>>24) {
  case 2:  {
   $adc_values = ((($param)) + 544|0);
   $bf$lshr = $mux5$sroa$0$0$copyload >>> 19;
   $arrayidx12 = (($adc_values) + ($bf$lshr<<1)|0);
   $8 = HEAP16[$arrayidx12>>1]|0;
   $conv13 = $8&65535;
   $mux5$sroa$0$1 = $mux5$sroa$0$0$copyload;$reg$0 = $conv13;
   break;
  }
  case 3:  {
   $bf$clear17 = $mux5$sroa$0$0$copyload & 2040;
   $cmp = ($bf$clear17|0)==(0);
   $bf$clear21 = $mux5$sroa$0$0$copyload & -2041;
   $bf$set = $bf$clear21 | 8;
   $mux5$sroa$0$0 = $cmp ? $bf$set : $mux5$sroa$0$0$copyload;
   $adc_values23 = ((($param)) + 544|0);
   $bf$lshr25 = $mux5$sroa$0$0 >>> 19;
   $arrayidx26 = (($adc_values23) + ($bf$lshr25<<1)|0);
   $9 = HEAP16[$arrayidx26>>1]|0;
   $conv27 = $9&65535;
   $bf$lshr29 = $mux5$sroa$0$0 >>> 3;
   $bf$clear30 = $bf$lshr29 & 255;
   $bf$lshr33 = $mux5$sroa$0$0 >>> 11;
   $bf$clear34 = $bf$lshr33 & 255;
   $arrayidx35 = (($adc_values23) + ($bf$clear34<<1)|0);
   $10 = HEAP16[$arrayidx35>>1]|0;
   $conv36 = $10&65535;
   $mul4051 = (($conv27) - ($conv36))|0;
   $sub = Math_imul($mul4051, $bf$clear30)|0;
   $mux5$sroa$0$1 = $mux5$sroa$0$0;$reg$0 = $sub;
   break;
  }
  case 4:  {
   $temp = ((($param)) + 560|0);
   $11 = HEAP16[$temp>>1]|0;
   $conv42 = $11&65535;
   $mux5$sroa$0$1 = $mux5$sroa$0$0$copyload;$reg$0 = $conv42;
   break;
  }
  case 5:  {
   $bf$lshr45 = $mux5$sroa$0$0$copyload >>> 19;
   $mux5$sroa$0$1 = $mux5$sroa$0$0$copyload;$reg$0 = $bf$lshr45;
   break;
  }
  case 6:  {
   $vcc = ((($avr)) + 44|0);
   $12 = HEAP32[$vcc>>2]|0;
   $tobool47 = ($12|0)==(0);
   if ($tobool47) {
    _avr_global_logger($avr,2,359978,$vararg_buffer);
    $mux5$sroa$0$1 = $mux5$sroa$0$0$copyload;$reg$0 = 0;
    break L34;
   } else {
    $div = $12 >>> 2;
    $mux5$sroa$0$1 = $mux5$sroa$0$0$copyload;$reg$0 = $div;
    break L34;
   }
   break;
  }
  default: {
   $mux5$sroa$0$1 = $mux5$sroa$0$0$copyload;$reg$0 = 0;
  }
  }
 } while(0);
 switch ($13<<16>>16) {
 case 1:  {
  $vcc53 = ((($avr)) + 44|0);
  $14 = HEAP32[$vcc53>>2]|0;
  $tobool54 = ($14|0)==(0);
  if ($tobool54) {
   _avr_global_logger($avr,2,359978,$vararg_buffer1);
   $vref$0 = 3300;
  } else {
   $vref$0 = $14;
  }
  break;
 }
 case 0:  {
  $aref = ((($avr)) + 52|0);
  $15 = HEAP32[$aref>>2]|0;
  $tobool63 = ($15|0)==(0);
  if ($tobool63) {
   _avr_global_logger($avr,2,360011,$vararg_buffer3);
   $vref$0 = 3300;
  } else {
   $vref$0 = $15;
  }
  break;
 }
 case 2:  {
  $avcc = ((($avr)) + 48|0);
  $16 = HEAP32[$avcc>>2]|0;
  $tobool72 = ($16|0)==(0);
  if ($tobool72) {
   _avr_global_logger($avr,2,360045,$vararg_buffer5);
   $vref$0 = 3300;
  } else {
   $vref$0 = $16;
  }
  break;
 }
 default: {
  $conv51 = $13&65535;
  $vref$0 = $conv51;
 }
 }
 $mul82 = ($reg$0*1023)|0;
 $div83 = (($mul82>>>0) / ($vref$0>>>0))&-1;
 $cmp84 = ($div83>>>0)>(1023);
 if ($cmp84) {
  $bf$clear89 = $mux5$sroa$0$1 & 7;
  HEAP32[$vararg_buffer7>>2] = $bf$clear89;
  $vararg_ptr9 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $div83;
  $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = 1023;
  $vararg_ptr11 = ((($vararg_buffer7)) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $vref$0;
  _avr_global_logger($avr,2,360079,$vararg_buffer7);
  $reg$1 = 1023;
 } else {
  $reg$1 = $div83;
 }
 $shl = $reg$1 << $retval$0$i;
 $conv94 = $shl&255;
 $17 = HEAP32[$data$i>>2]|0;
 $18 = ((($param)) + 128|0);
 $19 = HEAP8[$18>>0]|0;
 $idxprom95 = $19&255;
 $arrayidx96 = (($17) + ($idxprom95)|0);
 HEAP8[$arrayidx96>>0] = $conv94;
 $shr = $shl >>> 8;
 $conv97 = $shr&255;
 $20 = HEAP32[$data$i>>2]|0;
 $21 = ((($param)) + 129|0);
 $22 = HEAP8[$21>>0]|0;
 $idxprom99 = $22&255;
 $arrayidx100 = (($20) + ($idxprom99)|0);
 HEAP8[$arrayidx100>>0] = $conv97;
 HEAP8[$0>>0] = 1;
 $call102 = (_avr_core_watch_read($avr,$addr)|0);
 STACKTOP = sp;return ($call102|0);
}
function _avr_adc_read_h($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call4 = 0, $conv1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 563|0);
 $1 = HEAP8[$0>>0]|0;
 switch ($1<<24>>24) {
 case 0:  {
  $2 = ((($param)) + 128|0);
  $3 = HEAP8[$2>>0]|0;
  $conv1 = $3&255;
  (_avr_adc_read_l($avr,$conv1,$param)|0);
  label = 3;
  break;
 }
 case 1:  {
  label = 3;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 3) {
  HEAP8[$0>>0] = 2;
 }
 $call4 = (_avr_core_watch_read($avr,$addr)|0);
 return ($call4|0);
}
function _avr_adc_configure_trigger($avr,$param) {
 $avr = $avr|0;
 $param = $param|0;
 var $$ph = 0, $$sink = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adts2 = 0;
 var $adts_op = 0, $and$i = 0, $and$i8 = 0, $and$i8$1 = 0, $and$i8$2 = 0, $and$i8$3 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i5 = 0, $arrayidx$i5$1 = 0, $arrayidx$i5$2 = 0, $arrayidx$i5$3 = 0, $arrayidx20 = 0, $arrayidx9 = 0, $bf$clear$i = 0, $bf$clear$i3 = 0, $bf$clear$i3$1 = 0, $bf$clear$i3$2 = 0, $bf$clear$i3$3 = 0, $bf$clear3$i = 0;
 var $bf$clear5$i = 0, $bf$clear5$i$1 = 0, $bf$clear5$i$2 = 0, $bf$clear5$i$3 = 0, $bf$load$i2 = 0, $bf$load$i2$1 = 0, $bf$load$i2$2 = 0, $bf$load$i2$3 = 0, $bf$lshr$i = 0, $bf$lshr$i6 = 0, $bf$lshr$i6$1 = 0, $bf$lshr$i6$2 = 0, $bf$lshr$i6$3 = 0, $bf$lshr5$i = 0, $bf$lshr7$i = 0, $bf$lshr7$i$1 = 0, $bf$lshr7$i$2 = 0, $bf$lshr7$i$3 = 0, $cmp = 0, $cond = 0;
 var $conv = 0, $conv1$i = 0, $conv10$i = 0, $conv10$i$1 = 0, $conv10$i$2 = 0, $conv10$i$3 = 0, $conv14 = 0, $conv3$i = 0, $conv3$i$1 = 0, $conv3$i$2 = 0, $conv3$i$3 = 0, $conv6 = 0, $conv9$i$1 = 0, $conv9$i$2 = 0, $conv9$i$3 = 0, $data$i = 0, $idxprom = 0, $incdec$ptr$i = 0, $incdec$ptr$i$1 = 0, $incdec$ptr$i$2 = 0;
 var $or$i$1 = 0, $or$i$2 = 0, $or$i$3 = 0, $res$1$i = 0, $res$1$i$1 = 0, $res$1$i$2 = 0, $res$1$i$3 = 0, $shl$i$1 = 0, $shl$i$2 = 0, $shl$i$3 = 0, $shr$i = 0, $shr$i7 = 0, $shr$i7$1 = 0, $shr$i7$2 = 0, $shr$i7$3 = 0, $tobool = 0, $tobool$i = 0, $tobool$i4 = 0, $tobool$i4$1 = 0, $tobool$i4$2 = 0;
 var $tobool$i4$3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$sroa$0$0$$sroa_idx = ((($param)) + 112|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $0 = ((($param)) + 212|0);
  $1 = HEAP8[$0>>0]|0;
  $$ph = $1;$$sink = $0;
  label = 8;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($2) + ($bf$clear$i)|0);
  $3 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $3&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $4 = ((($param)) + 212|0);
  $5 = HEAP8[$4>>0]|0;
  $tobool = ($and$i|0)==(0);
  if ($tobool) {
   $$ph = $5;$$sink = $4;
   label = 8;
  } else {
   $adts2 = ((($param)) + 132|0);
   $bf$load$i2 = HEAP32[$adts2>>2]|0;
   $bf$clear$i3 = $bf$load$i2 & 511;
   $tobool$i4 = ($bf$clear$i3|0)==(0);
   if ($tobool$i4) {
    $res$1$i = 0;
   } else {
    $arrayidx$i5 = (($2) + ($bf$clear$i3)|0);
    $6 = HEAP8[$arrayidx$i5>>0]|0;
    $conv3$i = $6&255;
    $bf$lshr$i6 = $bf$load$i2 >>> 9;
    $bf$clear5$i = $bf$lshr$i6 & 7;
    $shr$i7 = $conv3$i >>> $bf$clear5$i;
    $bf$lshr7$i = $bf$load$i2 >>> 12;
    $and$i8 = $bf$lshr7$i & $shr$i7;
    $conv10$i = $and$i8&255;
    $res$1$i = $conv10$i;
   }
   $incdec$ptr$i = ((($param)) + 136|0);
   $bf$load$i2$1 = HEAP32[$incdec$ptr$i>>2]|0;
   $bf$clear$i3$1 = $bf$load$i2$1 & 511;
   $tobool$i4$1 = ($bf$clear$i3$1|0)==(0);
   if ($tobool$i4$1) {
    $res$1$i$1 = $res$1$i;
   } else {
    $arrayidx$i5$1 = (($2) + ($bf$clear$i3$1)|0);
    $11 = HEAP8[$arrayidx$i5$1>>0]|0;
    $conv3$i$1 = $11&255;
    $bf$lshr$i6$1 = $bf$load$i2$1 >>> 9;
    $bf$clear5$i$1 = $bf$lshr$i6$1 & 7;
    $shr$i7$1 = $conv3$i$1 >>> $bf$clear5$i$1;
    $bf$lshr7$i$1 = $bf$load$i2$1 >>> 12;
    $and$i8$1 = $bf$lshr7$i$1 & $shr$i7$1;
    $shl$i$1 = $and$i8$1 << 1;
    $conv9$i$1 = $res$1$i&255;
    $or$i$1 = $shl$i$1 | $conv9$i$1;
    $conv10$i$1 = $or$i$1&255;
    $res$1$i$1 = $conv10$i$1;
   }
   $incdec$ptr$i$1 = ((($param)) + 140|0);
   $bf$load$i2$2 = HEAP32[$incdec$ptr$i$1>>2]|0;
   $bf$clear$i3$2 = $bf$load$i2$2 & 511;
   $tobool$i4$2 = ($bf$clear$i3$2|0)==(0);
   if ($tobool$i4$2) {
    $res$1$i$2 = $res$1$i$1;
   } else {
    $arrayidx$i5$2 = (($2) + ($bf$clear$i3$2)|0);
    $12 = HEAP8[$arrayidx$i5$2>>0]|0;
    $conv3$i$2 = $12&255;
    $bf$lshr$i6$2 = $bf$load$i2$2 >>> 9;
    $bf$clear5$i$2 = $bf$lshr$i6$2 & 7;
    $shr$i7$2 = $conv3$i$2 >>> $bf$clear5$i$2;
    $bf$lshr7$i$2 = $bf$load$i2$2 >>> 12;
    $and$i8$2 = $bf$lshr7$i$2 & $shr$i7$2;
    $shl$i$2 = $and$i8$2 << 2;
    $conv9$i$2 = $res$1$i$1&255;
    $or$i$2 = $shl$i$2 | $conv9$i$2;
    $conv10$i$2 = $or$i$2&255;
    $res$1$i$2 = $conv10$i$2;
   }
   $incdec$ptr$i$2 = ((($param)) + 144|0);
   $bf$load$i2$3 = HEAP32[$incdec$ptr$i$2>>2]|0;
   $bf$clear$i3$3 = $bf$load$i2$3 & 511;
   $tobool$i4$3 = ($bf$clear$i3$3|0)==(0);
   if ($tobool$i4$3) {
    $res$1$i$3 = $res$1$i$2;
   } else {
    $arrayidx$i5$3 = (($2) + ($bf$clear$i3$3)|0);
    $13 = HEAP8[$arrayidx$i5$3>>0]|0;
    $conv3$i$3 = $13&255;
    $bf$lshr$i6$3 = $bf$load$i2$3 >>> 9;
    $bf$clear5$i$3 = $bf$lshr$i6$3 & 7;
    $shr$i7$3 = $conv3$i$3 >>> $bf$clear5$i$3;
    $bf$lshr7$i$3 = $bf$load$i2$3 >>> 12;
    $and$i8$3 = $bf$lshr7$i$3 & $shr$i7$3;
    $shl$i$3 = $and$i8$3 << 3;
    $conv9$i$3 = $res$1$i$2&255;
    $or$i$3 = $shl$i$3 | $conv9$i$3;
    $conv10$i$3 = $or$i$3&255;
    $res$1$i$3 = $conv10$i$3;
   }
   $adts_op = ((($param)) + 148|0);
   $idxprom = $res$1$i$3&255;
   $arrayidx = (($adts_op) + ($idxprom<<2)|0);
   $14 = HEAP32[$arrayidx>>2]|0;
   $conv = $14&255;
   HEAP8[$4>>0] = $conv;
   $conv6 = $14 & 255;
   $cond = ($conv6|0)==(1);
   if ($cond) {
    $8 = $5;$9 = $conv;
   } else {
    $arrayidx9 = (256 + ($conv6<<2)|0);
    $7 = HEAP32[$arrayidx9>>2]|0;
    HEAP32[$vararg_buffer>>2] = $7;
    _avr_global_logger($avr,2,360118,$vararg_buffer);
    $$ph = $5;$$sink = $4;
    label = 8;
   }
  }
 }
 if ((label|0) == 8) {
  HEAP8[$$sink>>0] = 0;
  $8 = $$ph;$9 = 0;
 }
 $cmp = ($8<<24>>24)==($9<<24>>24);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $conv14 = $9&255;
 $arrayidx20 = (256 + ($conv14<<2)|0);
 $10 = HEAP32[$arrayidx20>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $10;
 _avr_global_logger($avr,3,360160,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _avr_adc_int_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$019$0$$sroa_idx = 0, $$sroa$019$0$copyload = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adc = 0, $add$ptr = 0, $and$i = 0, $and$i16 = 0, $arrayidx$i = 0, $arrayidx$i14 = 0, $bf$clear$i = 0;
 var $bf$clear$i11 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr$i12 = 0, $bf$lshr4$i = 0, $bf$lshr5$i = 0, $cmp = 0, $conv$i = 0, $conv1$i = 0, $conv7$i15 = 0, $conv9$i = 0, $data$i = 0, $irq = 0, $neg$i = 0, $shl$i = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 104|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  setTempRet0((0) | 0);
  return 0;
 }
 $data$i = ((($avr)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $3&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  setTempRet0((0) | 0);
  return 0;
 }
 $adc = ((($param)) + 224|0);
 (_avr_raise_interrupt($avr,$adc)|0);
 $$sroa$019$0$$sroa_idx = ((($param)) + 108|0);
 $$sroa$019$0$copyload = HEAPU8[$$sroa$019$0$$sroa_idx>>0]|(HEAPU8[$$sroa$019$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$019$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$019$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i11 = $$sroa$019$0$copyload & 511;
 $conv$i = $bf$clear$i11&65535;
 $bf$lshr$i12 = $$sroa$019$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i12 & 255;
 $bf$lshr4$i = $$sroa$019$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $4 = HEAP32[$data$i>>2]|0;
 $arrayidx$i14 = (($4) + ($bf$clear$i11)|0);
 $5 = HEAP8[$arrayidx$i14>>0]|0;
 $conv7$i15 = $5&255;
 $neg$i = $shl$i ^ 255;
 $and$i16 = $neg$i & $conv7$i15;
 $conv9$i = $and$i16&255;
 _avr_core_watch_write($avr,$conv$i,$conv9$i);
 $6 = ((($param)) + 562|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($param)) + 563|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($param)) + 212|0);
 $9 = HEAP8[$8>>0]|0;
 $cmp = ($9<<24>>24)==(1);
 if (!($cmp)) {
  setTempRet0((0) | 0);
  return 0;
 }
 $irq = ((($param)) + 24|0);
 $10 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($10)) + 408|0);
 _avr_raise_irq($add$ptr,1);
 setTempRet0((0) | 0);
 return 0;
}
function _avr_adc_reset($port) {
 $port = $port|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr$1 = 0, $add$ptr$10 = 0, $add$ptr$11 = 0, $add$ptr$12 = 0, $add$ptr$13 = 0, $add$ptr$14 = 0, $add$ptr$15 = 0, $add$ptr$16 = 0, $add$ptr$17 = 0, $add$ptr$18 = 0, $add$ptr$2 = 0, $add$ptr$3 = 0, $add$ptr$4 = 0, $add$ptr$5 = 0, $add$ptr$6 = 0;
 var $add$ptr$7 = 0, $add$ptr$8 = 0, $add$ptr$9 = 0, $and$i = 0, $arrayidx$i = 0, $avr = 0, $bf$clear$i = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0, $conv$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $irq = 0, $neg$i = 0, $shl$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr = ((($port)) + 4|0);
 $0 = HEAP32[$avr>>2]|0;
 _avr_cycle_timer_cancel($0,99,$port);
 $1 = HEAP32[$avr>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($port)) + 108|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($1)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $3&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($1,$conv$i,$conv9$i);
 $irq = ((($port)) + 24|0);
 $4 = HEAP32[$irq>>2]|0;
 _avr_irq_register_notify($4,100,$port);
 $5 = HEAP32[$irq>>2]|0;
 $add$ptr$1 = ((($5)) + 24|0);
 _avr_irq_register_notify($add$ptr$1,100,$port);
 $6 = HEAP32[$irq>>2]|0;
 $add$ptr$2 = ((($6)) + 48|0);
 _avr_irq_register_notify($add$ptr$2,100,$port);
 $7 = HEAP32[$irq>>2]|0;
 $add$ptr$3 = ((($7)) + 72|0);
 _avr_irq_register_notify($add$ptr$3,100,$port);
 $8 = HEAP32[$irq>>2]|0;
 $add$ptr$4 = ((($8)) + 96|0);
 _avr_irq_register_notify($add$ptr$4,100,$port);
 $9 = HEAP32[$irq>>2]|0;
 $add$ptr$5 = ((($9)) + 120|0);
 _avr_irq_register_notify($add$ptr$5,100,$port);
 $10 = HEAP32[$irq>>2]|0;
 $add$ptr$6 = ((($10)) + 144|0);
 _avr_irq_register_notify($add$ptr$6,100,$port);
 $11 = HEAP32[$irq>>2]|0;
 $add$ptr$7 = ((($11)) + 168|0);
 _avr_irq_register_notify($add$ptr$7,100,$port);
 $12 = HEAP32[$irq>>2]|0;
 $add$ptr$8 = ((($12)) + 192|0);
 _avr_irq_register_notify($add$ptr$8,100,$port);
 $13 = HEAP32[$irq>>2]|0;
 $add$ptr$9 = ((($13)) + 216|0);
 _avr_irq_register_notify($add$ptr$9,100,$port);
 $14 = HEAP32[$irq>>2]|0;
 $add$ptr$10 = ((($14)) + 240|0);
 _avr_irq_register_notify($add$ptr$10,100,$port);
 $15 = HEAP32[$irq>>2]|0;
 $add$ptr$11 = ((($15)) + 264|0);
 _avr_irq_register_notify($add$ptr$11,100,$port);
 $16 = HEAP32[$irq>>2]|0;
 $add$ptr$12 = ((($16)) + 288|0);
 _avr_irq_register_notify($add$ptr$12,100,$port);
 $17 = HEAP32[$irq>>2]|0;
 $add$ptr$13 = ((($17)) + 312|0);
 _avr_irq_register_notify($add$ptr$13,100,$port);
 $18 = HEAP32[$irq>>2]|0;
 $add$ptr$14 = ((($18)) + 336|0);
 _avr_irq_register_notify($add$ptr$14,100,$port);
 $19 = HEAP32[$irq>>2]|0;
 $add$ptr$15 = ((($19)) + 360|0);
 _avr_irq_register_notify($add$ptr$15,100,$port);
 $20 = HEAP32[$irq>>2]|0;
 $add$ptr$16 = ((($20)) + 384|0);
 _avr_irq_register_notify($add$ptr$16,100,$port);
 $21 = HEAP32[$irq>>2]|0;
 $add$ptr$17 = ((($21)) + 408|0);
 _avr_irq_register_notify($add$ptr$17,100,$port);
 $22 = HEAP32[$irq>>2]|0;
 $add$ptr$18 = ((($22)) + 432|0);
 _avr_irq_register_notify($add$ptr$18,100,$port);
 return;
}
function _avr_adc_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$old = 0, $$pre = 0, $$pre39 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$034$0$copyload = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $adc_values = 0, $adsc = 0, $and$i = 0, $and$i27 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i21 = 0;
 var $arrayidx14 = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear$i18 = 0, $bf$clear18$pre$phiZZ2D = 0, $bf$clear3$i = 0, $bf$clear3$i24 = 0, $bf$lshr$i = 0, $bf$lshr$i23 = 0, $bf$lshr5$i = 0, $bf$lshr5$i26 = 0, $conv = 0, $conv1$i = 0, $conv1$i22 = 0, $conv11 = 0, $conv15 = 0, $conv19 = 0, $conv20 = 0, $conv5 = 0, $data$i = 0;
 var $idxprom = 0, $irq2 = 0, $or = 0, $or$cond = 0, $shl = 0, $shr$i = 0, $shr$i25 = 0, $temp = 0, $tobool = 0, $tobool$i = 0, $tobool$i19 = 0, $tobool12 = 0, $tobool12$old = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $irq2 = ((($irq)) + 8|0);
 $1 = HEAP32[$irq2>>2]|0;
 switch ($1|0) {
 case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  $conv = $value&65535;
  $adc_values = ((($param)) + 544|0);
  $arrayidx = (($adc_values) + ($1<<1)|0);
  HEAP16[$arrayidx>>1] = $conv;
  return;
  break;
 }
 case 16:  {
  $conv5 = $value&65535;
  $temp = ((($param)) + 560|0);
  HEAP16[$temp>>1] = $conv5;
  return;
  break;
 }
 case 17:  {
  $$sroa$0$0$$sroa_idx = ((($param)) + 112|0);
  $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i = $$sroa$0$0$copyload & 511;
  $tobool$i = ($bf$clear$i|0)==(0);
  if ($tobool$i) {
   return;
  }
  $data$i = ((($0)) + 5892|0);
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($2) + ($bf$clear$i)|0);
  $3 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $3&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $tobool = ($and$i|0)==(0);
  if ($tobool) {
   return;
  }
  $adsc = ((($param)) + 108|0);
  $$sroa$034$0$copyload = HEAPU8[$adsc>>0]|(HEAPU8[$adsc+1>>0]<<8)|(HEAPU8[$adsc+2>>0]<<16)|(HEAPU8[$adsc+3>>0]<<24);
  $bf$clear$i18 = $$sroa$034$0$copyload & 511;
  $tobool$i19 = ($bf$clear$i18|0)==(0);
  do {
   if ($tobool$i19) {
    $$old = $$sroa$034$0$copyload&255;
    $tobool12$old = ($$old<<24>>24)==(0);
    if ($tobool12$old) {
     return;
    } else {
     $$pre = $$sroa$034$0$copyload >>> 9;
     $$pre39 = $$pre & 7;
     $bf$clear18$pre$phiZZ2D = $$pre39;
     break;
    }
   } else {
    $arrayidx$i21 = (($2) + ($bf$clear$i18)|0);
    $4 = HEAP8[$arrayidx$i21>>0]|0;
    $conv1$i22 = $4&255;
    $bf$lshr$i23 = $$sroa$034$0$copyload >>> 9;
    $bf$clear3$i24 = $bf$lshr$i23 & 7;
    $shr$i25 = $conv1$i22 >>> $bf$clear3$i24;
    $bf$lshr5$i26 = $$sroa$034$0$copyload >>> 12;
    $and$i27 = $shr$i25 & $bf$lshr5$i26;
    $tobool8 = ($and$i27|0)!=(0);
    $conv11 = $$sroa$034$0$copyload&255;
    $tobool12 = ($conv11<<24>>24)==(0);
    $or$cond = $tobool12 | $tobool8;
    if ($or$cond) {
     return;
    } else {
     $bf$clear18$pre$phiZZ2D = $bf$clear3$i24;
    }
   }
  } while(0);
  $idxprom = $$sroa$034$0$copyload & 255;
  $arrayidx14 = (($2) + ($idxprom)|0);
  $5 = HEAP8[$arrayidx14>>0]|0;
  $conv15 = $5&255;
  $shl = 1 << $bf$clear18$pre$phiZZ2D;
  $or = $shl | $conv15;
  $conv19 = $or&255;
  $6 = $$sroa$034$0$copyload&65535;
  $conv20 = $6 & 255;
  _avr_adc_write_adcsra($0,$conv20,$conv19,$param);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _avr_twi_reset($io) {
 $io = $io|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and$i = 0, $and11$i = 0, $arrayidx$i = 0, $avr = 0, $bf$clear$i = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0, $conv$i = 0, $conv12$i = 0, $conv7$i = 0, $data$i = 0, $irq = 0;
 var $neg$i = 0, $or$i = 0, $peer_addr = 0, $shl$i = 0, $state = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $irq = ((($io)) + 24|0);
 $0 = HEAP32[$irq>>2]|0;
 _avr_irq_register_notify($0,101,$io);
 $peer_addr = ((($io)) + 153|0);
 HEAP8[$peer_addr>>0] = 0;
 $state = ((($io)) + 152|0);
 HEAP8[$state>>0] = 0;
 $avr = ((($io)) + 4|0);
 $1 = HEAP32[$avr>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($io)) + 80|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $tobool$i = ($conv$i<<16>>16)==(0);
 if ($tobool$i) {
  return;
 }
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($1)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $3&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $and11$i = $shl$i & 248;
 $or$i = $and$i | $and11$i;
 $conv12$i = $or$i&255;
 _avr_core_watch_write($1,$conv$i,$conv12$i);
 return;
}
function _avr_twi_irq_input($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and$i = 0, $and10 = 0, $and108 = 0, $and116 = 0;
 var $and133 = 0, $and147 = 0, $and165 = 0, $and34 = 0, $and46 = 0, $and55 = 0, $and90 = 0, $and98 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx157 = 0, $arrayidx183 = 0, $arrayidx22 = 0, $arrayidx42 = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear19 = 0, $bf$clear3$i = 0, $bf$lshr$i = 0, $bf$lshr115 = 0;
 var $bf$lshr153 = 0, $bf$lshr172 = 0, $bf$lshr18 = 0, $bf$lshr5$i = 0, $cmp = 0, $conv = 0, $conv1$i = 0, $conv101 = 0, $conv127 = 0, $conv129 = 0, $conv134 = 0, $conv154 = 0, $conv179 = 0, $conv23 = 0, $conv35 = 0, $conv43 = 0, $conv69 = 0, $data$i = 0, $idxprom = 0, $idxprom156 = 0;
 var $idxprom182 = 0, $idxprom21 = 0, $idxprom41 = 0, $neg = 0, $or128 = 0, $r_twamr = 0, $r_twar = 0, $r_twdr = 0, $r_twdr181 = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0, $tobool109 = 0, $tobool11 = 0, $tobool124 = 0, $tobool140 = 0, $tobool148 = 0, $tobool166 = 0, $tobool3 = 0, $tobool56 = 0;
 var $tobool91 = 0, $tobool99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 60|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  STACKTOP = sp;return;
 }
 $data$i = ((($0)) + 5892|0);
 $1 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($1) + ($bf$clear$i)|0);
 $2 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $2&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = 360761;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $value;
 _avr_global_logger($0,3,360752,$vararg_buffer);
 $and = $value & 256;
 $tobool3 = ($and|0)==(0);
 do {
  if (!($tobool3)) {
   $3 = ((($param)) + 152|0);
   HEAP8[$3>>0] = 0;
   $4 = ((($param)) + 153|0);
   HEAP8[$4>>0] = 0;
   $and10 = $value & 1024;
   $tobool11 = ($and10|0)==(0);
   if ($tobool11) {
    _avr_global_logger($0,3,360817,$vararg_buffer7);
    break;
   }
   $5 = HEAP32[$data$i>>2]|0;
   $r_twamr = ((($param)) + 56|0);
   $6 = HEAP16[$r_twamr>>1]|0;
   $idxprom = $6&65535;
   $arrayidx = (($5) + ($idxprom)|0);
   $7 = HEAP8[$arrayidx>>0]|0;
   $conv = $7&255;
   $neg = $conv >>> 1;
   $8 = $neg ^ 255;
   $bf$lshr18 = $value >>> 16;
   $bf$clear19 = $bf$lshr18 & 255;
   $r_twar = ((($param)) + 54|0);
   $9 = HEAP16[$r_twar>>1]|0;
   $idxprom21 = $9&65535;
   $arrayidx22 = (($5) + ($idxprom21)|0);
   $10 = HEAP8[$arrayidx22>>0]|0;
   $conv23 = $10&255;
   $11 = $conv23 >>> 1;
   HEAP32[$vararg_buffer2>>2] = $bf$clear19;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $11;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $8;
   _avr_global_logger($0,3,360779,$vararg_buffer2);
   $and34 = $8 & $bf$lshr18;
   $conv35 = $and34&255;
   HEAP8[$4>>0] = $conv35;
   $12 = HEAP32[$data$i>>2]|0;
   $13 = HEAP16[$r_twar>>1]|0;
   $idxprom41 = $13&65535;
   $arrayidx42 = (($12) + ($idxprom41)|0);
   $14 = HEAP8[$arrayidx42>>0]|0;
   $conv43 = $14&255;
   $15 = $conv43 >>> 1;
   $and46 = $15 & $8;
   $cmp = ($and34|0)==($and46|0);
   if ($cmp) {
    HEAP8[$3>>0] = 64;
    $and55 = $value & 4096;
    $tobool56 = ($and55|0)!=(0);
    if (!($tobool56)) {
     $16 = $conv35 | 1;
     HEAP8[$4>>0] = $16;
    }
    $conv69 = $tobool56 ? 96 : -88;
    $17 = ((($param)) + 154|0);
    HEAP8[$17>>0] = $conv69;
    $18 = HEAP32[$avr1>>2]|0;
    _avr_cycle_timer_register_usec($18,9,102,$param);
   }
  }
 } while(0);
 $and90 = $value & 512;
 $tobool91 = ($and90|0)==(0);
 if (!($tobool91)) {
  $19 = ((($param)) + 154|0);
  $and98 = $value & 4096;
  $tobool99 = ($and98|0)==(0);
  $conv101 = $tobool99 ? -88 : 96;
  HEAP8[$19>>0] = $conv101;
  $20 = HEAP32[$avr1>>2]|0;
  _avr_cycle_timer_register_usec($20,9,102,$param);
 }
 $and108 = $value & 2048;
 $tobool109 = ($and108|0)==(0);
 do {
  if ($tobool109) {
   $$phi$trans$insert = ((($param)) + 152|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $24 = $$pre;
  } else {
   $bf$lshr115 = $value >>> 24;
   $and116 = $bf$lshr115 & 1;
   HEAP32[$vararg_buffer9>>2] = $and116;
   _avr_global_logger($0,3,360851,$vararg_buffer9);
   $tobool124 = ($and116|0)==(0);
   $21 = ((($param)) + 152|0);
   $22 = HEAP8[$21>>0]|0;
   $conv127 = $22&255;
   if ($tobool124) {
    $and133 = $conv127 & 247;
    $conv134 = $and133&255;
    HEAP8[$21>>0] = $conv134;
    $24 = $conv134;
    break;
   } else {
    $or128 = $conv127 | 8;
    $conv129 = $or128&255;
    HEAP8[$21>>0] = $conv129;
    $24 = $conv129;
    break;
   }
  }
 } while(0);
 $23 = $24 & 64;
 $tobool140 = ($23<<24>>24)==(0);
 if ($tobool140) {
  $and165 = $value & 8192;
  $tobool166 = ($and165|0)==(0);
  if ($tobool166) {
   STACKTOP = sp;return;
  }
  $bf$lshr172 = $value >>> 24;
  HEAP32[$vararg_buffer12>>2] = $bf$lshr172;
  _avr_global_logger($0,3,360872,$vararg_buffer12);
  $conv179 = $bf$lshr172&255;
  $29 = HEAP32[$data$i>>2]|0;
  $r_twdr181 = ((($param)) + 58|0);
  $30 = HEAP16[$r_twdr181>>1]|0;
  $idxprom182 = $30&65535;
  $arrayidx183 = (($29) + ($idxprom182)|0);
  HEAP8[$arrayidx183>>0] = $conv179;
  STACKTOP = sp;return;
 } else {
  $and147 = $value & 4096;
  $tobool148 = ($and147|0)==(0);
  if ($tobool148) {
   STACKTOP = sp;return;
  }
  $bf$lshr153 = $value >>> 24;
  $conv154 = $bf$lshr153&255;
  $25 = HEAP32[$data$i>>2]|0;
  $r_twdr = ((($param)) + 58|0);
  $26 = HEAP16[$r_twdr>>1]|0;
  $idxprom156 = $26&65535;
  $arrayidx157 = (($25) + ($idxprom156)|0);
  HEAP8[$arrayidx157>>0] = $conv154;
  $27 = ((($param)) + 154|0);
  HEAP8[$27>>0] = -128;
  $28 = HEAP32[$avr1>>2]|0;
  _avr_cycle_timer_register_usec($28,9,102,$param);
  STACKTOP = sp;return;
 }
}
function _avr_twi_set_state_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$pre$i = 0, $$pre11$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr$i = 0, $and$i$i = 0, $and11$i$i = 0, $arrayidx$i$i = 0, $avr$i = 0, $bf$clear$i$i = 0, $bf$clear2$i$i = 0, $bf$clear5$i$i = 0, $bf$lshr$i$i = 0, $bf$lshr4$i$i = 0;
 var $conv$i$i = 0, $conv$pre$phi$iZ2D = 0, $conv12$i$i = 0, $conv7$i$i = 0, $conv9$i$i = 0, $data$i$i = 0, $irq$i = 0, $neg$i$i = 0, $or$i$i = 0, $shl$i$i = 0, $tobool$i$i = 0, $twi$i = 0, $twsr8$sroa$0$0$$sroa_idx$i = 0, $twsr8$sroa$0$0$copyload$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ((($param)) + 154|0);
 $3 = HEAP8[$2>>0]|0;
 $avr$i = ((($param)) + 4|0);
 $4 = HEAP32[$avr$i>>2]|0;
 $twsr8$sroa$0$0$$sroa_idx$i = ((($param)) + 80|0);
 $twsr8$sroa$0$0$copyload$i = HEAPU8[$twsr8$sroa$0$0$$sroa_idx$i>>0]|(HEAPU8[$twsr8$sroa$0$0$$sroa_idx$i+1>>0]<<8)|(HEAPU8[$twsr8$sroa$0$0$$sroa_idx$i+2>>0]<<16)|(HEAPU8[$twsr8$sroa$0$0$$sroa_idx$i+3>>0]<<24);
 $bf$clear$i$i = $twsr8$sroa$0$0$copyload$i & 511;
 $conv$i$i = $bf$clear$i$i&65535;
 $tobool$i$i = ($conv$i$i<<16>>16)==(0);
 if ($tobool$i$i) {
  $$pre11$i = $3&255;
  $7 = $4;$conv$pre$phi$iZ2D = $$pre11$i;
 } else {
  $bf$lshr$i$i = $twsr8$sroa$0$0$copyload$i >>> 12;
  $bf$clear2$i$i = $bf$lshr$i$i & 255;
  $bf$lshr4$i$i = $twsr8$sroa$0$0$copyload$i >>> 9;
  $bf$clear5$i$i = $bf$lshr4$i$i & 7;
  $shl$i$i = $bf$clear2$i$i << $bf$clear5$i$i;
  $data$i$i = ((($4)) + 5892|0);
  $5 = HEAP32[$data$i$i>>2]|0;
  $arrayidx$i$i = (($5) + ($bf$clear$i$i)|0);
  $6 = HEAP8[$arrayidx$i$i>>0]|0;
  $conv7$i$i = $6&255;
  $neg$i$i = $shl$i$i ^ 255;
  $and$i$i = $neg$i$i & $conv7$i$i;
  $conv9$i$i = $3&255;
  $and11$i$i = $shl$i$i & $conv9$i$i;
  $or$i$i = $and$i$i | $and11$i$i;
  $conv12$i$i = $or$i$i&255;
  _avr_core_watch_write($4,$conv$i$i,$conv12$i$i);
  $$pre$i = HEAP32[$avr$i>>2]|0;
  $7 = $$pre$i;$conv$pre$phi$iZ2D = $conv9$i$i;
 }
 HEAP32[$vararg_buffer>>2] = 360900;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $conv$pre$phi$iZ2D;
 _avr_global_logger($7,3,360891,$vararg_buffer);
 $irq$i = ((($param)) + 24|0);
 $8 = HEAP32[$irq$i>>2]|0;
 $add$ptr$i = ((($8)) + 48|0);
 _avr_raise_irq($add$ptr$i,$conv$pre$phi$iZ2D);
 $9 = HEAP32[$avr$i>>2]|0;
 $twi$i = ((($param)) + 88|0);
 (_avr_raise_interrupt($9,$twi$i)|0);
 HEAP8[$2>>0] = 0;
 setTempRet0((0) | 0);
 STACKTOP = sp;return 0;
}
function _avr_twi_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $bf$clear = 0, $bf$clear6 = 0, $bf$load = 0, $bf$load5 = 0, $conv = 0, $conv3 = 0, $conv7 = 0, $name = 0, $or = 0, $r_twdr = 0, $twen = 0, $twi = 0, $twsr = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 dest=$p; src=354132; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $twi = ((($p)) + 88|0);
 _avr_register_vector($avr,$twi);
 $name = ((($p)) + 40|0);
 $0 = HEAP8[$name>>0]|0;
 $conv = $0 << 24 >> 24;
 $or = $conv | 1953982720;
 (_avr_io_setirqs($p,$or,3,0)|0);
 $twen = ((($p)) + 60|0);
 $bf$load = HEAP32[$twen>>2]|0;
 $bf$clear = $bf$load & 511;
 $conv3 = $bf$clear&65535;
 _avr_register_io_write($avr,$conv3,103,$p);
 $r_twdr = ((($p)) + 58|0);
 $1 = HEAP16[$r_twdr>>1]|0;
 _avr_register_io_write($avr,$1,104,$p);
 $2 = HEAP16[$r_twdr>>1]|0;
 _avr_register_io_read($avr,$2,105,$p);
 $twsr = ((($p)) + 80|0);
 $bf$load5 = HEAP32[$twsr>>2]|0;
 $bf$clear6 = $bf$load5 & 511;
 $conv7 = $bf$clear6&65535;
 _avr_register_io_write($avr,$conv7,106,$p);
 return;
}
function _avr_twi_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i444 = 0, $$pre$phiZ2D = 0, $$pre562 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$0500$0$$sroa_idx = 0, $$sroa$0500$0$copyload = 0, $$sroa$0503$0$$sroa_idx = 0, $$sroa$0503$0$copyload = 0, $$sroa$0506$0$$sroa_idx = 0, $$sroa$0506$0$copyload = 0, $$sroa$0509$0$copyload = 0, $$sroa$0512$0$copyload = 0, $$sroa$0515$0$copyload = 0, $$sroa$0518$0$copyload = 0, $$sroa$0521$0$copyload = 0, $$sroa$0524$0$$sroa_idx = 0, $$sroa$0524$0$copyload = 0;
 var $$sroa$0527$0$copyload = 0, $$sroa$0530$0$copyload = 0, $$sroa$0533$0$$sroa_idx = 0, $$sroa$0533$0$copyload = 0, $$sroa$0536$0$copyload = 0, $$sroa$0539$0$copyload = 0, $$sroa$0542$0$copyload = 0, $$sroa$0545$0$copyload = 0, $$sroa$0548$0$copyload = 0, $$sroa$0551$0$copyload = 0, $$sroa$0554$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i447 = 0;
 var $add$ptr171 = 0, $add$ptr186 = 0, $add$ptr192 = 0, $add$ptr209 = 0, $add$ptr279 = 0, $add$ptr333 = 0, $addconv = 0, $addconv148 = 0, $and$i = 0, $and$i$i = 0, $and$i$i440 = 0, $and$i160 = 0, $and$i177 = 0, $and$i194 = 0, $and$i211 = 0, $and$i228 = 0, $and$i271 = 0, $and$i286 = 0, $and$i301 = 0, $and$i318 = 0;
 var $and$i335 = 0, $and$i350 = 0, $and$i366 = 0, $and$i380 = 0, $and$i393 = 0, $and$i407 = 0, $and$i421 = 0, $and$i460 = 0, $and$i475 = 0, $and$i496 = 0, $and11$i$i = 0, $and11$i$i441 = 0, $and144 = 0, $and149 = 0, $and215 = 0, $and274147 = 0, $and289 = 0, $and347 = 0, $and354 = 0, $and359 = 0;
 var $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i437 = 0, $arrayidx$i154 = 0, $arrayidx$i171 = 0, $arrayidx$i188 = 0, $arrayidx$i205 = 0, $arrayidx$i222 = 0, $arrayidx$i265 = 0, $arrayidx$i280 = 0, $arrayidx$i295 = 0, $arrayidx$i312 = 0, $arrayidx$i329 = 0, $arrayidx$i344 = 0, $arrayidx$i361 = 0, $arrayidx$i374 = 0, $arrayidx$i391 = 0, $arrayidx$i404 = 0, $arrayidx$i418 = 0;
 var $arrayidx$i454 = 0, $arrayidx$i469 = 0, $arrayidx$i493 = 0, $arrayidx176 = 0, $arrayidx200 = 0, $arrayidx224 = 0, $arrayidx245 = 0, $arrayidx284 = 0, $arrayidx314 = 0, $arrayidx325 = 0, $arrayidx53 = 0, $avr$i = 0, $avr$i166 = 0, $avr$i183 = 0, $avr$i200 = 0, $avr$i217 = 0, $avr$i307 = 0, $avr$i324 = 0, $avr$i355 = 0, $avr$i423 = 0;
 var $avr19 = 0, $bf$clear$i = 0, $bf$clear$i$i = 0, $bf$clear$i$i427 = 0, $bf$clear$i151 = 0, $bf$clear$i168 = 0, $bf$clear$i185 = 0, $bf$clear$i202 = 0, $bf$clear$i219 = 0, $bf$clear$i262 = 0, $bf$clear$i277 = 0, $bf$clear$i292 = 0, $bf$clear$i309 = 0, $bf$clear$i326 = 0, $bf$clear$i341 = 0, $bf$clear$i358 = 0, $bf$clear$i371 = 0, $bf$clear$i386 = 0, $bf$clear$i396 = 0, $bf$clear$i410 = 0;
 var $bf$clear$i451 = 0, $bf$clear$i466 = 0, $bf$clear$i485 = 0, $bf$clear2$i = 0, $bf$clear2$i$i = 0, $bf$clear2$i$i432 = 0, $bf$clear2$i399 = 0, $bf$clear2$i413 = 0, $bf$clear2$i488 = 0, $bf$clear3$i = 0, $bf$clear3$i157 = 0, $bf$clear3$i174 = 0, $bf$clear3$i191 = 0, $bf$clear3$i208 = 0, $bf$clear3$i225 = 0, $bf$clear3$i268 = 0, $bf$clear3$i283 = 0, $bf$clear3$i298 = 0, $bf$clear3$i315 = 0, $bf$clear3$i332 = 0;
 var $bf$clear3$i347 = 0, $bf$clear3$i364 = 0, $bf$clear3$i377 = 0, $bf$clear3$i457 = 0, $bf$clear3$i472 = 0, $bf$clear5$i = 0, $bf$clear5$i$i = 0, $bf$clear5$i$i434 = 0, $bf$clear5$i401 = 0, $bf$clear5$i415 = 0, $bf$clear5$i490 = 0, $bf$clear6$i = 0, $bf$lshr$i = 0, $bf$lshr$i$i = 0, $bf$lshr$i$i431 = 0, $bf$lshr$i156 = 0, $bf$lshr$i173 = 0, $bf$lshr$i190 = 0, $bf$lshr$i207 = 0, $bf$lshr$i224 = 0;
 var $bf$lshr$i267 = 0, $bf$lshr$i282 = 0, $bf$lshr$i297 = 0, $bf$lshr$i314 = 0, $bf$lshr$i331 = 0, $bf$lshr$i346 = 0, $bf$lshr$i363 = 0, $bf$lshr$i376 = 0, $bf$lshr$i388 = 0, $bf$lshr$i398 = 0, $bf$lshr$i412 = 0, $bf$lshr$i456 = 0, $bf$lshr$i471 = 0, $bf$lshr$i487 = 0, $bf$lshr4$i = 0, $bf$lshr4$i$i = 0, $bf$lshr4$i$i433 = 0, $bf$lshr4$i400 = 0, $bf$lshr4$i414 = 0, $bf$lshr4$i489 = 0;
 var $bf$lshr5$i = 0, $bf$lshr5$i159 = 0, $bf$lshr5$i176 = 0, $bf$lshr5$i193 = 0, $bf$lshr5$i210 = 0, $bf$lshr5$i227 = 0, $bf$lshr5$i270 = 0, $bf$lshr5$i285 = 0, $bf$lshr5$i300 = 0, $bf$lshr5$i317 = 0, $bf$lshr5$i334 = 0, $bf$lshr5$i349 = 0, $bf$lshr5$i365 = 0, $bf$lshr5$i379 = 0, $bf$lshr5$i459 = 0, $bf$lshr5$i474 = 0, $bf$set14$i = 0, $bf$set14$i243 = 0, $bf$set14$i251 = 0, $bf$set14$i260 = 0;
 var $bf$set14$i483 = 0, $bf$set8$i = 0, $bf$set8$i235 = 0, $bf$set8$i240 = 0, $bf$set8$i248 = 0, $bf$set8$i254 = 0, $bf$set8$i257 = 0, $bf$shl$i = 0, $bf$shl12$i = 0, $bf$shl12$i242 = 0, $bf$shl12$i250 = 0, $bf$shl12$i259 = 0, $bf$shl6$i = 0, $bf$shl6$i234 = 0, $bf$shl6$i239 = 0, $bf$shl6$i247 = 0, $bf$shl6$i253 = 0, $bf$shl6$i256 = 0, $bf$shl6$i481 = 0, $cmp = 0;
 var $cond = 0, $conv = 0, $conv$i$i = 0, $conv$i$i428 = 0, $conv$i244 = 0, $conv$i387 = 0, $conv$i397 = 0, $conv$i411 = 0, $conv$i486 = 0, $conv1$i = 0, $conv1$i155 = 0, $conv1$i172 = 0, $conv1$i189 = 0, $conv1$i206 = 0, $conv1$i223 = 0, $conv1$i266 = 0, $conv1$i281 = 0, $conv1$i296 = 0, $conv1$i313 = 0, $conv1$i330 = 0;
 var $conv1$i345 = 0, $conv1$i362 = 0, $conv1$i375 = 0, $conv1$i455 = 0, $conv1$i470 = 0, $conv12 = 0, $conv12$i$i = 0, $conv12$i$i443 = 0, $conv14 = 0, $conv143 = 0, $conv18 = 0, $conv206 = 0, $conv21 = 0, $conv22 = 0, $conv237 = 0, $conv246 = 0, $conv248 = 0, $conv267 = 0, $conv268 = 0, $conv28 = 0;
 var $conv292 = 0, $conv3$i = 0, $conv3$i233 = 0, $conv3$i238 = 0, $conv3$i246 = 0, $conv3$i252 = 0, $conv3$i255 = 0, $conv3$i480 = 0, $conv315 = 0, $conv342 = 0, $conv344 = 0, $conv350 = 0, $conv362 = 0, $conv369 = 0, $conv40 = 0, $conv50 = 0, $conv54 = 0, $conv7$i = 0, $conv7$i$i = 0, $conv7$i$i438 = 0;
 var $conv7$i161 = 0, $conv7$i178 = 0, $conv7$i195 = 0, $conv7$i381 = 0, $conv7$i392 = 0, $conv7$i405 = 0, $conv7$i419 = 0, $conv7$i461 = 0, $conv7$i494 = 0, $conv9 = 0, $conv9$i = 0, $conv9$i241 = 0, $conv9$i249 = 0, $conv9$i258 = 0, $conv9$i394 = 0, $conv9$i408 = 0, $conv9$i422 = 0, $conv9$i497 = 0, $data$i = 0, $data$i$i = 0;
 var $data$i$i436 = 0, $data$i153 = 0, $data$i170 = 0, $data$i187 = 0, $data$i204 = 0, $data$i221 = 0, $data$i264 = 0, $data$i279 = 0, $data$i294 = 0, $data$i311 = 0, $data$i328 = 0, $data$i343 = 0, $data$i360 = 0, $data$i373 = 0, $data$i390 = 0, $data$i453 = 0, $data$i468 = 0, $data$pre$phiZ2D = 0, $data173 = 0, $data197 = 0;
 var $data221 = 0, $data242 = 0, $data281 = 0, $data311 = 0, $idxprom = 0, $idxprom175 = 0, $idxprom199 = 0, $idxprom223 = 0, $idxprom244 = 0, $idxprom283 = 0, $idxprom313 = 0, $idxprom324 = 0, $idxprom52 = 0, $irq = 0, $irq$i = 0, $irq$i446 = 0, $irq170 = 0, $irq185 = 0, $irq208 = 0, $irq278 = 0;
 var $irq332 = 0, $neg$i = 0, $neg$i$i = 0, $neg$i$i439 = 0, $neg$i406 = 0, $neg$i420 = 0, $neg$i495 = 0, $or$i$i = 0, $or$i$i442 = 0, $or205 = 0, $or212 = 0, $or218 = 0, $or343 = 0, $phitmp = 0, $r_twamr = 0, $r_twar = 0, $r_twdr = 0, $r_twdr174 = 0, $r_twdr198 = 0, $r_twdr222 = 0;
 var $r_twdr243 = 0, $r_twdr282 = 0, $r_twdr312 = 0, $retval$0$i = 0, $retval$0$i163 = 0, $retval$0$i180 = 0, $retval$0$i197 = 0, $retval$0$i214 = 0, $retval$0$i231 = 0, $retval$0$i274 = 0, $retval$0$i321 = 0, $retval$0$i338 = 0, $retval$0$i369 = 0, $retval$0$i383 = 0, $retval$0$i463 = 0, $shl$i = 0, $shl$i$i = 0, $shl$i$i435 = 0, $shl$i389 = 0, $shl$i402 = 0;
 var $shl$i416 = 0, $shl$i491 = 0, $shr$i = 0, $shr$i158 = 0, $shr$i175 = 0, $shr$i192 = 0, $shr$i209 = 0, $shr$i226 = 0, $shr$i269 = 0, $shr$i284 = 0, $shr$i299 = 0, $shr$i316 = 0, $shr$i333 = 0, $shr$i348 = 0, $shr$i378 = 0, $shr$i458 = 0, $shr$i473 = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0;
 var $tobool$i$i = 0, $tobool$i$i429 = 0, $tobool$i152 = 0, $tobool$i169 = 0, $tobool$i186 = 0, $tobool$i203 = 0, $tobool$i220 = 0, $tobool$i263 = 0, $tobool$i278 = 0, $tobool$i293 = 0, $tobool$i310 = 0, $tobool$i327 = 0, $tobool$i342 = 0, $tobool$i359 = 0, $tobool$i372 = 0, $tobool$i452 = 0, $tobool$i467 = 0, $tobool101 = 0, $tobool107 = 0, $tobool113 = 0;
 var $tobool121 = 0, $tobool125 = 0, $tobool128 = 0, $tobool145 = 0, $tobool150 = 0, $tobool152 = 0, $tobool167 = 0, $tobool233 = 0, $tobool275 = 0, $tobool308 = 0, $tobool339 = 0, $tobool355 = 0, $tobool43 = 0, $tobool63 = 0, $tobool71 = 0, $tobool75 = 0, $tobool85 = 0, $tobool96 = 0, $twen$0 = 0, $twi = 0;
 var $twsr8$sroa$0$0$copyload$i = 0, $twsr8$sroa$0$0$copyload$i426 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr24 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer45 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer = sp;
 $$sroa$0$0$$sroa_idx = ((($param)) + 60|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $retval$0$i = 0;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $conv7$i = $and$i&255;
  $retval$0$i = $conv7$i;
 }
 $$sroa$0500$0$$sroa_idx = ((($param)) + 68|0);
 $$sroa$0500$0$copyload = HEAPU8[$$sroa$0500$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0500$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0500$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0500$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i151 = $$sroa$0500$0$copyload & 511;
 $tobool$i152 = ($bf$clear$i151|0)==(0);
 if ($tobool$i152) {
  $retval$0$i163 = 0;
 } else {
  $data$i153 = ((($avr)) + 5892|0);
  $2 = HEAP32[$data$i153>>2]|0;
  $arrayidx$i154 = (($2) + ($bf$clear$i151)|0);
  $3 = HEAP8[$arrayidx$i154>>0]|0;
  $conv1$i155 = $3&255;
  $bf$lshr$i156 = $$sroa$0500$0$copyload >>> 9;
  $bf$clear3$i157 = $bf$lshr$i156 & 7;
  $shr$i158 = $conv1$i155 >>> $bf$clear3$i157;
  $bf$lshr5$i159 = $$sroa$0500$0$copyload >>> 12;
  $and$i160 = $shr$i158 & $bf$lshr5$i159;
  $conv7$i161 = $and$i160&255;
  $retval$0$i163 = $conv7$i161;
 }
 $$sroa$0503$0$$sroa_idx = ((($param)) + 72|0);
 $$sroa$0503$0$copyload = HEAPU8[$$sroa$0503$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0503$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0503$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0503$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i168 = $$sroa$0503$0$copyload & 511;
 $tobool$i169 = ($bf$clear$i168|0)==(0);
 if ($tobool$i169) {
  $retval$0$i180 = 0;
 } else {
  $data$i170 = ((($avr)) + 5892|0);
  $4 = HEAP32[$data$i170>>2]|0;
  $arrayidx$i171 = (($4) + ($bf$clear$i168)|0);
  $5 = HEAP8[$arrayidx$i171>>0]|0;
  $conv1$i172 = $5&255;
  $bf$lshr$i173 = $$sroa$0503$0$copyload >>> 9;
  $bf$clear3$i174 = $bf$lshr$i173 & 7;
  $shr$i175 = $conv1$i172 >>> $bf$clear3$i174;
  $bf$lshr5$i176 = $$sroa$0503$0$copyload >>> 12;
  $and$i177 = $shr$i175 & $bf$lshr5$i176;
  $conv7$i178 = $and$i177&255;
  $retval$0$i180 = $conv7$i178;
 }
 $twi = ((($param)) + 88|0);
 $$sroa$0506$0$$sroa_idx = ((($param)) + 96|0);
 $$sroa$0506$0$copyload = HEAPU8[$$sroa$0506$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0506$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0506$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0506$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i185 = $$sroa$0506$0$copyload & 511;
 $tobool$i186 = ($bf$clear$i185|0)==(0);
 if ($tobool$i186) {
  $retval$0$i197 = 0;
 } else {
  $data$i187 = ((($avr)) + 5892|0);
  $6 = HEAP32[$data$i187>>2]|0;
  $arrayidx$i188 = (($6) + ($bf$clear$i185)|0);
  $7 = HEAP8[$arrayidx$i188>>0]|0;
  $conv1$i189 = $7&255;
  $bf$lshr$i190 = $$sroa$0506$0$copyload >>> 9;
  $bf$clear3$i191 = $bf$lshr$i190 & 7;
  $shr$i192 = $conv1$i189 >>> $bf$clear3$i191;
  $bf$lshr5$i193 = $$sroa$0506$0$copyload >>> 12;
  $and$i194 = $shr$i192 & $bf$lshr5$i193;
  $conv7$i195 = $and$i194&255;
  $retval$0$i197 = $conv7$i195;
 }
 _avr_core_watch_write($avr,$addr,$v);
 $conv = $v&255;
 $$sroa$0509$0$copyload = HEAPU8[$$sroa$0500$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0500$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0500$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0500$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i202 = $$sroa$0509$0$copyload & 511;
 $tobool$i203 = ($bf$clear$i202|0)==(0);
 if ($tobool$i203) {
  $retval$0$i214 = 0;
 } else {
  $data$i204 = ((($avr)) + 5892|0);
  $8 = HEAP32[$data$i204>>2]|0;
  $arrayidx$i205 = (($8) + ($bf$clear$i202)|0);
  $9 = HEAP8[$arrayidx$i205>>0]|0;
  $conv1$i206 = $9&255;
  $bf$lshr$i207 = $$sroa$0509$0$copyload >>> 9;
  $bf$clear3$i208 = $bf$lshr$i207 & 7;
  $shr$i209 = $conv1$i206 >>> $bf$clear3$i208;
  $bf$lshr5$i210 = $$sroa$0509$0$copyload >>> 12;
  $and$i211 = $shr$i209 & $bf$lshr5$i210;
  $retval$0$i214 = $and$i211;
 }
 $conv9 = $retval$0$i214 & 255;
 $$sroa$0512$0$copyload = HEAPU8[$$sroa$0503$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0503$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0503$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0503$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i219 = $$sroa$0512$0$copyload & 511;
 $tobool$i220 = ($bf$clear$i219|0)==(0);
 if ($tobool$i220) {
  $retval$0$i231 = 0;
 } else {
  $data$i221 = ((($avr)) + 5892|0);
  $10 = HEAP32[$data$i221>>2]|0;
  $arrayidx$i222 = (($10) + ($bf$clear$i219)|0);
  $11 = HEAP8[$arrayidx$i222>>0]|0;
  $conv1$i223 = $11&255;
  $bf$lshr$i224 = $$sroa$0512$0$copyload >>> 9;
  $bf$clear3$i225 = $bf$lshr$i224 & 7;
  $shr$i226 = $conv1$i223 >>> $bf$clear3$i225;
  $bf$lshr5$i227 = $$sroa$0512$0$copyload >>> 12;
  $and$i228 = $shr$i226 & $bf$lshr5$i227;
  $retval$0$i231 = $and$i228;
 }
 $conv12 = $retval$0$i231 & 255;
 $$sroa$0524$0$$sroa_idx = ((($param)) + 64|0);
 $$sroa$0524$0$copyload = HEAPU8[$$sroa$0524$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0524$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0524$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0524$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i309 = $$sroa$0524$0$copyload & 511;
 $tobool$i310 = ($bf$clear$i309|0)==(0);
 if ($tobool$i310) {
  $retval$0$i321 = 0;
 } else {
  $data$i311 = ((($avr)) + 5892|0);
  $12 = HEAP32[$data$i311>>2]|0;
  $arrayidx$i312 = (($12) + ($bf$clear$i309)|0);
  $13 = HEAP8[$arrayidx$i312>>0]|0;
  $conv1$i313 = $13&255;
  $bf$lshr$i314 = $$sroa$0524$0$copyload >>> 9;
  $bf$clear3$i315 = $bf$lshr$i314 & 7;
  $shr$i316 = $conv1$i313 >>> $bf$clear3$i315;
  $bf$lshr5$i317 = $$sroa$0524$0$copyload >>> 12;
  $and$i318 = $shr$i316 & $bf$lshr5$i317;
  $retval$0$i321 = $and$i318;
 }
 $conv14 = $retval$0$i321 & 255;
 $$sroa$0527$0$copyload = HEAPU8[$$sroa$0506$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0506$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0506$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0506$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i326 = $$sroa$0527$0$copyload & 511;
 $tobool$i327 = ($bf$clear$i326|0)==(0);
 if ($tobool$i327) {
  $retval$0$i338 = 0;
 } else {
  $data$i328 = ((($avr)) + 5892|0);
  $14 = HEAP32[$data$i328>>2]|0;
  $arrayidx$i329 = (($14) + ($bf$clear$i326)|0);
  $15 = HEAP8[$arrayidx$i329>>0]|0;
  $conv1$i330 = $15&255;
  $bf$lshr$i331 = $$sroa$0527$0$copyload >>> 9;
  $bf$clear3$i332 = $bf$lshr$i331 & 7;
  $shr$i333 = $conv1$i330 >>> $bf$clear3$i332;
  $bf$lshr5$i334 = $$sroa$0527$0$copyload >>> 12;
  $and$i335 = $shr$i333 & $bf$lshr5$i334;
  $retval$0$i338 = $and$i335;
 }
 $conv18 = $retval$0$i338 & 255;
 $$sroa$0533$0$$sroa_idx = ((($param)) + 80|0);
 $$sroa$0533$0$copyload = HEAPU8[$$sroa$0533$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0533$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0533$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0533$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i358 = $$sroa$0533$0$copyload & 511;
 $tobool$i359 = ($bf$clear$i358|0)==(0);
 if ($tobool$i359) {
  $retval$0$i369 = 0;
 } else {
  $avr19 = ((($param)) + 4|0);
  $16 = HEAP32[$avr19>>2]|0;
  $data$i360 = ((($16)) + 5892|0);
  $17 = HEAP32[$data$i360>>2]|0;
  $arrayidx$i361 = (($17) + ($bf$clear$i358)|0);
  $18 = HEAP8[$arrayidx$i361>>0]|0;
  $conv1$i362 = $18&255;
  $bf$lshr$i363 = $$sroa$0533$0$copyload >>> 12;
  $bf$clear3$i364 = $bf$lshr$i363 & 255;
  $bf$lshr5$i365 = $$sroa$0533$0$copyload >>> 9;
  $bf$clear6$i = $bf$lshr5$i365 & 7;
  $shl$i = $bf$clear3$i364 << $bf$clear6$i;
  $and$i366 = $shl$i & $conv1$i362;
  $retval$0$i369 = $and$i366;
 }
 $conv21 = $retval$0$i369 & 255;
 $19 = ((($param)) + 152|0);
 $20 = HEAP8[$19>>0]|0;
 $conv22 = $20&255;
 HEAP32[$vararg_buffer>>2] = 360983;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $conv;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $conv9;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $conv12;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $conv14;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $conv18;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $conv21;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $conv22;
 _avr_global_logger($avr,3,360920,$vararg_buffer);
 $$sroa$0536$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i371 = $$sroa$0536$0$copyload & 511;
 $tobool$i372 = ($bf$clear$i371|0)==(0);
 if ($tobool$i372) {
  $retval$0$i383 = 0;
 } else {
  $data$i373 = ((($avr)) + 5892|0);
  $21 = HEAP32[$data$i373>>2]|0;
  $arrayidx$i374 = (($21) + ($bf$clear$i371)|0);
  $22 = HEAP8[$arrayidx$i374>>0]|0;
  $conv1$i375 = $22&255;
  $bf$lshr$i376 = $$sroa$0536$0$copyload >>> 9;
  $bf$clear3$i377 = $bf$lshr$i376 & 7;
  $shr$i378 = $conv1$i375 >>> $bf$clear3$i377;
  $bf$lshr5$i379 = $$sroa$0536$0$copyload >>> 12;
  $and$i380 = $shr$i378 & $bf$lshr5$i379;
  $conv7$i381 = $and$i380&255;
  $retval$0$i383 = $conv7$i381;
 }
 $cmp = ($retval$0$i<<24>>24)==($retval$0$i383<<24>>24);
 if ($cmp) {
  $twen$0 = $retval$0$i;
 } else {
  $tobool = ($retval$0$i<<24>>24)==(0);
  $conv28 = $tobool&1;
  if ($tobool) {
   $$pre562 = ((($avr)) + 5892|0);
   $data$pre$phiZ2D = $$pre562;
  } else {
   $$sroa$0539$0$copyload = HEAPU8[$$sroa$0524$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0524$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0524$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0524$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i386 = $$sroa$0539$0$copyload & 511;
   $conv$i387 = $bf$clear$i386&65535;
   $bf$lshr$i388 = $$sroa$0539$0$copyload >>> 12;
   $bf$clear2$i = $bf$lshr$i388 & 255;
   $bf$lshr4$i = $$sroa$0539$0$copyload >>> 9;
   $bf$clear5$i = $bf$lshr4$i & 7;
   $shl$i389 = $bf$clear2$i << $bf$clear5$i;
   $data$i390 = ((($avr)) + 5892|0);
   $23 = HEAP32[$data$i390>>2]|0;
   $arrayidx$i391 = (($23) + ($bf$clear$i386)|0);
   $24 = HEAP8[$arrayidx$i391>>0]|0;
   $conv7$i392 = $24&255;
   $neg$i = $shl$i389 ^ 255;
   $and$i393 = $neg$i & $conv7$i392;
   $conv9$i394 = $and$i393&255;
   _avr_core_watch_write($avr,$conv$i387,$conv9$i394);
   $$sroa$0542$0$copyload = HEAPU8[$$sroa$0500$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0500$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0500$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0500$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i396 = $$sroa$0542$0$copyload & 511;
   $conv$i397 = $bf$clear$i396&65535;
   $bf$lshr$i398 = $$sroa$0542$0$copyload >>> 12;
   $bf$clear2$i399 = $bf$lshr$i398 & 255;
   $bf$lshr4$i400 = $$sroa$0542$0$copyload >>> 9;
   $bf$clear5$i401 = $bf$lshr4$i400 & 7;
   $shl$i402 = $bf$clear2$i399 << $bf$clear5$i401;
   $25 = HEAP32[$data$i390>>2]|0;
   $arrayidx$i404 = (($25) + ($bf$clear$i396)|0);
   $26 = HEAP8[$arrayidx$i404>>0]|0;
   $conv7$i405 = $26&255;
   $neg$i406 = $shl$i402 ^ 255;
   $and$i407 = $neg$i406 & $conv7$i405;
   $conv9$i408 = $and$i407&255;
   _avr_core_watch_write($avr,$conv$i397,$conv9$i408);
   $$sroa$0545$0$copyload = HEAPU8[$$sroa$0503$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0503$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0503$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0503$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i410 = $$sroa$0545$0$copyload & 511;
   $conv$i411 = $bf$clear$i410&65535;
   $bf$lshr$i412 = $$sroa$0545$0$copyload >>> 12;
   $bf$clear2$i413 = $bf$lshr$i412 & 255;
   $bf$lshr4$i414 = $$sroa$0545$0$copyload >>> 9;
   $bf$clear5$i415 = $bf$lshr4$i414 & 7;
   $shl$i416 = $bf$clear2$i413 << $bf$clear5$i415;
   $27 = HEAP32[$data$i390>>2]|0;
   $arrayidx$i418 = (($27) + ($bf$clear$i410)|0);
   $28 = HEAP8[$arrayidx$i418>>0]|0;
   $conv7$i419 = $28&255;
   $neg$i420 = $shl$i416 ^ 255;
   $and$i421 = $neg$i420 & $conv7$i419;
   $conv9$i422 = $and$i421&255;
   _avr_core_watch_write($avr,$conv$i411,$conv9$i422);
   _avr_clear_interrupt($avr,$twi);
   $r_twdr = ((($param)) + 58|0);
   $29 = HEAP16[$r_twdr>>1]|0;
   _avr_core_watch_write($avr,$29,-1);
   $avr$i423 = ((($param)) + 4|0);
   $30 = HEAP32[$avr$i423>>2]|0;
   $twsr8$sroa$0$0$copyload$i426 = HEAPU8[$$sroa$0533$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0533$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0533$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0533$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i$i427 = $twsr8$sroa$0$0$copyload$i426 & 511;
   $conv$i$i428 = $bf$clear$i$i427&65535;
   $tobool$i$i429 = ($conv$i$i428<<16>>16)==(0);
   if ($tobool$i$i429) {
    $33 = $30;
   } else {
    $bf$lshr$i$i431 = $twsr8$sroa$0$0$copyload$i426 >>> 12;
    $bf$clear2$i$i432 = $bf$lshr$i$i431 & 255;
    $bf$lshr4$i$i433 = $twsr8$sroa$0$0$copyload$i426 >>> 9;
    $bf$clear5$i$i434 = $bf$lshr4$i$i433 & 7;
    $shl$i$i435 = $bf$clear2$i$i432 << $bf$clear5$i$i434;
    $data$i$i436 = ((($30)) + 5892|0);
    $31 = HEAP32[$data$i$i436>>2]|0;
    $arrayidx$i$i437 = (($31) + ($bf$clear$i$i427)|0);
    $32 = HEAP8[$arrayidx$i$i437>>0]|0;
    $conv7$i$i438 = $32&255;
    $neg$i$i439 = $shl$i$i435 ^ 255;
    $and$i$i440 = $neg$i$i439 & $conv7$i$i438;
    $and11$i$i441 = $shl$i$i435 & 248;
    $or$i$i442 = $and$i$i440 | $and11$i$i441;
    $conv12$i$i443 = $or$i$i442&255;
    _avr_core_watch_write($30,$conv$i$i428,$conv12$i$i443);
    $$pre$i444 = HEAP32[$avr$i423>>2]|0;
    $33 = $$pre$i444;
   }
   HEAP32[$vararg_buffer8>>2] = 360900;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 248;
   _avr_global_logger($33,3,360891,$vararg_buffer8);
   $irq$i446 = ((($param)) + 24|0);
   $34 = HEAP32[$irq$i446>>2]|0;
   $add$ptr$i447 = ((($34)) + 48|0);
   _avr_raise_irq($add$ptr$i447,248);
   HEAP8[$19>>0] = 0;
   $35 = ((($param)) + 153|0);
   HEAP8[$35>>0] = 0;
   $data$pre$phiZ2D = $data$i390;
  }
  $conv40 = $tobool&1;
  HEAP32[$vararg_buffer12>>2] = $conv40;
  _avr_global_logger($avr,3,360997,$vararg_buffer12);
  $36 = HEAP32[$data$pre$phiZ2D>>2]|0;
  $r_twar = ((($param)) + 54|0);
  $37 = HEAP16[$r_twar>>1]|0;
  $idxprom = $37&65535;
  $arrayidx = (($36) + ($idxprom)|0);
  $38 = HEAP8[$arrayidx>>0]|0;
  $tobool43 = ($38<<24>>24)==(0);
  if ($tobool43) {
   $twen$0 = $conv28;
  } else {
   $conv50 = $38&255;
   $39 = $conv50 >>> 1;
   $r_twamr = ((($param)) + 56|0);
   $40 = HEAP16[$r_twamr>>1]|0;
   $idxprom52 = $40&65535;
   $arrayidx53 = (($36) + ($idxprom52)|0);
   $41 = HEAP8[$arrayidx53>>0]|0;
   $conv54 = $41&255;
   $42 = $conv54 >>> 1;
   HEAP32[$vararg_buffer15>>2] = $39;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $42;
   _avr_global_logger($avr,3,361007,$vararg_buffer15);
   $43 = HEAP8[$19>>0]|0;
   $44 = $43 | 64;
   HEAP8[$19>>0] = $44;
   $twen$0 = $conv28;
  }
 }
 $tobool63 = ($twen$0<<24>>24)==(0);
 if ($tobool63) {
  STACKTOP = sp;return;
 }
 $$sroa$0548$0$copyload = HEAPU8[$$sroa$0506$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0506$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0506$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0506$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i451 = $$sroa$0548$0$copyload & 511;
 $tobool$i452 = ($bf$clear$i451|0)==(0);
 if ($tobool$i452) {
  $retval$0$i463 = 0;
 } else {
  $data$i453 = ((($avr)) + 5892|0);
  $45 = HEAP32[$data$i453>>2]|0;
  $arrayidx$i454 = (($45) + ($bf$clear$i451)|0);
  $46 = HEAP8[$arrayidx$i454>>0]|0;
  $conv1$i455 = $46&255;
  $bf$lshr$i456 = $$sroa$0548$0$copyload >>> 9;
  $bf$clear3$i457 = $bf$lshr$i456 & 7;
  $shr$i458 = $conv1$i455 >>> $bf$clear3$i457;
  $bf$lshr5$i459 = $$sroa$0548$0$copyload >>> 12;
  $and$i460 = $shr$i458 & $bf$lshr5$i459;
  $conv7$i461 = $and$i460&255;
  $retval$0$i463 = $conv7$i461;
 }
 (_avr_clear_interrupt_if($avr,$twi,$retval$0$i197)|0);
 $tobool71 = ($retval$0$i180<<24>>24)==(0);
 if ($tobool71) {
  $$sroa$0551$0$copyload = HEAPU8[$$sroa$0503$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0503$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0503$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0503$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i466 = $$sroa$0551$0$copyload & 511;
  $tobool$i467 = ($bf$clear$i466|0)==(0);
  if (!($tobool$i467)) {
   $data$i468 = ((($avr)) + 5892|0);
   $47 = HEAP32[$data$i468>>2]|0;
   $arrayidx$i469 = (($47) + ($bf$clear$i466)|0);
   $48 = HEAP8[$arrayidx$i469>>0]|0;
   $conv1$i470 = $48&255;
   $bf$lshr$i471 = $$sroa$0551$0$copyload >>> 9;
   $bf$clear3$i472 = $bf$lshr$i471 & 7;
   $shr$i473 = $conv1$i470 >>> $bf$clear3$i472;
   $bf$lshr5$i474 = $$sroa$0551$0$copyload >>> 12;
   $and$i475 = $shr$i473 & $bf$lshr5$i474;
   $tobool75 = ($and$i475|0)==(0);
   if (!($tobool75)) {
    _avr_global_logger($avr,3,361030,$vararg_buffer19);
    $49 = HEAP8[$19>>0]|0;
    $50 = $49 & 1;
    $tobool85 = ($50<<24>>24)==(0);
    if (!($tobool85)) {
     $irq = ((($param)) + 24|0);
     $51 = HEAP32[$irq>>2]|0;
     $add$ptr = ((($51)) + 24|0);
     $52 = ((($param)) + 153|0);
     $53 = HEAP8[$52>>0]|0;
     $conv3$i480 = $53&255;
     $bf$shl6$i481 = $conv3$i480 << 16;
     $bf$set14$i483 = $bf$shl6$i481 | 16777728;
     _avr_raise_irq($add$ptr,$bf$set14$i483);
    }
    $$sroa$0554$0$copyload = HEAPU8[$$sroa$0503$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0503$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0503$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0503$0$$sroa_idx+3>>0]<<24);
    $bf$clear$i485 = $$sroa$0554$0$copyload & 511;
    $conv$i486 = $bf$clear$i485&65535;
    $bf$lshr$i487 = $$sroa$0554$0$copyload >>> 12;
    $bf$clear2$i488 = $bf$lshr$i487 & 255;
    $bf$lshr4$i489 = $$sroa$0554$0$copyload >>> 9;
    $bf$clear5$i490 = $bf$lshr4$i489 & 7;
    $shl$i491 = $bf$clear2$i488 << $bf$clear5$i490;
    $54 = HEAP32[$data$i468>>2]|0;
    $arrayidx$i493 = (($54) + ($bf$clear$i485)|0);
    $55 = HEAP8[$arrayidx$i493>>0]|0;
    $conv7$i494 = $55&255;
    $neg$i495 = $shl$i491 ^ 255;
    $and$i496 = $neg$i495 & $conv7$i494;
    $conv9$i497 = $and$i496&255;
    _avr_core_watch_write($avr,$conv$i486,$conv9$i497);
    $avr$i355 = ((($param)) + 4|0);
    $56 = HEAP32[$avr$i355>>2]|0;
    $twsr8$sroa$0$0$copyload$i = HEAPU8[$$sroa$0533$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0533$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0533$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0533$0$$sroa_idx+3>>0]<<24);
    $bf$clear$i$i = $twsr8$sroa$0$0$copyload$i & 511;
    $conv$i$i = $bf$clear$i$i&65535;
    $tobool$i$i = ($conv$i$i<<16>>16)==(0);
    if ($tobool$i$i) {
     $59 = $56;
    } else {
     $bf$lshr$i$i = $twsr8$sroa$0$0$copyload$i >>> 12;
     $bf$clear2$i$i = $bf$lshr$i$i & 255;
     $bf$lshr4$i$i = $twsr8$sroa$0$0$copyload$i >>> 9;
     $bf$clear5$i$i = $bf$lshr4$i$i & 7;
     $shl$i$i = $bf$clear2$i$i << $bf$clear5$i$i;
     $data$i$i = ((($56)) + 5892|0);
     $57 = HEAP32[$data$i$i>>2]|0;
     $arrayidx$i$i = (($57) + ($bf$clear$i$i)|0);
     $58 = HEAP8[$arrayidx$i$i>>0]|0;
     $conv7$i$i = $58&255;
     $neg$i$i = $shl$i$i ^ 255;
     $and$i$i = $neg$i$i & $conv7$i$i;
     $and11$i$i = $shl$i$i & 248;
     $or$i$i = $and$i$i | $and11$i$i;
     $conv12$i$i = $or$i$i&255;
     _avr_core_watch_write($56,$conv$i$i,$conv12$i$i);
     $$pre$i = HEAP32[$avr$i355>>2]|0;
     $59 = $$pre$i;
    }
    HEAP32[$vararg_buffer21>>2] = 360900;
    $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
    HEAP32[$vararg_ptr24>>2] = 248;
    _avr_global_logger($59,3,360891,$vararg_buffer21);
    $irq$i = ((($param)) + 24|0);
    $60 = HEAP32[$irq$i>>2]|0;
    $add$ptr$i = ((($60)) + 48|0);
    _avr_raise_irq($add$ptr$i,248);
    HEAP8[$19>>0] = 0;
   }
  }
 }
 $tobool96 = ($retval$0$i163<<24>>24)==(0);
 if ($tobool96) {
  $$sroa$0530$0$copyload = HEAPU8[$$sroa$0500$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0500$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0500$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0500$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i341 = $$sroa$0530$0$copyload & 511;
  $tobool$i342 = ($bf$clear$i341|0)==(0);
  if (!($tobool$i342)) {
   $data$i343 = ((($avr)) + 5892|0);
   $61 = HEAP32[$data$i343>>2]|0;
   $arrayidx$i344 = (($61) + ($bf$clear$i341)|0);
   $62 = HEAP8[$arrayidx$i344>>0]|0;
   $conv1$i345 = $62&255;
   $bf$lshr$i346 = $$sroa$0530$0$copyload >>> 9;
   $bf$clear3$i347 = $bf$lshr$i346 & 7;
   $shr$i348 = $conv1$i345 >>> $bf$clear3$i347;
   $bf$lshr5$i349 = $$sroa$0530$0$copyload >>> 12;
   $and$i350 = $shr$i348 & $bf$lshr5$i349;
   $tobool101 = ($and$i350|0)==(0);
   if (!($tobool101)) {
    $63 = HEAP8[$19>>0]|0;
    $64 = $63 & 1;
    $tobool107 = ($64<<24>>24)==(0);
    $cond = $tobool107 ? 365772 : 361046;
    HEAP32[$vararg_buffer25>>2] = $cond;
    _avr_global_logger($avr,3,361049,$vararg_buffer25);
    $65 = HEAP8[$19>>0]|0;
    $66 = $65 & 1;
    $tobool113 = ($66<<24>>24)==(0);
    $67 = ((($param)) + 154|0);
    if ($tobool113) {
     HEAP8[$67>>0] = 8;
     $avr$i307 = ((($param)) + 4|0);
     $69 = HEAP32[$avr$i307>>2]|0;
     _avr_cycle_timer_register_usec($69,0,102,$param);
    } else {
     HEAP8[$67>>0] = 16;
     $avr$i324 = ((($param)) + 4|0);
     $68 = HEAP32[$avr$i324>>2]|0;
     _avr_cycle_timer_register_usec($68,0,102,$param);
    }
    $70 = ((($param)) + 153|0);
    HEAP8[$70>>0] = 0;
    HEAP8[$19>>0] = 1;
   }
  }
 }
 $tobool121 = ($retval$0$i463<<24>>24)==(0);
 if ($tobool121) {
  STACKTOP = sp;return;
 }
 $$sroa$0521$0$copyload = HEAPU8[$$sroa$0500$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0500$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0500$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0500$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i292 = $$sroa$0521$0$copyload & 511;
 $tobool$i293 = ($bf$clear$i292|0)==(0);
 if (!($tobool$i293)) {
  $data$i294 = ((($avr)) + 5892|0);
  $71 = HEAP32[$data$i294>>2]|0;
  $arrayidx$i295 = (($71) + ($bf$clear$i292)|0);
  $72 = HEAP8[$arrayidx$i295>>0]|0;
  $conv1$i296 = $72&255;
  $bf$lshr$i297 = $$sroa$0521$0$copyload >>> 9;
  $bf$clear3$i298 = $bf$lshr$i297 & 7;
  $shr$i299 = $conv1$i296 >>> $bf$clear3$i298;
  $bf$lshr5$i300 = $$sroa$0521$0$copyload >>> 12;
  $and$i301 = $shr$i299 & $bf$lshr5$i300;
  $tobool125 = ($and$i301|0)==(0);
  if (!($tobool125)) {
   STACKTOP = sp;return;
  }
 }
 $$sroa$0518$0$copyload = HEAPU8[$$sroa$0503$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0503$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0503$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0503$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i277 = $$sroa$0518$0$copyload & 511;
 $tobool$i278 = ($bf$clear$i277|0)==(0);
 if (!($tobool$i278)) {
  $data$i279 = ((($avr)) + 5892|0);
  $73 = HEAP32[$data$i279>>2]|0;
  $arrayidx$i280 = (($73) + ($bf$clear$i277)|0);
  $74 = HEAP8[$arrayidx$i280>>0]|0;
  $conv1$i281 = $74&255;
  $bf$lshr$i282 = $$sroa$0518$0$copyload >>> 9;
  $bf$clear3$i283 = $bf$lshr$i282 & 7;
  $shr$i284 = $conv1$i281 >>> $bf$clear3$i283;
  $bf$lshr5$i285 = $$sroa$0518$0$copyload >>> 12;
  $and$i286 = $shr$i284 & $bf$lshr5$i285;
  $tobool128 = ($and$i286|0)==(0);
  if (!($tobool128)) {
   STACKTOP = sp;return;
  }
 }
 $75 = ((($param)) + 153|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76 & 1;
 $$sroa$0515$0$copyload = HEAPU8[$$sroa$0524$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0524$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0524$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0524$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i262 = $$sroa$0515$0$copyload & 511;
 $tobool$i263 = ($bf$clear$i262|0)==(0);
 if ($tobool$i263) {
  $retval$0$i274 = 0;
 } else {
  $data$i264 = ((($avr)) + 5892|0);
  $78 = HEAP32[$data$i264>>2]|0;
  $arrayidx$i265 = (($78) + ($bf$clear$i262)|0);
  $79 = HEAP8[$arrayidx$i265>>0]|0;
  $conv1$i266 = $79&255;
  $bf$lshr$i267 = $$sroa$0515$0$copyload >>> 9;
  $bf$clear3$i268 = $bf$lshr$i267 & 7;
  $shr$i269 = $conv1$i266 >>> $bf$clear3$i268;
  $bf$lshr5$i270 = $$sroa$0515$0$copyload >>> 12;
  $and$i271 = $shr$i269 & $bf$lshr5$i270;
  $phitmp = ($and$i271|0)!=(0);
  $retval$0$i274 = $phitmp;
 }
 $80 = HEAP8[$19>>0]|0;
 $conv143 = $80&255;
 $and144 = $conv143 & 64;
 $tobool145 = ($and144|0)==(0);
 $and149 = $conv143 & 4;
 $tobool150 = ($and149|0)!=(0);
 if (!($tobool145)) {
  if (!($tobool150)) {
   $or205 = $conv143 | 4;
   $conv206 = $or205&255;
   HEAP8[$19>>0] = $conv206;
   $irq208 = ((($param)) + 24|0);
   $95 = HEAP32[$irq208>>2]|0;
   $add$ptr209 = ((($95)) + 24|0);
   $or212 = $retval$0$i274 ? 3072 : 1024;
   $and215 = $conv143 << 9;
   $96 = $and215 & 8192;
   $data221 = ((($avr)) + 5892|0);
   $97 = HEAP32[$data221>>2]|0;
   $r_twdr222 = ((($param)) + 58|0);
   $98 = HEAP16[$r_twdr222>>1]|0;
   $idxprom223 = $98&65535;
   $arrayidx224 = (($97) + ($idxprom223)|0);
   $99 = HEAP8[$arrayidx224>>0]|0;
   $conv3$i238 = $76&255;
   $bf$shl6$i239 = $conv3$i238 << 16;
   $conv9$i241 = $99&255;
   $bf$shl12$i242 = $conv9$i241 << 24;
   $or218 = $or212 | $bf$shl6$i239;
   $bf$set8$i240 = $or218 | $96;
   $bf$set14$i243 = $bf$set8$i240 | $bf$shl12$i242;
   _avr_raise_irq($add$ptr209,$bf$set14$i243);
   STACKTOP = sp;return;
  }
  $tobool152 = ($77<<24>>24)==(0);
  do {
   if ($tobool152) {
    _avr_global_logger($avr,3,361125,$vararg_buffer32);
    $irq185 = ((($param)) + 24|0);
    $88 = HEAP32[$irq185>>2]|0;
    $add$ptr186 = ((($88)) + 24|0);
    $89 = HEAP8[$75>>0]|0;
    $conv3$i252 = $89&255;
    $bf$shl6$i253 = $conv3$i252 << 16;
    $bf$set8$i254 = $bf$shl6$i253 | 2048;
    _avr_raise_irq($add$ptr186,$bf$set8$i254);
    $$pre$phiZ2D = $irq185;
   } else {
    _avr_global_logger($avr,3,361068,$vararg_buffer28);
    $81 = HEAP8[$19>>0]|0;
    $82 = $81 & 16;
    $tobool167 = ($82<<24>>24)==(0);
    if ($tobool167) {
     _avr_global_logger($avr,3,361089,$vararg_buffer30);
     $$pre = ((($param)) + 24|0);
     $$pre$phiZ2D = $$pre;
     break;
    } else {
     $irq170 = ((($param)) + 24|0);
     $83 = HEAP32[$irq170>>2]|0;
     $add$ptr171 = ((($83)) + 24|0);
     $84 = HEAP8[$75>>0]|0;
     $data173 = ((($avr)) + 5892|0);
     $85 = HEAP32[$data173>>2]|0;
     $r_twdr174 = ((($param)) + 58|0);
     $86 = HEAP16[$r_twdr174>>1]|0;
     $idxprom175 = $86&65535;
     $arrayidx176 = (($85) + ($idxprom175)|0);
     $87 = HEAP8[$arrayidx176>>0]|0;
     $conv3$i255 = $84&255;
     $bf$shl6$i256 = $conv3$i255 << 16;
     $conv9$i258 = $87&255;
     $bf$shl12$i259 = $conv9$i258 << 24;
     $bf$set8$i257 = $bf$shl6$i256 | $bf$shl12$i259;
     $bf$set14$i260 = $bf$set8$i257 | 10240;
     _avr_raise_irq($add$ptr171,$bf$set14$i260);
     $$pre$phiZ2D = $irq170;
     break;
    }
   }
  } while(0);
  $90 = HEAP32[$$pre$phiZ2D>>2]|0;
  $add$ptr192 = ((($90)) + 24|0);
  $91 = HEAP8[$75>>0]|0;
  $data197 = ((($avr)) + 5892|0);
  $92 = HEAP32[$data197>>2]|0;
  $r_twdr198 = ((($param)) + 58|0);
  $93 = HEAP16[$r_twdr198>>1]|0;
  $idxprom199 = $93&65535;
  $arrayidx200 = (($92) + ($idxprom199)|0);
  $94 = HEAP8[$arrayidx200>>0]|0;
  $conv$i244 = $retval$0$i274 ? 3072 : 1024;
  $conv3$i246 = $91&255;
  $bf$shl6$i247 = $conv3$i246 << 16;
  $bf$set8$i248 = $bf$shl6$i247 | $conv$i244;
  $conv9$i249 = $94&255;
  $bf$shl12$i250 = $conv9$i249 << 24;
  $bf$set14$i251 = $bf$set8$i248 | $bf$shl12$i250;
  _avr_raise_irq($add$ptr192,$bf$set14$i251);
  STACKTOP = sp;return;
 }
 do {
  if ($tobool150) {
   $tobool233 = ($77<<24>>24)!=(0);
   if ($tobool233) {
    $conv237 = $76&255;
    HEAP32[$vararg_buffer34>>2] = $conv237;
    _avr_global_logger($avr,3,361147,$vararg_buffer34);
   } else {
    $data242 = ((($avr)) + 5892|0);
    $100 = HEAP32[$data242>>2]|0;
    $r_twdr243 = ((($param)) + 58|0);
    $101 = HEAP16[$r_twdr243>>1]|0;
    $idxprom244 = $101&65535;
    $arrayidx245 = (($100) + ($idxprom244)|0);
    $102 = HEAP8[$arrayidx245>>0]|0;
    $conv246 = $102&255;
    $conv248 = $76&255;
    HEAP32[$vararg_buffer37>>2] = $conv246;
    $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
    HEAP32[$vararg_ptr40>>2] = $conv248;
    _avr_global_logger($avr,3,361172,$vararg_buffer37);
   }
   $103 = ($77 << 4)&255;
   $addconv = (($103) + 16)<<24>>24;
   $104 = $addconv | 8;
   $spec$select = $retval$0$i274 ? $104 : $addconv;
   $105 = HEAP8[$19>>0]|0;
   $106 = $105 & -9;
   HEAP8[$19>>0] = $106;
   $conv267 = $106&255;
   $conv268 = $spec$select&255;
   HEAP32[$vararg_buffer41>>2] = $conv267;
   $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
   HEAP32[$vararg_ptr44>>2] = $conv268;
   _avr_global_logger($avr,3,361201,$vararg_buffer41);
   $107 = HEAP8[$19>>0]|0;
   $and274147 = $107 & $spec$select;
   $tobool275 = ($and274147<<24>>24)==(0);
   if ($tobool275) {
    _avr_global_logger($avr,3,361089,$vararg_buffer45);
    break;
   }
   $irq278 = ((($param)) + 24|0);
   $108 = HEAP32[$irq278>>2]|0;
   $add$ptr279 = ((($108)) + 24|0);
   $109 = HEAP8[$75>>0]|0;
   $data281 = ((($avr)) + 5892|0);
   $110 = HEAP32[$data281>>2]|0;
   $r_twdr282 = ((($param)) + 58|0);
   $111 = HEAP16[$r_twdr282>>1]|0;
   $idxprom283 = $111&65535;
   $arrayidx284 = (($110) + ($idxprom283)|0);
   $112 = HEAP8[$arrayidx284>>0]|0;
   $bf$shl$i = $conv268 << 8;
   $conv3$i233 = $109&255;
   $bf$shl6$i234 = $conv3$i233 << 16;
   $bf$set8$i235 = $bf$shl6$i234 | $bf$shl$i;
   $conv9$i = $112&255;
   $bf$shl12$i = $conv9$i << 24;
   $bf$set14$i = $bf$set8$i235 | $bf$shl12$i;
   _avr_raise_irq($add$ptr279,$bf$set14$i);
   if ($tobool233) {
    $and289 = $conv268 & 8;
    $113 = $and289 ^ 88;
    $conv292 = $113&255;
    $114 = ((($param)) + 154|0);
    HEAP8[$114>>0] = $conv292;
    $avr$i217 = ((($param)) + 4|0);
    $115 = HEAP32[$avr$i217>>2]|0;
    _avr_cycle_timer_register_usec($115,9,102,$param);
    break;
   } else {
    $116 = HEAP8[$19>>0]|0;
    $117 = $116 & 8;
    $118 = $117 ^ 8;
    $addconv148 = (($118) + 40)<<24>>24;
    $119 = ((($param)) + 154|0);
    HEAP8[$119>>0] = $addconv148;
    $avr$i200 = ((($param)) + 4|0);
    $120 = HEAP32[$avr$i200>>2]|0;
    _avr_cycle_timer_register_usec($120,9,102,$param);
    break;
   }
  } else {
   $tobool308 = ($80<<24>>24)==(0);
   if ($tobool308) {
    break;
   }
   $data311 = ((($avr)) + 5892|0);
   $121 = HEAP32[$data311>>2]|0;
   $r_twdr312 = ((($param)) + 58|0);
   $122 = HEAP16[$r_twdr312>>1]|0;
   $idxprom313 = $122&65535;
   $arrayidx314 = (($121) + ($idxprom313)|0);
   $123 = HEAP8[$arrayidx314>>0]|0;
   $conv315 = $123&255;
   HEAP32[$vararg_buffer47>>2] = $conv315;
   _avr_global_logger($avr,3,361223,$vararg_buffer47);
   $124 = HEAP8[$19>>0]|0;
   $125 = $124 | 4;
   HEAP8[$19>>0] = $125;
   $126 = HEAP32[$data311>>2]|0;
   $127 = HEAP16[$r_twdr312>>1]|0;
   $idxprom324 = $127&65535;
   $arrayidx325 = (($126) + ($idxprom324)|0);
   $128 = HEAP8[$arrayidx325>>0]|0;
   HEAP8[$75>>0] = $128;
   $129 = $125 & -9;
   HEAP8[$19>>0] = $129;
   $irq332 = ((($param)) + 24|0);
   $130 = HEAP32[$irq332>>2]|0;
   $add$ptr333 = ((($130)) + 24|0);
   $conv3$i = $128&255;
   $bf$shl6$i = $conv3$i << 16;
   $bf$set8$i = $bf$shl6$i | 256;
   _avr_raise_irq($add$ptr333,$bf$set8$i);
   $131 = HEAP8[$75>>0]|0;
   $132 = $131 & 1;
   $tobool339 = ($132<<24>>24)==(0);
   $133 = HEAP8[$19>>0]|0;
   $conv342 = $133&255;
   if (!($tobool339)) {
    $or343 = $conv342 | 32;
    $conv344 = $or343&255;
    HEAP8[$19>>0] = $conv344;
    $and347 = $conv342 & 8;
    $134 = $and347 ^ 72;
    $conv350 = $134&255;
    $135 = ((($param)) + 154|0);
    HEAP8[$135>>0] = $conv350;
    $avr$i183 = ((($param)) + 4|0);
    $136 = HEAP32[$avr$i183>>2]|0;
    _avr_cycle_timer_register_usec($136,9,102,$param);
    break;
   }
   $and354 = $conv342 & 16;
   $tobool355 = ($and354|0)==(0);
   $and359 = $conv342 & 8;
   $137 = $and359 ^ 8;
   if ($tobool355) {
    $141 = (($137) + 24)|0;
    $conv369 = $141&255;
    $142 = ((($param)) + 154|0);
    HEAP8[$142>>0] = $conv369;
    $avr$i = ((($param)) + 4|0);
    $143 = HEAP32[$avr$i>>2]|0;
    _avr_cycle_timer_register_usec($143,9,102,$param);
    break;
   } else {
    $138 = (($137) + 40)|0;
    $conv362 = $138&255;
    $139 = ((($param)) + 154|0);
    HEAP8[$139>>0] = $conv362;
    $avr$i166 = ((($param)) + 4|0);
    $140 = HEAP32[$avr$i166>>2]|0;
    _avr_cycle_timer_register_usec($140,0,102,$param);
    break;
   }
  }
 } while(0);
 $144 = HEAP8[$19>>0]|0;
 $145 = $144 & -17;
 HEAP8[$19>>0] = $145;
 STACKTOP = sp;return;
}
function _avr_twi_write_data($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $0 = ((($param)) + 152|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 | 16;
 HEAP8[$0>>0] = $2;
 return;
}
function _avr_twi_read_data($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $data = 0, $idxprom = 0, $r_twdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 152|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 | 32;
 HEAP8[$0>>0] = $2;
 $data = ((($avr)) + 5892|0);
 $3 = HEAP32[$data>>2]|0;
 $r_twdr = ((($param)) + 58|0);
 $4 = HEAP16[$r_twdr>>1]|0;
 $idxprom = $4&65535;
 $arrayidx = (($3) + ($idxprom)|0);
 $5 = HEAP8[$arrayidx>>0]|0;
 return ($5|0);
}
function _avr_twi_write_status($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$020$0$copyload = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and$i = 0, $and$i16 = 0, $and15$i = 0, $arrayidx$i = 0, $arrayidx$i14 = 0, $bf$clear$i = 0, $bf$clear$i10 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr$i12 = 0, $bf$lshr4$i = 0;
 var $bf$lshr5$i = 0, $conv$i = 0, $conv1$i = 0, $conv16$i = 0, $conv7$i15 = 0, $data$i = 0, $data$i13 = 0, $neg$i = 0, $or$i = 0, $retval$0$i = 0, $shl$i = 0, $shl13$i = 0, $shr$i = 0, $tobool$i = 0, $tobool$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 80|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $retval$0$i = 0;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $retval$0$i = $and$i;
 }
 _avr_core_watch_write($avr,$addr,$v);
 $$sroa$020$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i10 = $$sroa$020$0$copyload & 511;
 $conv$i = $bf$clear$i10&65535;
 $tobool$i11 = ($conv$i<<16>>16)==(0);
 if ($tobool$i11) {
  return;
 }
 $bf$lshr$i12 = $$sroa$020$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i12 & 255;
 $bf$lshr4$i = $$sroa$020$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i13 = ((($avr)) + 5892|0);
 $2 = HEAP32[$data$i13>>2]|0;
 $arrayidx$i14 = (($2) + ($bf$clear$i10)|0);
 $3 = HEAP8[$arrayidx$i14>>0]|0;
 $conv7$i15 = $3&255;
 $neg$i = $shl$i ^ 255;
 $and$i16 = $neg$i & $conv7$i15;
 $shl13$i = $retval$0$i << $bf$clear5$i;
 $and15$i = $shl13$i & $shl$i;
 $or$i = $and$i16 | $and15$i;
 $conv16$i = $or$i&255;
 _avr_core_watch_write($avr,$conv$i,$conv16$i);
 return;
}
function _avr_lin_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $r_linbrrl = 0, $r_linbtr = 0, $uart = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $uart = ((($p)) + 64|0);
 _avr_uart_init($avr,$uart);
 dest=$p; src=354184; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $r_linbtr = ((($p)) + 40|0);
 $0 = HEAP16[$r_linbtr>>1]|0;
 _avr_register_io_write($avr,$0,107,$p);
 $r_linbrrl = ((($p)) + 44|0);
 $1 = HEAP16[$r_linbrrl>>1]|0;
 _avr_register_io_write($avr,$1,107,$p);
 return;
}
function _avr_lin_baud_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$064$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $and$i = 0;
 var $and$i57 = 0, $and46 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i51 = 0, $arrayidx75 = 0, $bf$clear = 0, $bf$clear$i = 0, $bf$clear$i48 = 0, $bf$clear16 = 0, $bf$clear28 = 0, $bf$clear3$i = 0, $bf$clear3$i54 = 0, $bf$clear32 = 0, $bf$clear40 = 0, $bf$clear5 = 0, $bf$load = 0, $bf$load15 = 0, $bf$load38 = 0, $bf$load4 = 0;
 var $bf$lshr = 0, $bf$lshr$i = 0, $bf$lshr$i53 = 0, $bf$lshr31 = 0, $bf$lshr39 = 0, $bf$lshr44 = 0, $bf$lshr5$i = 0, $bf$lshr5$i56 = 0, $cmp = 0, $cmp17 = 0, $cmp6 = 0, $conv = 0, $conv1$i = 0, $conv1$i52 = 0, $conv10 = 0, $conv58 = 0, $conv62 = 0, $conv71 = 0, $conv76 = 0, $conv9 = 0;
 var $data$i = 0, $data$phi$trans$insert = 0, $div = 0, $div84 = 0, $div85 = 0, $frequency = 0, $idxprom = 0, $idxprom74 = 0, $lbt = 0, $ldisr = 0, $mul = 0, $or = 0, $or77 = 0, $r_linbrrh = 0, $r_linbrrl = 0, $r_linbtr = 0, $retval$0$i60 = 0, $shl = 0, $shl57 = 0, $shl72 = 0;
 var $shr = 0, $shr$i = 0, $shr$i55 = 0, $shr41 = 0, $tobool = 0, $tobool$i = 0, $tobool$i49 = 0, $tobool33 = 0, $usec_per_byte = 0, $v$addr$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr3 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $r_linbtr = ((($param)) + 40|0);
 $0 = HEAP16[$r_linbtr>>1]|0;
 $conv = $0&65535;
 $ldisr = ((($param)) + 52|0);
 $bf$load = HEAP32[$ldisr>>2]|0;
 $bf$clear = $bf$load & 511;
 $cmp = ($bf$clear|0)==($conv|0);
 if ($cmp) {
  $lbt = ((($param)) + 56|0);
  $bf$load4 = HEAP32[$lbt>>2]|0;
  $bf$clear5 = $bf$load4 & 511;
  $cmp6 = ($bf$clear5|0)==($conv|0);
  if ($cmp6) {
   $conv9 = $addr&65535;
   $conv10 = $v&255;
   HEAP32[$vararg_buffer1>>2] = $conv9;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $conv10;
   _avr_global_logger($avr,3,361322,$vararg_buffer1);
   $bf$load15 = HEAP32[$ldisr>>2]|0;
   $bf$clear16 = $bf$load15 & 511;
   $cmp17 = ($bf$clear16|0)==($conv9|0);
   if ($cmp17) {
    $$sroa$0$0$$sroa_idx = ((($param)) + 48|0);
    $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
    $bf$clear$i = $$sroa$0$0$copyload & 511;
    $tobool$i = ($bf$clear$i|0)==(0);
    if (!($tobool$i)) {
     $data$i = ((($avr)) + 5892|0);
     $1 = HEAP32[$data$i>>2]|0;
     $arrayidx$i = (($1) + ($bf$clear$i)|0);
     $2 = HEAP8[$arrayidx$i>>0]|0;
     $conv1$i = $2&255;
     $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
     $bf$clear3$i = $bf$lshr$i & 7;
     $shr$i = $conv1$i >>> $bf$clear3$i;
     $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
     $and$i = $shr$i & $bf$lshr5$i;
     $tobool = ($and$i|0)==(0);
     if (!($tobool)) {
      _avr_global_logger($avr,2,361346,$vararg_buffer4);
      STACKTOP = sp;return;
     }
    }
    $bf$lshr = $bf$load15 >>> 9;
    $bf$clear28 = $bf$lshr & 7;
    $shr = $conv10 >>> $bf$clear28;
    $bf$lshr31 = $bf$load15 >>> 12;
    $bf$clear32 = $bf$lshr31 & 255;
    $and = $bf$clear32 & $shr;
    $tobool33 = ($and|0)==(0);
    if ($tobool33) {
     $v$addr$0 = 32;
    } else {
     $bf$load38 = HEAP32[$lbt>>2]|0;
     $bf$lshr39 = $bf$load38 >>> 9;
     $bf$clear40 = $bf$lshr39 & 7;
     $shr41 = $conv10 >>> $bf$clear40;
     $bf$lshr44 = $bf$load38 >>> 12;
     $and46 = $shr41 & $bf$lshr44;
     $shl = 1 << $bf$clear28;
     $shl57 = $and46 << $bf$clear40;
     $or = $shl57 | $shl;
     $conv58 = $or&255;
     $conv62 = $or & 255;
     HEAP32[$vararg_buffer6>>2] = $conv10;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $and46;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = $conv62;
     _avr_global_logger($avr,3,361382,$vararg_buffer6);
     $v$addr$0 = $conv58;
    }
   } else {
    $v$addr$0 = $v;
   }
   _avr_core_watch_write($avr,$addr,$v$addr$0);
   $$sroa$064$0$copyload = HEAPU8[$lbt>>0]|(HEAPU8[$lbt+1>>0]<<8)|(HEAPU8[$lbt+2>>0]<<16)|(HEAPU8[$lbt+3>>0]<<24);
   $bf$clear$i48 = $$sroa$064$0$copyload & 511;
   $tobool$i49 = ($bf$clear$i48|0)==(0);
   $data$phi$trans$insert = ((($avr)) + 5892|0);
   $$pre = HEAP32[$data$phi$trans$insert>>2]|0;
   if ($tobool$i49) {
    $retval$0$i60 = 0;
   } else {
    $arrayidx$i51 = (($$pre) + ($bf$clear$i48)|0);
    $3 = HEAP8[$arrayidx$i51>>0]|0;
    $conv1$i52 = $3&255;
    $bf$lshr$i53 = $$sroa$064$0$copyload >>> 9;
    $bf$clear3$i54 = $bf$lshr$i53 & 7;
    $shr$i55 = $conv1$i52 >>> $bf$clear3$i54;
    $bf$lshr5$i56 = $$sroa$064$0$copyload >>> 12;
    $and$i57 = $shr$i55 & $bf$lshr5$i56;
    $retval$0$i60 = $and$i57;
   }
   $r_linbrrh = ((($param)) + 42|0);
   $4 = HEAP16[$r_linbrrh>>1]|0;
   $idxprom = $4&65535;
   $arrayidx = (($$pre) + ($idxprom)|0);
   $5 = HEAP8[$arrayidx>>0]|0;
   $conv71 = $5&255;
   $shl72 = $conv71 << 8;
   $r_linbrrl = ((($param)) + 44|0);
   $6 = HEAP16[$r_linbrrl>>1]|0;
   $idxprom74 = $6&65535;
   $arrayidx75 = (($$pre) + ($idxprom74)|0);
   $7 = HEAP8[$arrayidx75>>0]|0;
   $conv76 = $7&255;
   $or77 = $shl72 | $conv76;
   HEAP32[$vararg_buffer11>>2] = $retval$0$i60;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $or77;
   _avr_global_logger($avr,3,361425,$vararg_buffer11);
   $frequency = ((($avr)) + 40|0);
   $8 = HEAP32[$frequency>>2]|0;
   $add = (($or77) + 1)|0;
   $mul = Math_imul($add, $retval$0$i60)|0;
   $div = (($8>>>0) / ($mul>>>0))&-1;
   HEAP32[$vararg_buffer15>>2] = $retval$0$i60;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $or77;
   $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
   HEAP32[$vararg_ptr19>>2] = $div;
   _avr_global_logger($avr,3,361458,$vararg_buffer15);
   $div84 = (($div>>>0) / 11)&-1;
   $div85 = (1000000 / ($div84>>>0))&-1;
   $usec_per_byte = ((($param)) + 416|0);
   $9 = $usec_per_byte;
   $10 = $9;
   HEAP32[$10>>2] = $div85;
   $11 = (($9) + 4)|0;
   $12 = $11;
   HEAP32[$12>>2] = 0;
   HEAP32[$vararg_buffer20>>2] = $div85;
   _avr_global_logger($avr,3,361517,$vararg_buffer20);
   STACKTOP = sp;return;
  }
 }
 _avr_global_logger($avr,1,361279,$vararg_buffer);
 STACKTOP = sp;return;
}
function _avr_lin_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $avr1 = 0, $data = 0, $idxprom = 0, $r_linbtr = 0, $reset = 0, $uart = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $avr1 = ((($port)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 _avr_global_logger($0,3,361553,$vararg_buffer);
 $uart = ((($port)) + 64|0);
 $reset = ((($uart)) + 28|0);
 $1 = HEAP32[$reset>>2]|0;
 FUNCTION_TABLE_vi[$1 & 255]($uart);
 $data = ((($0)) + 5892|0);
 $2 = HEAP32[$data>>2]|0;
 $r_linbtr = ((($port)) + 40|0);
 $3 = HEAP16[$r_linbtr>>1]|0;
 $idxprom = $3&65535;
 $arrayidx = (($2) + ($idxprom)|0);
 HEAP8[$arrayidx>>0] = 32;
 STACKTOP = sp;return;
}
function _avr_flash_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call6 = 0, $conv = 0, $conv10 = 0, $div = 0, $flash = 0, $r_spm = 0, $spm_pagesize = 0, $spm_pagesize4 = 0, $tmppage = 0, $tmppage_used = 0, $tobool = 0, $tobool2 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=354224; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $tmppage = ((($p)) + 44|0);
 $0 = HEAP32[$tmppage>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $spm_pagesize = ((($p)) + 52|0);
  $1 = HEAP16[$spm_pagesize>>1]|0;
  $conv = $1&65535;
  $call = (_malloc($conv)|0);
  HEAP32[$tmppage>>2] = $call;
 }
 $tmppage_used = ((($p)) + 48|0);
 $2 = HEAP32[$tmppage_used>>2]|0;
 $tobool2 = ($2|0)==(0|0);
 if ($tobool2) {
  $spm_pagesize4 = ((($p)) + 52|0);
  $3 = HEAP16[$spm_pagesize4>>1]|0;
  $4 = ($3&65535) >>> 1;
  $div = $4&65535;
  $call6 = (_malloc($div)|0);
  HEAP32[$tmppage_used>>2] = $call6;
 }
 _avr_register_io($avr,$p);
 $flash = ((($p)) + 80|0);
 _avr_register_vector($avr,$flash);
 $r_spm = ((($p)) + 54|0);
 $5 = HEAP8[$r_spm>>0]|0;
 $conv10 = $5&255;
 _avr_register_io_write($avr,$conv10,108,$p);
 return;
}
function _avr_flash_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $and$i = 0, $arrayidx$i = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$lshr$i = 0, $bf$lshr5$i = 0, $conv1$i = 0, $data$i = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $$sroa$0$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  return;
 }
 $data$i = ((($avr)) + 5892|0);
 $0 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($0) + ($bf$clear$i)|0);
 $1 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $1&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  return;
 }
 _avr_cycle_timer_register($avr,4,0,109,$param);
 return;
}
function _avr_progen_clear($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $2 = 0, $3 = 0, $4 = 0, $and$i = 0, $arrayidx$i = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0, $conv$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $neg$i = 0, $shl$i = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $avr1 = ((($param)) + 4|0);
 $2 = HEAP32[$avr1>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($2)) + 5892|0);
 $3 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($3) + ($bf$clear$i)|0);
 $4 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $4&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($2,$conv$i,$conv9$i);
 _avr_global_logger($avr,2,361571,$vararg_buffer);
 setTempRet0((0) | 0);
 STACKTOP = sp;return 0;
}
function _avr_flash_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $cmp$i = 0, $cmp8$i = 0, $div$i = 0, $i$09$i = 0, $inc$i = 0, $spm_pagesize$i = 0, $tmppage$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $spm_pagesize$i = ((($port)) + 52|0);
 $0 = HEAP16[$spm_pagesize$i>>1]|0;
 $cmp8$i = ($0&65535)>(1);
 if (!($cmp8$i)) {
  return;
 }
 $tmppage$i = ((($port)) + 44|0);
 $1 = ((($port)) + 48|0);
 $i$09$i = 0;
 while(1) {
  $2 = HEAP32[$tmppage$i>>2]|0;
  $arrayidx$i = (($2) + ($i$09$i<<1)|0);
  HEAP16[$arrayidx$i>>1] = 255;
  $3 = HEAP32[$1>>2]|0;
  $arrayidx2$i = (($3) + ($i$09$i)|0);
  HEAP8[$arrayidx2$i>>0] = 0;
  $inc$i = (($i$09$i) + 1)|0;
  $4 = HEAP16[$spm_pagesize$i>>1]|0;
  $5 = ($4&65535) >>> 1;
  $div$i = $5&65535;
  $cmp$i = ($inc$i>>>0)<($div$i>>>0);
  if ($cmp$i) {
   $i$09$i = $inc$i;
  } else {
   break;
  }
 }
 return;
}
function _avr_flash_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$0151$0$copyload = 0, $$sroa$0153$0$$sroa_idx = 0, $$sroa$0153$0$copyload = 0, $$sroa$0155$0$$sroa_idx = 0, $$sroa$0155$0$copyload = 0, $$sroa$0158$0$$sroa_idx = 0, $$sroa$0158$0$copyload = 0, $$sroa$0161$0$$sroa_idx = 0, $$sroa$0161$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and$i = 0, $and$i102 = 0, $and$i117 = 0, $and$i145 = 0, $and$i75 = 0, $and$i86 = 0, $and41 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i111 = 0, $arrayidx$i128 = 0, $arrayidx$i139 = 0, $arrayidx$i73 = 0;
 var $arrayidx$i80 = 0, $arrayidx$i91 = 0, $arrayidx$i96 = 0, $arrayidx106 = 0, $arrayidx112 = 0, $arrayidx17 = 0, $arrayidx2$i = 0, $arrayidx2$i129 = 0, $arrayidx3 = 0, $arrayidx34 = 0, $arrayidx59 = 0, $arrayidx63 = 0, $arrayidx65 = 0, $arrayidx70 = 0, $arrayidx8 = 0, $arrayidx98 = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear$i108 = 0, $bf$clear$i136 = 0;
 var $bf$clear$i70 = 0, $bf$clear$i77 = 0, $bf$clear$i93 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear3$i114 = 0, $bf$clear3$i142 = 0, $bf$clear3$i83 = 0, $bf$clear3$i99 = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr$i113 = 0, $bf$lshr$i141 = 0, $bf$lshr$i71 = 0, $bf$lshr$i82 = 0, $bf$lshr$i98 = 0, $bf$lshr4$i = 0, $bf$lshr5$i = 0, $bf$lshr5$i101 = 0, $bf$lshr5$i116 = 0;
 var $bf$lshr5$i144 = 0, $bf$lshr5$i85 = 0, $cmp = 0, $cmp$i = 0, $cmp$i132 = 0, $cmp32 = 0, $cmp32176 = 0, $cmp55 = 0, $cmp55172 = 0, $cmp8$i = 0, $cmp8$i123 = 0, $conv = 0, $conv$i = 0, $conv1$i = 0, $conv1$i112 = 0, $conv1$i140 = 0, $conv1$i81 = 0, $conv1$i97 = 0, $conv15 = 0, $conv18 = 0;
 var $conv21 = 0, $conv27 = 0, $conv31 = 0, $conv4 = 0, $conv40 = 0, $conv60 = 0, $conv67 = 0, $conv7$i74 = 0, $conv9 = 0, $conv9$i = 0, $data = 0, $div = 0, $div$i = 0, $div$i131 = 0, $div110 = 0, $div45 = 0, $div54 = 0, $div97 = 0, $flags = 0, $flash = 0;
 var $flash61 = 0, $i$0178 = 0, $i$09$i = 0, $i$09$i127 = 0, $i50$0174 = 0, $idxprom = 0, $inc = 0, $inc$i = 0, $inc$i130 = 0, $inc35 = 0, $inc62 = 0, $inc69 = 0, $inc72 = 0, $neg = 0, $neg$i = 0, $or = 0, $or11 = 0, $or20 = 0, $rampz = 0, $rem = 0;
 var $rem111 = 0, $retval$0 = 0, $shl = 0, $shl$i = 0, $shl10 = 0, $shl19 = 0, $shr$i = 0, $shr$i100 = 0, $shr$i115 = 0, $shr$i143 = 0, $shr$i84 = 0, $shr94 = 0, $spm_pagesize = 0, $spm_pagesize$i = 0, $spm_pagesize39 = 0, $spm_pagesize95 = 0, $tmppage = 0, $tmppage$i = 0, $tmppage$i124 = 0, $tmppage101 = 0;
 var $tobool = 0, $tobool$i = 0, $tobool$i109 = 0, $tobool$i137 = 0, $tobool$i78 = 0, $tobool$i94 = 0, $tobool22 = 0, $tobool25 = 0, $tobool37 = 0, $tobool76 = 0, $tobool84 = 0, $tobool87 = 0, $tobool99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0;
 var $z$0 = 0, $z$1177 = 0, $z$2173 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $cmp = ($ctl|0)==(1718841453);
 if (!($cmp)) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $avr1 = ((($port)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $data = ((($0)) + 5892|0);
 $1 = HEAP32[$data>>2]|0;
 $arrayidx = ((($1)) + 30|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $conv = $2&255;
 $arrayidx3 = ((($1)) + 31|0);
 $3 = HEAP8[$arrayidx3>>0]|0;
 $conv4 = $3&255;
 $shl = $conv4 << 8;
 $or = $shl | $conv;
 $rampz = ((($0)) + 24|0);
 $4 = HEAP16[$rampz>>1]|0;
 $tobool = ($4<<16>>16)==(0);
 if ($tobool) {
  $z$0 = $or;
 } else {
  $idxprom = $4&65535;
  $arrayidx8 = (($1) + ($idxprom)|0);
  $5 = HEAP8[$arrayidx8>>0]|0;
  $conv9 = $5&255;
  $shl10 = $conv9 << 16;
  $or11 = $shl10 | $or;
  $z$0 = $or11;
 }
 $6 = HEAP8[$1>>0]|0;
 $conv15 = $6&255;
 $arrayidx17 = ((($1)) + 1|0);
 $7 = HEAP8[$arrayidx17>>0]|0;
 $conv18 = $7&255;
 $shl19 = $conv18 << 8;
 $or20 = $shl19 | $conv15;
 $conv21 = $or20&65535;
 $$sroa$0$0$$sroa_idx = ((($port)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 L7: do {
  if (!($tobool$i)) {
   $arrayidx$i = (($1) + ($bf$clear$i)|0);
   $8 = HEAP8[$arrayidx$i>>0]|0;
   $conv1$i = $8&255;
   $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
   $bf$clear3$i = $bf$lshr$i & 7;
   $shr$i = $conv1$i >>> $bf$clear3$i;
   $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
   $and$i = $shr$i & $bf$lshr5$i;
   $tobool22 = ($and$i|0)==(0);
   if (!($tobool22)) {
    _avr_cycle_timer_cancel($0,109,$port);
    $$sroa$0153$0$$sroa_idx = ((($port)) + 60|0);
    $$sroa$0153$0$copyload = HEAPU8[$$sroa$0153$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0153$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0153$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0153$0$$sroa_idx+3>>0]<<24);
    $bf$clear$i77 = $$sroa$0153$0$copyload & 511;
    $tobool$i78 = ($bf$clear$i77|0)==(0);
    if (!($tobool$i78)) {
     $9 = HEAP32[$data>>2]|0;
     $arrayidx$i80 = (($9) + ($bf$clear$i77)|0);
     $10 = HEAP8[$arrayidx$i80>>0]|0;
     $conv1$i81 = $10&255;
     $bf$lshr$i82 = $$sroa$0153$0$copyload >>> 9;
     $bf$clear3$i83 = $bf$lshr$i82 & 7;
     $shr$i84 = $conv1$i81 >>> $bf$clear3$i83;
     $bf$lshr5$i85 = $$sroa$0153$0$copyload >>> 12;
     $and$i86 = $shr$i84 & $bf$lshr5$i85;
     $tobool25 = ($and$i86|0)==(0);
     if (!($tobool25)) {
      $and = $z$0 & -2;
      $spm_pagesize = ((($port)) + 52|0);
      $11 = HEAP16[$spm_pagesize>>1]|0;
      $conv27 = $11&65535;
      $div = (($and>>>0) / ($conv27>>>0))&-1;
      HEAP32[$vararg_buffer>>2] = $div;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $conv27;
      _avr_global_logger($0,3,361641,$vararg_buffer);
      $12 = HEAP16[$spm_pagesize>>1]|0;
      $cmp32176 = ($12<<16>>16)==(0);
      if ($cmp32176) {
       break;
      }
      $flash = ((($0)) + 5888|0);
      $i$0178 = 0;$z$1177 = $and;
      while(1) {
       $13 = HEAP32[$flash>>2]|0;
       $inc = (($z$1177) + 1)|0;
       $arrayidx34 = (($13) + ($z$1177)|0);
       HEAP8[$arrayidx34>>0] = -1;
       $inc35 = (($i$0178) + 1)|0;
       $14 = HEAP16[$spm_pagesize>>1]|0;
       $conv31 = $14&65535;
       $cmp32 = ($inc35>>>0)<($conv31>>>0);
       if ($cmp32) {
        $i$0178 = $inc35;$z$1177 = $inc;
       } else {
        break L7;
       }
      }
     }
    }
    $$sroa$0161$0$$sroa_idx = ((($port)) + 64|0);
    $$sroa$0161$0$copyload = HEAPU8[$$sroa$0161$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0161$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0161$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0161$0$$sroa_idx+3>>0]<<24);
    $bf$clear$i136 = $$sroa$0161$0$copyload & 511;
    $tobool$i137 = ($bf$clear$i136|0)==(0);
    if (!($tobool$i137)) {
     $15 = HEAP32[$data>>2]|0;
     $arrayidx$i139 = (($15) + ($bf$clear$i136)|0);
     $16 = HEAP8[$arrayidx$i139>>0]|0;
     $conv1$i140 = $16&255;
     $bf$lshr$i141 = $$sroa$0161$0$copyload >>> 9;
     $bf$clear3$i142 = $bf$lshr$i141 & 7;
     $shr$i143 = $conv1$i140 >>> $bf$clear3$i142;
     $bf$lshr5$i144 = $$sroa$0161$0$copyload >>> 12;
     $and$i145 = $shr$i143 & $bf$lshr5$i144;
     $tobool37 = ($and$i145|0)==(0);
     if (!($tobool37)) {
      $spm_pagesize39 = ((($port)) + 52|0);
      $17 = HEAP16[$spm_pagesize39>>1]|0;
      $conv40 = $17&65535;
      $neg = (0 - ($conv40))|0;
      $and41 = $z$0 & $neg;
      $div45 = (($and41>>>0) / ($conv40>>>0))&-1;
      HEAP32[$vararg_buffer2>>2] = $div45;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $conv40;
      _avr_global_logger($0,3,361672,$vararg_buffer2);
      $18 = HEAP16[$spm_pagesize39>>1]|0;
      $cmp55172 = ($18&65535)>(1);
      if (!($cmp55172)) {
       break;
      }
      $tmppage = ((($port)) + 44|0);
      $flash61 = ((($0)) + 5888|0);
      $i50$0174 = 0;$z$2173 = $and41;
      while(1) {
       $25 = HEAP32[$tmppage>>2]|0;
       $arrayidx59 = (($25) + ($i50$0174<<1)|0);
       $26 = HEAP16[$arrayidx59>>1]|0;
       $conv60 = $26&255;
       $27 = HEAP32[$flash61>>2]|0;
       $inc62 = (($z$2173) + 1)|0;
       $arrayidx63 = (($27) + ($z$2173)|0);
       HEAP8[$arrayidx63>>0] = $conv60;
       $28 = HEAP32[$tmppage>>2]|0;
       $arrayidx65 = (($28) + ($i50$0174<<1)|0);
       $29 = HEAP16[$arrayidx65>>1]|0;
       $30 = ($29&65535) >>> 8;
       $conv67 = $30&255;
       $31 = HEAP32[$flash61>>2]|0;
       $inc69 = (($z$2173) + 2)|0;
       $arrayidx70 = (($31) + ($inc62)|0);
       HEAP8[$arrayidx70>>0] = $conv67;
       $inc72 = (($i50$0174) + 1)|0;
       $19 = HEAP16[$spm_pagesize39>>1]|0;
       $32 = ($19&65535) >>> 1;
       $div54 = $32&65535;
       $cmp55 = ($inc72>>>0)<($div54>>>0);
       if ($cmp55) {
        $i50$0174 = $inc72;$z$2173 = $inc69;
       } else {
        break;
       }
      }
      $cmp8$i123 = ($19&65535)>(1);
      if (!($cmp8$i123)) {
       break;
      }
      $tmppage$i124 = ((($port)) + 44|0);
      $20 = ((($port)) + 48|0);
      $i$09$i127 = 0;
      while(1) {
       $21 = HEAP32[$tmppage$i124>>2]|0;
       $arrayidx$i128 = (($21) + ($i$09$i127<<1)|0);
       HEAP16[$arrayidx$i128>>1] = 255;
       $22 = HEAP32[$20>>2]|0;
       $arrayidx2$i129 = (($22) + ($i$09$i127)|0);
       HEAP8[$arrayidx2$i129>>0] = 0;
       $inc$i130 = (($i$09$i127) + 1)|0;
       $23 = HEAP16[$spm_pagesize39>>1]|0;
       $24 = ($23&65535) >>> 1;
       $div$i131 = $24&65535;
       $cmp$i132 = ($inc$i130>>>0)<($div$i131>>>0);
       if ($cmp$i132) {
        $i$09$i127 = $inc$i130;
       } else {
        break L7;
       }
      }
     }
    }
    $$sroa$0158$0$$sroa_idx = ((($port)) + 68|0);
    $$sroa$0158$0$copyload = HEAPU8[$$sroa$0158$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0158$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0158$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0158$0$$sroa_idx+3>>0]<<24);
    $bf$clear$i108 = $$sroa$0158$0$copyload & 511;
    $tobool$i109 = ($bf$clear$i108|0)==(0);
    if (!($tobool$i109)) {
     $33 = HEAP32[$data>>2]|0;
     $arrayidx$i111 = (($33) + ($bf$clear$i108)|0);
     $34 = HEAP8[$arrayidx$i111>>0]|0;
     $conv1$i112 = $34&255;
     $bf$lshr$i113 = $$sroa$0158$0$copyload >>> 9;
     $bf$clear3$i114 = $bf$lshr$i113 & 7;
     $shr$i115 = $conv1$i112 >>> $bf$clear3$i114;
     $bf$lshr5$i116 = $$sroa$0158$0$copyload >>> 12;
     $and$i117 = $shr$i115 & $bf$lshr5$i116;
     $tobool76 = ($and$i117|0)==(0);
     if (!($tobool76)) {
      _avr_global_logger($0,3,361703,$vararg_buffer6);
      break;
     }
    }
    $flags = ((($port)) + 40|0);
    $35 = HEAP16[$flags>>1]|0;
    $36 = $35 & 1;
    $tobool84 = ($36<<16>>16)==(0);
    if (!($tobool84)) {
     $$sroa$0155$0$$sroa_idx = ((($port)) + 72|0);
     $$sroa$0155$0$copyload = HEAPU8[$$sroa$0155$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0155$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0155$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0155$0$$sroa_idx+3>>0]<<24);
     $bf$clear$i93 = $$sroa$0155$0$copyload & 511;
     $tobool$i94 = ($bf$clear$i93|0)==(0);
     if (!($tobool$i94)) {
      $37 = HEAP32[$data>>2]|0;
      $arrayidx$i96 = (($37) + ($bf$clear$i93)|0);
      $38 = HEAP8[$arrayidx$i96>>0]|0;
      $conv1$i97 = $38&255;
      $bf$lshr$i98 = $$sroa$0155$0$copyload >>> 9;
      $bf$clear3$i99 = $bf$lshr$i98 & 7;
      $shr$i100 = $conv1$i97 >>> $bf$clear3$i99;
      $bf$lshr5$i101 = $$sroa$0155$0$copyload >>> 12;
      $and$i102 = $shr$i100 & $bf$lshr5$i101;
      $tobool87 = ($and$i102|0)==(0);
      if (!($tobool87)) {
       $spm_pagesize$i = ((($port)) + 52|0);
       $39 = HEAP16[$spm_pagesize$i>>1]|0;
       $cmp8$i = ($39&65535)>(1);
       if (!($cmp8$i)) {
        break;
       }
       $tmppage$i = ((($port)) + 44|0);
       $40 = ((($port)) + 48|0);
       $i$09$i = 0;
       while(1) {
        $41 = HEAP32[$tmppage$i>>2]|0;
        $arrayidx$i91 = (($41) + ($i$09$i<<1)|0);
        HEAP16[$arrayidx$i91>>1] = 255;
        $42 = HEAP32[$40>>2]|0;
        $arrayidx2$i = (($42) + ($i$09$i)|0);
        HEAP8[$arrayidx2$i>>0] = 0;
        $inc$i = (($i$09$i) + 1)|0;
        $43 = HEAP16[$spm_pagesize$i>>1]|0;
        $44 = ($43&65535) >>> 1;
        $div$i = $44&65535;
        $cmp$i = ($inc$i>>>0)<($div$i>>>0);
        if ($cmp$i) {
         $i$09$i = $inc$i;
        } else {
         break L7;
        }
       }
      }
     }
    }
    HEAP32[$vararg_buffer8>>2] = $z$0;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $or20;
    _avr_global_logger($0,3,361739,$vararg_buffer8);
    $shr94 = $z$0 >>> 1;
    $45 = ((($port)) + 48|0);
    $46 = HEAP32[$45>>2]|0;
    $spm_pagesize95 = ((($port)) + 52|0);
    $47 = HEAP16[$spm_pagesize95>>1]|0;
    $48 = ($47&65535) >>> 1;
    $div97 = $48&65535;
    $rem = (($shr94>>>0) % ($div97>>>0))&-1;
    $arrayidx98 = (($46) + ($rem)|0);
    $49 = HEAP8[$arrayidx98>>0]|0;
    $tobool99 = ($49<<24>>24)==(0);
    if ($tobool99) {
     $tmppage101 = ((($port)) + 44|0);
     $50 = HEAP32[$tmppage101>>2]|0;
     $arrayidx106 = (($50) + ($rem<<1)|0);
     HEAP16[$arrayidx106>>1] = $conv21;
     $51 = HEAP16[$spm_pagesize95>>1]|0;
     $52 = ($51&65535) >>> 1;
     $div110 = $52&65535;
     $rem111 = (($shr94>>>0) % ($div110>>>0))&-1;
     $arrayidx112 = (($46) + ($rem111)|0);
     HEAP8[$arrayidx112>>0] = 1;
    }
   }
  }
 } while(0);
 $$sroa$0151$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i70 = $$sroa$0151$0$copyload & 511;
 $conv$i = $bf$clear$i70&65535;
 $bf$lshr$i71 = $$sroa$0151$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i71 & 255;
 $bf$lshr4$i = $$sroa$0151$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $53 = HEAP32[$data>>2]|0;
 $arrayidx$i73 = (($53) + ($bf$clear$i70)|0);
 $54 = HEAP8[$arrayidx$i73>>0]|0;
 $conv7$i74 = $54&255;
 $neg$i = $shl$i ^ 255;
 $and$i75 = $neg$i & $conv7$i74;
 $conv9$i = $and$i75&255;
 _avr_core_watch_write($0,$conv$i,$conv9$i);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _avr_flash_dealloc($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $2 = 0, $tmppage = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tmppage = ((($port)) + 44|0);
 $0 = HEAP32[$tmppage>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  _free($0);
 }
 $1 = ((($port)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $tobool2 = ($2|0)==(0|0);
 if ($tobool2) {
  return;
 }
 _free($2);
 return;
}
function _avr_uart_reset($io) {
 $io = $io|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$064$0$$sroa_idx = 0, $$sroa$064$0$copyload = 0, $$sroa$066$0$$sroa_idx = 0, $$sroa$066$0$copyload = 0, $$sroa$069$0$$sroa_idx = 0, $$sroa$069$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$i = 0, $arrayidx$i = 0, $arrayidx$i29 = 0, $arrayidx$i45 = 0, $arrayidx$i60 = 0, $avr2 = 0, $bf$clear$i = 0, $bf$clear$i20 = 0, $bf$clear$i36 = 0, $bf$clear$i52 = 0, $bf$clear2$i = 0, $bf$clear2$i24 = 0, $bf$clear2$i40 = 0, $bf$clear2$i55 = 0, $bf$clear5$i = 0, $bf$clear5$i26 = 0;
 var $bf$clear5$i42 = 0, $bf$clear5$i57 = 0, $bf$lshr$i = 0, $bf$lshr$i23 = 0, $bf$lshr$i39 = 0, $bf$lshr$i54 = 0, $bf$lshr4$i = 0, $bf$lshr4$i25 = 0, $bf$lshr4$i41 = 0, $bf$lshr4$i56 = 0, $conv$i = 0, $conv$i21 = 0, $conv$i37 = 0, $conv$i53 = 0, $conv7$i = 0, $conv7$i30 = 0, $conv7$i46 = 0, $conv7$i61 = 0, $conv9$i = 0, $conv9$i32 = 0;
 var $conv9$i48 = 0, $conv9$i62 = 0, $data$i = 0, $data$i44 = 0, $data$i59$pre$phiZZ2D = 0, $input = 0, $irq = 0, $neg$i = 0, $or$i = 0, $or$i31 = 0, $or$i47 = 0, $read$i = 0, $shl$i = 0, $shl$i27 = 0, $shl$i43 = 0, $shl$i58 = 0, $tobool = 0, $tobool$i = 0, $tobool$i22 = 0, $tobool$i38 = 0;
 var $udrc = 0, $usec_per_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr2 = ((($io)) + 4|0);
 $0 = HEAP32[$avr2>>2]|0;
 $udrc = ((($io)) + 212|0);
 $1 = HEAP8[$udrc>>0]|0;
 $tobool = ($1<<24>>24)==(0);
 if (!($tobool)) {
  $$sroa$0$0$$sroa_idx = ((($io)) + 220|0);
  $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i = $$sroa$0$0$copyload & 511;
  $conv$i = $bf$clear$i&65535;
  $tobool$i = ($conv$i<<16>>16)==(0);
  if (!($tobool$i)) {
   $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
   $bf$clear2$i = $bf$lshr$i & 255;
   $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
   $bf$clear5$i = $bf$lshr4$i & 7;
   $shl$i = $bf$clear2$i << $bf$clear5$i;
   $data$i = ((($0)) + 5892|0);
   $2 = HEAP32[$data$i>>2]|0;
   $arrayidx$i = (($2) + ($bf$clear$i)|0);
   $3 = HEAP8[$arrayidx$i>>0]|0;
   $conv7$i = $3&255;
   $or$i = $shl$i | $conv7$i;
   $conv9$i = $or$i&255;
   _avr_core_watch_write($0,$conv$i,$conv9$i);
  }
 }
 $irq = ((($io)) + 24|0);
 $4 = HEAP32[$irq>>2]|0;
 _avr_irq_register_notify($4,110,$io);
 _avr_cycle_timer_cancel($0,111,$io);
 _avr_cycle_timer_cancel($0,112,$io);
 $input = ((($io)) + 276|0);
 $read$i = ((($input)) + 64|0);
 ;HEAP16[$read$i>>1]=0|0;HEAP16[$read$i+2>>1]=0|0;HEAP8[$read$i+4>>0]=0|0;
 $$sroa$066$0$$sroa_idx = ((($io)) + 72|0);
 $$sroa$066$0$copyload = HEAPU8[$$sroa$066$0$$sroa_idx>>0]|(HEAPU8[$$sroa$066$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$066$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$066$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i36 = $$sroa$066$0$copyload & 511;
 $conv$i37 = $bf$clear$i36&65535;
 $tobool$i38 = ($conv$i37<<16>>16)==(0);
 if ($tobool$i38) {
  $$pre = ((($0)) + 5892|0);
  $data$i59$pre$phiZZ2D = $$pre;
 } else {
  $bf$lshr$i39 = $$sroa$066$0$copyload >>> 12;
  $bf$clear2$i40 = $bf$lshr$i39 & 255;
  $bf$lshr4$i41 = $$sroa$066$0$copyload >>> 9;
  $bf$clear5$i42 = $bf$lshr4$i41 & 7;
  $shl$i43 = $bf$clear2$i40 << $bf$clear5$i42;
  $data$i44 = ((($0)) + 5892|0);
  $5 = HEAP32[$data$i44>>2]|0;
  $arrayidx$i45 = (($5) + ($bf$clear$i36)|0);
  $6 = HEAP8[$arrayidx$i45>>0]|0;
  $conv7$i46 = $6&255;
  $or$i47 = $shl$i43 | $conv7$i46;
  $conv9$i48 = $or$i47&255;
  _avr_core_watch_write($0,$conv$i37,$conv9$i48);
  $data$i59$pre$phiZZ2D = $data$i44;
 }
 $$sroa$069$0$$sroa_idx = ((($io)) + 76|0);
 $$sroa$069$0$copyload = HEAPU8[$$sroa$069$0$$sroa_idx>>0]|(HEAPU8[$$sroa$069$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$069$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$069$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i52 = $$sroa$069$0$copyload & 511;
 $conv$i53 = $bf$clear$i52&65535;
 $bf$lshr$i54 = $$sroa$069$0$copyload >>> 12;
 $bf$clear2$i55 = $bf$lshr$i54 & 255;
 $bf$lshr4$i56 = $$sroa$069$0$copyload >>> 9;
 $bf$clear5$i57 = $bf$lshr4$i56 & 7;
 $shl$i58 = $bf$clear2$i55 << $bf$clear5$i57;
 $7 = HEAP32[$data$i59$pre$phiZZ2D>>2]|0;
 $arrayidx$i60 = (($7) + ($bf$clear$i52)|0);
 $8 = HEAP8[$arrayidx$i60>>0]|0;
 $conv7$i61 = $8&255;
 $neg$i = $shl$i58 ^ 255;
 $and$i = $neg$i & $conv7$i61;
 $conv9$i62 = $and$i&255;
 _avr_core_watch_write($0,$conv$i53,$conv9$i62);
 $$sroa$064$0$$sroa_idx = ((($io)) + 60|0);
 $$sroa$064$0$copyload = HEAPU8[$$sroa$064$0$$sroa_idx>>0]|(HEAPU8[$$sroa$064$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$064$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$064$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i20 = $$sroa$064$0$copyload & 511;
 $conv$i21 = $bf$clear$i20&65535;
 $tobool$i22 = ($conv$i21<<16>>16)==(0);
 if ($tobool$i22) {
  $usec_per_byte = ((($io)) + 352|0);
  $11 = $usec_per_byte;
  $12 = $11;
  HEAP32[$12>>2] = 100;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP32[$14>>2] = 0;
  return;
 }
 $bf$lshr$i23 = $$sroa$064$0$copyload >>> 12;
 $bf$clear2$i24 = $bf$lshr$i23 & 255;
 $bf$lshr4$i25 = $$sroa$064$0$copyload >>> 9;
 $bf$clear5$i26 = $bf$lshr4$i25 & 7;
 $shl$i27 = $bf$clear2$i24 << $bf$clear5$i26;
 $9 = HEAP32[$data$i59$pre$phiZZ2D>>2]|0;
 $arrayidx$i29 = (($9) + ($bf$clear$i20)|0);
 $10 = HEAP8[$arrayidx$i29>>0]|0;
 $conv7$i30 = $10&255;
 $or$i31 = $shl$i27 | $conv7$i30;
 $conv9$i32 = $or$i31&255;
 _avr_core_watch_write($0,$conv$i21,$conv9$i32);
 $usec_per_byte = ((($io)) + 352|0);
 $11 = $usec_per_byte;
 $12 = $11;
 HEAP32[$12>>2] = 100;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 return;
}
function _avr_uart_irq_input($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$idx = 0, $$idx$val = 0, $$idx11 = 0, $$idx11$val = 0, $$idx12$val = 0, $$idx12$val$pre = 0, $$pre = 0, $$pre$phi25Z2D = 0, $$pre20 = 0, $$pre23 = 0, $$pre24 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $and$i = 0, $arrayidx$i = 0, $arrayidx$i15 = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$lshr$i = 0, $bf$lshr5$i = 0, $cmp$i = 0, $cmp$i14 = 0, $cmp$i16 = 0, $conv$i = 0;
 var $conv1$i = 0, $conv7 = 0, $data$i = 0, $input = 0, $irq14 = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0, $usec_per_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  return;
 }
 $data$i = ((($0)) + 5892|0);
 $1 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($1) + ($bf$clear$i)|0);
 $2 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $2&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  return;
 }
 $input = ((($param)) + 276|0);
 $$idx = ((($param)) + 340|0);
 $$idx$val = HEAP16[$$idx>>1]|0;
 $$idx11 = ((($param)) + 342|0);
 $$idx11$val = HEAP16[$$idx11>>1]|0;
 $cmp$i16 = ($$idx$val<<16>>16)==($$idx11$val<<16>>16);
 if ($cmp$i16) {
  $usec_per_byte = ((($param)) + 352|0);
  $3 = $usec_per_byte;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  _avr_cycle_timer_register_usec($0,$5,111,$param);
  $$pre = HEAP16[$$idx11>>1]|0;
  $$pre20 = HEAP16[$$idx>>1]|0;
  $10 = $$pre;$12 = $$pre20;
 } else {
  $10 = $$idx11$val;$12 = $$idx$val;
 }
 $9 = (($10) + 1)<<16>>16;
 $11 = $9 & 63;
 $cmp$i14 = ($12<<16>>16)==($11<<16>>16);
 if ($cmp$i14) {
  $$idx12$val = $12;$$pre$phi25Z2D = $11;
 } else {
  $conv$i = $10&65535;
  $arrayidx$i15 = (($input) + ($conv$i)|0);
  $conv7 = $value&255;
  HEAP8[$arrayidx$i15>>0] = $conv7;
  HEAP16[$$idx11>>1] = $11;
  $$idx12$val$pre = HEAP16[$$idx>>1]|0;
  $$pre23 = (($10) + 2)<<16>>16;
  $$pre24 = $$pre23 & 63;
  $$idx12$val = $$idx12$val$pre;$$pre$phi25Z2D = $$pre24;
 }
 $cmp$i = ($$pre$phi25Z2D<<16>>16)==($$idx12$val<<16>>16);
 if (!($cmp$i)) {
  return;
 }
 $irq14 = ((($param)) + 24|0);
 $13 = HEAP32[$irq14>>2]|0;
 $add$ptr = ((($13)) + 72|0);
 _avr_raise_irq($add$ptr,1);
 return;
}
function _avr_uart_rxc_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $2 = 0, $3 = 0, $and$i = 0, $arrayidx$i = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$lshr$i = 0, $bf$lshr5$i = 0, $conv1$i = 0, $data$i = 0, $rxc = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  setTempRet0((0) | 0);
  return 0;
 }
 $data$i = ((($avr)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $3&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  setTempRet0((0) | 0);
  return 0;
 }
 $rxc = ((($param)) + 84|0);
 (_avr_raise_interrupt($avr,$rxc)|0);
 setTempRet0((0) | 0);
 return 0;
}
function _avr_uart_txc_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $2 = 0, $3 = 0, $and$i = 0, $arrayidx$i = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$lshr$i = 0, $bf$lshr5$i = 0, $conv1$i = 0, $data$i = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0, $txc = 0, $udrc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 60|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  setTempRet0((0) | 0);
  return 0;
 }
 $data$i = ((($avr)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $3&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  setTempRet0((0) | 0);
  return 0;
 }
 $udrc = ((($param)) + 212|0);
 (_avr_raise_interrupt($avr,$udrc)|0);
 $txc = ((($param)) + 148|0);
 (_avr_raise_interrupt($avr,$txc)|0);
 setTempRet0((0) | 0);
 return 0;
}
function _avr_uart_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $bf$clear = 0, $bf$clear14 = 0, $bf$load = 0, $bf$load13 = 0, $conv = 0, $conv10 = 0, $conv15 = 0, $enable = 0, $flags = 0, $flags4 = 0, $irq = 0;
 var $name = 0, $or = 0, $r_ubrrl = 0, $r_ucsra = 0, $r_udr = 0, $raised = 0, $rxc = 0, $tobool = 0, $tobool16 = 0, $tobool20 = 0, $txc = 0, $udrc = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=354264; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $flags = ((($p)) + 348|0);
 HEAP32[$flags>>2] = 3;
 _avr_register_io($avr,$p);
 $rxc = ((($p)) + 84|0);
 _avr_register_vector($avr,$rxc);
 $txc = ((($p)) + 148|0);
 _avr_register_vector($avr,$txc);
 $udrc = ((($p)) + 212|0);
 _avr_register_vector($avr,$udrc);
 $name = ((($p)) + 40|0);
 $0 = HEAP8[$name>>0]|0;
 $conv = $0 << 24 >> 24;
 $or = $conv | 1969320448;
 (_avr_io_setirqs($p,$or,4,0)|0);
 $irq = ((($p)) + 24|0);
 $1 = HEAP32[$irq>>2]|0;
 $flags4 = ((($1)) + 88|0);
 $2 = HEAP8[$flags4>>0]|0;
 $3 = $2 | 2;
 HEAP8[$flags4>>0] = $3;
 $r_udr = ((($p)) + 48|0);
 $4 = HEAP16[$r_udr>>1]|0;
 _avr_register_io_write($avr,$4,113,$p);
 $5 = HEAP16[$r_udr>>1]|0;
 _avr_register_io_read($avr,$5,114,$p);
 $raised = ((($p)) + 92|0);
 $bf$load = HEAP32[$raised>>2]|0;
 $bf$clear = $bf$load & 511;
 $conv10 = $bf$clear&65535;
 _avr_register_io_read($avr,$conv10,115,$p);
 $6 = HEAP8[$udrc>>0]|0;
 $tobool = ($6<<24>>24)==(0);
 if (!($tobool)) {
  $enable = ((($p)) + 216|0);
  $bf$load13 = HEAP32[$enable>>2]|0;
  $bf$clear14 = $bf$load13 & 511;
  $conv15 = $bf$clear14&65535;
  _avr_register_io_write($avr,$conv15,116,$p);
 }
 $r_ucsra = ((($p)) + 50|0);
 $7 = HEAP16[$r_ucsra>>1]|0;
 $tobool16 = ($7<<16>>16)==(0);
 if (!($tobool16)) {
  _avr_register_io_write($avr,$7,116,$p);
 }
 $r_ubrrl = ((($p)) + 80|0);
 $8 = HEAP16[$r_ubrrl>>1]|0;
 $tobool20 = ($8<<16>>16)==(0);
 if ($tobool20) {
  return;
 }
 _avr_register_io_write($avr,$8,117,$p);
 return;
}
function _avr_uart_udr_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$035$0$$sroa_idx = 0, $$sroa$035$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $and = 0, $and$i = 0, $and$i31 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i29 = 0, $arrayidx16 = 0, $bf$clear$i = 0, $bf$clear$i27 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr$i30 = 0, $bf$lshr4$i = 0;
 var $bf$lshr5$i = 0, $call6 = 0, $cmp = 0, $cmp18 = 0, $cmp21 = 0, $conv$i = 0, $conv1$i = 0, $conv12 = 0, $conv31 = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $data$i28 = 0, $flags = 0, $inc = 0, $irq = 0, $neg$i = 0, $shl$i = 0, $shr$i = 0, $stdio_len = 0;
 var $stdio_out = 0, $tobool = 0, $tobool$i = 0, $tobool2 = 0, $tobool29 = 0, $tobool4 = 0, $udrc = 0, $usec_per_byte = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _avr_core_watch_write($avr,$addr,$v);
 $udrc = ((($param)) + 212|0);
 $0 = HEAP8[$udrc>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $$sroa$0$0$$sroa_idx = ((($param)) + 220|0);
  $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i = $$sroa$0$0$copyload & 511;
  $conv$i = $bf$clear$i&65535;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
  $bf$clear2$i = $bf$lshr$i & 255;
  $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear5$i = $bf$lshr4$i & 7;
  $shl$i = $bf$clear2$i << $bf$clear5$i;
  $data$i = ((($avr)) + 5892|0);
  $1 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($1) + ($bf$clear$i)|0);
  $2 = HEAP8[$arrayidx$i>>0]|0;
  $conv7$i = $2&255;
  $neg$i = $shl$i ^ 255;
  $and$i = $neg$i & $conv7$i;
  $conv9$i = $and$i&255;
  _avr_core_watch_write($avr,$conv$i,$conv9$i);
 }
 $usec_per_byte = ((($param)) + 352|0);
 $3 = $usec_per_byte;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 _avr_cycle_timer_register_usec($avr,$5,112,$param);
 $flags = ((($param)) + 348|0);
 $9 = HEAP32[$flags>>2]|0;
 $and = $9 & 2;
 $tobool2 = ($and|0)==(0);
 do {
  if (!($tobool2)) {
   $stdio_out = ((($param)) + 360|0);
   $10 = HEAP32[$stdio_out>>2]|0;
   $tobool4 = ($10|0)==(0|0);
   if ($tobool4) {
    $call6 = (_malloc(256)|0);
    HEAP32[$stdio_out>>2] = $call6;
    $12 = $call6;
   } else {
    $12 = $10;
   }
   $cmp = ($v&255)<(32);
   $conv12 = $cmp ? 46 : $v;
   $stdio_len = ((($param)) + 364|0);
   $11 = HEAP32[$stdio_len>>2]|0;
   $inc = (($11) + 1)|0;
   HEAP32[$stdio_len>>2] = $inc;
   $arrayidx = (($12) + ($11)|0);
   HEAP8[$arrayidx>>0] = $conv12;
   $13 = HEAP32[$stdio_out>>2]|0;
   $14 = HEAP32[$stdio_len>>2]|0;
   $arrayidx16 = (($13) + ($14)|0);
   HEAP8[$arrayidx16>>0] = 0;
   $cmp18 = ($v<<24>>24)==(10);
   if (!($cmp18)) {
    $15 = HEAP32[$stdio_len>>2]|0;
    $cmp21 = ($15|0)==(256);
    if (!($cmp21)) {
     break;
    }
   }
   HEAP32[$stdio_len>>2] = 0;
   $16 = HEAP32[$stdio_out>>2]|0;
   HEAP32[$vararg_buffer>>2] = $16;
   _avr_global_logger($avr,3,361870,$vararg_buffer);
  }
 } while(0);
 $$sroa$035$0$$sroa_idx = ((($param)) + 60|0);
 $$sroa$035$0$copyload = HEAPU8[$$sroa$035$0$$sroa_idx>>0]|(HEAPU8[$$sroa$035$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$035$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$035$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i27 = $$sroa$035$0$copyload & 511;
 $tobool$i = ($bf$clear$i27|0)==(0);
 if ($tobool$i) {
  STACKTOP = sp;return;
 }
 $data$i28 = ((($avr)) + 5892|0);
 $17 = HEAP32[$data$i28>>2]|0;
 $arrayidx$i29 = (($17) + ($bf$clear$i27)|0);
 $18 = HEAP8[$arrayidx$i29>>0]|0;
 $conv1$i = $18&255;
 $bf$lshr$i30 = $$sroa$035$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i30 & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$035$0$copyload >>> 12;
 $and$i31 = $shr$i & $bf$lshr5$i;
 $tobool29 = ($and$i31|0)==(0);
 if ($tobool29) {
  STACKTOP = sp;return;
 }
 $conv31 = $v&255;
 $irq = ((($param)) + 24|0);
 $19 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($19)) + 24|0);
 _avr_raise_irq($add$ptr,$conv31);
 STACKTOP = sp;return;
}
function _avr_uart_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$idx$val = 0, $$idx17$val = 0, $$pre = 0, $$pre36 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$032$0$$sroa_idx = 0, $$sroa$032$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $and$i = 0, $and$i23 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i21 = 0, $arrayidx$i27 = 0, $arrayidx6 = 0, $bf$clear$i = 0, $bf$clear$i19 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr$i22 = 0, $bf$lshr4$i = 0, $bf$lshr5$i = 0, $call7 = 0;
 var $cmp$i = 0, $cmp$i25 = 0, $conv$i = 0, $conv$i26 = 0, $conv1$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $idxprom = 0, $idxprom5 = 0, $input = 0, $neg$i = 0, $read1$i = 0, $retval$0 = 0, $retval$0$i29 = 0, $shl$i = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0, $usec_per_byte = 0;
 var $write$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 92|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($avr)) + 5892|0);
 $0 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($0) + ($bf$clear$i)|0);
 $1 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $1&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($avr,$conv$i,$conv9$i);
 $$sroa$032$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$032$0$copyload = HEAPU8[$$sroa$032$0$$sroa_idx>>0]|(HEAPU8[$$sroa$032$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$032$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$032$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i19 = $$sroa$032$0$copyload & 511;
 $tobool$i = ($bf$clear$i19|0)==(0);
 $$pre36 = HEAP32[$data$i>>2]|0;
 if (!($tobool$i)) {
  $arrayidx$i21 = (($$pre36) + ($bf$clear$i19)|0);
  $2 = HEAP8[$arrayidx$i21>>0]|0;
  $conv1$i = $2&255;
  $bf$lshr$i22 = $$sroa$032$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i22 & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$032$0$copyload >>> 12;
  $and$i23 = $shr$i & $bf$lshr5$i;
  $tobool = ($and$i23|0)==(0);
  if (!($tobool)) {
   $read1$i = ((($param)) + 340|0);
   $3 = HEAP16[$read1$i>>1]|0;
   $write$i = ((($param)) + 342|0);
   $4 = HEAP16[$write$i>>1]|0;
   $cmp$i25 = ($3<<16>>16)==($4<<16>>16);
   if ($cmp$i25) {
    $8 = $$pre36;$retval$0$i29 = 0;
   } else {
    $input = ((($param)) + 276|0);
    $conv$i26 = $3&65535;
    $arrayidx$i27 = (($input) + ($conv$i26)|0);
    $5 = (($3) + 1)<<16>>16;
    $6 = $5 & 63;
    $7 = HEAP8[$arrayidx$i27>>0]|0;
    HEAP16[$read1$i>>1] = $6;
    $$pre = HEAP32[$data$i>>2]|0;
    $8 = $$pre;$retval$0$i29 = $7;
   }
   $idxprom5 = $addr&65535;
   $arrayidx6 = (($8) + ($idxprom5)|0);
   HEAP8[$arrayidx6>>0] = $retval$0$i29;
   $call7 = (_avr_core_watch_read($avr,$addr)|0);
   $$idx$val = HEAP16[$read1$i>>1]|0;
   $$idx17$val = HEAP16[$write$i>>1]|0;
   $cmp$i = ($$idx$val<<16>>16)==($$idx17$val<<16>>16);
   if ($cmp$i) {
    $retval$0 = $call7;
    return ($retval$0|0);
   }
   $usec_per_byte = ((($param)) + 352|0);
   $9 = $usec_per_byte;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   _avr_cycle_timer_register_usec($avr,$11,111,$param);
   $retval$0 = $call7;
   return ($retval$0|0);
  }
 }
 $idxprom = $addr&65535;
 $arrayidx = (($$pre36) + ($idxprom)|0);
 HEAP8[$arrayidx>>0] = 0;
 (_avr_core_watch_read($avr,$addr)|0);
 $retval$0 = 0;
 return ($retval$0|0);
}
function _avr_uart_rxc_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$idx = 0, $$idx$val = 0, $$idx17 = 0, $$idx17$val = 0, $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$080$0$copyload = 0, $$sroa$080$0$copyload$pre = 0, $$sroa$083$0$$sroa_idx = 0, $$sroa$083$0$copyload = 0, $$sroa$086$0$$sroa_idx = 0, $$sroa$086$0$copyload = 0, $$sroa$089$0$$sroa_idx = 0, $$sroa$089$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr32 = 0, $and = 0, $and$i = 0, $and$i28 = 0, $and$i43 = 0, $and$i58 = 0, $and$i73 = 0, $arrayidx$i = 0, $arrayidx$i22 = 0, $arrayidx$i37 = 0, $arrayidx$i52 = 0;
 var $arrayidx$i67 = 0, $bf$clear$i = 0, $bf$clear$i19$pre$phiZZZ2D = 0, $bf$clear$i34 = 0, $bf$clear$i49 = 0, $bf$clear$i64 = 0, $bf$clear3$i = 0, $bf$clear3$i25 = 0, $bf$clear3$i40 = 0, $bf$clear3$i55 = 0, $bf$clear3$i70 = 0, $bf$lshr$i = 0, $bf$lshr$i24 = 0, $bf$lshr$i39 = 0, $bf$lshr$i54 = 0, $bf$lshr$i69 = 0, $bf$lshr5$i = 0, $bf$lshr5$i27 = 0, $bf$lshr5$i42 = 0, $bf$lshr5$i57 = 0;
 var $bf$lshr5$i72 = 0, $call = 0, $cmp$i = 0, $conv1$i = 0, $conv1$i23 = 0, $conv1$i38 = 0, $conv1$i53 = 0, $conv1$i68 = 0, $data$i = 0, $data$i21 = 0, $data$i51 = 0, $flags = 0, $irq = 0, $or$cond = 0, $or$cond16 = 0, $phitmp = 0, $phitmp95 = 0, $phitmp96 = 0, $shr$i = 0, $shr$i26 = 0;
 var $shr$i41 = 0, $shr$i56 = 0, $shr$i71 = 0, $tobool = 0, $tobool$i = 0, $tobool$i20 = 0, $tobool$i35 = 0, $tobool$i50 = 0, $tobool$i65 = 0, $tobool14 = 0, $tobool16 = 0, $tobool25 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_avr_core_watch_read($avr,$addr)|0);
 $$sroa$0$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $7 = 1;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $tobool = ($and$i|0)==(0);
  if ($tobool) {
   $7 = 1;
  } else {
   $$sroa$089$0$$sroa_idx = ((($param)) + 92|0);
   $$sroa$089$0$copyload = HEAPU8[$$sroa$089$0$$sroa_idx>>0]|(HEAPU8[$$sroa$089$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$089$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$089$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i64 = $$sroa$089$0$copyload & 511;
   $tobool$i65 = ($bf$clear$i64|0)==(0);
   if ($tobool$i65) {
    $7 = 1;
   } else {
    $arrayidx$i67 = (($0) + ($bf$clear$i64)|0);
    $2 = HEAP8[$arrayidx$i67>>0]|0;
    $conv1$i68 = $2&255;
    $bf$lshr$i69 = $$sroa$089$0$copyload >>> 9;
    $bf$clear3$i70 = $bf$lshr$i69 & 7;
    $shr$i71 = $conv1$i68 >>> $bf$clear3$i70;
    $bf$lshr5$i72 = $$sroa$089$0$copyload >>> 12;
    $and$i73 = $shr$i71 & $bf$lshr5$i72;
    $phitmp95 = ($and$i73|0)==(0);
    $phitmp96 = $phitmp95&1;
    $7 = $phitmp96;
   }
  }
 }
 $$sroa$086$0$$sroa_idx = ((($param)) + 60|0);
 $$sroa$086$0$copyload = HEAPU8[$$sroa$086$0$$sroa_idx>>0]|(HEAPU8[$$sroa$086$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$086$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$086$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i49 = $$sroa$086$0$copyload & 511;
 $tobool$i50 = ($bf$clear$i49|0)==(0);
 if ($tobool$i50) {
  $8 = 0;
 } else {
  $data$i51 = ((($avr)) + 5892|0);
  $3 = HEAP32[$data$i51>>2]|0;
  $arrayidx$i52 = (($3) + ($bf$clear$i49)|0);
  $4 = HEAP8[$arrayidx$i52>>0]|0;
  $conv1$i53 = $4&255;
  $bf$lshr$i54 = $$sroa$086$0$copyload >>> 9;
  $bf$clear3$i55 = $bf$lshr$i54 & 7;
  $shr$i56 = $conv1$i53 >>> $bf$clear3$i55;
  $bf$lshr5$i57 = $$sroa$086$0$copyload >>> 12;
  $and$i58 = $shr$i56 & $bf$lshr5$i57;
  $tobool5 = ($and$i58|0)==(0);
  if ($tobool5) {
   $8 = 0;
  } else {
   $$sroa$083$0$$sroa_idx = ((($param)) + 156|0);
   $$sroa$083$0$copyload = HEAPU8[$$sroa$083$0$$sroa_idx>>0]|(HEAPU8[$$sroa$083$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$083$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$083$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i34 = $$sroa$083$0$copyload & 511;
   $tobool$i35 = ($bf$clear$i34|0)==(0);
   if ($tobool$i35) {
    $8 = 0;
   } else {
    $arrayidx$i37 = (($3) + ($bf$clear$i34)|0);
    $5 = HEAP8[$arrayidx$i37>>0]|0;
    $conv1$i38 = $5&255;
    $bf$lshr$i39 = $$sroa$083$0$copyload >>> 9;
    $bf$clear3$i40 = $bf$lshr$i39 & 7;
    $shr$i41 = $conv1$i38 >>> $bf$clear3$i40;
    $bf$lshr5$i42 = $$sroa$083$0$copyload >>> 12;
    $and$i43 = $shr$i41 & $bf$lshr5$i42;
    $phitmp = ($and$i43|0)!=(0);
    $8 = $phitmp;
   }
  }
 }
 $flags = ((($param)) + 348|0);
 $6 = HEAP32[$flags>>2]|0;
 $and = $6 & 1;
 $tobool14 = ($and|0)==(0);
 $tobool16 = ($7|0)==(0);
 $or$cond = $tobool16 | $tobool14;
 $or$cond16 = $8 | $or$cond;
 if ($or$cond16) {
  $$sroa$080$0$copyload = $$sroa$0$0$copyload;$bf$clear$i19$pre$phiZZZ2D = $bf$clear$i;
 } else {
  (_usleep(1)|0);
  $$sroa$080$0$copyload$pre = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
  $$pre = $$sroa$080$0$copyload$pre & 511;
  $$sroa$080$0$copyload = $$sroa$080$0$copyload$pre;$bf$clear$i19$pre$phiZZZ2D = $$pre;
 }
 $tobool$i20 = ($bf$clear$i19$pre$phiZZZ2D|0)==(0);
 if ($tobool$i20) {
  return ($call|0);
 }
 $data$i21 = ((($avr)) + 5892|0);
 $9 = HEAP32[$data$i21>>2]|0;
 $arrayidx$i22 = (($9) + ($bf$clear$i19$pre$phiZZZ2D)|0);
 $10 = HEAP8[$arrayidx$i22>>0]|0;
 $conv1$i23 = $10&255;
 $bf$lshr$i24 = $$sroa$080$0$copyload >>> 9;
 $bf$clear3$i25 = $bf$lshr$i24 & 7;
 $shr$i26 = $conv1$i23 >>> $bf$clear3$i25;
 $bf$lshr5$i27 = $$sroa$080$0$copyload >>> 12;
 $and$i28 = $shr$i26 & $bf$lshr5$i27;
 $tobool25 = ($and$i28|0)==(0);
 if ($tobool25) {
  return ($call|0);
 }
 $$idx = ((($param)) + 340|0);
 $$idx$val = HEAP16[$$idx>>1]|0;
 $$idx17 = ((($param)) + 342|0);
 $$idx17$val = HEAP16[$$idx17>>1]|0;
 $cmp$i = ($$idx$val<<16>>16)==($$idx17$val<<16>>16);
 if (!($cmp$i)) {
  return ($call|0);
 }
 $irq = ((($param)) + 24|0);
 $11 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($11)) + 72|0);
 _avr_raise_irq($add$ptr,0);
 $12 = HEAP32[$irq>>2]|0;
 $add$ptr32 = ((($12)) + 48|0);
 _avr_raise_irq($add$ptr32,1);
 return ($call|0);
}
function _avr_uart_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pr = 0, $$sroa$068$0$copyload = 0, $$sroa$071$0$$sroa_idx = 0, $$sroa$071$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$i = 0, $and$i31 = 0;
 var $and$i43 = 0, $and$i58 = 0, $and11$i = 0, $arrayidx$i = 0, $arrayidx$i29 = 0, $arrayidx$i37 = 0, $arrayidx$i52 = 0, $bf$clear = 0, $bf$clear$i34 = 0, $bf$clear$i49 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear3$i40 = 0, $bf$clear3$i55 = 0, $bf$clear30 = 0, $bf$clear39 = 0, $bf$clear5$i = 0, $bf$load = 0, $bf$load29 = 0, $bf$load38 = 0;
 var $bf$lshr$i = 0, $bf$lshr$i27 = 0, $bf$lshr$i39 = 0, $bf$lshr$i54 = 0, $bf$lshr4$i = 0, $bf$lshr5$i = 0, $bf$lshr5$i42 = 0, $bf$lshr5$i57 = 0, $cmp = 0, $cmp31 = 0, $cmp40 = 0, $conv1 = 0, $conv1$i = 0, $conv1$i38 = 0, $conv1$i53 = 0, $conv12$i = 0, $conv7$i = 0, $conv7$i30 = 0, $conv7$i59 = 0, $conv9$i = 0;
 var $data$i = 0, $data$i28 = 0, $data$i36 = 0, $data$i51 = 0, $enable = 0, $neg$i = 0, $or$cond = 0, $or$cond78 = 0, $or$i = 0, $raised = 0, $retval$0$i = 0, $retval$0$i61 = 0, $shl$i = 0, $shr$i = 0, $shr$i41 = 0, $shr$i56 = 0, $tobool = 0, $tobool$i = 0, $tobool$i26 = 0, $tobool$i35 = 0;
 var $tobool$i50 = 0, $tobool12 = 0, $tobool25 = 0, $tobool9 = 0, $txc34 = 0, $u2x = 0, $udrc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $udrc = ((($param)) + 212|0);
 $0 = HEAP8[$udrc>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  return;
 }
 $conv1 = $addr&65535;
 $enable = ((($param)) + 216|0);
 $bf$load = HEAP32[$enable>>2]|0;
 $bf$clear = $bf$load & 511;
 $cmp = ($bf$clear|0)==($conv1|0);
 if ($cmp) {
  $tobool$i = ($addr<<16>>16)==(0);
  if ($tobool$i) {
   $retval$0$i = 0;
  } else {
   $data$i = ((($avr)) + 5892|0);
   $1 = HEAP32[$data$i>>2]|0;
   $arrayidx$i = (($1) + ($conv1)|0);
   $2 = HEAP8[$arrayidx$i>>0]|0;
   $conv1$i = $2&255;
   $bf$lshr$i = $bf$load >>> 9;
   $bf$clear3$i = $bf$lshr$i & 7;
   $shr$i = $conv1$i >>> $bf$clear3$i;
   $bf$lshr5$i = $bf$load >>> 12;
   $and$i = $shr$i & $bf$lshr5$i;
   $conv7$i = $and$i&255;
   $retval$0$i = $conv7$i;
  }
  _avr_core_watch_write($avr,$addr,$v);
  $$sroa$068$0$copyload = HEAPU8[$enable>>0]|(HEAPU8[$enable+1>>0]<<8)|(HEAPU8[$enable+2>>0]<<16)|(HEAPU8[$enable+3>>0]<<24);
  $bf$clear$i34 = $$sroa$068$0$copyload & 511;
  $tobool$i35 = ($bf$clear$i34|0)==(0);
  if (!($tobool$i35)) {
   $data$i36 = ((($avr)) + 5892|0);
   $3 = HEAP32[$data$i36>>2]|0;
   $arrayidx$i37 = (($3) + ($bf$clear$i34)|0);
   $4 = HEAP8[$arrayidx$i37>>0]|0;
   $conv1$i38 = $4&255;
   $bf$lshr$i39 = $$sroa$068$0$copyload >>> 9;
   $bf$clear3$i40 = $bf$lshr$i39 & 7;
   $shr$i41 = $conv1$i38 >>> $bf$clear3$i40;
   $bf$lshr5$i42 = $$sroa$068$0$copyload >>> 12;
   $and$i43 = $shr$i41 & $bf$lshr5$i42;
   $tobool9 = ($retval$0$i<<24>>24)!=(0);
   $tobool12 = ($and$i43|0)==(0);
   $or$cond = $tobool9 | $tobool12;
   if (!($or$cond)) {
    $5 = (_avr_cycle_timer_status($avr,112,$param)|0);
    $6 = (getTempRet0() | 0);
    $7 = ($5|0)==(0);
    $8 = ($6|0)==(0);
    $9 = $7 & $8;
    if ($9) {
     (_avr_raise_interrupt($avr,$udrc)|0);
    }
   }
  }
 }
 $$pr = HEAP8[$udrc>>0]|0;
 $tobool25 = ($$pr<<24>>24)==(0);
 if ($tobool25) {
  return;
 }
 $raised = ((($param)) + 220|0);
 $bf$load29 = HEAP32[$raised>>2]|0;
 $bf$clear30 = $bf$load29 & 511;
 $cmp31 = ($bf$clear30|0)==($conv1|0);
 if (!($cmp31)) {
  return;
 }
 $txc34 = ((($param)) + 148|0);
 $$sroa$071$0$$sroa_idx = ((($param)) + 156|0);
 $$sroa$071$0$copyload = HEAPU8[$$sroa$071$0$$sroa_idx>>0]|(HEAPU8[$$sroa$071$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$071$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$071$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i49 = $$sroa$071$0$copyload & 511;
 $tobool$i50 = ($bf$clear$i49|0)==(0);
 if ($tobool$i50) {
  $retval$0$i61 = 0;
 } else {
  $data$i51 = ((($avr)) + 5892|0);
  $10 = HEAP32[$data$i51>>2]|0;
  $arrayidx$i52 = (($10) + ($bf$clear$i49)|0);
  $11 = HEAP8[$arrayidx$i52>>0]|0;
  $conv1$i53 = $11&255;
  $bf$lshr$i54 = $$sroa$071$0$copyload >>> 9;
  $bf$clear3$i55 = $bf$lshr$i54 & 7;
  $shr$i56 = $conv1$i53 >>> $bf$clear3$i55;
  $bf$lshr5$i57 = $$sroa$071$0$copyload >>> 12;
  $and$i58 = $shr$i56 & $bf$lshr5$i57;
  $conv7$i59 = $and$i58&255;
  $retval$0$i61 = $conv7$i59;
 }
 $u2x = ((($param)) + 64|0);
 $bf$load38 = HEAP32[$u2x>>2]|0;
 $bf$clear39 = $bf$load38 & 511;
 $cmp40 = ($bf$clear39|0)!=($conv1|0);
 $tobool$i26 = ($addr<<16>>16)==(0);
 $or$cond78 = $cmp40 | $tobool$i26;
 if (!($or$cond78)) {
  $bf$lshr$i27 = $bf$load38 >>> 12;
  $bf$clear2$i = $bf$lshr$i27 & 255;
  $bf$lshr4$i = $bf$load38 >>> 9;
  $bf$clear5$i = $bf$lshr4$i & 7;
  $shl$i = $bf$clear2$i << $bf$clear5$i;
  $data$i28 = ((($avr)) + 5892|0);
  $12 = HEAP32[$data$i28>>2]|0;
  $arrayidx$i29 = (($12) + ($conv1)|0);
  $13 = HEAP8[$arrayidx$i29>>0]|0;
  $conv7$i30 = $13&255;
  $neg$i = $shl$i ^ 255;
  $and$i31 = $neg$i & $conv7$i30;
  $conv9$i = $v&255;
  $and11$i = $shl$i & $conv9$i;
  $or$i = $and$i31 | $and11$i;
  $conv12$i = $or$i&255;
  _avr_core_watch_write($avr,$addr,$conv12$i);
 }
 (_avr_clear_interrupt_if($avr,$txc34,$retval$0$i61)|0);
 return;
}
function _avr_uart_baud_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$0102$0$$sroa_idx = 0, $$sroa$0102$0$copyload = 0, $$sroa$096$0$$sroa_idx = 0, $$sroa$096$0$copyload = 0, $$sroa$099$0$$sroa_idx = 0, $$sroa$099$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add18 = 0, $add19 = 0, $and$i = 0, $and$i41 = 0, $and$i56 = 0, $and$i71 = 0, $and$i86 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i35 = 0, $arrayidx$i50 = 0;
 var $arrayidx$i65 = 0, $arrayidx$i80 = 0, $arrayidx13 = 0, $arrayidx3 = 0, $bf$clear$i = 0, $bf$clear$i47 = 0, $bf$clear$i62 = 0, $bf$clear$i77 = 0, $bf$clear3$i = 0, $bf$clear3$i38 = 0, $bf$clear3$i53 = 0, $bf$clear3$i68 = 0, $bf$clear3$i83 = 0, $bf$lshr$i = 0, $bf$lshr$i37 = 0, $bf$lshr$i52 = 0, $bf$lshr$i67 = 0, $bf$lshr$i82 = 0, $bf$lshr5$i = 0, $bf$lshr5$i40 = 0;
 var $bf$lshr5$i55 = 0, $bf$lshr5$i70 = 0, $bf$lshr5$i85 = 0, $conv = 0, $conv1$i = 0, $conv1$i36 = 0, $conv1$i51 = 0, $conv1$i66 = 0, $conv1$i81 = 0, $conv20 = 0, $conv4 = 0, $data = 0, $div = 0, $div25 = 0, $div26 = 0, $div5 = 0, $div6108 = 0, $frequency = 0, $idxprom = 0, $idxprom2 = 0;
 var $or = 0, $or12 = 0, $phitmp = 0, $phitmp111 = 0, $r_ubrrh = 0, $r_ubrrl = 0, $retval$0$i59 = 0, $retval$0$i74 = 0, $retval$0$i89 = 0, $shl = 0, $shr$i = 0, $shr$i39 = 0, $shr$i54 = 0, $shr$i69 = 0, $shr$i84 = 0, $tobool = 0, $tobool$i = 0, $tobool$i48 = 0, $tobool$i63 = 0, $tobool$i78 = 0;
 var $tobool24 = 0, $usec_per_byte = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 _avr_core_watch_write($avr,$addr,$v);
 $data = ((($avr)) + 5892|0);
 $0 = HEAP32[$data>>2]|0;
 $r_ubrrl = ((($param)) + 80|0);
 $1 = HEAP16[$r_ubrrl>>1]|0;
 $idxprom = $1&65535;
 $arrayidx = (($0) + ($idxprom)|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $conv = $2&255;
 $r_ubrrh = ((($param)) + 82|0);
 $3 = HEAP16[$r_ubrrh>>1]|0;
 $idxprom2 = $3&65535;
 $arrayidx3 = (($0) + ($idxprom2)|0);
 $4 = HEAP8[$arrayidx3>>0]|0;
 $conv4 = $4&255;
 $shl = $conv4 << 8;
 $or = $shl | $conv;
 $frequency = ((($avr)) + 40|0);
 $5 = HEAP32[$frequency>>2]|0;
 $add = (($or) + 1)|0;
 $div = (($5>>>0) / ($add>>>0))&-1;
 $$sroa$0$0$$sroa_idx = ((($param)) + 64|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  label = 3;
 } else {
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $6 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $6&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $tobool = ($and$i|0)==(0);
  $div5 = $div >>> 3;
  if ($tobool) {
   label = 3;
  } else {
   $14 = $div5;
  }
 }
 if ((label|0) == 3) {
  $div6108 = $div >>> 4;
  $14 = $div6108;
 }
 $$sroa$0102$0$$sroa_idx = ((($param)) + 72|0);
 $$sroa$0102$0$copyload = HEAPU8[$$sroa$0102$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0102$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0102$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0102$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i77 = $$sroa$0102$0$copyload & 511;
 $tobool$i78 = ($bf$clear$i77|0)==(0);
 if ($tobool$i78) {
  $retval$0$i89 = 0;
 } else {
  $arrayidx$i80 = (($0) + ($bf$clear$i77)|0);
  $7 = HEAP8[$arrayidx$i80>>0]|0;
  $conv1$i81 = $7&255;
  $bf$lshr$i82 = $$sroa$0102$0$copyload >>> 9;
  $bf$clear3$i83 = $bf$lshr$i82 & 7;
  $shr$i84 = $conv1$i81 >>> $bf$clear3$i83;
  $bf$lshr5$i85 = $$sroa$0102$0$copyload >>> 12;
  $and$i86 = $shr$i84 & $bf$lshr5$i85;
  $retval$0$i89 = $and$i86;
 }
 $$sroa$099$0$$sroa_idx = ((($param)) + 76|0);
 $$sroa$099$0$copyload = HEAPU8[$$sroa$099$0$$sroa_idx>>0]|(HEAPU8[$$sroa$099$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$099$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$099$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i62 = $$sroa$099$0$copyload & 511;
 $tobool$i63 = ($bf$clear$i62|0)==(0);
 if ($tobool$i63) {
  $retval$0$i74 = 0;
 } else {
  $arrayidx$i65 = (($0) + ($bf$clear$i62)|0);
  $8 = HEAP8[$arrayidx$i65>>0]|0;
  $conv1$i66 = $8&255;
  $bf$lshr$i67 = $$sroa$099$0$copyload >>> 9;
  $bf$clear3$i68 = $bf$lshr$i67 & 7;
  $shr$i69 = $conv1$i66 >>> $bf$clear3$i68;
  $bf$lshr5$i70 = $$sroa$099$0$copyload >>> 12;
  $and$i71 = $shr$i69 & $bf$lshr5$i70;
  $phitmp = $and$i71 << 2;
  $retval$0$i74 = $phitmp;
 }
 $or12 = $retval$0$i74 | $retval$0$i89;
 $arrayidx13 = (416 + ($or12<<2)|0);
 $9 = HEAP32[$arrayidx13>>2]|0;
 $$sroa$096$0$$sroa_idx = ((($param)) + 68|0);
 $$sroa$096$0$copyload = HEAPU8[$$sroa$096$0$$sroa_idx>>0]|(HEAPU8[$$sroa$096$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$096$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$096$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i47 = $$sroa$096$0$copyload & 511;
 $tobool$i48 = ($bf$clear$i47|0)==(0);
 if ($tobool$i48) {
  $retval$0$i59 = 1;
 } else {
  $arrayidx$i50 = (($0) + ($bf$clear$i47)|0);
  $10 = HEAP8[$arrayidx$i50>>0]|0;
  $conv1$i51 = $10&255;
  $bf$lshr$i52 = $$sroa$096$0$copyload >>> 9;
  $bf$clear3$i53 = $bf$lshr$i52 & 7;
  $shr$i54 = $conv1$i51 >>> $bf$clear3$i53;
  $bf$lshr5$i55 = $$sroa$096$0$copyload >>> 12;
  $and$i56 = $shr$i54 & $bf$lshr5$i55;
  $phitmp111 = (($and$i56) + 1)|0;
  $retval$0$i59 = $phitmp111;
 }
 $add18 = (($9) + 2)|0;
 $add19 = (($add18) + ($retval$0$i59))|0;
 $11 = ((($param)) + 40|0);
 $12 = HEAP8[$11>>0]|0;
 $conv20 = $12 << 24 >> 24;
 if (!($tobool$i)) {
  $arrayidx$i35 = (($0) + ($bf$clear$i)|0);
  $13 = HEAP8[$arrayidx$i35>>0]|0;
  $conv1$i36 = $13&255;
  $bf$lshr$i37 = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i38 = $bf$lshr$i37 & 7;
  $shr$i39 = $conv1$i36 >>> $bf$clear3$i38;
  $bf$lshr5$i40 = $$sroa$0$0$copyload >>> 12;
  $and$i41 = $shr$i39 & $bf$lshr5$i40;
  $tobool24 = ($and$i41|0)==(0);
  if (!($tobool24)) {
   $15 = 2;
   HEAP32[$vararg_buffer>>2] = $conv20;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $or;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $14;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $15;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $9;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $retval$0$i59;
   _avr_global_logger($avr,3,361776,$vararg_buffer);
   $div25 = (($14>>>0) / ($add19>>>0))&-1;
   $div26 = (1000000 / ($div25>>>0))&-1;
   $usec_per_byte = ((($param)) + 352|0);
   $16 = $usec_per_byte;
   $17 = $16;
   HEAP32[$17>>2] = $div26;
   $18 = (($16) + 4)|0;
   $19 = $18;
   HEAP32[$19>>2] = 0;
   HEAP32[$vararg_buffer6>>2] = $div26;
   _avr_global_logger($avr,3,361837,$vararg_buffer6);
   STACKTOP = sp;return;
  }
 }
 $15 = 1;
 HEAP32[$vararg_buffer>>2] = $conv20;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $or;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $14;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $15;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $9;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $retval$0$i59;
 _avr_global_logger($avr,3,361776,$vararg_buffer);
 $div25 = (($14>>>0) / ($add19>>>0))&-1;
 $div26 = (1000000 / ($div25>>>0))&-1;
 $usec_per_byte = ((($param)) + 352|0);
 $16 = $usec_per_byte;
 $17 = $16;
 HEAP32[$17>>2] = $div26;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 HEAP32[$vararg_buffer6>>2] = $div26;
 _avr_global_logger($avr,3,361837,$vararg_buffer6);
 STACKTOP = sp;return;
}
function _avr_uart_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $cmp7 = 0, $conv = 0, $flags = 0, $flags10 = 0, $name = 0, $or = 0, $or6 = 0, $res$0 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($io_param|0)==(0|0);
 if ($tobool) {
  $retval$0 = -1;
  return ($retval$0|0);
 }
 $name = ((($port)) + 40|0);
 $0 = HEAP8[$name>>0]|0;
 $conv = $0 << 24 >> 24;
 $or = $conv | 1969320704;
 $cmp = ($or|0)==($ctl|0);
 if ($cmp) {
  $1 = HEAP32[$io_param>>2]|0;
  $flags = ((($port)) + 348|0);
  HEAP32[$flags>>2] = $1;
  $res$0 = 0;
 } else {
  $res$0 = -1;
 }
 $or6 = $conv | 1969317632;
 $cmp7 = ($or6|0)==($ctl|0);
 if (!($cmp7)) {
  $retval$0 = $res$0;
  return ($retval$0|0);
 }
 $flags10 = ((($port)) + 348|0);
 $2 = HEAP32[$flags10>>2]|0;
 HEAP32[$io_param>>2] = $2;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _avr_spi_reset($io) {
 $io = $io|0;
 var $0 = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $irq = ((($io)) + 24|0);
 $0 = HEAP32[$irq>>2]|0;
 _avr_irq_register_notify($0,118,$io);
 return;
}
function _avr_spi_irq_input($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$029$0$$sroa_idx = 0, $$sroa$029$0$copyload = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and$i = 0, $and$i22 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i16 = 0, $avr1 = 0;
 var $bf$clear$i = 0, $bf$clear$i13 = 0, $bf$clear3$i = 0, $bf$clear3$i19 = 0, $bf$lshr$i = 0, $bf$lshr$i18 = 0, $bf$lshr5$i = 0, $bf$lshr5$i21 = 0, $conv = 0, $conv1$i = 0, $conv1$i17 = 0, $conv8 = 0, $data$i = 0, $idxprom = 0, $irq7 = 0, $r_spdr = 0, $shr$i = 0, $shr$i20 = 0, $spi = 0, $tobool = 0;
 var $tobool$i = 0, $tobool$i14 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  return;
 }
 $data$i = ((($0)) + 5892|0);
 $1 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($1) + ($bf$clear$i)|0);
 $2 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $2&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  return;
 }
 $conv = $value&255;
 $3 = ((($param)) + 144|0);
 HEAP8[$3>>0] = $conv;
 $spi = ((($param)) + 80|0);
 (_avr_raise_interrupt($0,$spi)|0);
 $$sroa$029$0$$sroa_idx = ((($param)) + 60|0);
 $$sroa$029$0$copyload = HEAPU8[$$sroa$029$0$$sroa_idx>>0]|(HEAPU8[$$sroa$029$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$029$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$029$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i13 = $$sroa$029$0$copyload & 511;
 $tobool$i14 = ($bf$clear$i13|0)==(0);
 $$pre = HEAP32[$data$i>>2]|0;
 if (!($tobool$i14)) {
  $arrayidx$i16 = (($$pre) + ($bf$clear$i13)|0);
  $4 = HEAP8[$arrayidx$i16>>0]|0;
  $conv1$i17 = $4&255;
  $bf$lshr$i18 = $$sroa$029$0$copyload >>> 9;
  $bf$clear3$i19 = $bf$lshr$i18 & 7;
  $shr$i20 = $conv1$i17 >>> $bf$clear3$i19;
  $bf$lshr5$i21 = $$sroa$029$0$copyload >>> 12;
  $and$i22 = $shr$i20 & $bf$lshr5$i21;
  $tobool4 = ($and$i22|0)==(0);
  if (!($tobool4)) {
   return;
  }
 }
 $irq7 = ((($param)) + 24|0);
 $5 = HEAP32[$irq7>>2]|0;
 $add$ptr = ((($5)) + 24|0);
 $r_spdr = ((($param)) + 48|0);
 $6 = HEAP16[$r_spdr>>1]|0;
 $idxprom = $6&65535;
 $arrayidx = (($$pre) + ($idxprom)|0);
 $7 = HEAP8[$arrayidx>>0]|0;
 $conv8 = $7&255;
 _avr_raise_irq($add$ptr,$conv8);
 return;
}
function _avr_spi_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $conv = 0, $name = 0, $or = 0, $r_spdr = 0, $spi = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=354304; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $spi = ((($p)) + 80|0);
 _avr_register_vector($avr,$spi);
 $name = ((($p)) + 40|0);
 $0 = HEAP8[$name>>0]|0;
 $conv = $0 << 24 >> 24;
 $or = $conv | 1936746752;
 (_avr_io_setirqs($p,$or,2,0)|0);
 $r_spdr = ((($p)) + 48|0);
 $1 = HEAP16[$r_spdr>>1]|0;
 _avr_register_io_write($avr,$1,119,$p);
 $2 = HEAP16[$r_spdr>>1]|0;
 _avr_register_io_read($avr,$2,120,$p);
 return;
}
function _avr_spi_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $2 = 0, $and$i = 0, $arrayidx$i = 0, $bf$clear$i = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0, $cmp = 0, $conv$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $neg$i = 0, $r_spdr = 0, $shl$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $r_spdr = ((($param)) + 48|0);
 $0 = HEAP16[$r_spdr>>1]|0;
 $cmp = ($0<<16>>16)==($addr<<16>>16);
 if (!($cmp)) {
  return;
 }
 $$sroa$0$0$$sroa_idx = ((($param)) + 88|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($avr)) + 5892|0);
 $1 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($1) + ($bf$clear$i)|0);
 $2 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $2&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($avr,$conv$i,$conv9$i);
 _avr_core_watch_write($avr,$addr,$v);
 _avr_cycle_timer_register_usec($avr,100,121,$param);
 return;
}
function _avr_spi_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and$i = 0, $arrayidx$i = 0, $bf$clear$i = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0, $conv$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $neg$i = 0, $shl$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 144|0);
 $1 = HEAP8[$0>>0]|0;
 HEAP8[$0>>0] = 0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 88|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($avr)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $3&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($avr,$conv$i,$conv9$i);
 return ($1|0);
}
function _avr_spi_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$026$0$$sroa_idx = 0, $$sroa$026$0$copyload = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and$i = 0, $and$i19 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i13 = 0, $bf$clear$i = 0, $bf$clear$i10 = 0, $bf$clear3$i = 0;
 var $bf$clear3$i16 = 0, $bf$lshr$i = 0, $bf$lshr$i15 = 0, $bf$lshr5$i = 0, $bf$lshr5$i18 = 0, $conv = 0, $conv1$i = 0, $conv1$i14 = 0, $data$i = 0, $idxprom = 0, $irq = 0, $r_spdr = 0, $shr$i = 0, $shr$i17 = 0, $spi = 0, $tobool = 0, $tobool$i = 0, $tobool$i11 = 0, $tobool2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 56|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  setTempRet0((0) | 0);
  return 0;
 }
 $data$i = ((($avr)) + 5892|0);
 $2 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($2) + ($bf$clear$i)|0);
 $3 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $3&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool = ($and$i|0)==(0);
 if ($tobool) {
  setTempRet0((0) | 0);
  return 0;
 }
 $$sroa$026$0$$sroa_idx = ((($param)) + 60|0);
 $$sroa$026$0$copyload = HEAPU8[$$sroa$026$0$$sroa_idx>>0]|(HEAPU8[$$sroa$026$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$026$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$026$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i10 = $$sroa$026$0$copyload & 511;
 $tobool$i11 = ($bf$clear$i10|0)==(0);
 if ($tobool$i11) {
  setTempRet0((0) | 0);
  return 0;
 }
 $arrayidx$i13 = (($2) + ($bf$clear$i10)|0);
 $4 = HEAP8[$arrayidx$i13>>0]|0;
 $conv1$i14 = $4&255;
 $bf$lshr$i15 = $$sroa$026$0$copyload >>> 9;
 $bf$clear3$i16 = $bf$lshr$i15 & 7;
 $shr$i17 = $conv1$i14 >>> $bf$clear3$i16;
 $bf$lshr5$i18 = $$sroa$026$0$copyload >>> 12;
 $and$i19 = $shr$i17 & $bf$lshr5$i18;
 $tobool2 = ($and$i19|0)==(0);
 if ($tobool2) {
  setTempRet0((0) | 0);
  return 0;
 }
 $spi = ((($param)) + 80|0);
 (_avr_raise_interrupt($avr,$spi)|0);
 $irq = ((($param)) + 24|0);
 $5 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($5)) + 24|0);
 $6 = HEAP32[$data$i>>2]|0;
 $r_spdr = ((($param)) + 48|0);
 $7 = HEAP16[$r_spdr>>1]|0;
 $idxprom = $7&65535;
 $arrayidx = (($6) + ($idxprom)|0);
 $8 = HEAP8[$arrayidx>>0]|0;
 $conv = $8&255;
 _avr_raise_irq($add$ptr,$conv);
 setTempRet0((0) | 0);
 return 0;
}
function _avr_ioport_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr$i = 0, $and = 0, $and2 = 0, $and24 = 0, $and38 = 0;
 var $and6 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx20 = 0, $arrayidx35 = 0, $avr1 = 0, $cond = 0, $conv$i = 0, $conv13 = 0, $conv14 = 0, $conv21 = 0, $conv28 = 0, $conv36 = 0, $conv4 = 0, $conv5 = 0, $conv7 = 0, $data = 0, $idxprom = 0, $idxprom11 = 0, $idxprom19 = 0;
 var $idxprom34 = 0, $irq$i = 0, $irq3 = 0, $neg = 0, $or = 0, $or27 = 0, $pcint = 0, $r_pcint = 0, $r_pin = 0, $r_port = 0, $shl = 0, $tobool = 0, $tobool15 = 0, $tobool30 = 0, $tobool39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $and = $value & 256;
 $and2 = $value & 255;
 $irq3 = ((($irq)) + 8|0);
 $1 = HEAP32[$irq3>>2]|0;
 $shl = 1 << $1;
 $conv4 = $shl & 255;
 $neg = $conv4 ^ -1;
 $data = ((($0)) + 5892|0);
 $2 = HEAP32[$data>>2]|0;
 $r_pin = ((($param)) + 46|0);
 $3 = HEAP16[$r_pin>>1]|0;
 $idxprom = $3&65535;
 $arrayidx = (($2) + ($idxprom)|0);
 $4 = HEAP8[$arrayidx>>0]|0;
 $conv5 = $4&255;
 $and6 = $conv5 & $neg;
 $conv7 = $and6&255;
 HEAP8[$arrayidx>>0] = $conv7;
 $tobool = ($and2|0)!=(0);
 if ($tobool) {
  $5 = HEAP32[$data>>2]|0;
  $6 = HEAP16[$r_pin>>1]|0;
  $idxprom11 = $6&65535;
  $arrayidx12 = (($5) + ($idxprom11)|0);
  $7 = HEAP8[$arrayidx12>>0]|0;
  $conv13 = $7&255;
  $or = $shl | $conv13;
  $conv14 = $or&255;
  HEAP8[$arrayidx12>>0] = $conv14;
 }
 $tobool15 = ($and|0)==(0);
 if (!($tobool15)) {
  $r_port = ((($param)) + 42|0);
  $8 = HEAP16[$r_port>>1]|0;
  $9 = HEAP32[$data>>2]|0;
  $idxprom19 = $8&65535;
  $arrayidx20 = (($9) + ($idxprom19)|0);
  $10 = HEAP8[$arrayidx20>>0]|0;
  $conv21 = $10&255;
  $and24 = $conv21 & $neg;
  $cond = $tobool ? $shl : 0;
  $or27 = $and24 | $cond;
  $conv28 = $or27&255;
  _avr_core_watch_write($0,$8,$conv28);
  $irq$i = ((($param)) + 24|0);
  $11 = HEAP32[$irq$i>>2]|0;
  $add$ptr$i = ((($11)) + 240|0);
  $conv$i = $or27 & 255;
  _avr_raise_irq($add$ptr$i,$conv$i);
  _avr_ioport_update_irqs($param);
 }
 $r_pcint = ((($param)) + 112|0);
 $12 = HEAP16[$r_pcint>>1]|0;
 $tobool30 = ($12<<16>>16)==(0);
 if ($tobool30) {
  return;
 }
 $13 = HEAP32[$data>>2]|0;
 $idxprom34 = $12&65535;
 $arrayidx35 = (($13) + ($idxprom34)|0);
 $14 = HEAP8[$arrayidx35>>0]|0;
 $conv36 = $14&255;
 $and38 = $shl & $conv36;
 $tobool39 = ($and38|0)==(0);
 if ($tobool39) {
  return;
 }
 $pcint = ((($param)) + 48|0);
 (_avr_raise_interrupt($0,$pcint)|0);
 return;
}
function _avr_ioport_update_irqs($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr15 = 0, $add$ptr32 = 0, $add$ptr62 = 0, $and = 0, $and10 = 0, $and19 = 0, $and4032 = 0, $and4731 = 0, $and5434 = 0, $and7 = 0, $arrayidx = 0, $arrayidx24 = 0, $arrayidx37 = 0;
 var $arrayidx44 = 0, $arrayidx5 = 0, $avr1 = 0, $conv = 0, $conv17 = 0, $conv25 = 0, $conv6 = 0, $conv8 = 0, $data = 0, $exitcond = 0, $i$036 = 0, $idxprom = 0, $idxprom23 = 0, $idxprom36 = 0, $idxprom4 = 0, $idxprom43 = 0, $inc = 0, $irq = 0, $or33 = 0, $or58 = 0;
 var $or5835 = 0, $pull_mask = 0, $pull_value = 0, $r_ddr = 0, $r_pin = 0, $r_port = 0, $shl = 0, $shr = 0, $shr18 = 0, $tobool = 0, $tobool11 = 0, $tobool28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($p)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $data = ((($0)) + 5892|0);
 $1 = HEAP32[$data>>2]|0;
 $r_ddr = ((($p)) + 44|0);
 $2 = HEAP16[$r_ddr>>1]|0;
 $idxprom = $2&65535;
 $arrayidx = (($1) + ($idxprom)|0);
 $3 = HEAP8[$arrayidx>>0]|0;
 $conv = $3&255;
 $pull_mask = ((($p)) + 114|0);
 $irq = ((($p)) + 24|0);
 $r_port = ((($p)) + 42|0);
 $pull_value = ((($p)) + 115|0);
 $i$036 = 0;
 while(1) {
  $shl = 1 << $i$036;
  $and = $shl & $conv;
  $tobool = ($and|0)==(0);
  do {
   if ($tobool) {
    $18 = HEAP8[$pull_mask>>0]|0;
    $conv8 = $18&255;
    $and10 = $shl & $conv8;
    $tobool11 = ($and10|0)==(0);
    if (!($tobool11)) {
     $19 = HEAP32[$irq>>2]|0;
     $add$ptr15 = (($19) + (($i$036*24)|0)|0);
     $20 = HEAP8[$pull_value>>0]|0;
     $conv17 = $20&255;
     $shr18 = $conv17 >>> $i$036;
     $and19 = $shr18 & 1;
     _avr_raise_irq($add$ptr15,$and19);
     break;
    }
    $21 = HEAP32[$data>>2]|0;
    $22 = HEAP16[$r_port>>1]|0;
    $idxprom23 = $22&65535;
    $arrayidx24 = (($21) + ($idxprom23)|0);
    $23 = HEAP8[$arrayidx24>>0]|0;
    $conv25 = $23&255;
    $24 = $shl & $conv25;
    $tobool28 = ($24|0)==(0);
    if (!($tobool28)) {
     $25 = HEAP32[$irq>>2]|0;
     $add$ptr32 = (($25) + (($i$036*24)|0)|0);
     _avr_raise_irq($add$ptr32,1);
    }
   } else {
    $14 = HEAP32[$irq>>2]|0;
    $add$ptr = (($14) + (($i$036*24)|0)|0);
    $15 = HEAP32[$data>>2]|0;
    $16 = HEAP16[$r_port>>1]|0;
    $idxprom4 = $16&65535;
    $arrayidx5 = (($15) + ($idxprom4)|0);
    $17 = HEAP8[$arrayidx5>>0]|0;
    $conv6 = $17&255;
    $shr = $conv6 >>> $i$036;
    $and7 = $shr & 1;
    _avr_raise_irq($add$ptr,$and7);
   }
  } while(0);
  $inc = (($i$036) + 1)|0;
  $exitcond = ($inc|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$036 = $inc;
  }
 }
 $4 = HEAP32[$data>>2]|0;
 $r_pin = ((($p)) + 46|0);
 $5 = HEAP16[$r_pin>>1]|0;
 $idxprom36 = $5&65535;
 $arrayidx37 = (($4) + ($idxprom36)|0);
 $6 = HEAP8[$arrayidx37>>0]|0;
 $7 = $3 ^ -1;
 $and4032 = $6 & $7;
 $8 = HEAP16[$r_port>>1]|0;
 $idxprom43 = $8&65535;
 $arrayidx44 = (($4) + ($idxprom43)|0);
 $9 = HEAP8[$arrayidx44>>0]|0;
 $and4731 = $9 & $3;
 $or33 = $and4731 | $and4032;
 $10 = HEAP8[$pull_mask>>0]|0;
 $11 = $10 ^ -1;
 $and5434 = $or33 & $11;
 $12 = HEAP8[$pull_value>>0]|0;
 $or5835 = $and5434 | $12;
 $or58 = $or5835&255;
 $13 = HEAP32[$irq>>2]|0;
 $add$ptr62 = ((($13)) + 192|0);
 _avr_raise_irq($add$ptr62,$or58);
 return;
}
function _avr_ioport_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $conv4 = 0, $flags = 0, $flags$1 = 0, $flags$10 = 0, $flags$11 = 0, $flags$2 = 0;
 var $flags$3 = 0, $flags$4 = 0, $flags$5 = 0, $flags$6 = 0, $flags$7 = 0, $flags$8 = 0, $flags$9 = 0, $irq = 0, $name = 0, $name3 = 0, $or = 0, $pcint = 0, $r_ddr = 0, $r_pin = 0, $r_port = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $r_port = ((($p)) + 42|0);
 $0 = HEAP16[$r_port>>1]|0;
 $tobool = ($0<<16>>16)==(0);
 if ($tobool) {
  $name = ((($p)) + 40|0);
  $1 = HEAP8[$name>>0]|0;
  $conv = $1 << 24 >> 24;
  $2 = HEAP32[$avr>>2]|0;
  HEAP32[$vararg_buffer>>2] = $conv;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  (_printf(361920,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  dest=$p; src=354352; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  _avr_register_io($avr,$p);
  $pcint = ((($p)) + 48|0);
  _avr_register_vector($avr,$pcint);
  $name3 = ((($p)) + 40|0);
  $3 = HEAP8[$name3>>0]|0;
  $conv4 = $3 << 24 >> 24;
  $or = $conv4 | 1768908544;
  (_avr_io_setirqs($p,$or,12,0)|0);
  $irq = ((($p)) + 24|0);
  $4 = HEAP32[$irq>>2]|0;
  $flags = ((($4)) + 16|0);
  $5 = HEAP8[$flags>>0]|0;
  $6 = $5 | 2;
  HEAP8[$flags>>0] = $6;
  $flags$1 = ((($4)) + 40|0);
  $7 = HEAP8[$flags$1>>0]|0;
  $8 = $7 | 2;
  HEAP8[$flags$1>>0] = $8;
  $flags$2 = ((($4)) + 64|0);
  $9 = HEAP8[$flags$2>>0]|0;
  $10 = $9 | 2;
  HEAP8[$flags$2>>0] = $10;
  $flags$3 = ((($4)) + 88|0);
  $11 = HEAP8[$flags$3>>0]|0;
  $12 = $11 | 2;
  HEAP8[$flags$3>>0] = $12;
  $flags$4 = ((($4)) + 112|0);
  $13 = HEAP8[$flags$4>>0]|0;
  $14 = $13 | 2;
  HEAP8[$flags$4>>0] = $14;
  $flags$5 = ((($4)) + 136|0);
  $15 = HEAP8[$flags$5>>0]|0;
  $16 = $15 | 2;
  HEAP8[$flags$5>>0] = $16;
  $flags$6 = ((($4)) + 160|0);
  $17 = HEAP8[$flags$6>>0]|0;
  $18 = $17 | 2;
  HEAP8[$flags$6>>0] = $18;
  $flags$7 = ((($4)) + 184|0);
  $19 = HEAP8[$flags$7>>0]|0;
  $20 = $19 | 2;
  HEAP8[$flags$7>>0] = $20;
  $flags$8 = ((($4)) + 208|0);
  $21 = HEAP8[$flags$8>>0]|0;
  $22 = $21 | 2;
  HEAP8[$flags$8>>0] = $22;
  $flags$9 = ((($4)) + 232|0);
  $23 = HEAP8[$flags$9>>0]|0;
  $24 = $23 | 2;
  HEAP8[$flags$9>>0] = $24;
  $flags$10 = ((($4)) + 256|0);
  $25 = HEAP8[$flags$10>>0]|0;
  $26 = $25 | 2;
  HEAP8[$flags$10>>0] = $26;
  $flags$11 = ((($4)) + 280|0);
  $27 = HEAP8[$flags$11>>0]|0;
  $28 = $27 | 2;
  HEAP8[$flags$11>>0] = $28;
  $29 = HEAP16[$r_port>>1]|0;
  _avr_register_io_write($avr,$29,122,$p);
  $r_pin = ((($p)) + 46|0);
  $30 = HEAP16[$r_pin>>1]|0;
  _avr_register_io_read($avr,$30,123,$p);
  $31 = HEAP16[$r_pin>>1]|0;
  _avr_register_io_write($avr,$31,124,$p);
  $r_ddr = ((($p)) + 44|0);
  $32 = HEAP16[$r_ddr>>1]|0;
  _avr_register_io_write($avr,$32,125,$p);
  STACKTOP = sp;return;
 }
}
function _avr_ioport_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $add$ptr = 0, $conv = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $irq = ((($param)) + 24|0);
 $0 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($0)) + 240|0);
 $conv = $v&255;
 _avr_raise_irq($add$ptr,$conv);
 _avr_ioport_update_irqs($param);
 return;
}
function _avr_ioport_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and1013 = 0, $and14 = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx3 = 0, $arrayidx7 = 0, $call = 0, $conv15 = 0, $data = 0, $idxprom = 0;
 var $idxprom13 = 0, $idxprom2 = 0, $idxprom6 = 0, $irq = 0, $or15 = 0, $r_ddr = 0, $r_pin = 0, $r_port = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $data = ((($avr)) + 5892|0);
 $0 = HEAP32[$data>>2]|0;
 $r_ddr = ((($param)) + 44|0);
 $1 = HEAP16[$r_ddr>>1]|0;
 $idxprom = $1&65535;
 $arrayidx = (($0) + ($idxprom)|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $r_pin = ((($param)) + 46|0);
 $3 = HEAP16[$r_pin>>1]|0;
 $idxprom2 = $3&65535;
 $arrayidx3 = (($0) + ($idxprom2)|0);
 $4 = HEAP8[$arrayidx3>>0]|0;
 $5 = $2 ^ -1;
 $and14 = $4 & $5;
 $r_port = ((($param)) + 42|0);
 $6 = HEAP16[$r_port>>1]|0;
 $idxprom6 = $6&65535;
 $arrayidx7 = (($0) + ($idxprom6)|0);
 $7 = HEAP8[$arrayidx7>>0]|0;
 $and1013 = $7 & $2;
 $or15 = $and1013 | $and14;
 $idxprom13 = $addr&65535;
 $arrayidx14 = (($0) + ($idxprom13)|0);
 HEAP8[$arrayidx14>>0] = $or15;
 $call = (_avr_core_watch_read($avr,$addr)|0);
 $irq = ((($param)) + 24|0);
 $8 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($8)) + 264|0);
 $conv15 = $call&255;
 _avr_raise_irq($add$ptr,$conv15);
 return ($call|0);
}
function _avr_ioport_pin_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr$i = 0, $arrayidx = 0, $conv$i = 0, $data = 0, $idxprom = 0, $irq$i = 0, $r_port = 0, $xor5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $r_port = ((($param)) + 42|0);
 $0 = HEAP16[$r_port>>1]|0;
 $data = ((($avr)) + 5892|0);
 $1 = HEAP32[$data>>2]|0;
 $idxprom = $0&65535;
 $arrayidx = (($1) + ($idxprom)|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $xor5 = $2 ^ $v;
 _avr_core_watch_write($avr,$0,$xor5);
 $irq$i = ((($param)) + 24|0);
 $3 = HEAP32[$irq$i>>2]|0;
 $add$ptr$i = ((($3)) + 240|0);
 $conv$i = $xor5&255;
 _avr_raise_irq($add$ptr$i,$conv$i);
 _avr_ioport_update_irqs($param);
 return;
}
function _avr_ioport_ddr_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $add$ptr = 0, $conv = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $irq = ((($param)) + 24|0);
 $0 = HEAP32[$irq>>2]|0;
 $add$ptr = ((($0)) + 216|0);
 $conv = $v&255;
 _avr_raise_irq($add$ptr,$conv);
 _avr_core_watch_write($avr,$addr,$v);
 _avr_ioport_update_irqs($param);
 return;
}
function _avr_ioport_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr$1 = 0, $add$ptr$2 = 0, $add$ptr$3 = 0, $add$ptr$4 = 0, $add$ptr$5 = 0, $add$ptr$6 = 0, $add$ptr$7 = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $irq = ((($port)) + 24|0);
 $0 = HEAP32[$irq>>2]|0;
 _avr_irq_register_notify($0,126,$port);
 $1 = HEAP32[$irq>>2]|0;
 $add$ptr$1 = ((($1)) + 24|0);
 _avr_irq_register_notify($add$ptr$1,126,$port);
 $2 = HEAP32[$irq>>2]|0;
 $add$ptr$2 = ((($2)) + 48|0);
 _avr_irq_register_notify($add$ptr$2,126,$port);
 $3 = HEAP32[$irq>>2]|0;
 $add$ptr$3 = ((($3)) + 72|0);
 _avr_irq_register_notify($add$ptr$3,126,$port);
 $4 = HEAP32[$irq>>2]|0;
 $add$ptr$4 = ((($4)) + 96|0);
 _avr_irq_register_notify($add$ptr$4,126,$port);
 $5 = HEAP32[$irq>>2]|0;
 $add$ptr$5 = ((($5)) + 120|0);
 _avr_irq_register_notify($add$ptr$5,126,$port);
 $6 = HEAP32[$irq>>2]|0;
 $add$ptr$6 = ((($6)) + 144|0);
 _avr_irq_register_notify($add$ptr$6,126,$port);
 $7 = HEAP32[$irq>>2]|0;
 $add$ptr$7 = ((($7)) + 168|0);
 _avr_irq_register_notify($add$ptr$7,126,$port);
 return;
}
function _avr_ioport_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $$pre = 0, $$pre67 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add$6 = 0, $add$7 = 0, $and = 0, $and$1 = 0, $and$2 = 0, $and$3 = 0, $and$4 = 0, $and$5 = 0, $and$6 = 0, $and$7 = 0, $arrayidx = 0, $arrayidx40 = 0;
 var $arrayidx40$1 = 0, $arrayidx40$2 = 0, $arrayidx40$3 = 0, $arrayidx40$4 = 0, $arrayidx40$5 = 0, $arrayidx40$6 = 0, $arrayidx40$7 = 0, $arrayidx43$1 = 0, $arrayidx43$2 = 0, $arrayidx43$3 = 0, $arrayidx43$4 = 0, $arrayidx43$5 = 0, $arrayidx43$6 = 0, $arrayidx51 = 0, $arrayidx5152 = 0, $arrayidx5154 = 0, $arrayidx5169 = 0, $arrayidx63 = 0, $arrayidx72 = 0, $arrayidx82 = 0;
 var $avr1 = 0, $bf$clear = 0, $bf$clear19 = 0, $bf$clear39 = 0, $bf$clear39$1 = 0, $bf$clear39$2 = 0, $bf$clear39$3 = 0, $bf$clear39$4 = 0, $bf$clear39$5 = 0, $bf$clear39$6 = 0, $bf$clear39$7 = 0, $bf$load = 0, $bf$load103 = 0, $bf$load29$3$pre = 0, $bf$load29$4$pre = 0, $bf$load29$5$pre = 0, $bf$load29$6$pre = 0, $bf$load29$7$pre = 0, $bf$load99 = 0, $bf$lshr100 = 0;
 var $bf$lshr104 = 0, $bf$lshr30$3$pre$phi$inZZZ2D = 0, $bf$lshr30$4$pre$phi$inZZZ2D = 0, $bf$lshr30$5$pre$phi$inZZZ2D = 0, $bf$lshr30$6$pre$phi$inZZZ2D = 0, $bf$lshr30$7$pre$phi$inZZZ2D = 0, $bf$lshr38 = 0, $bf$lshr38$1 = 0, $bf$lshr38$2 = 0, $bf$lshr38$3 = 0, $bf$lshr38$4 = 0, $bf$lshr38$5 = 0, $bf$lshr38$6 = 0, $bf$lshr38$7 = 0, $bf$set68 = 0, $bf$set78 = 0, $bf$set88 = 0, $bf$shl = 0, $bf$shl76 = 0, $bf$shl86 = 0;
 var $bf$value = 0, $cmp = 0, $cmp14 = 0, $cmp20 = 0, $cmp47 = 0, $cmp55 = 0, $cmp7 = 0, $cmp96 = 0, $cond = 0, $conv = 0, $conv102 = 0, $conv106 = 0, $conv13 = 0, $conv54 = 0, $conv6 = 0, $conv64 = 0, $conv73 = 0, $conv83 = 0, $conv94$pre$phiZ2D = 0, $data = 0;
 var $idxprom = 0, $idxprom71 = 0, $idxprom81 = 0, $inc42$1 = 0, $inc42$2 = 0, $inc42$3 = 0, $inc42$4 = 0, $inc42$5 = 0, $inc42$6 = 0, $inc42$7 = 0, $irq = 0, $irq24 = 0, $irq35 = 0, $irq41 = 0, $name = 0, $o$1 = 0, $o$1$1 = 0, $o$1$2 = 0, $o$1$3 = 0, $o$1$4 = 0;
 var $o$1$5 = 0, $o$1$6 = 0, $o$253 = 0, $or = 0, $or95 = 0, $pull_mask = 0, $pull_value = 0, $r_ddr = 0, $r_ddr70 = 0, $r_pin = 0, $r_pin80 = 0, $r_port = 0, $r_port62 = 0, $res$0 = 0, $retval$1 = 0, $tobool = 0, $tobool32 = 0, $tobool32$1 = 0, $tobool32$2 = 0, $tobool32$3 = 0;
 var $tobool32$4 = 0, $tobool32$5 = 0, $tobool32$6 = 0, $tobool32$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($port)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $tobool = ($io_param|0)==(0|0);
 if ($tobool) {
  $retval$1 = -1;
  return ($retval$1|0);
 }
 $cond = ($ctl|0)==(1768908658);
 if (!($cond)) {
  $name = ((($port)) + 40|0);
  $6 = HEAP8[$name>>0]|0;
  $conv54 = $6 << 24 >> 24;
  $or = $conv54 | 1768911616;
  $cmp55 = ($or|0)==($ctl|0);
  if ($cmp55) {
   $data = ((($0)) + 5892|0);
   $7 = HEAP32[$data>>2]|0;
   $bf$value = $conv54 & 127;
   $r_port62 = ((($port)) + 42|0);
   $8 = HEAP16[$r_port62>>1]|0;
   $idxprom = $8&65535;
   $arrayidx63 = (($7) + ($idxprom)|0);
   $9 = HEAP8[$arrayidx63>>0]|0;
   $conv64 = $9&255;
   $bf$shl = $conv64 << 7;
   $bf$set68 = $bf$shl | $bf$value;
   $r_ddr70 = ((($port)) + 44|0);
   $10 = HEAP16[$r_ddr70>>1]|0;
   $idxprom71 = $10&65535;
   $arrayidx72 = (($7) + ($idxprom71)|0);
   $11 = HEAP8[$arrayidx72>>0]|0;
   $conv73 = $11&255;
   $bf$shl76 = $conv73 << 15;
   $bf$set78 = $bf$set68 | $bf$shl76;
   $r_pin80 = ((($port)) + 46|0);
   $12 = HEAP16[$r_pin80>>1]|0;
   $idxprom81 = $12&65535;
   $arrayidx82 = (($7) + ($idxprom81)|0);
   $13 = HEAP8[$arrayidx82>>0]|0;
   $conv83 = $13&255;
   $bf$shl86 = $conv83 << 23;
   $bf$set88 = $bf$set78 | $bf$shl86;
   HEAP32[$io_param>>2] = $bf$set88;
   $$pre = HEAP8[$name>>0]|0;
   $$pre67 = $$pre << 24 >> 24;
   $conv94$pre$phiZ2D = $$pre67;$res$0 = 0;
  } else {
   $conv94$pre$phiZ2D = $conv54;$res$0 = -1;
  }
  $or95 = $conv94$pre$phiZ2D | 1768910848;
  $cmp96 = ($or95|0)==($ctl|0);
  if (!($cmp96)) {
   $retval$1 = $res$0;
   return ($retval$1|0);
  }
  $bf$load99 = HEAP32[$io_param>>2]|0;
  $bf$lshr100 = $bf$load99 >>> 7;
  $conv102 = $bf$lshr100&255;
  $pull_mask = ((($port)) + 114|0);
  HEAP8[$pull_mask>>0] = $conv102;
  $bf$load103 = HEAP32[$io_param>>2]|0;
  $bf$lshr104 = $bf$load103 >>> 15;
  $conv106 = $bf$lshr104&255;
  $pull_value = ((($port)) + 115|0);
  HEAP8[$pull_value>>0] = $conv106;
  $retval$1 = 0;
  return ($retval$1|0);
 }
 $bf$load = HEAP32[$io_param>>2]|0;
 $bf$clear = $bf$load & 511;
 $r_port = ((($port)) + 42|0);
 $1 = HEAP16[$r_port>>1]|0;
 $conv = $1&65535;
 $cmp = ($bf$clear|0)==($conv|0);
 if (!($cmp)) {
  $r_pin = ((($port)) + 46|0);
  $2 = HEAP16[$r_pin>>1]|0;
  $conv6 = $2&65535;
  $cmp7 = ($bf$clear|0)==($conv6|0);
  if (!($cmp7)) {
   $r_ddr = ((($port)) + 44|0);
   $3 = HEAP16[$r_ddr>>1]|0;
   $conv13 = $3&65535;
   $cmp14 = ($bf$clear|0)==($conv13|0);
   if (!($cmp14)) {
    $retval$1 = -1;
    return ($retval$1|0);
   }
  }
 }
 $bf$clear19 = $bf$load & 1044480;
 $cmp20 = ($bf$clear19|0)==(1044480);
 if ($cmp20) {
  $irq = ((($port)) + 24|0);
  $4 = HEAP32[$irq>>2]|0;
  $arrayidx = ((($4)) + 192|0);
  $irq24 = ((($io_param)) + 4|0);
  HEAP32[$irq24>>2] = $arrayidx;
  $arrayidx5152 = ((($io_param)) + 8|0);
  $arrayidx5154 = $arrayidx5152;$o$253 = 1;
 } else {
  $irq41 = ((($io_param)) + 4|0);
  $irq35 = ((($port)) + 24|0);
  $and = $bf$load & 4096;
  $tobool32 = ($and|0)==(0);
  if ($tobool32) {
   $o$1 = 0;
  } else {
   $bf$lshr38 = $bf$load >>> 9;
   $bf$clear39 = $bf$lshr38 & 7;
   $5 = HEAP32[$irq35>>2]|0;
   $arrayidx40 = (($5) + (($bf$clear39*24)|0)|0);
   HEAP32[$irq41>>2] = $arrayidx40;
   $o$1 = 1;
  }
  $and$1 = $bf$load & 8192;
  $tobool32$1 = ($and$1|0)==(0);
  if ($tobool32$1) {
   $o$1$1 = $o$1;
  } else {
   $arrayidx43$1 = (($irq41) + ($o$1<<2)|0);
   $inc42$1 = (($o$1) + 1)|0;
   $bf$lshr38$1 = $bf$load >>> 9;
   $bf$clear39$1 = $bf$lshr38$1 & 7;
   $add$1 = (($bf$clear39$1) + 1)|0;
   $14 = HEAP32[$irq35>>2]|0;
   $arrayidx40$1 = (($14) + (($add$1*24)|0)|0);
   HEAP32[$arrayidx43$1>>2] = $arrayidx40$1;
   $o$1$1 = $inc42$1;
  }
  $and$2 = $bf$load & 16384;
  $tobool32$2 = ($and$2|0)==(0);
  if ($tobool32$2) {
   $bf$lshr30$3$pre$phi$inZZZ2D = $bf$load;$o$1$2 = $o$1$1;
  } else {
   $arrayidx43$2 = (($irq41) + ($o$1$1<<2)|0);
   $inc42$2 = (($o$1$1) + 1)|0;
   $bf$lshr38$2 = $bf$load >>> 9;
   $bf$clear39$2 = $bf$lshr38$2 & 7;
   $add$2 = (($bf$clear39$2) + 2)|0;
   $15 = HEAP32[$irq35>>2]|0;
   $arrayidx40$2 = (($15) + (($add$2*24)|0)|0);
   HEAP32[$arrayidx43$2>>2] = $arrayidx40$2;
   $bf$load29$3$pre = HEAP32[$io_param>>2]|0;
   $bf$lshr30$3$pre$phi$inZZZ2D = $bf$load29$3$pre;$o$1$2 = $inc42$2;
  }
  $and$3 = $bf$lshr30$3$pre$phi$inZZZ2D & 32768;
  $tobool32$3 = ($and$3|0)==(0);
  if ($tobool32$3) {
   $bf$lshr30$4$pre$phi$inZZZ2D = $bf$lshr30$3$pre$phi$inZZZ2D;$o$1$3 = $o$1$2;
  } else {
   $arrayidx43$3 = (($irq41) + ($o$1$2<<2)|0);
   $inc42$3 = (($o$1$2) + 1)|0;
   $bf$lshr38$3 = $bf$lshr30$3$pre$phi$inZZZ2D >>> 9;
   $bf$clear39$3 = $bf$lshr38$3 & 7;
   $add$3 = (($bf$clear39$3) + 3)|0;
   $16 = HEAP32[$irq35>>2]|0;
   $arrayidx40$3 = (($16) + (($add$3*24)|0)|0);
   HEAP32[$arrayidx43$3>>2] = $arrayidx40$3;
   $bf$load29$4$pre = HEAP32[$io_param>>2]|0;
   $bf$lshr30$4$pre$phi$inZZZ2D = $bf$load29$4$pre;$o$1$3 = $inc42$3;
  }
  $and$4 = $bf$lshr30$4$pre$phi$inZZZ2D & 65536;
  $tobool32$4 = ($and$4|0)==(0);
  if ($tobool32$4) {
   $bf$lshr30$5$pre$phi$inZZZ2D = $bf$lshr30$4$pre$phi$inZZZ2D;$o$1$4 = $o$1$3;
  } else {
   $arrayidx43$4 = (($irq41) + ($o$1$3<<2)|0);
   $inc42$4 = (($o$1$3) + 1)|0;
   $bf$lshr38$4 = $bf$lshr30$4$pre$phi$inZZZ2D >>> 9;
   $bf$clear39$4 = $bf$lshr38$4 & 7;
   $add$4 = (($bf$clear39$4) + 4)|0;
   $17 = HEAP32[$irq35>>2]|0;
   $arrayidx40$4 = (($17) + (($add$4*24)|0)|0);
   HEAP32[$arrayidx43$4>>2] = $arrayidx40$4;
   $bf$load29$5$pre = HEAP32[$io_param>>2]|0;
   $bf$lshr30$5$pre$phi$inZZZ2D = $bf$load29$5$pre;$o$1$4 = $inc42$4;
  }
  $and$5 = $bf$lshr30$5$pre$phi$inZZZ2D & 131072;
  $tobool32$5 = ($and$5|0)==(0);
  if ($tobool32$5) {
   $bf$lshr30$6$pre$phi$inZZZ2D = $bf$lshr30$5$pre$phi$inZZZ2D;$o$1$5 = $o$1$4;
  } else {
   $arrayidx43$5 = (($irq41) + ($o$1$4<<2)|0);
   $inc42$5 = (($o$1$4) + 1)|0;
   $bf$lshr38$5 = $bf$lshr30$5$pre$phi$inZZZ2D >>> 9;
   $bf$clear39$5 = $bf$lshr38$5 & 7;
   $add$5 = (($bf$clear39$5) + 5)|0;
   $18 = HEAP32[$irq35>>2]|0;
   $arrayidx40$5 = (($18) + (($add$5*24)|0)|0);
   HEAP32[$arrayidx43$5>>2] = $arrayidx40$5;
   $bf$load29$6$pre = HEAP32[$io_param>>2]|0;
   $bf$lshr30$6$pre$phi$inZZZ2D = $bf$load29$6$pre;$o$1$5 = $inc42$5;
  }
  $and$6 = $bf$lshr30$6$pre$phi$inZZZ2D & 262144;
  $tobool32$6 = ($and$6|0)==(0);
  if ($tobool32$6) {
   $bf$lshr30$7$pre$phi$inZZZ2D = $bf$lshr30$6$pre$phi$inZZZ2D;$o$1$6 = $o$1$5;
  } else {
   $arrayidx43$6 = (($irq41) + ($o$1$5<<2)|0);
   $inc42$6 = (($o$1$5) + 1)|0;
   $bf$lshr38$6 = $bf$lshr30$6$pre$phi$inZZZ2D >>> 9;
   $bf$clear39$6 = $bf$lshr38$6 & 7;
   $add$6 = (($bf$clear39$6) + 6)|0;
   $19 = HEAP32[$irq35>>2]|0;
   $arrayidx40$6 = (($19) + (($add$6*24)|0)|0);
   HEAP32[$arrayidx43$6>>2] = $arrayidx40$6;
   $bf$load29$7$pre = HEAP32[$io_param>>2]|0;
   $bf$lshr30$7$pre$phi$inZZZ2D = $bf$load29$7$pre;$o$1$6 = $inc42$6;
  }
  $and$7 = $bf$lshr30$7$pre$phi$inZZZ2D & 524288;
  $tobool32$7 = ($and$7|0)==(0);
  $arrayidx5169 = (($irq41) + ($o$1$6<<2)|0);
  if ($tobool32$7) {
   $arrayidx5154 = $arrayidx5169;$o$253 = $o$1$6;
  } else {
   $inc42$7 = (($o$1$6) + 1)|0;
   $bf$lshr38$7 = $bf$lshr30$7$pre$phi$inZZZ2D >>> 9;
   $bf$clear39$7 = $bf$lshr38$7 & 7;
   $add$7 = (($bf$clear39$7) + 7)|0;
   $20 = HEAP32[$irq35>>2]|0;
   $arrayidx40$7 = (($20) + (($add$7*24)|0)|0);
   HEAP32[$arrayidx5169>>2] = $arrayidx40$7;
   $cmp47 = ($o$1$6|0)<(7);
   $arrayidx51 = (($irq41) + ($inc42$7<<2)|0);
   if ($cmp47) {
    $arrayidx5154 = $arrayidx51;$o$253 = $inc42$7;
   } else {
    $retval$1 = 8;
    return ($retval$1|0);
   }
  }
 }
 HEAP32[$arrayidx5154>>2] = 0;
 $retval$1 = $o$253;
 return ($retval$1|0);
}
function _avr_extint_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $vector = 0, $vector$1 = 0, $vector$2 = 0, $vector$3 = 0, $vector$4 = 0, $vector$5 = 0, $vector$6 = 0, $vector$7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=354392; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $vector = ((($p)) + 48|0);
 _avr_register_vector($avr,$vector);
 $vector$1 = ((($p)) + 128|0);
 _avr_register_vector($avr,$vector$1);
 $vector$2 = ((($p)) + 208|0);
 _avr_register_vector($avr,$vector$2);
 $vector$3 = ((($p)) + 288|0);
 _avr_register_vector($avr,$vector$3);
 $vector$4 = ((($p)) + 368|0);
 _avr_register_vector($avr,$vector$4);
 $vector$5 = ((($p)) + 448|0);
 _avr_register_vector($avr,$vector$5);
 $vector$6 = ((($p)) + 528|0);
 _avr_register_vector($avr,$vector$6);
 $vector$7 = ((($p)) + 608|0);
 _avr_register_vector($avr,$vector$7);
 (_avr_io_setirqs($p,1768846368,8,0)|0);
 return;
}
function _avr_extint_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$ptr$1 = 0, $add$ptr$2 = 0, $add$ptr$3 = 0, $add$ptr$4 = 0, $add$ptr$5 = 0, $add$ptr$6 = 0, $add$ptr$7 = 0, $add$ptr10$1 = 0, $add$ptr10$2 = 0, $add$ptr10$3 = 0, $add$ptr10$4 = 0, $add$ptr10$5 = 0, $add$ptr10$6 = 0, $add$ptr10$7 = 0, $avr = 0, $call = 0, $call$1 = 0, $call$2 = 0, $call$3 = 0, $call$4 = 0;
 var $call$5 = 0, $call$6 = 0, $call$7 = 0, $conv = 0, $conv$1 = 0, $conv$2 = 0, $conv$3 = 0, $conv$4 = 0, $conv$5 = 0, $conv$6 = 0, $conv$7 = 0, $irq = 0, $port_ioctl = 0, $port_ioctl$1 = 0, $port_ioctl$2 = 0, $port_ioctl$3 = 0, $port_ioctl$4 = 0, $port_ioctl$5 = 0, $port_ioctl$6 = 0, $port_ioctl$7 = 0;
 var $port_pin = 0, $port_pin$1 = 0, $port_pin$2 = 0, $port_pin$3 = 0, $port_pin$4 = 0, $port_pin$5 = 0, $port_pin$6 = 0, $port_pin$7 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$3 = 0, $tobool$4 = 0, $tobool$5 = 0, $tobool$6 = 0, $tobool$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $irq = ((($port)) + 24|0);
 $avr = ((($port)) + 4|0);
 $0 = HEAP32[$irq>>2]|0;
 _avr_irq_register_notify($0,127,$port);
 $port_ioctl = ((($port)) + 112|0);
 $1 = HEAP32[$port_ioctl>>2]|0;
 $tobool = ($1|0)==(0);
 if (!($tobool)) {
  $2 = HEAP32[$avr>>2]|0;
  $port_pin = ((($port)) + 116|0);
  $3 = HEAP8[$port_pin>>0]|0;
  $conv = $3&255;
  $call = (_avr_io_getirq($2,$1,$conv)|0);
  $4 = HEAP32[$irq>>2]|0;
  _avr_connect_irq($call,$4);
 }
 $5 = HEAP32[$irq>>2]|0;
 $add$ptr$1 = ((($5)) + 24|0);
 _avr_irq_register_notify($add$ptr$1,127,$port);
 $port_ioctl$1 = ((($port)) + 192|0);
 $6 = HEAP32[$port_ioctl$1>>2]|0;
 $tobool$1 = ($6|0)==(0);
 if (!($tobool$1)) {
  $7 = HEAP32[$avr>>2]|0;
  $port_pin$1 = ((($port)) + 196|0);
  $8 = HEAP8[$port_pin$1>>0]|0;
  $conv$1 = $8&255;
  $call$1 = (_avr_io_getirq($7,$6,$conv$1)|0);
  $9 = HEAP32[$irq>>2]|0;
  $add$ptr10$1 = ((($9)) + 24|0);
  _avr_connect_irq($call$1,$add$ptr10$1);
 }
 $10 = HEAP32[$irq>>2]|0;
 $add$ptr$2 = ((($10)) + 48|0);
 _avr_irq_register_notify($add$ptr$2,127,$port);
 $port_ioctl$2 = ((($port)) + 272|0);
 $11 = HEAP32[$port_ioctl$2>>2]|0;
 $tobool$2 = ($11|0)==(0);
 if (!($tobool$2)) {
  $12 = HEAP32[$avr>>2]|0;
  $port_pin$2 = ((($port)) + 276|0);
  $13 = HEAP8[$port_pin$2>>0]|0;
  $conv$2 = $13&255;
  $call$2 = (_avr_io_getirq($12,$11,$conv$2)|0);
  $14 = HEAP32[$irq>>2]|0;
  $add$ptr10$2 = ((($14)) + 48|0);
  _avr_connect_irq($call$2,$add$ptr10$2);
 }
 $15 = HEAP32[$irq>>2]|0;
 $add$ptr$3 = ((($15)) + 72|0);
 _avr_irq_register_notify($add$ptr$3,127,$port);
 $port_ioctl$3 = ((($port)) + 352|0);
 $16 = HEAP32[$port_ioctl$3>>2]|0;
 $tobool$3 = ($16|0)==(0);
 if (!($tobool$3)) {
  $17 = HEAP32[$avr>>2]|0;
  $port_pin$3 = ((($port)) + 356|0);
  $18 = HEAP8[$port_pin$3>>0]|0;
  $conv$3 = $18&255;
  $call$3 = (_avr_io_getirq($17,$16,$conv$3)|0);
  $19 = HEAP32[$irq>>2]|0;
  $add$ptr10$3 = ((($19)) + 72|0);
  _avr_connect_irq($call$3,$add$ptr10$3);
 }
 $20 = HEAP32[$irq>>2]|0;
 $add$ptr$4 = ((($20)) + 96|0);
 _avr_irq_register_notify($add$ptr$4,127,$port);
 $port_ioctl$4 = ((($port)) + 432|0);
 $21 = HEAP32[$port_ioctl$4>>2]|0;
 $tobool$4 = ($21|0)==(0);
 if (!($tobool$4)) {
  $22 = HEAP32[$avr>>2]|0;
  $port_pin$4 = ((($port)) + 436|0);
  $23 = HEAP8[$port_pin$4>>0]|0;
  $conv$4 = $23&255;
  $call$4 = (_avr_io_getirq($22,$21,$conv$4)|0);
  $24 = HEAP32[$irq>>2]|0;
  $add$ptr10$4 = ((($24)) + 96|0);
  _avr_connect_irq($call$4,$add$ptr10$4);
 }
 $25 = HEAP32[$irq>>2]|0;
 $add$ptr$5 = ((($25)) + 120|0);
 _avr_irq_register_notify($add$ptr$5,127,$port);
 $port_ioctl$5 = ((($port)) + 512|0);
 $26 = HEAP32[$port_ioctl$5>>2]|0;
 $tobool$5 = ($26|0)==(0);
 if (!($tobool$5)) {
  $27 = HEAP32[$avr>>2]|0;
  $port_pin$5 = ((($port)) + 516|0);
  $28 = HEAP8[$port_pin$5>>0]|0;
  $conv$5 = $28&255;
  $call$5 = (_avr_io_getirq($27,$26,$conv$5)|0);
  $29 = HEAP32[$irq>>2]|0;
  $add$ptr10$5 = ((($29)) + 120|0);
  _avr_connect_irq($call$5,$add$ptr10$5);
 }
 $30 = HEAP32[$irq>>2]|0;
 $add$ptr$6 = ((($30)) + 144|0);
 _avr_irq_register_notify($add$ptr$6,127,$port);
 $port_ioctl$6 = ((($port)) + 592|0);
 $31 = HEAP32[$port_ioctl$6>>2]|0;
 $tobool$6 = ($31|0)==(0);
 if (!($tobool$6)) {
  $32 = HEAP32[$avr>>2]|0;
  $port_pin$6 = ((($port)) + 596|0);
  $33 = HEAP8[$port_pin$6>>0]|0;
  $conv$6 = $33&255;
  $call$6 = (_avr_io_getirq($32,$31,$conv$6)|0);
  $34 = HEAP32[$irq>>2]|0;
  $add$ptr10$6 = ((($34)) + 144|0);
  _avr_connect_irq($call$6,$add$ptr10$6);
 }
 $35 = HEAP32[$irq>>2]|0;
 $add$ptr$7 = ((($35)) + 168|0);
 _avr_irq_register_notify($add$ptr$7,127,$port);
 $port_ioctl$7 = ((($port)) + 672|0);
 $36 = HEAP32[$port_ioctl$7>>2]|0;
 $tobool$7 = ($36|0)==(0);
 if ($tobool$7) {
  return;
 }
 $37 = HEAP32[$avr>>2]|0;
 $port_pin$7 = ((($port)) + 676|0);
 $38 = HEAP8[$port_pin$7>>0]|0;
 $conv$7 = $38&255;
 $call$7 = (_avr_io_getirq($37,$36,$conv$7)|0);
 $39 = HEAP32[$irq>>2]|0;
 $add$ptr10$7 = ((($39)) + 168|0);
 _avr_connect_irq($call$7,$add$ptr10$7);
 return;
}
function _avr_extint_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add21 = 0, $and$i = 0, $arraydecay = 0, $arraydecay16 = 0, $arrayidx$i = 0, $avr1 = 0, $bf$clear = 0, $bf$clear$i = 0, $bf$clear5$i = 0, $bf$clear8$i = 0, $bf$load = 0, $bf$load$i = 0, $bf$lshr$i = 0;
 var $bf$lshr7$i = 0, $conv10$i = 0, $conv17 = 0, $conv20 = 0, $conv22 = 0, $conv3$i = 0, $conv9$i = 0, $data$i = 0, $eint = 0, $exitcond$i = 0, $i$012$i = 0, $inc$i = 0, $incdec$ptr$i = 0, $irq10 = 0, $lnot = 0, $mode$0 = 0, $not$tobool = 0, $or$cond = 0, $or$i = 0, $rb$addr$013$i = 0;
 var $res$011$i = 0, $res$1$i = 0, $shl$i = 0, $shr$i = 0, $spec$select = 0, $tobool = 0, $tobool$i = 0, $tobool11 = 0, $tobool3 = 0, $value2 = 0, $vector = 0, $vector38 = 0, $vector47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $value2 = ((($irq)) + 12|0);
 $1 = HEAP32[$value2>>2]|0;
 $tobool = ($1|0)!=(0);
 $tobool3 = ($value|0)!=(0);
 $not$tobool = $tobool ^ 1;
 $lnot = $tobool3 ^ 1;
 $eint = ((($param)) + 40|0);
 $irq10 = ((($irq)) + 8|0);
 $2 = HEAP32[$irq10>>2]|0;
 $add = (($2) + 1)|0;
 $arraydecay = (($eint) + (($add*80)|0)|0);
 $bf$load = HEAP32[$arraydecay>>2]|0;
 $bf$clear = $bf$load & 511;
 $tobool11 = ($bf$clear|0)==(0);
 $arraydecay16 = (($eint) + (($2*80)|0)|0);
 $conv17 = $tobool11 ? 1 : 2;
 $data$i = ((($0)) + 5892|0);
 $i$012$i = 0;$rb$addr$013$i = $arraydecay16;$res$011$i = 0;
 while(1) {
  $bf$load$i = HEAP32[$rb$addr$013$i>>2]|0;
  $bf$clear$i = $bf$load$i & 511;
  $tobool$i = ($bf$clear$i|0)==(0);
  if ($tobool$i) {
   $res$1$i = $res$011$i;
  } else {
   $3 = HEAP32[$data$i>>2]|0;
   $arrayidx$i = (($3) + ($bf$clear$i)|0);
   $4 = HEAP8[$arrayidx$i>>0]|0;
   $conv3$i = $4&255;
   $bf$lshr$i = $bf$load$i >>> 9;
   $bf$clear5$i = $bf$lshr$i & 7;
   $shr$i = $conv3$i >>> $bf$clear5$i;
   $bf$lshr7$i = $bf$load$i >>> 12;
   $bf$clear8$i = $bf$lshr7$i & 255;
   $and$i = $bf$clear8$i & $shr$i;
   $shl$i = $and$i << $i$012$i;
   $conv9$i = $res$011$i&255;
   $or$i = $shl$i | $conv9$i;
   $conv10$i = $or$i&255;
   $res$1$i = $conv10$i;
  }
  $inc$i = (($i$012$i) + 1)|0;
  $incdec$ptr$i = ((($rb$addr$013$i)) + 4|0);
  $exitcond$i = ($inc$i|0)==($conv17|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$012$i = $inc$i;$rb$addr$013$i = $incdec$ptr$i;$res$011$i = $res$1$i;
  }
 }
 $conv20 = $res$1$i&255;
 $add21 = (($conv20) + 2)|0;
 $conv22 = $add21&255;
 $mode$0 = $tobool11 ? $conv22 : $res$1$i;
 switch ($mode$0<<24>>24) {
 case 3:  {
  $5 = $tobool3 & $not$tobool;
  if (!($5)) {
   return;
  }
  $vector47 = (((($eint) + (($2*80)|0)|0)) + 8|0);
  (_avr_raise_interrupt($0,$vector47)|0);
  return;
  break;
 }
 case 1:  {
  $or$cond = $tobool3 ^ $tobool;
  if (!($or$cond)) {
   return;
  }
  $vector = (((($eint) + (($2*80)|0)|0)) + 8|0);
  (_avr_raise_interrupt($0,$vector)|0);
  return;
  break;
 }
 case 2:  {
  $spec$select = $tobool & $lnot;
  if (!($spec$select)) {
   return;
  }
  $vector38 = (((($eint) + (($2*80)|0)|0)) + 8|0);
  (_avr_raise_interrupt($0,$vector38)|0);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _avr_eeprom_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $call = 0, $conv = 0, $conv5 = 0, $eeprom = 0, $r_eecr = 0, $ready = 0, $size = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=354432; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $size = ((($p)) + 44|0);
 $0 = HEAP16[$size>>1]|0;
 $conv = $0&65535;
 $call = (_malloc($conv)|0);
 $eeprom = ((($p)) + 40|0);
 HEAP32[$eeprom>>2] = $call;
 _memset(($call|0),-1,($conv|0))|0;
 _avr_register_io($avr,$p);
 $ready = ((($p)) + 80|0);
 _avr_register_vector($avr,$ready);
 $r_eecr = ((($p)) + 49|0);
 $1 = HEAP8[$r_eecr>>0]|0;
 $conv5 = $1&255;
 _avr_register_io_write($avr,$conv5,128,$p);
 return;
}
function _avr_eeprom_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$0120$0$copyload = 0, $$sroa$0123$0$copyload = 0, $$sroa$0126$0$$sroa_idx = 0, $$sroa$0126$0$copyload = 0, $$sroa$0129$0$$sroa_idx = 0, $$sroa$0129$0$copyload = 0, $$sroa$0132$0$$sroa_idx = 0, $$sroa$0132$0$copyload = 0, $$sroa$0135$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr12$0 = 0, $addr39$0 = 0, $and$i = 0, $and$i116 = 0, $and$i44 = 0, $and$i55 = 0, $and$i72 = 0, $and$i84 = 0, $and$i99 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i113 = 0, $arrayidx$i42 = 0, $arrayidx$i49 = 0;
 var $arrayidx$i69 = 0, $arrayidx$i78 = 0, $arrayidx$i93 = 0, $arrayidx19 = 0, $arrayidx30 = 0, $arrayidx32 = 0, $arrayidx46 = 0, $arrayidx51 = 0, $arrayidx65 = 0, $arrayidx69 = 0, $bf$clear$i = 0, $bf$clear$i105 = 0, $bf$clear$i39 = 0, $bf$clear$i46 = 0, $bf$clear$i61 = 0, $bf$clear$i75 = 0, $bf$clear$i90 = 0, $bf$clear2$i = 0, $bf$clear2$i108 = 0, $bf$clear2$i64 = 0;
 var $bf$clear3$i = 0, $bf$clear3$i52 = 0, $bf$clear3$i81 = 0, $bf$clear3$i96 = 0, $bf$clear5$i = 0, $bf$clear5$i110 = 0, $bf$clear5$i66 = 0, $bf$lshr$i = 0, $bf$lshr$i107 = 0, $bf$lshr$i40 = 0, $bf$lshr$i51 = 0, $bf$lshr$i63 = 0, $bf$lshr$i80 = 0, $bf$lshr$i95 = 0, $bf$lshr4$i = 0, $bf$lshr4$i109 = 0, $bf$lshr4$i65 = 0, $bf$lshr5$i = 0, $bf$lshr5$i54 = 0, $bf$lshr5$i83 = 0;
 var $bf$lshr5$i98 = 0, $cond = 0, $conv$i = 0, $conv$i106 = 0, $conv$i62 = 0, $conv1$i = 0, $conv1$i50 = 0, $conv1$i79 = 0, $conv1$i94 = 0, $conv20 = 0, $conv26 = 0, $conv52 = 0, $conv61 = 0, $conv7$i114 = 0, $conv7$i43 = 0, $conv7$i70 = 0, $conv9$i = 0, $conv9$i117 = 0, $conv9$i73 = 0, $data$i = 0;
 var $data$i48 = 0, $eeprom = 0, $eeprom63 = 0, $idxprom = 0, $idxprom18 = 0, $idxprom29 = 0, $idxprom31 = 0, $idxprom45 = 0, $idxprom50 = 0, $idxprom64 = 0, $idxprom68 = 0, $neg$i = 0, $neg$i115 = 0, $neg$i71 = 0, $or = 0, $or54 = 0, $shl = 0, $shl$i = 0, $shl$i111 = 0, $shl$i67 = 0;
 var $shl53 = 0, $shr$i = 0, $shr$i53 = 0, $shr$i82 = 0, $shr$i97 = 0, $tobool$i = 0, $tobool$i47 = 0, $tobool$i76 = 0, $tobool$i91 = 0, $tobool10 = 0, $tobool13 = 0, $tobool37 = 0, $tobool4 = 0, $tobool41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 68|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  _avr_core_watch_write($avr,$addr,$v);
  label = 4;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  _avr_core_watch_write($avr,$addr,$v);
  $cond = ($and$i|0)==(0);
  if ($cond) {
   label = 4;
  } else {
   $$sroa$0129$0$$sroa_idx = ((($param)) + 72|0);
   $$sroa$0129$0$copyload = HEAPU8[$$sroa$0129$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0129$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0129$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0129$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i75 = $$sroa$0129$0$copyload & 511;
   $tobool$i76 = ($bf$clear$i75|0)==(0);
   if (!($tobool$i76)) {
    $4 = HEAP32[$data$i>>2]|0;
    $arrayidx$i78 = (($4) + ($bf$clear$i75)|0);
    $5 = HEAP8[$arrayidx$i78>>0]|0;
    $conv1$i79 = $5&255;
    $bf$lshr$i80 = $$sroa$0129$0$copyload >>> 9;
    $bf$clear3$i81 = $bf$lshr$i80 & 7;
    $shr$i82 = $conv1$i79 >>> $bf$clear3$i81;
    $bf$lshr5$i83 = $$sroa$0129$0$copyload >>> 12;
    $and$i84 = $shr$i82 & $bf$lshr5$i83;
    $tobool10 = ($and$i84|0)==(0);
    if (!($tobool10)) {
     $6 = ((($param)) + 46|0);
     $7 = HEAP8[$6>>0]|0;
     $tobool13 = ($7<<24>>24)==(0);
     $8 = ((($param)) + 47|0);
     $9 = HEAP8[$8>>0]|0;
     $idxprom = $9&255;
     $arrayidx = (($4) + ($idxprom)|0);
     $10 = HEAP8[$arrayidx>>0]|0;
     $conv26 = $10&255;
     if ($tobool13) {
      $addr12$0 = $conv26;
     } else {
      $idxprom18 = $7&255;
      $arrayidx19 = (($4) + ($idxprom18)|0);
      $11 = HEAP8[$arrayidx19>>0]|0;
      $conv20 = $11&255;
      $shl = $conv20 << 8;
      $or = $shl | $conv26;
      $addr12$0 = $or;
     }
     $12 = ((($param)) + 48|0);
     $13 = HEAP8[$12>>0]|0;
     $idxprom29 = $13&255;
     $arrayidx30 = (($4) + ($idxprom29)|0);
     $14 = HEAP8[$arrayidx30>>0]|0;
     $eeprom = ((($param)) + 40|0);
     $15 = HEAP32[$eeprom>>2]|0;
     $idxprom31 = $addr12$0 & 65535;
     $arrayidx32 = (($15) + ($idxprom31)|0);
     HEAP8[$arrayidx32>>0] = $14;
     $$sroa$0135$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
     $bf$clear$i105 = $$sroa$0135$0$copyload & 511;
     $conv$i106 = $bf$clear$i105&65535;
     $bf$lshr$i107 = $$sroa$0135$0$copyload >>> 12;
     $bf$clear2$i108 = $bf$lshr$i107 & 255;
     $bf$lshr4$i109 = $$sroa$0135$0$copyload >>> 9;
     $bf$clear5$i110 = $bf$lshr4$i109 & 7;
     $shl$i111 = $bf$clear2$i108 << $bf$clear5$i110;
     $16 = HEAP32[$data$i>>2]|0;
     $arrayidx$i113 = (($16) + ($bf$clear$i105)|0);
     $17 = HEAP8[$arrayidx$i113>>0]|0;
     $conv7$i114 = $17&255;
     $neg$i115 = $shl$i111 ^ 255;
     $and$i116 = $neg$i115 & $conv7$i114;
     $conv9$i117 = $and$i116&255;
     _avr_core_watch_write($avr,$conv$i106,$conv9$i117);
     _avr_cycle_timer_register_usec($avr,3400,130,$param);
    }
   }
  }
 }
 if ((label|0) == 4) {
  $$sroa$0123$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i46 = $$sroa$0123$0$copyload & 511;
  $tobool$i47 = ($bf$clear$i46|0)==(0);
  if (!($tobool$i47)) {
   $data$i48 = ((($avr)) + 5892|0);
   $2 = HEAP32[$data$i48>>2]|0;
   $arrayidx$i49 = (($2) + ($bf$clear$i46)|0);
   $3 = HEAP8[$arrayidx$i49>>0]|0;
   $conv1$i50 = $3&255;
   $bf$lshr$i51 = $$sroa$0123$0$copyload >>> 9;
   $bf$clear3$i52 = $bf$lshr$i51 & 7;
   $shr$i53 = $conv1$i50 >>> $bf$clear3$i52;
   $bf$lshr5$i54 = $$sroa$0123$0$copyload >>> 12;
   $and$i55 = $shr$i53 & $bf$lshr5$i54;
   $tobool4 = ($and$i55|0)==(0);
   if (!($tobool4)) {
    _avr_cycle_timer_register($avr,4,0,129,$param);
   }
  }
 }
 $$sroa$0132$0$$sroa_idx = ((($param)) + 76|0);
 $$sroa$0132$0$copyload = HEAPU8[$$sroa$0132$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0132$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0132$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0132$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i90 = $$sroa$0132$0$copyload & 511;
 $tobool$i91 = ($bf$clear$i90|0)==(0);
 $$pre = ((($avr)) + 5892|0);
 if (!($tobool$i91)) {
  $18 = HEAP32[$$pre>>2]|0;
  $arrayidx$i93 = (($18) + ($bf$clear$i90)|0);
  $19 = HEAP8[$arrayidx$i93>>0]|0;
  $conv1$i94 = $19&255;
  $bf$lshr$i95 = $$sroa$0132$0$copyload >>> 9;
  $bf$clear3$i96 = $bf$lshr$i95 & 7;
  $shr$i97 = $conv1$i94 >>> $bf$clear3$i96;
  $bf$lshr5$i98 = $$sroa$0132$0$copyload >>> 12;
  $and$i99 = $shr$i97 & $bf$lshr5$i98;
  $tobool37 = ($and$i99|0)==(0);
  if (!($tobool37)) {
   $20 = ((($param)) + 46|0);
   $21 = HEAP8[$20>>0]|0;
   $tobool41 = ($21<<24>>24)==(0);
   $22 = ((($param)) + 47|0);
   $23 = HEAP8[$22>>0]|0;
   $idxprom45 = $23&255;
   $arrayidx46 = (($18) + ($idxprom45)|0);
   $24 = HEAP8[$arrayidx46>>0]|0;
   $conv61 = $24&255;
   if ($tobool41) {
    $addr39$0 = $conv61;
   } else {
    $idxprom50 = $21&255;
    $arrayidx51 = (($18) + ($idxprom50)|0);
    $25 = HEAP8[$arrayidx51>>0]|0;
    $conv52 = $25&255;
    $shl53 = $conv52 << 8;
    $or54 = $shl53 | $conv61;
    $addr39$0 = $or54;
   }
   $eeprom63 = ((($param)) + 40|0);
   $26 = HEAP32[$eeprom63>>2]|0;
   $idxprom64 = $addr39$0 & 65535;
   $arrayidx65 = (($26) + ($idxprom64)|0);
   $27 = HEAP8[$arrayidx65>>0]|0;
   $28 = ((($param)) + 48|0);
   $29 = HEAP8[$28>>0]|0;
   $idxprom68 = $29&255;
   $arrayidx69 = (($18) + ($idxprom68)|0);
   HEAP8[$arrayidx69>>0] = $27;
  }
 }
 $$sroa$0126$0$$sroa_idx = ((($param)) + 72|0);
 $$sroa$0126$0$copyload = HEAPU8[$$sroa$0126$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0126$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0126$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0126$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i61 = $$sroa$0126$0$copyload & 511;
 $conv$i62 = $bf$clear$i61&65535;
 $bf$lshr$i63 = $$sroa$0126$0$copyload >>> 12;
 $bf$clear2$i64 = $bf$lshr$i63 & 255;
 $bf$lshr4$i65 = $$sroa$0126$0$copyload >>> 9;
 $bf$clear5$i66 = $bf$lshr4$i65 & 7;
 $shl$i67 = $bf$clear2$i64 << $bf$clear5$i66;
 $30 = HEAP32[$$pre>>2]|0;
 $arrayidx$i69 = (($30) + ($bf$clear$i61)|0);
 $31 = HEAP8[$arrayidx$i69>>0]|0;
 $conv7$i70 = $31&255;
 $neg$i71 = $shl$i67 ^ 255;
 $and$i72 = $neg$i71 & $conv7$i70;
 $conv9$i73 = $and$i72&255;
 _avr_core_watch_write($avr,$conv$i62,$conv9$i73);
 $$sroa$0120$0$copyload = HEAPU8[$$sroa$0132$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0132$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0132$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0132$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i39 = $$sroa$0120$0$copyload & 511;
 $conv$i = $bf$clear$i39&65535;
 $bf$lshr$i40 = $$sroa$0120$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i40 & 255;
 $bf$lshr4$i = $$sroa$0120$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $32 = HEAP32[$$pre>>2]|0;
 $arrayidx$i42 = (($32) + ($bf$clear$i39)|0);
 $33 = HEAP8[$arrayidx$i42>>0]|0;
 $conv7$i43 = $33&255;
 $neg$i = $shl$i ^ 255;
 $and$i44 = $neg$i & $conv7$i43;
 $conv9$i = $and$i44&255;
 _avr_core_watch_write($avr,$conv$i,$conv9$i);
 return;
}
function _avr_eempe_clear($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $2 = 0, $3 = 0, $4 = 0, $and$i = 0, $arrayidx$i = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0, $conv$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $neg$i = 0, $shl$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $2 = HEAP32[$avr1>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 68|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($2)) + 5892|0);
 $3 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($3) + ($bf$clear$i)|0);
 $4 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $4&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($2,$conv$i,$conv9$i);
 setTempRet0((0) | 0);
 return 0;
}
function _avr_eei_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $avr1 = 0, $ready = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $2 = HEAP32[$avr1>>2]|0;
 $ready = ((($param)) + 80|0);
 (_avr_raise_interrupt($2,$ready)|0);
 setTempRet0((0) | 0);
 return 0;
}
function _avr_eeprom_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr50 = 0, $add27 = 0, $avr = 0;
 var $avr14 = 0, $avr34 = 0, $cmp = 0, $cmp30 = 0, $conv = 0, $conv17 = 0, $conv25 = 0, $conv29 = 0, $conv7 = 0, $eeprom = 0, $eeprom47 = 0, $offset = 0, $offset24 = 0, $retval$2 = 0, $size = 0, $size26 = 0, $size28 = 0, $size6 = 0, $switch$split2D = 0, $tobool = 0;
 var $tobool1 = 0, $tobool22 = 0, $tobool3 = 0, $tobool39 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $switch$split2D = ($ctl|0)<(1701147504);
 if (!($switch$split2D)) {
  switch ($ctl|0) {
  case 1701147504:  {
   break;
  }
  default: {
   $retval$2 = -1;
   STACKTOP = sp;return ($retval$2|0);
  }
  }
  $tobool = ($io_param|0)==(0|0);
  if (!($tobool)) {
   $size = ((($io_param)) + 8|0);
   $0 = HEAP32[$size>>2]|0;
   $tobool1 = ($0|0)==(0);
   if (!($tobool1)) {
    $1 = HEAP32[$io_param>>2]|0;
    $tobool3 = ($1|0)==(0|0);
    if (!($tobool3)) {
     $offset = ((($io_param)) + 4|0);
     $2 = HEAP16[$offset>>1]|0;
     $conv = $2&65535;
     $add = (($0) + ($conv))|0;
     $size6 = ((($port)) + 44|0);
     $3 = HEAP16[$size6>>1]|0;
     $conv7 = $3&65535;
     $cmp = ($add>>>0)>($conv7>>>0);
     if (!($cmp)) {
      $eeprom = ((($port)) + 40|0);
      $5 = HEAP32[$eeprom>>2]|0;
      $add$ptr = (($5) + ($conv)|0);
      _memcpy(($add$ptr|0),($1|0),($0|0))|0;
      $avr14 = ((($port)) + 4|0);
      $6 = HEAP32[$avr14>>2]|0;
      $7 = HEAP32[$size>>2]|0;
      $8 = HEAP16[$offset>>1]|0;
      $conv17 = $8&65535;
      HEAP32[$vararg_buffer1>>2] = 362140;
      $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $7;
      $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
      HEAP32[$vararg_ptr5>>2] = $conv17;
      _avr_global_logger($6,3,362157,$vararg_buffer1);
      $retval$2 = -1;
      STACKTOP = sp;return ($retval$2|0);
     }
    }
   }
  }
  $avr = ((($port)) + 4|0);
  $4 = HEAP32[$avr>>2]|0;
  HEAP32[$vararg_buffer>>2] = 362140;
  _avr_global_logger($4,2,362089,$vararg_buffer);
  $retval$2 = -2;
  STACKTOP = sp;return ($retval$2|0);
 }
 switch ($ctl|0) {
 case 1701144432:  {
  break;
 }
 default: {
  $retval$2 = -1;
  STACKTOP = sp;return ($retval$2|0);
 }
 }
 $tobool22 = ($io_param|0)==(0|0);
 if (!($tobool22)) {
  $offset24 = ((($io_param)) + 4|0);
  $9 = HEAP16[$offset24>>1]|0;
  $conv25 = $9&65535;
  $size26 = ((($io_param)) + 8|0);
  $10 = HEAP32[$size26>>2]|0;
  $add27 = (($10) + ($conv25))|0;
  $size28 = ((($port)) + 44|0);
  $11 = HEAP16[$size28>>1]|0;
  $conv29 = $11&65535;
  $cmp30 = ($add27>>>0)>($conv29>>>0);
  if (!($cmp30)) {
   $13 = HEAP32[$io_param>>2]|0;
   $tobool39 = ($13|0)==(0|0);
   $eeprom47 = ((($port)) + 40|0);
   $14 = HEAP32[$eeprom47>>2]|0;
   $add$ptr50 = (($14) + ($conv25)|0);
   if ($tobool39) {
    HEAP32[$io_param>>2] = $add$ptr50;
    $retval$2 = -1;
    STACKTOP = sp;return ($retval$2|0);
   } else {
    _memcpy(($13|0),($add$ptr50|0),($10|0))|0;
    $retval$2 = -1;
    STACKTOP = sp;return ($retval$2|0);
   }
  }
 }
 $avr34 = ((($port)) + 4|0);
 $12 = HEAP32[$avr34>>2]|0;
 HEAP32[$vararg_buffer6>>2] = 362140;
 _avr_global_logger($12,2,362214,$vararg_buffer6);
 $retval$2 = -2;
 STACKTOP = sp;return ($retval$2|0);
}
function _avr_eeprom_dealloc($port) {
 $port = $port|0;
 var $0 = 0, $eeprom = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $eeprom = ((($port)) + 40|0);
 $0 = HEAP32[$eeprom>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  _free($0);
 }
 HEAP32[$eeprom>>2] = 0;
 return;
}
function _avr_timer_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx125 = 0, $arrayidx148 = 0, $arrayidx182 = 0, $arrayidx21 = 0, $arrayidx241 = 0, $arrayidx241$1 = 0, $arrayidx241$2 = 0, $arrayidx42 = 0, $arrayidx76 = 0;
 var $as2 = 0, $bf$clear = 0, $bf$clear110 = 0, $bf$clear122 = 0, $bf$clear127 = 0, $bf$clear137 = 0, $bf$clear150 = 0, $bf$clear160 = 0, $bf$clear171 = 0, $bf$clear184 = 0, $bf$clear194 = 0, $bf$clear205 = 0, $bf$clear216 = 0, $bf$clear227 = 0, $bf$clear23 = 0, $bf$clear237 = 0, $bf$clear32 = 0, $bf$clear44 = 0, $bf$clear54 = 0, $bf$clear65 = 0;
 var $bf$clear78 = 0, $bf$clear88 = 0, $bf$clear99 = 0, $bf$load = 0, $bf$load109 = 0, $bf$load121 = 0, $bf$load126 = 0, $bf$load136 = 0, $bf$load149 = 0, $bf$load159 = 0, $bf$load170 = 0, $bf$load183 = 0, $bf$load193 = 0, $bf$load204 = 0, $bf$load215 = 0, $bf$load22 = 0, $bf$load226 = 0, $bf$load236 = 0, $bf$load31 = 0, $bf$load43 = 0;
 var $bf$load53 = 0, $bf$load64 = 0, $bf$load77 = 0, $bf$load87 = 0, $bf$load98 = 0, $cmp = 0, $cmp100 = 0, $cmp111 = 0, $cmp138 = 0, $cmp161 = 0, $cmp172 = 0, $cmp195 = 0, $cmp206 = 0, $cmp217 = 0, $cmp55 = 0, $cmp66 = 0, $cmp89 = 0, $conv = 0, $conv118 = 0, $conv123 = 0;
 var $conv145 = 0, $conv179 = 0, $conv19 = 0, $conv224 = 0, $conv233 = 0, $conv238 = 0, $conv39 = 0, $conv73 = 0, $cs = 0, $flags = 0, $flags10 = 0, $icr = 0, $irq = 0, $name = 0, $or = 0, $overflow = 0, $r_ocr = 0, $r_ocr$1 = 0, $r_ocr$2 = 0, $r_tcnt = 0;
 var $raised = 0, $timer = 0, $timer$1 = 0, $timer$2 = 0, $tobool = 0, $tobool128 = 0, $tobool151 = 0, $tobool185 = 0, $tobool228 = 0, $tobool24 = 0, $tobool246 = 0, $tobool246$1 = 0, $tobool246$2 = 0, $tobool45 = 0, $tobool79 = 0, $wgm = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 dest=$p; src=354472; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $overflow = ((($p)) + 464|0);
 _avr_register_vector($avr,$overflow);
 $icr = ((($p)) + 528|0);
 _avr_register_vector($avr,$icr);
 $name = ((($p)) + 40|0);
 $0 = HEAP8[$name>>0]|0;
 $conv = $0 << 24 >> 24;
 $or = $conv | 1953329664;
 (_avr_io_setirqs($p,$or,5,0)|0);
 $irq = ((($p)) + 24|0);
 $1 = HEAP32[$irq>>2]|0;
 $flags = ((($1)) + 16|0);
 $2 = HEAP8[$flags>>0]|0;
 $3 = $2 | 2;
 HEAP8[$flags>>0] = $3;
 $flags10 = ((($1)) + 40|0);
 $4 = HEAP8[$flags10>>0]|0;
 $5 = $4 | 2;
 HEAP8[$flags10>>0] = $5;
 $wgm = ((($p)) + 60|0);
 $bf$load = HEAP32[$wgm>>2]|0;
 $bf$clear = $bf$load & 511;
 $tobool = ($bf$clear|0)==(0);
 if (!($tobool)) {
  $conv19 = $bf$clear&65535;
  _avr_register_io_write($avr,$conv19,131,$p);
 }
 $arrayidx21 = ((($p)) + 64|0);
 $bf$load22 = HEAP32[$arrayidx21>>2]|0;
 $bf$clear23 = $bf$load22 & 511;
 $tobool24 = ($bf$clear23|0)==(0);
 if (!($tobool24)) {
  $bf$load31 = HEAP32[$wgm>>2]|0;
  $bf$clear32 = $bf$load31 & 511;
  $cmp = ($bf$clear23|0)==($bf$clear32|0);
  if (!($cmp)) {
   $conv39 = $bf$clear23&65535;
   _avr_register_io_write($avr,$conv39,131,$p);
  }
 }
 $arrayidx42 = ((($p)) + 68|0);
 $bf$load43 = HEAP32[$arrayidx42>>2]|0;
 $bf$clear44 = $bf$load43 & 511;
 $tobool45 = ($bf$clear44|0)==(0);
 if (!($tobool45)) {
  $bf$load53 = HEAP32[$wgm>>2]|0;
  $bf$clear54 = $bf$load53 & 511;
  $cmp55 = ($bf$clear44|0)==($bf$clear54|0);
  if (!($cmp55)) {
   $bf$load64 = HEAP32[$arrayidx21>>2]|0;
   $bf$clear65 = $bf$load64 & 511;
   $cmp66 = ($bf$clear44|0)==($bf$clear65|0);
   if (!($cmp66)) {
    $conv73 = $bf$clear44&65535;
    _avr_register_io_write($avr,$conv73,131,$p);
   }
  }
 }
 $arrayidx76 = ((($p)) + 72|0);
 $bf$load77 = HEAP32[$arrayidx76>>2]|0;
 $bf$clear78 = $bf$load77 & 511;
 $tobool79 = ($bf$clear78|0)==(0);
 if (!($tobool79)) {
  $bf$load87 = HEAP32[$wgm>>2]|0;
  $bf$clear88 = $bf$load87 & 511;
  $cmp89 = ($bf$clear78|0)==($bf$clear88|0);
  if (!($cmp89)) {
   $bf$load98 = HEAP32[$arrayidx21>>2]|0;
   $bf$clear99 = $bf$load98 & 511;
   $cmp100 = ($bf$clear78|0)==($bf$clear99|0);
   if (!($cmp100)) {
    $bf$load109 = HEAP32[$arrayidx42>>2]|0;
    $bf$clear110 = $bf$load109 & 511;
    $cmp111 = ($bf$clear78|0)==($bf$clear110|0);
    if (!($cmp111)) {
     $conv118 = $bf$clear78&65535;
     _avr_register_io_write($avr,$conv118,131,$p);
    }
   }
  }
 }
 $cs = ((($p)) + 156|0);
 $bf$load121 = HEAP32[$cs>>2]|0;
 $bf$clear122 = $bf$load121 & 511;
 $conv123 = $bf$clear122&65535;
 _avr_register_io_write($avr,$conv123,131,$p);
 $arrayidx125 = ((($p)) + 160|0);
 $bf$load126 = HEAP32[$arrayidx125>>2]|0;
 $bf$clear127 = $bf$load126 & 511;
 $tobool128 = ($bf$clear127|0)==(0);
 if (!($tobool128)) {
  $bf$load136 = HEAP32[$cs>>2]|0;
  $bf$clear137 = $bf$load136 & 511;
  $cmp138 = ($bf$clear127|0)==($bf$clear137|0);
  if (!($cmp138)) {
   $conv145 = $bf$clear127&65535;
   _avr_register_io_write($avr,$conv145,131,$p);
  }
 }
 $arrayidx148 = ((($p)) + 164|0);
 $bf$load149 = HEAP32[$arrayidx148>>2]|0;
 $bf$clear150 = $bf$load149 & 511;
 $tobool151 = ($bf$clear150|0)==(0);
 if (!($tobool151)) {
  $bf$load159 = HEAP32[$cs>>2]|0;
  $bf$clear160 = $bf$load159 & 511;
  $cmp161 = ($bf$clear150|0)==($bf$clear160|0);
  if (!($cmp161)) {
   $bf$load170 = HEAP32[$arrayidx125>>2]|0;
   $bf$clear171 = $bf$load170 & 511;
   $cmp172 = ($bf$clear150|0)==($bf$clear171|0);
   if (!($cmp172)) {
    $conv179 = $bf$clear150&65535;
    _avr_register_io_write($avr,$conv179,131,$p);
   }
  }
 }
 $arrayidx182 = ((($p)) + 168|0);
 $bf$load183 = HEAP32[$arrayidx182>>2]|0;
 $bf$clear184 = $bf$load183 & 511;
 $tobool185 = ($bf$clear184|0)==(0);
 if (!($tobool185)) {
  $bf$load193 = HEAP32[$cs>>2]|0;
  $bf$clear194 = $bf$load193 & 511;
  $cmp195 = ($bf$clear184|0)==($bf$clear194|0);
  if (!($cmp195)) {
   $bf$load204 = HEAP32[$arrayidx125>>2]|0;
   $bf$clear205 = $bf$load204 & 511;
   $cmp206 = ($bf$clear184|0)==($bf$clear205|0);
   if (!($cmp206)) {
    $bf$load215 = HEAP32[$arrayidx148>>2]|0;
    $bf$clear216 = $bf$load215 & 511;
    $cmp217 = ($bf$clear184|0)==($bf$clear216|0);
    if (!($cmp217)) {
     $conv224 = $bf$clear184&65535;
     _avr_register_io_write($avr,$conv224,131,$p);
    }
   }
  }
 }
 $as2 = ((($p)) + 152|0);
 $bf$load226 = HEAP32[$as2>>2]|0;
 $bf$clear227 = $bf$load226 & 511;
 $tobool228 = ($bf$clear227|0)==(0);
 if (!($tobool228)) {
  $conv233 = $bf$clear227&65535;
  _avr_register_io_write($avr,$conv233,131,$p);
 }
 $raised = ((($p)) + 472|0);
 $bf$load236 = HEAP32[$raised>>2]|0;
 $bf$clear237 = $bf$load236 & 511;
 $conv238 = $bf$clear237&65535;
 _avr_register_io_write($avr,$conv238,132,$p);
 $arrayidx241 = ((($p)) + 200|0);
 $timer = ((($p)) + 264|0);
 HEAP32[$timer>>2] = $p;
 _avr_register_vector($avr,$arrayidx241);
 $r_ocr = ((($p)) + 268|0);
 $6 = HEAP16[$r_ocr>>1]|0;
 $tobool246 = ($6<<16>>16)==(0);
 if (!($tobool246)) {
  _avr_register_io_write($avr,$6,133,$arrayidx241);
 }
 $arrayidx241$1 = ((($p)) + 288|0);
 $timer$1 = ((($p)) + 352|0);
 HEAP32[$timer$1>>2] = $p;
 _avr_register_vector($avr,$arrayidx241$1);
 $r_ocr$1 = ((($p)) + 356|0);
 $7 = HEAP16[$r_ocr$1>>1]|0;
 $tobool246$1 = ($7<<16>>16)==(0);
 if (!($tobool246$1)) {
  _avr_register_io_write($avr,$7,133,$arrayidx241$1);
 }
 $arrayidx241$2 = ((($p)) + 376|0);
 $timer$2 = ((($p)) + 440|0);
 HEAP32[$timer$2>>2] = $p;
 _avr_register_vector($avr,$arrayidx241$2);
 $r_ocr$2 = ((($p)) + 444|0);
 $8 = HEAP16[$r_ocr$2>>1]|0;
 $tobool246$2 = ($8<<16>>16)==(0);
 if ($tobool246$2) {
  $r_tcnt = ((($p)) + 52|0);
  $9 = HEAP16[$r_tcnt>>1]|0;
  _avr_register_io_write($avr,$9,134,$p);
  $10 = HEAP16[$r_tcnt>>1]|0;
  _avr_register_io_read($avr,$10,135,$p);
  return;
 }
 _avr_register_io_write($avr,$8,133,$arrayidx241$2);
 $r_tcnt = ((($p)) + 52|0);
 $9 = HEAP16[$r_tcnt>>1]|0;
 _avr_register_io_write($avr,$9,134,$p);
 $10 = HEAP16[$r_tcnt>>1]|0;
 _avr_register_io_read($avr,$10,135,$p);
 return;
}
function _avr_timer_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$0267$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $and$1$i = 0, $and$1$i152 = 0, $and$1$i221 = 0, $and$1$i68 = 0, $and$2$i = 0, $and$2$i170 = 0, $and$2$i239 = 0, $and$2$i86 = 0, $and$3$i = 0, $and$3$i104 = 0, $and$3$i188 = 0, $and$3$i257 = 0, $and$i = 0, $and$i122 = 0, $and$i137 = 0, $and$i206 = 0, $and$i40 = 0, $and$i53 = 0;
 var $arrayidx = 0, $arrayidx$1$i = 0, $arrayidx$1$i146 = 0, $arrayidx$1$i215 = 0, $arrayidx$1$i62 = 0, $arrayidx$2$i = 0, $arrayidx$2$i164 = 0, $arrayidx$2$i233 = 0, $arrayidx$2$i80 = 0, $arrayidx$3$i = 0, $arrayidx$3$i182 = 0, $arrayidx$3$i251 = 0, $arrayidx$3$i98 = 0, $arrayidx$i = 0, $arrayidx$i116 = 0, $arrayidx$i131 = 0, $arrayidx$i200 = 0, $arrayidx$i37 = 0, $arrayidx$i47 = 0, $bf$clear = 0;
 var $bf$clear$1$i = 0, $bf$clear$1$i143 = 0, $bf$clear$1$i212 = 0, $bf$clear$1$i59 = 0, $bf$clear$2$i = 0, $bf$clear$2$i161 = 0, $bf$clear$2$i230 = 0, $bf$clear$2$i77 = 0, $bf$clear$3$i = 0, $bf$clear$3$i179 = 0, $bf$clear$3$i248 = 0, $bf$clear$3$i95 = 0, $bf$clear$i = 0, $bf$clear$i113 = 0, $bf$clear$i129 = 0, $bf$clear$i198 = 0, $bf$clear$i35 = 0, $bf$clear$i45 = 0, $bf$clear3$i = 0, $bf$clear3$i119 = 0;
 var $bf$clear5$1$i = 0, $bf$clear5$1$i149 = 0, $bf$clear5$1$i218 = 0, $bf$clear5$1$i65 = 0, $bf$clear5$2$i = 0, $bf$clear5$2$i167 = 0, $bf$clear5$2$i236 = 0, $bf$clear5$2$i83 = 0, $bf$clear5$3$i = 0, $bf$clear5$3$i101 = 0, $bf$clear5$3$i185 = 0, $bf$clear5$3$i254 = 0, $bf$clear5$i = 0, $bf$clear5$i134 = 0, $bf$clear5$i203 = 0, $bf$clear5$i50 = 0, $bf$load$1$i = 0, $bf$load$1$i142 = 0, $bf$load$1$i211 = 0, $bf$load$1$i58 = 0;
 var $bf$load$2$i = 0, $bf$load$2$i160 = 0, $bf$load$2$i229 = 0, $bf$load$2$i76 = 0, $bf$load$3$i = 0, $bf$load$3$i178 = 0, $bf$load$3$i247 = 0, $bf$load$3$i94 = 0, $bf$load$i128 = 0, $bf$load$i197 = 0, $bf$load$i34 = 0, $bf$load$i44 = 0, $bf$lshr = 0, $bf$lshr$1$i = 0, $bf$lshr$1$i148 = 0, $bf$lshr$1$i217 = 0, $bf$lshr$1$i64 = 0, $bf$lshr$2$i = 0, $bf$lshr$2$i166 = 0, $bf$lshr$2$i235 = 0;
 var $bf$lshr$2$i82 = 0, $bf$lshr$3$i = 0, $bf$lshr$3$i100 = 0, $bf$lshr$3$i184 = 0, $bf$lshr$3$i253 = 0, $bf$lshr$i = 0, $bf$lshr$i118 = 0, $bf$lshr$i133 = 0, $bf$lshr$i202 = 0, $bf$lshr$i38 = 0, $bf$lshr$i49 = 0, $bf$lshr39 = 0, $bf$lshr5$i = 0, $bf$lshr5$i121 = 0, $bf$lshr7$1$i = 0, $bf$lshr7$1$i151 = 0, $bf$lshr7$1$i220 = 0, $bf$lshr7$1$i67 = 0, $bf$lshr7$2$i = 0, $bf$lshr7$2$i169 = 0;
 var $bf$lshr7$2$i238 = 0, $bf$lshr7$2$i85 = 0, $bf$lshr7$3$i = 0, $bf$lshr7$3$i103 = 0, $bf$lshr7$3$i187 = 0, $bf$lshr7$3$i256 = 0, $bf$lshr7$i = 0, $bf$lshr7$i136 = 0, $bf$lshr7$i205 = 0, $bf$lshr7$i52 = 0, $clock$0 = 0, $cmp = 0, $cmp18 = 0, $cmp23 = 0, $cmp27 = 0, $comp_cycles$1$i = 0, $comp_cycles$2$i = 0, $comp_cycles$i = 0, $conv = 0, $conv1$i = 0;
 var $conv1$i117 = 0, $conv10$1$i = 0, $conv10$1$i156 = 0, $conv10$1$i225 = 0, $conv10$1$i72 = 0, $conv10$2$i = 0, $conv10$2$i174 = 0, $conv10$2$i243 = 0, $conv10$2$i90 = 0, $conv10$3$i = 0, $conv10$3$i108 = 0, $conv10$3$i192 = 0, $conv10$3$i261 = 0, $conv10$i = 0, $conv10$i138 = 0, $conv10$i207 = 0, $conv10$i54 = 0, $conv3$1$i = 0, $conv3$1$i147 = 0, $conv3$1$i216 = 0;
 var $conv3$1$i63 = 0, $conv3$2$i = 0, $conv3$2$i165 = 0, $conv3$2$i234 = 0, $conv3$2$i81 = 0, $conv3$3$i = 0, $conv3$3$i183 = 0, $conv3$3$i252 = 0, $conv3$3$i99 = 0, $conv3$i = 0, $conv3$i132 = 0, $conv3$i201 = 0, $conv3$i48 = 0, $conv30 = 0, $conv32 = 0, $conv7$i = 0, $conv7$i123 = 0, $conv9$1$i = 0, $conv9$1$i154 = 0, $conv9$1$i223 = 0;
 var $conv9$1$i70 = 0, $conv9$2$i = 0, $conv9$2$i172 = 0, $conv9$2$i241 = 0, $conv9$2$i88 = 0, $conv9$3$i = 0, $conv9$3$i106 = 0, $conv9$3$i190 = 0, $conv9$3$i259 = 0, $cs2 = 0, $cs_div = 0, $cs_div_clock = 0, $frequency = 0, $idxprom34 = 0, $incdec$ptr$1$i = 0, $incdec$ptr$1$i75 = 0, $incdec$ptr$2$i = 0, $incdec$ptr$2$i93 = 0, $incdec$ptr$i = 0, $incdec$ptr$i57 = 0;
 var $mode33 = 0, $or$1$i = 0, $or$1$i155 = 0, $or$1$i224 = 0, $or$1$i71 = 0, $or$2$i = 0, $or$2$i173 = 0, $or$2$i242 = 0, $or$2$i89 = 0, $or$3$i = 0, $or$3$i107 = 0, $or$3$i191 = 0, $or$3$i260 = 0, $or$cond = 0, $or$cond32 = 0, $res$1$1$i = 0, $res$1$1$i158 = 0, $res$1$1$i227 = 0, $res$1$1$i74 = 0, $res$1$2$i = 0;
 var $res$1$2$i176 = 0, $res$1$2$i245 = 0, $res$1$2$i92 = 0, $res$1$3$i = 0, $res$1$3$i110 = 0, $res$1$3$i194 = 0, $res$1$3$i263 = 0, $res$1$i = 0, $res$1$i140 = 0, $res$1$i209 = 0, $res$1$i56 = 0, $retval$0$i = 0, $retval$0$i125 = 0, $shl = 0, $shl$1$i = 0, $shl$1$i153 = 0, $shl$1$i222 = 0, $shl$1$i69 = 0, $shl$2$i = 0, $shl$2$i171 = 0;
 var $shl$2$i240 = 0, $shl$2$i87 = 0, $shl$3$i = 0, $shl$3$i105 = 0, $shl$3$i189 = 0, $shl$3$i258 = 0, $shr = 0, $shr$1$i = 0, $shr$1$i150 = 0, $shr$1$i219 = 0, $shr$1$i66 = 0, $shr$2$i = 0, $shr$2$i168 = 0, $shr$2$i237 = 0, $shr$2$i84 = 0, $shr$3$i = 0, $shr$3$i102 = 0, $shr$3$i186 = 0, $shr$3$i255 = 0, $shr$i = 0;
 var $shr$i120 = 0, $shr$i135 = 0, $shr$i204 = 0, $shr$i39 = 0, $shr$i51 = 0, $sub = 0, $tobool = 0, $tobool$1$i = 0, $tobool$1$i144 = 0, $tobool$1$i213 = 0, $tobool$1$i60 = 0, $tobool$2$i = 0, $tobool$2$i162 = 0, $tobool$2$i231 = 0, $tobool$2$i78 = 0, $tobool$3$i = 0, $tobool$3$i180 = 0, $tobool$3$i249 = 0, $tobool$3$i96 = 0, $tobool$i = 0;
 var $tobool$i114 = 0, $tobool$i130 = 0, $tobool$i199 = 0, $tobool$i36 = 0, $tobool$i46 = 0, $tov_cycles$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $wgm = 0, $wgm_op = 0, $wgm_op_mode_kind = 0, $wgm_op_mode_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $$sroa$0$0$$sroa_idx = ((($param)) + 152|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 $$pre = ((($avr)) + 5892|0);
 if ($tobool$i) {
  $retval$0$i = 0;
 } else {
  $0 = HEAP32[$$pre>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $conv7$i = $and$i&255;
  $retval$0$i = $conv7$i;
 }
 $cs2 = ((($param)) + 156|0);
 $bf$load$i34 = HEAP32[$cs2>>2]|0;
 $bf$clear$i35 = $bf$load$i34 & 511;
 $tobool$i36 = ($bf$clear$i35|0)==(0);
 if ($tobool$i36) {
  $res$1$i = 0;
 } else {
  $2 = HEAP32[$$pre>>2]|0;
  $arrayidx$i37 = (($2) + ($bf$clear$i35)|0);
  $3 = HEAP8[$arrayidx$i37>>0]|0;
  $conv3$i = $3&255;
  $bf$lshr$i38 = $bf$load$i34 >>> 9;
  $bf$clear5$i = $bf$lshr$i38 & 7;
  $shr$i39 = $conv3$i >>> $bf$clear5$i;
  $bf$lshr7$i = $bf$load$i34 >>> 12;
  $and$i40 = $shr$i39 & $bf$lshr7$i;
  $conv10$i = $and$i40&255;
  $res$1$i = $conv10$i;
 }
 $incdec$ptr$i = ((($param)) + 160|0);
 $bf$load$1$i = HEAP32[$incdec$ptr$i>>2]|0;
 $bf$clear$1$i = $bf$load$1$i & 511;
 $tobool$1$i = ($bf$clear$1$i|0)==(0);
 if ($tobool$1$i) {
  $res$1$1$i = $res$1$i;
 } else {
  $4 = HEAP32[$$pre>>2]|0;
  $arrayidx$1$i = (($4) + ($bf$clear$1$i)|0);
  $5 = HEAP8[$arrayidx$1$i>>0]|0;
  $conv3$1$i = $5&255;
  $bf$lshr$1$i = $bf$load$1$i >>> 9;
  $bf$clear5$1$i = $bf$lshr$1$i & 7;
  $shr$1$i = $conv3$1$i >>> $bf$clear5$1$i;
  $bf$lshr7$1$i = $bf$load$1$i >>> 12;
  $and$1$i = $shr$1$i & $bf$lshr7$1$i;
  $shl$1$i = $and$1$i << 1;
  $conv9$1$i = $res$1$i&255;
  $or$1$i = $shl$1$i | $conv9$1$i;
  $conv10$1$i = $or$1$i&255;
  $res$1$1$i = $conv10$1$i;
 }
 $incdec$ptr$1$i = ((($param)) + 164|0);
 $bf$load$2$i = HEAP32[$incdec$ptr$1$i>>2]|0;
 $bf$clear$2$i = $bf$load$2$i & 511;
 $tobool$2$i = ($bf$clear$2$i|0)==(0);
 if ($tobool$2$i) {
  $res$1$2$i = $res$1$1$i;
 } else {
  $6 = HEAP32[$$pre>>2]|0;
  $arrayidx$2$i = (($6) + ($bf$clear$2$i)|0);
  $7 = HEAP8[$arrayidx$2$i>>0]|0;
  $conv3$2$i = $7&255;
  $bf$lshr$2$i = $bf$load$2$i >>> 9;
  $bf$clear5$2$i = $bf$lshr$2$i & 7;
  $shr$2$i = $conv3$2$i >>> $bf$clear5$2$i;
  $bf$lshr7$2$i = $bf$load$2$i >>> 12;
  $and$2$i = $shr$2$i & $bf$lshr7$2$i;
  $shl$2$i = $and$2$i << 2;
  $conv9$2$i = $res$1$1$i&255;
  $or$2$i = $shl$2$i | $conv9$2$i;
  $conv10$2$i = $or$2$i&255;
  $res$1$2$i = $conv10$2$i;
 }
 $incdec$ptr$2$i = ((($param)) + 168|0);
 $bf$load$3$i = HEAP32[$incdec$ptr$2$i>>2]|0;
 $bf$clear$3$i = $bf$load$3$i & 511;
 $tobool$3$i = ($bf$clear$3$i|0)==(0);
 if ($tobool$3$i) {
  $res$1$3$i = $res$1$2$i;
 } else {
  $8 = HEAP32[$$pre>>2]|0;
  $arrayidx$3$i = (($8) + ($bf$clear$3$i)|0);
  $9 = HEAP8[$arrayidx$3$i>>0]|0;
  $conv3$3$i = $9&255;
  $bf$lshr$3$i = $bf$load$3$i >>> 9;
  $bf$clear5$3$i = $bf$lshr$3$i & 7;
  $shr$3$i = $conv3$3$i >>> $bf$clear5$3$i;
  $bf$lshr7$3$i = $bf$load$3$i >>> 12;
  $and$3$i = $shr$3$i & $bf$lshr7$3$i;
  $shl$3$i = $and$3$i << 3;
  $conv9$3$i = $res$1$2$i&255;
  $or$3$i = $shl$3$i | $conv9$3$i;
  $conv10$3$i = $or$3$i&255;
  $res$1$3$i = $conv10$3$i;
 }
 $wgm = ((($param)) + 60|0);
 $bf$load$i44 = HEAP32[$wgm>>2]|0;
 $bf$clear$i45 = $bf$load$i44 & 511;
 $tobool$i46 = ($bf$clear$i45|0)==(0);
 if ($tobool$i46) {
  $res$1$i56 = 0;
 } else {
  $10 = HEAP32[$$pre>>2]|0;
  $arrayidx$i47 = (($10) + ($bf$clear$i45)|0);
  $11 = HEAP8[$arrayidx$i47>>0]|0;
  $conv3$i48 = $11&255;
  $bf$lshr$i49 = $bf$load$i44 >>> 9;
  $bf$clear5$i50 = $bf$lshr$i49 & 7;
  $shr$i51 = $conv3$i48 >>> $bf$clear5$i50;
  $bf$lshr7$i52 = $bf$load$i44 >>> 12;
  $and$i53 = $shr$i51 & $bf$lshr7$i52;
  $conv10$i54 = $and$i53&255;
  $res$1$i56 = $conv10$i54;
 }
 $incdec$ptr$i57 = ((($param)) + 64|0);
 $bf$load$1$i58 = HEAP32[$incdec$ptr$i57>>2]|0;
 $bf$clear$1$i59 = $bf$load$1$i58 & 511;
 $tobool$1$i60 = ($bf$clear$1$i59|0)==(0);
 if ($tobool$1$i60) {
  $res$1$1$i74 = $res$1$i56;
 } else {
  $12 = HEAP32[$$pre>>2]|0;
  $arrayidx$1$i62 = (($12) + ($bf$clear$1$i59)|0);
  $13 = HEAP8[$arrayidx$1$i62>>0]|0;
  $conv3$1$i63 = $13&255;
  $bf$lshr$1$i64 = $bf$load$1$i58 >>> 9;
  $bf$clear5$1$i65 = $bf$lshr$1$i64 & 7;
  $shr$1$i66 = $conv3$1$i63 >>> $bf$clear5$1$i65;
  $bf$lshr7$1$i67 = $bf$load$1$i58 >>> 12;
  $and$1$i68 = $shr$1$i66 & $bf$lshr7$1$i67;
  $shl$1$i69 = $and$1$i68 << 1;
  $conv9$1$i70 = $res$1$i56&255;
  $or$1$i71 = $shl$1$i69 | $conv9$1$i70;
  $conv10$1$i72 = $or$1$i71&255;
  $res$1$1$i74 = $conv10$1$i72;
 }
 $incdec$ptr$1$i75 = ((($param)) + 68|0);
 $bf$load$2$i76 = HEAP32[$incdec$ptr$1$i75>>2]|0;
 $bf$clear$2$i77 = $bf$load$2$i76 & 511;
 $tobool$2$i78 = ($bf$clear$2$i77|0)==(0);
 if ($tobool$2$i78) {
  $res$1$2$i92 = $res$1$1$i74;
 } else {
  $14 = HEAP32[$$pre>>2]|0;
  $arrayidx$2$i80 = (($14) + ($bf$clear$2$i77)|0);
  $15 = HEAP8[$arrayidx$2$i80>>0]|0;
  $conv3$2$i81 = $15&255;
  $bf$lshr$2$i82 = $bf$load$2$i76 >>> 9;
  $bf$clear5$2$i83 = $bf$lshr$2$i82 & 7;
  $shr$2$i84 = $conv3$2$i81 >>> $bf$clear5$2$i83;
  $bf$lshr7$2$i85 = $bf$load$2$i76 >>> 12;
  $and$2$i86 = $shr$2$i84 & $bf$lshr7$2$i85;
  $shl$2$i87 = $and$2$i86 << 2;
  $conv9$2$i88 = $res$1$1$i74&255;
  $or$2$i89 = $shl$2$i87 | $conv9$2$i88;
  $conv10$2$i90 = $or$2$i89&255;
  $res$1$2$i92 = $conv10$2$i90;
 }
 $incdec$ptr$2$i93 = ((($param)) + 72|0);
 $bf$load$3$i94 = HEAP32[$incdec$ptr$2$i93>>2]|0;
 $bf$clear$3$i95 = $bf$load$3$i94 & 511;
 $tobool$3$i96 = ($bf$clear$3$i95|0)==(0);
 if ($tobool$3$i96) {
  $res$1$3$i110 = $res$1$2$i92;
 } else {
  $16 = HEAP32[$$pre>>2]|0;
  $arrayidx$3$i98 = (($16) + ($bf$clear$3$i95)|0);
  $17 = HEAP8[$arrayidx$3$i98>>0]|0;
  $conv3$3$i99 = $17&255;
  $bf$lshr$3$i100 = $bf$load$3$i94 >>> 9;
  $bf$clear5$3$i101 = $bf$lshr$3$i100 & 7;
  $shr$3$i102 = $conv3$3$i99 >>> $bf$clear5$3$i101;
  $bf$lshr7$3$i103 = $bf$load$3$i94 >>> 12;
  $and$3$i104 = $shr$3$i102 & $bf$lshr7$3$i103;
  $shl$3$i105 = $and$3$i104 << 3;
  $conv9$3$i106 = $res$1$2$i92&255;
  $or$3$i107 = $shl$3$i105 | $conv9$3$i106;
  $conv10$3$i108 = $or$3$i107&255;
  $res$1$3$i110 = $conv10$3$i108;
 }
 _avr_core_watch_write($avr,$addr,$v);
 $$sroa$0267$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i113 = $$sroa$0267$0$copyload & 511;
 $tobool$i114 = ($bf$clear$i113|0)==(0);
 if ($tobool$i114) {
  $retval$0$i125 = 0;
 } else {
  $18 = HEAP32[$$pre>>2]|0;
  $arrayidx$i116 = (($18) + ($bf$clear$i113)|0);
  $19 = HEAP8[$arrayidx$i116>>0]|0;
  $conv1$i117 = $19&255;
  $bf$lshr$i118 = $$sroa$0267$0$copyload >>> 9;
  $bf$clear3$i119 = $bf$lshr$i118 & 7;
  $shr$i120 = $conv1$i117 >>> $bf$clear3$i119;
  $bf$lshr5$i121 = $$sroa$0267$0$copyload >>> 12;
  $and$i122 = $shr$i120 & $bf$lshr5$i121;
  $conv7$i123 = $and$i122&255;
  $retval$0$i125 = $conv7$i123;
 }
 $bf$load$i128 = HEAP32[$cs2>>2]|0;
 $bf$clear$i129 = $bf$load$i128 & 511;
 $tobool$i130 = ($bf$clear$i129|0)==(0);
 if ($tobool$i130) {
  $res$1$i140 = 0;
 } else {
  $20 = HEAP32[$$pre>>2]|0;
  $arrayidx$i131 = (($20) + ($bf$clear$i129)|0);
  $21 = HEAP8[$arrayidx$i131>>0]|0;
  $conv3$i132 = $21&255;
  $bf$lshr$i133 = $bf$load$i128 >>> 9;
  $bf$clear5$i134 = $bf$lshr$i133 & 7;
  $shr$i135 = $conv3$i132 >>> $bf$clear5$i134;
  $bf$lshr7$i136 = $bf$load$i128 >>> 12;
  $and$i137 = $shr$i135 & $bf$lshr7$i136;
  $conv10$i138 = $and$i137&255;
  $res$1$i140 = $conv10$i138;
 }
 $bf$load$1$i142 = HEAP32[$incdec$ptr$i>>2]|0;
 $bf$clear$1$i143 = $bf$load$1$i142 & 511;
 $tobool$1$i144 = ($bf$clear$1$i143|0)==(0);
 if ($tobool$1$i144) {
  $res$1$1$i158 = $res$1$i140;
 } else {
  $22 = HEAP32[$$pre>>2]|0;
  $arrayidx$1$i146 = (($22) + ($bf$clear$1$i143)|0);
  $23 = HEAP8[$arrayidx$1$i146>>0]|0;
  $conv3$1$i147 = $23&255;
  $bf$lshr$1$i148 = $bf$load$1$i142 >>> 9;
  $bf$clear5$1$i149 = $bf$lshr$1$i148 & 7;
  $shr$1$i150 = $conv3$1$i147 >>> $bf$clear5$1$i149;
  $bf$lshr7$1$i151 = $bf$load$1$i142 >>> 12;
  $and$1$i152 = $shr$1$i150 & $bf$lshr7$1$i151;
  $shl$1$i153 = $and$1$i152 << 1;
  $conv9$1$i154 = $res$1$i140&255;
  $or$1$i155 = $shl$1$i153 | $conv9$1$i154;
  $conv10$1$i156 = $or$1$i155&255;
  $res$1$1$i158 = $conv10$1$i156;
 }
 $bf$load$2$i160 = HEAP32[$incdec$ptr$1$i>>2]|0;
 $bf$clear$2$i161 = $bf$load$2$i160 & 511;
 $tobool$2$i162 = ($bf$clear$2$i161|0)==(0);
 if ($tobool$2$i162) {
  $res$1$2$i176 = $res$1$1$i158;
 } else {
  $24 = HEAP32[$$pre>>2]|0;
  $arrayidx$2$i164 = (($24) + ($bf$clear$2$i161)|0);
  $25 = HEAP8[$arrayidx$2$i164>>0]|0;
  $conv3$2$i165 = $25&255;
  $bf$lshr$2$i166 = $bf$load$2$i160 >>> 9;
  $bf$clear5$2$i167 = $bf$lshr$2$i166 & 7;
  $shr$2$i168 = $conv3$2$i165 >>> $bf$clear5$2$i167;
  $bf$lshr7$2$i169 = $bf$load$2$i160 >>> 12;
  $and$2$i170 = $shr$2$i168 & $bf$lshr7$2$i169;
  $shl$2$i171 = $and$2$i170 << 2;
  $conv9$2$i172 = $res$1$1$i158&255;
  $or$2$i173 = $shl$2$i171 | $conv9$2$i172;
  $conv10$2$i174 = $or$2$i173&255;
  $res$1$2$i176 = $conv10$2$i174;
 }
 $bf$load$3$i178 = HEAP32[$incdec$ptr$2$i>>2]|0;
 $bf$clear$3$i179 = $bf$load$3$i178 & 511;
 $tobool$3$i180 = ($bf$clear$3$i179|0)==(0);
 if ($tobool$3$i180) {
  $res$1$3$i194 = $res$1$2$i176;
 } else {
  $26 = HEAP32[$$pre>>2]|0;
  $arrayidx$3$i182 = (($26) + ($bf$clear$3$i179)|0);
  $27 = HEAP8[$arrayidx$3$i182>>0]|0;
  $conv3$3$i183 = $27&255;
  $bf$lshr$3$i184 = $bf$load$3$i178 >>> 9;
  $bf$clear5$3$i185 = $bf$lshr$3$i184 & 7;
  $shr$3$i186 = $conv3$3$i183 >>> $bf$clear5$3$i185;
  $bf$lshr7$3$i187 = $bf$load$3$i178 >>> 12;
  $and$3$i188 = $shr$3$i186 & $bf$lshr7$3$i187;
  $shl$3$i189 = $and$3$i188 << 3;
  $conv9$3$i190 = $res$1$2$i176&255;
  $or$3$i191 = $shl$3$i189 | $conv9$3$i190;
  $conv10$3$i192 = $or$3$i191&255;
  $res$1$3$i194 = $conv10$3$i192;
 }
 $bf$load$i197 = HEAP32[$wgm>>2]|0;
 $bf$clear$i198 = $bf$load$i197 & 511;
 $tobool$i199 = ($bf$clear$i198|0)==(0);
 if ($tobool$i199) {
  $res$1$i209 = 0;
 } else {
  $28 = HEAP32[$$pre>>2]|0;
  $arrayidx$i200 = (($28) + ($bf$clear$i198)|0);
  $29 = HEAP8[$arrayidx$i200>>0]|0;
  $conv3$i201 = $29&255;
  $bf$lshr$i202 = $bf$load$i197 >>> 9;
  $bf$clear5$i203 = $bf$lshr$i202 & 7;
  $shr$i204 = $conv3$i201 >>> $bf$clear5$i203;
  $bf$lshr7$i205 = $bf$load$i197 >>> 12;
  $and$i206 = $shr$i204 & $bf$lshr7$i205;
  $conv10$i207 = $and$i206&255;
  $res$1$i209 = $conv10$i207;
 }
 $bf$load$1$i211 = HEAP32[$incdec$ptr$i57>>2]|0;
 $bf$clear$1$i212 = $bf$load$1$i211 & 511;
 $tobool$1$i213 = ($bf$clear$1$i212|0)==(0);
 if ($tobool$1$i213) {
  $res$1$1$i227 = $res$1$i209;
 } else {
  $30 = HEAP32[$$pre>>2]|0;
  $arrayidx$1$i215 = (($30) + ($bf$clear$1$i212)|0);
  $31 = HEAP8[$arrayidx$1$i215>>0]|0;
  $conv3$1$i216 = $31&255;
  $bf$lshr$1$i217 = $bf$load$1$i211 >>> 9;
  $bf$clear5$1$i218 = $bf$lshr$1$i217 & 7;
  $shr$1$i219 = $conv3$1$i216 >>> $bf$clear5$1$i218;
  $bf$lshr7$1$i220 = $bf$load$1$i211 >>> 12;
  $and$1$i221 = $shr$1$i219 & $bf$lshr7$1$i220;
  $shl$1$i222 = $and$1$i221 << 1;
  $conv9$1$i223 = $res$1$i209&255;
  $or$1$i224 = $shl$1$i222 | $conv9$1$i223;
  $conv10$1$i225 = $or$1$i224&255;
  $res$1$1$i227 = $conv10$1$i225;
 }
 $bf$load$2$i229 = HEAP32[$incdec$ptr$1$i75>>2]|0;
 $bf$clear$2$i230 = $bf$load$2$i229 & 511;
 $tobool$2$i231 = ($bf$clear$2$i230|0)==(0);
 if ($tobool$2$i231) {
  $res$1$2$i245 = $res$1$1$i227;
 } else {
  $32 = HEAP32[$$pre>>2]|0;
  $arrayidx$2$i233 = (($32) + ($bf$clear$2$i230)|0);
  $33 = HEAP8[$arrayidx$2$i233>>0]|0;
  $conv3$2$i234 = $33&255;
  $bf$lshr$2$i235 = $bf$load$2$i229 >>> 9;
  $bf$clear5$2$i236 = $bf$lshr$2$i235 & 7;
  $shr$2$i237 = $conv3$2$i234 >>> $bf$clear5$2$i236;
  $bf$lshr7$2$i238 = $bf$load$2$i229 >>> 12;
  $and$2$i239 = $shr$2$i237 & $bf$lshr7$2$i238;
  $shl$2$i240 = $and$2$i239 << 2;
  $conv9$2$i241 = $res$1$1$i227&255;
  $or$2$i242 = $shl$2$i240 | $conv9$2$i241;
  $conv10$2$i243 = $or$2$i242&255;
  $res$1$2$i245 = $conv10$2$i243;
 }
 $bf$load$3$i247 = HEAP32[$incdec$ptr$2$i93>>2]|0;
 $bf$clear$3$i248 = $bf$load$3$i247 & 511;
 $tobool$3$i249 = ($bf$clear$3$i248|0)==(0);
 if ($tobool$3$i249) {
  $res$1$3$i263 = $res$1$2$i245;
 } else {
  $34 = HEAP32[$$pre>>2]|0;
  $arrayidx$3$i251 = (($34) + ($bf$clear$3$i248)|0);
  $35 = HEAP8[$arrayidx$3$i251>>0]|0;
  $conv3$3$i252 = $35&255;
  $bf$lshr$3$i253 = $bf$load$3$i247 >>> 9;
  $bf$clear5$3$i254 = $bf$lshr$3$i253 & 7;
  $shr$3$i255 = $conv3$3$i252 >>> $bf$clear5$3$i254;
  $bf$lshr7$3$i256 = $bf$load$3$i247 >>> 12;
  $and$3$i257 = $shr$3$i255 & $bf$lshr7$3$i256;
  $shl$3$i258 = $and$3$i257 << 3;
  $conv9$3$i259 = $res$1$2$i245&255;
  $or$3$i260 = $shl$3$i258 | $conv9$3$i259;
  $conv10$3$i261 = $or$3$i260&255;
  $res$1$3$i263 = $conv10$3$i261;
 }
 $conv = $res$1$3$i194&255;
 $cmp = ($res$1$3$i194<<24>>24)==($res$1$3$i<<24>>24);
 $cmp18 = ($res$1$3$i263<<24>>24)==($res$1$3$i110<<24>>24);
 $or$cond = $cmp & $cmp18;
 $cmp23 = ($retval$0$i125<<24>>24)==($retval$0$i<<24>>24);
 $or$cond32 = $cmp23 & $or$cond;
 if ($or$cond32) {
  STACKTOP = sp;return;
 }
 $tobool = ($retval$0$i125<<24>>24)==(0);
 if ($tobool) {
  $frequency = ((($avr)) + 40|0);
  $36 = HEAP32[$frequency>>2]|0;
  $clock$0 = $36;
 } else {
  $clock$0 = 32768;
 }
 $cmp27 = ($res$1$3$i194<<24>>24)==(0);
 if ($cmp27) {
  $comp_cycles$i = ((($param)) + 280|0);
  $37 = $comp_cycles$i;
  $38 = $37;
  HEAP32[$38>>2] = 0;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = 0;
  $comp_cycles$1$i = ((($param)) + 368|0);
  $41 = $comp_cycles$1$i;
  $42 = $41;
  HEAP32[$42>>2] = 0;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = 0;
  $comp_cycles$2$i = ((($param)) + 456|0);
  $45 = $comp_cycles$2$i;
  $46 = $45;
  HEAP32[$46>>2] = 0;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = 0;
  $tov_cycles$i = ((($param)) + 592|0);
  $49 = $tov_cycles$i;
  $50 = $49;
  HEAP32[$50>>2] = 0;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = 0;
  _avr_cycle_timer_cancel($avr,136,$param);
  _avr_cycle_timer_cancel($avr,137,$param);
  _avr_cycle_timer_cancel($avr,138,$param);
  _avr_cycle_timer_cancel($avr,139,$param);
  $53 = ((($param)) + 40|0);
  $54 = HEAP8[$53>>0]|0;
  $conv30 = $54 << 24 >> 24;
  HEAP32[$vararg_buffer>>2] = 362584;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv30;
  _avr_global_logger($avr,3,362553,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $cs_div = ((($param)) + 172|0);
  $arrayidx = (($cs_div) + ($conv)|0);
  $55 = HEAP8[$arrayidx>>0]|0;
  $conv32 = $55&255;
  $shr = $clock$0 >> $conv32;
  $cs_div_clock = ((($param)) + 188|0);
  HEAP32[$cs_div_clock>>2] = $shr;
  $mode33 = ((($param)) + 140|0);
  $wgm_op = ((($param)) + 76|0);
  $idxprom34 = $res$1$3$i263&255;
  $56 = (($wgm_op) + ($idxprom34<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  HEAP32[$mode33>>2] = $57;
  $bf$lshr = $57 >>> 24;
  $wgm_op_mode_kind = ((($param)) + 144|0);
  HEAP32[$wgm_op_mode_kind>>2] = $bf$lshr;
  $bf$lshr39 = $57 >>> 16;
  $bf$clear = $bf$lshr39 & 255;
  $shl = 1 << $bf$clear;
  $sub = (($shl) + -1)|0;
  $wgm_op_mode_size = ((($param)) + 148|0);
  HEAP32[$wgm_op_mode_size>>2] = $sub;
  _avr_timer_reconfigure($param);
  STACKTOP = sp;return;
 }
}
function _avr_timer_write_pending($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$056$0$$sroa_idx = 0, $$sroa$056$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$i = 0, $and$i32 = 0, $and$i32$1 = 0;
 var $and$i32$2 = 0, $and$i47 = 0, $arrayidx$i = 0, $arrayidx$i26 = 0, $arrayidx$i26$1 = 0, $arrayidx$i26$2 = 0, $arrayidx$i41 = 0, $bf$clear$i = 0, $bf$clear$i23 = 0, $bf$clear$i23$1 = 0, $bf$clear$i23$2 = 0, $bf$clear$i38 = 0, $bf$clear3$i = 0, $bf$clear3$i29 = 0, $bf$clear3$i29$1 = 0, $bf$clear3$i29$2 = 0, $bf$clear3$i44 = 0, $bf$lshr$i = 0, $bf$lshr$i28 = 0, $bf$lshr$i28$1 = 0;
 var $bf$lshr$i28$2 = 0, $bf$lshr$i43 = 0, $bf$lshr5$i = 0, $bf$lshr5$i31 = 0, $bf$lshr5$i31$1 = 0, $bf$lshr5$i31$2 = 0, $bf$lshr5$i46 = 0, $comp = 0, $conv1$i = 0, $conv1$i27 = 0, $conv1$i27$1 = 0, $conv1$i27$2 = 0, $conv1$i42 = 0, $conv7$i = 0, $conv7$i33 = 0, $conv7$i33$1 = 0, $conv7$i33$2 = 0, $conv7$i48 = 0, $data$i = 0, $icr = 0;
 var $interrupt17$1 = 0, $interrupt17$2 = 0, $overflow = 0, $raised3 = 0, $raised3$1 = 0, $raised3$2 = 0, $raised321$sroa$0$0$copyload = 0, $raised321$sroa$0$0$copyload$1 = 0, $raised321$sroa$0$0$copyload$2 = 0, $retval$0$i = 0, $retval$0$i35$2 = 0, $retval$0$i50 = 0, $shr$i = 0, $shr$i30 = 0, $shr$i30$1 = 0, $shr$i30$2 = 0, $shr$i45 = 0, $tobool$i = 0, $tobool$i24 = 0, $tobool$i24$1 = 0;
 var $tobool$i24$2 = 0, $tobool$i39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $overflow = ((($param)) + 464|0);
 $$sroa$0$0$$sroa_idx = ((($param)) + 472|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $retval$0$i = 0;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $conv7$i = $and$i&255;
  $retval$0$i = $conv7$i;
 }
 $icr = ((($param)) + 528|0);
 $$sroa$056$0$$sroa_idx = ((($param)) + 536|0);
 $$sroa$056$0$copyload = HEAPU8[$$sroa$056$0$$sroa_idx>>0]|(HEAPU8[$$sroa$056$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$056$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$056$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i38 = $$sroa$056$0$copyload & 511;
 $tobool$i39 = ($bf$clear$i38|0)==(0);
 $$pre = ((($avr)) + 5892|0);
 if ($tobool$i39) {
  $retval$0$i50 = 0;
 } else {
  $2 = HEAP32[$$pre>>2]|0;
  $arrayidx$i41 = (($2) + ($bf$clear$i38)|0);
  $3 = HEAP8[$arrayidx$i41>>0]|0;
  $conv1$i42 = $3&255;
  $bf$lshr$i43 = $$sroa$056$0$copyload >>> 9;
  $bf$clear3$i44 = $bf$lshr$i43 & 7;
  $shr$i45 = $conv1$i42 >>> $bf$clear3$i44;
  $bf$lshr5$i46 = $$sroa$056$0$copyload >>> 12;
  $and$i47 = $shr$i45 & $bf$lshr5$i46;
  $conv7$i48 = $and$i47&255;
  $retval$0$i50 = $conv7$i48;
 }
 $comp = ((($param)) + 200|0);
 $raised3 = ((($param)) + 208|0);
 $raised321$sroa$0$0$copyload = HEAPU8[$raised3>>0]|(HEAPU8[$raised3+1>>0]<<8)|(HEAPU8[$raised3+2>>0]<<16)|(HEAPU8[$raised3+3>>0]<<24);
 $bf$clear$i23 = $raised321$sroa$0$0$copyload & 511;
 $tobool$i24 = ($bf$clear$i23|0)==(0);
 if ($tobool$i24) {
  $10 = 0;
 } else {
  $4 = HEAP32[$$pre>>2]|0;
  $arrayidx$i26 = (($4) + ($bf$clear$i23)|0);
  $5 = HEAP8[$arrayidx$i26>>0]|0;
  $conv1$i27 = $5&255;
  $bf$lshr$i28 = $raised321$sroa$0$0$copyload >>> 9;
  $bf$clear3$i29 = $bf$lshr$i28 & 7;
  $shr$i30 = $conv1$i27 >>> $bf$clear3$i29;
  $bf$lshr5$i31 = $raised321$sroa$0$0$copyload >>> 12;
  $and$i32 = $shr$i30 & $bf$lshr5$i31;
  $conv7$i33 = $and$i32&255;
  $10 = $conv7$i33;
 }
 $raised3$1 = ((($param)) + 296|0);
 $raised321$sroa$0$0$copyload$1 = HEAPU8[$raised3$1>>0]|(HEAPU8[$raised3$1+1>>0]<<8)|(HEAPU8[$raised3$1+2>>0]<<16)|(HEAPU8[$raised3$1+3>>0]<<24);
 $bf$clear$i23$1 = $raised321$sroa$0$0$copyload$1 & 511;
 $tobool$i24$1 = ($bf$clear$i23$1|0)==(0);
 if ($tobool$i24$1) {
  $11 = 0;
 } else {
  $6 = HEAP32[$$pre>>2]|0;
  $arrayidx$i26$1 = (($6) + ($bf$clear$i23$1)|0);
  $7 = HEAP8[$arrayidx$i26$1>>0]|0;
  $conv1$i27$1 = $7&255;
  $bf$lshr$i28$1 = $raised321$sroa$0$0$copyload$1 >>> 9;
  $bf$clear3$i29$1 = $bf$lshr$i28$1 & 7;
  $shr$i30$1 = $conv1$i27$1 >>> $bf$clear3$i29$1;
  $bf$lshr5$i31$1 = $raised321$sroa$0$0$copyload$1 >>> 12;
  $and$i32$1 = $shr$i30$1 & $bf$lshr5$i31$1;
  $conv7$i33$1 = $and$i32$1&255;
  $11 = $conv7$i33$1;
 }
 $raised3$2 = ((($param)) + 384|0);
 $raised321$sroa$0$0$copyload$2 = HEAPU8[$raised3$2>>0]|(HEAPU8[$raised3$2+1>>0]<<8)|(HEAPU8[$raised3$2+2>>0]<<16)|(HEAPU8[$raised3$2+3>>0]<<24);
 $bf$clear$i23$2 = $raised321$sroa$0$0$copyload$2 & 511;
 $tobool$i24$2 = ($bf$clear$i23$2|0)==(0);
 if ($tobool$i24$2) {
  $retval$0$i35$2 = 0;
  _avr_core_watch_write($avr,$addr,$v);
  (_avr_clear_interrupt_if($avr,$overflow,$retval$0$i)|0);
  (_avr_clear_interrupt_if($avr,$icr,$retval$0$i50)|0);
  (_avr_clear_interrupt_if($avr,$comp,$10)|0);
  $interrupt17$1 = ((($param)) + 288|0);
  (_avr_clear_interrupt_if($avr,$interrupt17$1,$11)|0);
  $interrupt17$2 = ((($param)) + 376|0);
  (_avr_clear_interrupt_if($avr,$interrupt17$2,$retval$0$i35$2)|0);
  return;
 }
 $8 = HEAP32[$$pre>>2]|0;
 $arrayidx$i26$2 = (($8) + ($bf$clear$i23$2)|0);
 $9 = HEAP8[$arrayidx$i26$2>>0]|0;
 $conv1$i27$2 = $9&255;
 $bf$lshr$i28$2 = $raised321$sroa$0$0$copyload$2 >>> 9;
 $bf$clear3$i29$2 = $bf$lshr$i28$2 & 7;
 $shr$i30$2 = $conv1$i27$2 >>> $bf$clear3$i29$2;
 $bf$lshr5$i31$2 = $raised321$sroa$0$0$copyload$2 >>> 12;
 $and$i32$2 = $shr$i30$2 & $bf$lshr5$i31$2;
 $conv7$i33$2 = $and$i32$2&255;
 $retval$0$i35$2 = $conv7$i33$2;
 _avr_core_watch_write($avr,$addr,$v);
 (_avr_clear_interrupt_if($avr,$overflow,$retval$0$i)|0);
 (_avr_clear_interrupt_if($avr,$icr,$retval$0$i50)|0);
 (_avr_clear_interrupt_if($avr,$comp,$10)|0);
 $interrupt17$1 = ((($param)) + 288|0);
 (_avr_clear_interrupt_if($avr,$interrupt17$1,$11)|0);
 $interrupt17$2 = ((($param)) + 376|0);
 (_avr_clear_interrupt_if($avr,$interrupt17$2,$retval$0$i35$2)|0);
 return;
}
function _avr_timer_write_ocr($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$idx$val = 0, $$idx25$val = 0, $$idx27 = 0, $$idx27$val = 0, $$idx28 = 0, $$idx28$val = 0, $$pre = 0, $$pre101 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr26 = 0, $add$ptr8 = 0, $arrayidx$i = 0, $arrayidx$i89 = 0, $arrayidx1$i = 0, $arrayidx1$i41 = 0, $arrayidx1$i58 = 0, $arrayidx1$i75 = 0, $arrayidx12$i = 0, $arrayidx12$i46 = 0, $arrayidx12$i63 = 0, $arrayidx12$i80 = 0, $arrayidx3$i = 0, $arrayidx3$i93 = 0, $avr$i = 0;
 var $avr$i54 = 0, $avr$i71$pre$phiZZ2D = 0, $avr$idx$val = 0, $avr$idx26 = 0, $avr$idx26$val = 0, $bf$clear = 0, $bf$load = 0, $bf$load31 = 0, $bf$lshr = 0, $cmp = 0, $cmp15 = 0, $cond$i = 0, $cond$i35 = 0, $cond$i50 = 0, $cond$i67 = 0, $cond$i84 = 0, $cond$i97 = 0, $conv = 0, $conv$i = 0, $conv$i30 = 0;
 var $conv$i42 = 0, $conv$i59 = 0, $conv$i76 = 0, $conv$i92 = 0, $conv1$i = 0, $conv1$i90 = 0, $conv10 = 0, $conv13$i = 0, $conv13$i47 = 0, $conv13$i64 = 0, $conv13$i81 = 0, $conv23 = 0, $conv28 = 0, $conv29 = 0, $conv4$i = 0, $conv4$i32 = 0, $conv4$i45 = 0, $conv4$i62 = 0, $conv4$i79 = 0, $conv4$i94 = 0;
 var $conv5$i = 0, $conv5$i99 = 0, $data$i = 0, $data$i38 = 0, $data$i55 = 0, $data$i72 = 0, $idxprom$i = 0, $idxprom$i29 = 0, $idxprom$i40 = 0, $idxprom$i57 = 0, $idxprom$i74 = 0, $idxprom$i88 = 0, $irq = 0, $irq20 = 0, $irq7$pre$phiZ2D = 0, $name = 0, $or$i = 0, $or$i98 = 0, $r_ocr$i = 0, $r_ocr$i39 = 0;
 var $r_ocr$i56 = 0, $r_ocr$i73 = 0, $r_ocrh$i = 0, $r_ocrh$i43 = 0, $r_ocrh$i60 = 0, $r_ocrh$i77 = 0, $shl$i = 0, $shl$i33 = 0, $shl$i48 = 0, $shl$i65 = 0, $shl$i82 = 0, $shl$i95 = 0, $timer1 = 0, $tobool$i = 0, $tobool$i31 = 0, $tobool$i44 = 0, $tobool$i61 = 0, $tobool$i78 = 0, $tobool$i91 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $wgm_op_mode_kind = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $timer1 = ((($param)) + 64|0);
 $0 = HEAP32[$timer1>>2]|0;
 $avr$idx26 = ((($avr)) + 5892|0);
 $avr$idx26$val = HEAP32[$avr$idx26>>2]|0;
 $$idx27 = ((($param)) + 68|0);
 $$idx27$val = HEAP16[$$idx27>>1]|0;
 $$idx28 = ((($param)) + 70|0);
 $$idx28$val = HEAP16[$$idx28>>1]|0;
 $idxprom$i = $$idx27$val&65535;
 $arrayidx$i = (($avr$idx26$val) + ($idxprom$i)|0);
 $1 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $1&255;
 $tobool$i = ($$idx28$val<<16>>16)==(0);
 if ($tobool$i) {
  $cond$i = 0;
 } else {
  $conv$i = $$idx28$val&65535;
  $arrayidx3$i = (($avr$idx26$val) + ($conv$i)|0);
  $2 = HEAP8[$arrayidx3$i>>0]|0;
  $conv4$i = $2&255;
  $shl$i = $conv4$i << 8;
  $cond$i = $shl$i;
 }
 $or$i = $cond$i | $conv1$i;
 $conv5$i = $or$i&65535;
 _avr_core_watch_write($avr,$addr,$v);
 $wgm_op_mode_kind = ((($0)) + 144|0);
 $3 = HEAP32[$wgm_op_mode_kind>>2]|0;
 switch ($3|0) {
 case 1:  {
  _avr_timer_reconfigure($0);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  _avr_timer_reconfigure($0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  _avr_timer_reconfigure($0);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $4 = ((($0)) + 140|0);
  $bf$load = HEAP32[$4>>2]|0;
  $bf$clear = $bf$load & 255;
  $cmp = ($bf$clear|0)==(1);
  if ($cmp) {
   _avr_timer_reconfigure($0);
   $$pre = ((($0)) + 24|0);
   $$pre101 = ((($0)) + 4|0);
   $avr$i71$pre$phiZZ2D = $$pre101;$irq7$pre$phiZ2D = $$pre;
  } else {
   $irq = ((($0)) + 24|0);
   $5 = HEAP32[$irq>>2]|0;
   $avr$i = ((($0)) + 4|0);
   $6 = HEAP32[$avr$i>>2]|0;
   $data$i = ((($6)) + 5892|0);
   $7 = HEAP32[$data$i>>2]|0;
   $r_ocr$i = ((($0)) + 268|0);
   $8 = HEAP16[$r_ocr$i>>1]|0;
   $idxprom$i29 = $8&65535;
   $arrayidx1$i = (($7) + ($idxprom$i29)|0);
   $9 = HEAP8[$arrayidx1$i>>0]|0;
   $conv$i30 = $9&255;
   $r_ocrh$i = ((($0)) + 270|0);
   $10 = HEAP16[$r_ocrh$i>>1]|0;
   $tobool$i31 = ($10<<16>>16)==(0);
   if ($tobool$i31) {
    $cond$i35 = 0;
   } else {
    $conv4$i32 = $10&65535;
    $arrayidx12$i = (($7) + ($conv4$i32)|0);
    $11 = HEAP8[$arrayidx12$i>>0]|0;
    $conv13$i = $11&255;
    $shl$i33 = $conv13$i << 8;
    $cond$i35 = $shl$i33;
   }
   $conv = $cond$i35 | $conv$i30;
   _avr_raise_irq($5,$conv);
   $avr$i71$pre$phiZZ2D = $avr$i;$irq7$pre$phiZ2D = $irq;
  }
  $12 = HEAP32[$irq7$pre$phiZ2D>>2]|0;
  $add$ptr8 = ((($12)) + 24|0);
  $13 = HEAP32[$avr$i71$pre$phiZZ2D>>2]|0;
  $data$i72 = ((($13)) + 5892|0);
  $14 = HEAP32[$data$i72>>2]|0;
  $r_ocr$i73 = ((($0)) + 356|0);
  $15 = HEAP16[$r_ocr$i73>>1]|0;
  $idxprom$i74 = $15&65535;
  $arrayidx1$i75 = (($14) + ($idxprom$i74)|0);
  $16 = HEAP8[$arrayidx1$i75>>0]|0;
  $conv$i76 = $16&255;
  $r_ocrh$i77 = ((($0)) + 358|0);
  $17 = HEAP16[$r_ocrh$i77>>1]|0;
  $tobool$i78 = ($17<<16>>16)==(0);
  if ($tobool$i78) {
   $cond$i84 = 0;
  } else {
   $conv4$i79 = $17&65535;
   $arrayidx12$i80 = (($14) + ($conv4$i79)|0);
   $18 = HEAP8[$arrayidx12$i80>>0]|0;
   $conv13$i81 = $18&255;
   $shl$i82 = $conv13$i81 << 8;
   $cond$i84 = $shl$i82;
  }
  $conv10 = $cond$i84 | $conv$i76;
  _avr_raise_irq($add$ptr8,$conv10);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $avr$idx$val = HEAP32[$avr$idx26>>2]|0;
  $$idx$val = HEAP16[$$idx27>>1]|0;
  $$idx25$val = HEAP16[$$idx28>>1]|0;
  $idxprom$i88 = $$idx$val&65535;
  $arrayidx$i89 = (($avr$idx$val) + ($idxprom$i88)|0);
  $19 = HEAP8[$arrayidx$i89>>0]|0;
  $conv1$i90 = $19&255;
  $tobool$i91 = ($$idx25$val<<16>>16)==(0);
  if ($tobool$i91) {
   $cond$i97 = 0;
  } else {
   $conv$i92 = $$idx25$val&65535;
   $arrayidx3$i93 = (($avr$idx$val) + ($conv$i92)|0);
   $20 = HEAP8[$arrayidx3$i93>>0]|0;
   $conv4$i94 = $20&255;
   $shl$i95 = $conv4$i94 << 8;
   $cond$i97 = $shl$i95;
  }
  $or$i98 = $cond$i97 | $conv1$i90;
  $conv5$i99 = $or$i98&65535;
  $cmp15 = ($conv5$i<<16>>16)==($conv5$i99<<16>>16);
  if (!($cmp15)) {
   _avr_timer_reconfigure($0);
  }
  $irq20 = ((($0)) + 24|0);
  $21 = HEAP32[$irq20>>2]|0;
  $avr$i54 = ((($0)) + 4|0);
  $22 = HEAP32[$avr$i54>>2]|0;
  $data$i55 = ((($22)) + 5892|0);
  $23 = HEAP32[$data$i55>>2]|0;
  $r_ocr$i56 = ((($0)) + 268|0);
  $24 = HEAP16[$r_ocr$i56>>1]|0;
  $idxprom$i57 = $24&65535;
  $arrayidx1$i58 = (($23) + ($idxprom$i57)|0);
  $25 = HEAP8[$arrayidx1$i58>>0]|0;
  $conv$i59 = $25&255;
  $r_ocrh$i60 = ((($0)) + 270|0);
  $26 = HEAP16[$r_ocrh$i60>>1]|0;
  $tobool$i61 = ($26<<16>>16)==(0);
  if ($tobool$i61) {
   $cond$i67 = 0;
  } else {
   $conv4$i62 = $26&65535;
   $arrayidx12$i63 = (($23) + ($conv4$i62)|0);
   $27 = HEAP8[$arrayidx12$i63>>0]|0;
   $conv13$i64 = $27&255;
   $shl$i65 = $conv13$i64 << 8;
   $cond$i67 = $shl$i65;
  }
  $conv23 = $cond$i67 | $conv$i59;
  _avr_raise_irq($21,$conv23);
  $28 = HEAP32[$irq20>>2]|0;
  $add$ptr26 = ((($28)) + 24|0);
  $29 = HEAP32[$avr$i54>>2]|0;
  $data$i38 = ((($29)) + 5892|0);
  $30 = HEAP32[$data$i38>>2]|0;
  $r_ocr$i39 = ((($0)) + 356|0);
  $31 = HEAP16[$r_ocr$i39>>1]|0;
  $idxprom$i40 = $31&65535;
  $arrayidx1$i41 = (($30) + ($idxprom$i40)|0);
  $32 = HEAP8[$arrayidx1$i41>>0]|0;
  $conv$i42 = $32&255;
  $r_ocrh$i43 = ((($0)) + 358|0);
  $33 = HEAP16[$r_ocrh$i43>>1]|0;
  $tobool$i44 = ($33<<16>>16)==(0);
  if ($tobool$i44) {
   $cond$i50 = 0;
  } else {
   $conv4$i45 = $33&65535;
   $arrayidx12$i46 = (($30) + ($conv4$i45)|0);
   $34 = HEAP8[$arrayidx12$i46>>0]|0;
   $conv13$i47 = $34&255;
   $shl$i48 = $conv13$i47 << 8;
   $cond$i50 = $shl$i48;
  }
  $conv28 = $cond$i50 | $conv$i42;
  _avr_raise_irq($add$ptr26,$conv28);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $name = ((($0)) + 40|0);
  $35 = HEAP8[$name>>0]|0;
  $conv29 = $35 << 24 >> 24;
  $36 = ((($0)) + 140|0);
  $bf$load31 = HEAP32[$36>>2]|0;
  $bf$lshr = $bf$load31 >>> 24;
  HEAP32[$vararg_buffer>>2] = 362299;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv29;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $bf$lshr;
  _avr_global_logger($avr,2,362265,$vararg_buffer);
  _avr_timer_reconfigure($0);
  STACKTOP = sp;return;
 }
 }
}
function _avr_timer_tcnt_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$idx = 0, $$idx$val = 0, $$idx$val$idx = 0, $$idx$val$idx$val = 0, $$idx20 = 0, $$idx20$val = 0, $$idx21 = 0, $$idx21$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$i = 0, $arrayidx7$i = 0, $cmp = 0, $cond$i = 0, $conv$i = 0, $conv1$i = 0, $conv8$i = 0, $conv9$i = 0, $conv9$i$mask = 0, $cycle = 0, $idxprom$i = 0, $or$i = 0, $shl$i = 0, $tobool = 0, $tobool$i = 0;
 var $tov_base = 0, $tov_cycles = 0, $tov_top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $$idx = ((($param)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx20 = ((($param)) + 52|0);
 $$idx20$val = HEAP16[$$idx20>>1]|0;
 $$idx21 = ((($param)) + 56|0);
 $$idx21$val = HEAP16[$$idx21>>1]|0;
 $$idx$val$idx = ((($$idx$val)) + 5892|0);
 $$idx$val$idx$val = HEAP32[$$idx$val$idx>>2]|0;
 $idxprom$i = $$idx20$val&65535;
 $arrayidx$i = (($$idx$val$idx$val) + ($idxprom$i)|0);
 $0 = HEAP8[$arrayidx$i>>0]|0;
 $conv$i = $0&255;
 $tobool$i = ($$idx21$val<<16>>16)==(0);
 if ($tobool$i) {
  $cond$i = 0;
 } else {
  $conv1$i = $$idx21$val&65535;
  $arrayidx7$i = (($$idx$val$idx$val) + ($conv1$i)|0);
  $1 = HEAP8[$arrayidx7$i>>0]|0;
  $conv8$i = $1&255;
  $shl$i = $conv8$i << 8;
  $cond$i = $shl$i;
 }
 $or$i = $cond$i | $conv$i;
 $tov_top = ((($param)) + 608|0);
 $2 = HEAP16[$tov_top>>1]|0;
 $tobool = ($2<<16>>16)==(0);
 if ($tobool) {
  return;
 }
 $conv9$i = $or$i&65535;
 $cmp = ($2&65535)>($conv9$i&65535);
 _avr_cycle_timer_cancel($avr,136,$param);
 _avr_cycle_timer_cancel($avr,137,$param);
 _avr_cycle_timer_cancel($avr,138,$param);
 _avr_cycle_timer_cancel($avr,139,$param);
 $conv9$i$mask = $or$i & 65535;
 $3 = $cmp ? $conv9$i$mask : 0;
 $4 = $cmp ? 0 : 0;
 $tov_cycles = ((($param)) + 592|0);
 $5 = $tov_cycles;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (___muldi3(($7|0),($10|0),($3|0),($4|0))|0);
 $12 = (getTempRet0() | 0);
 $13 = HEAP16[$tov_top>>1]|0;
 $14 = $13&65535;
 $15 = (___udivdi3(($11|0),($12|0),($14|0),0)|0);
 $16 = (getTempRet0() | 0);
 $17 = ($10>>>0)>(0);
 $18 = ($7>>>0)>(1);
 $19 = ($10|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 if (!($21)) {
  return;
 }
 $22 = (_i64Subtract(($7|0),($10|0),($15|0),($16|0))|0);
 $23 = (getTempRet0() | 0);
 _avr_cycle_timer_register($avr,$22,$23,136,$param);
 $tov_base = ((($param)) + 600|0);
 $24 = $tov_base;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $cycle = ((($avr)) + 56|0);
 $28 = $cycle;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (_i64Subtract(($30|0),($33|0),($15|0),($16|0))|0);
 $35 = (getTempRet0() | 0);
 (_avr_timer_tov($avr,$34,$35,$param)|0);
 $36 = (getTempRet0() | 0);
 return;
}
function _avr_timer_tcnt_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $arrayidx = 0, $arrayidx6 = 0, $avr1$i = 0, $call7 = 0;
 var $conv$i = 0, $cycle$i = 0, $data = 0, $extract = 0, $extract$t9 = 0, $idxprom = 0, $idxprom5 = 0, $r_tcnt = 0, $r_tcnth = 0, $retval$0$i$off0 = 0, $retval$0$i$off8 = 0, $tobool = 0, $tov_base$i = 0, $tov_cycles$i = 0, $tov_top$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tov_cycles$i = ((($param)) + 592|0);
 $0 = $tov_cycles$i;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==(0);
 $7 = ($5|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  $retval$0$i$off0 = 0;$retval$0$i$off8 = 0;
 } else {
  $avr1$i = ((($param)) + 4|0);
  $9 = HEAP32[$avr1$i>>2]|0;
  $cycle$i = ((($9)) + 56|0);
  $10 = $cycle$i;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $tov_base$i = ((($param)) + 600|0);
  $16 = $tov_base$i;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (_i64Subtract(($12|0),($15|0),($18|0),($21|0))|0);
  $23 = (getTempRet0() | 0);
  $tov_top$i = ((($param)) + 608|0);
  $24 = HEAP16[$tov_top$i>>1]|0;
  $conv$i = $24&65535;
  $add$i = (($conv$i) + 1)|0;
  $25 = (___muldi3(($22|0),($23|0),($add$i|0),0)|0);
  $26 = (getTempRet0() | 0);
  $27 = (___udivdi3(($25|0),($26|0),($2|0),($5|0))|0);
  $28 = (getTempRet0() | 0);
  $29 = $27&65535;
  $30 = $27&255;
  $extract = ($29&65535) >>> 8;
  $extract$t9 = $extract&255;
  $retval$0$i$off0 = $30;$retval$0$i$off8 = $extract$t9;
 }
 $data = ((($avr)) + 5892|0);
 $31 = HEAP32[$data>>2]|0;
 $r_tcnt = ((($param)) + 52|0);
 $32 = HEAP16[$r_tcnt>>1]|0;
 $idxprom = $32&65535;
 $arrayidx = (($31) + ($idxprom)|0);
 HEAP8[$arrayidx>>0] = $retval$0$i$off0;
 $r_tcnth = ((($param)) + 56|0);
 $33 = HEAP16[$r_tcnth>>1]|0;
 $tobool = ($33<<16>>16)==(0);
 if ($tobool) {
  $call7 = (_avr_core_watch_read($avr,$addr)|0);
  return ($call7|0);
 }
 $idxprom5 = $33&65535;
 $34 = HEAP32[$data>>2]|0;
 $arrayidx6 = (($34) + ($idxprom5)|0);
 HEAP8[$arrayidx6>>0] = $retval$0$i$off8;
 $call7 = (_avr_core_watch_read($avr,$addr)|0);
 return ($call7|0);
}
function _avr_timer_tov($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and$i$i = 0, $and$i$i$1 = 0;
 var $and$i$i$2 = 0, $and$i$i$us = 0, $and$i$i$us$1 = 0, $and$i$i$us$2 = 0, $arrayidx$i$i = 0, $arrayidx$i$i$1 = 0, $arrayidx$i$i$2 = 0, $arrayidx$i$i$us = 0, $arrayidx$i$i$us$1 = 0, $arrayidx$i$i$us$2 = 0, $arrayidx5$i = 0, $arrayidx5$i$1 = 0, $arrayidx5$i$2 = 0, $arrayidx5$i$us = 0, $arrayidx5$i$us$1 = 0, $arrayidx5$i$us$2 = 0, $avr1$i = 0, $avr1$i32 = 0, $bf$clear$i$i = 0, $bf$clear$i$i$1 = 0;
 var $bf$clear$i$i$2 = 0, $bf$clear$i$i$us = 0, $bf$clear$i$i$us$1 = 0, $bf$clear$i$i$us$2 = 0, $bf$clear3$i$i = 0, $bf$clear3$i$i$1 = 0, $bf$clear3$i$i$2 = 0, $bf$clear3$i$i$us = 0, $bf$clear3$i$i$us$1 = 0, $bf$clear3$i$i$us$2 = 0, $bf$lshr$i$i = 0, $bf$lshr$i$i$1 = 0, $bf$lshr$i$i$2 = 0, $bf$lshr$i$i$us = 0, $bf$lshr$i$i$us$1 = 0, $bf$lshr$i$i$us$2 = 0, $bf$lshr5$i$i = 0, $bf$lshr5$i$i$1 = 0, $bf$lshr5$i$i$2 = 0, $bf$lshr5$i$i$us = 0;
 var $bf$lshr5$i$i$us$1 = 0, $bf$lshr5$i$i$us$2 = 0, $com$i = 0, $com$i$1 = 0, $com$i$2 = 0, $com$i$us = 0, $com$i$us$1 = 0, $com$i$us$2 = 0, $com1$sroa$0$0$copyload$i = 0, $com1$sroa$0$0$copyload$i$1 = 0, $com1$sroa$0$0$copyload$i$2 = 0, $com1$sroa$0$0$copyload$i$us = 0, $com1$sroa$0$0$copyload$i$us$1 = 0, $com1$sroa$0$0$copyload$i$us$2 = 0, $comp_cycles = 0, $comp_cycles$1 = 0, $comp_cycles$2 = 0, $comp_cycles$us = 0, $comp_cycles$us$1 = 0, $comp_cycles$us$2 = 0;
 var $conv1$i$i = 0, $conv1$i$i$1 = 0, $conv1$i$i$2 = 0, $conv1$i$i$us = 0, $conv1$i$i$us$1 = 0, $conv1$i$i$us$2 = 0, $conv7$i$i = 0, $conv7$i$i$1 = 0, $conv7$i$i$2 = 0, $conv7$i$i$us = 0, $conv7$i$i$us$1 = 0, $conv7$i$i$us$2 = 0, $data$i$i = 0, $data$i$i$1 = 0, $data$i$i$2 = 0, $data$i$i$us = 0, $data$i$i$us$1 = 0, $data$i$i$us$2 = 0, $irq4$i = 0, $irq4$i33 = 0;
 var $overflow = 0, $shr$i$i = 0, $shr$i$i$1 = 0, $shr$i$i$2 = 0, $shr$i$i$us = 0, $shr$i$i$us$1 = 0, $shr$i$i$us$2 = 0, $tobool$i$i = 0, $tobool$i$i$1 = 0, $tobool$i$i$2 = 0, $tobool$i$i$us = 0, $tobool$i$i$us$1 = 0, $tobool$i$i$us$2 = 0, $tov_base = 0, $tov_cycles = 0, $tov_cycles31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tov_base = ((($param)) + 600|0);
 $2 = $tov_base;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==(0);
 $9 = ($7|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  $11 = $tov_base;
  $12 = $11;
  HEAP32[$12>>2] = $0;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP32[$14>>2] = $1;
  $tov_cycles31 = ((($param)) + 592|0);
  $avr1$i32 = ((($param)) + 4|0);
  $irq4$i33 = ((($param)) + 24|0);
  $comp_cycles$us = ((($param)) + 280|0);
  $15 = $comp_cycles$us;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)==(0);
  $22 = ($20|0)==(0);
  $23 = $21 & $22;
  if (!($23)) {
   $24 = $tov_cycles31;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($20>>>0)<($29>>>0);
   $31 = ($17>>>0)<($26>>>0);
   $32 = ($20|0)==($29|0);
   $33 = $32 & $31;
   $34 = $30 | $33;
   if ($34) {
    $com$i$us = ((($param)) + 272|0);
    $com1$sroa$0$0$copyload$i$us = HEAPU8[$com$i$us>>0]|(HEAPU8[$com$i$us+1>>0]<<8)|(HEAPU8[$com$i$us+2>>0]<<16)|(HEAPU8[$com$i$us+3>>0]<<24);
    $bf$clear$i$i$us = $com1$sroa$0$0$copyload$i$us & 511;
    $tobool$i$i$us = ($bf$clear$i$i$us|0)==(0);
    L6: do {
     if (!($tobool$i$i$us)) {
      $35 = HEAP32[$avr1$i32>>2]|0;
      $data$i$i$us = ((($35)) + 5892|0);
      $36 = HEAP32[$data$i$i$us>>2]|0;
      $arrayidx$i$i$us = (($36) + ($bf$clear$i$i$us)|0);
      $37 = HEAP8[$arrayidx$i$i$us>>0]|0;
      $conv1$i$i$us = $37&255;
      $bf$lshr$i$i$us = $com1$sroa$0$0$copyload$i$us >>> 9;
      $bf$clear3$i$i$us = $bf$lshr$i$i$us & 7;
      $shr$i$i$us = $conv1$i$i$us >>> $bf$clear3$i$i$us;
      $bf$lshr5$i$i$us = $com1$sroa$0$0$copyload$i$us >>> 12;
      $and$i$i$us = $shr$i$i$us & $bf$lshr5$i$i$us;
      $conv7$i$i$us = $and$i$i$us&255;
      $38 = HEAP32[$irq4$i33>>2]|0;
      $arrayidx5$i$us = ((($38)) + 48|0);
      switch ($conv7$i$i$us<<24>>24) {
      case 3:  {
       _avr_raise_irq($arrayidx5$i$us,0);
       break L6;
       break;
      }
      case 2:  {
       _avr_raise_irq($arrayidx5$i$us,1);
       break L6;
       break;
      }
      default: {
       break L6;
      }
      }
     }
    } while(0);
    $39 = $comp_cycles$us;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = (($39) + 4)|0;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    _avr_cycle_timer_register($avr,$41,$44,137,$param);
   }
  }
  $comp_cycles$us$1 = ((($param)) + 368|0);
  $45 = $comp_cycles$us$1;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)==(0);
  $52 = ($50|0)==(0);
  $53 = $51 & $52;
  if (!($53)) {
   $110 = $tov_cycles31;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $113 = (($110) + 4)|0;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = ($50>>>0)<($115>>>0);
   $117 = ($47>>>0)<($112>>>0);
   $118 = ($50|0)==($115|0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   if ($120) {
    $com$i$us$1 = ((($param)) + 360|0);
    $com1$sroa$0$0$copyload$i$us$1 = HEAPU8[$com$i$us$1>>0]|(HEAPU8[$com$i$us$1+1>>0]<<8)|(HEAPU8[$com$i$us$1+2>>0]<<16)|(HEAPU8[$com$i$us$1+3>>0]<<24);
    $bf$clear$i$i$us$1 = $com1$sroa$0$0$copyload$i$us$1 & 511;
    $tobool$i$i$us$1 = ($bf$clear$i$i$us$1|0)==(0);
    L16: do {
     if (!($tobool$i$i$us$1)) {
      $121 = HEAP32[$avr1$i32>>2]|0;
      $data$i$i$us$1 = ((($121)) + 5892|0);
      $122 = HEAP32[$data$i$i$us$1>>2]|0;
      $arrayidx$i$i$us$1 = (($122) + ($bf$clear$i$i$us$1)|0);
      $123 = HEAP8[$arrayidx$i$i$us$1>>0]|0;
      $conv1$i$i$us$1 = $123&255;
      $bf$lshr$i$i$us$1 = $com1$sroa$0$0$copyload$i$us$1 >>> 9;
      $bf$clear3$i$i$us$1 = $bf$lshr$i$i$us$1 & 7;
      $shr$i$i$us$1 = $conv1$i$i$us$1 >>> $bf$clear3$i$i$us$1;
      $bf$lshr5$i$i$us$1 = $com1$sroa$0$0$copyload$i$us$1 >>> 12;
      $and$i$i$us$1 = $shr$i$i$us$1 & $bf$lshr5$i$i$us$1;
      $conv7$i$i$us$1 = $and$i$i$us$1&255;
      $124 = HEAP32[$irq4$i33>>2]|0;
      $arrayidx5$i$us$1 = ((($124)) + 72|0);
      switch ($conv7$i$i$us$1<<24>>24) {
      case 3:  {
       _avr_raise_irq($arrayidx5$i$us$1,0);
       break L16;
       break;
      }
      case 2:  {
       _avr_raise_irq($arrayidx5$i$us$1,1);
       break L16;
       break;
      }
      default: {
       break L16;
      }
      }
     }
    } while(0);
    $125 = $comp_cycles$us$1;
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = (($125) + 4)|0;
    $129 = $128;
    $130 = HEAP32[$129>>2]|0;
    _avr_cycle_timer_register($avr,$127,$130,138,$param);
   }
  }
  $comp_cycles$us$2 = ((($param)) + 456|0);
  $131 = $comp_cycles$us$2;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = (($131) + 4)|0;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = ($133|0)==(0);
  $138 = ($136|0)==(0);
  $139 = $137 & $138;
  if ($139) {
   $68 = $tov_cycles31;
   $67 = $68;
   $69 = $67;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($67) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (_i64Add(($70|0),($73|0),($0|0),($1|0))|0);
   $75 = (getTempRet0() | 0);
   setTempRet0(($75) | 0);
   return ($74|0);
  }
  $140 = $tov_cycles31;
  $141 = $140;
  $142 = HEAP32[$141>>2]|0;
  $143 = (($140) + 4)|0;
  $144 = $143;
  $145 = HEAP32[$144>>2]|0;
  $146 = ($136>>>0)<($145>>>0);
  $147 = ($133>>>0)<($142>>>0);
  $148 = ($136|0)==($145|0);
  $149 = $148 & $147;
  $150 = $146 | $149;
  if (!($150)) {
   $68 = $tov_cycles31;
   $67 = $68;
   $69 = $67;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($67) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (_i64Add(($70|0),($73|0),($0|0),($1|0))|0);
   $75 = (getTempRet0() | 0);
   setTempRet0(($75) | 0);
   return ($74|0);
  }
  $com$i$us$2 = ((($param)) + 448|0);
  $com1$sroa$0$0$copyload$i$us$2 = HEAPU8[$com$i$us$2>>0]|(HEAPU8[$com$i$us$2+1>>0]<<8)|(HEAPU8[$com$i$us$2+2>>0]<<16)|(HEAPU8[$com$i$us$2+3>>0]<<24);
  $bf$clear$i$i$us$2 = $com1$sroa$0$0$copyload$i$us$2 & 511;
  $tobool$i$i$us$2 = ($bf$clear$i$i$us$2|0)==(0);
  L29: do {
   if (!($tobool$i$i$us$2)) {
    $151 = HEAP32[$avr1$i32>>2]|0;
    $data$i$i$us$2 = ((($151)) + 5892|0);
    $152 = HEAP32[$data$i$i$us$2>>2]|0;
    $arrayidx$i$i$us$2 = (($152) + ($bf$clear$i$i$us$2)|0);
    $153 = HEAP8[$arrayidx$i$i$us$2>>0]|0;
    $conv1$i$i$us$2 = $153&255;
    $bf$lshr$i$i$us$2 = $com1$sroa$0$0$copyload$i$us$2 >>> 9;
    $bf$clear3$i$i$us$2 = $bf$lshr$i$i$us$2 & 7;
    $shr$i$i$us$2 = $conv1$i$i$us$2 >>> $bf$clear3$i$i$us$2;
    $bf$lshr5$i$i$us$2 = $com1$sroa$0$0$copyload$i$us$2 >>> 12;
    $and$i$i$us$2 = $shr$i$i$us$2 & $bf$lshr5$i$i$us$2;
    $conv7$i$i$us$2 = $and$i$i$us$2&255;
    $154 = HEAP32[$irq4$i33>>2]|0;
    $arrayidx5$i$us$2 = ((($154)) + 96|0);
    switch ($conv7$i$i$us$2<<24>>24) {
    case 3:  {
     _avr_raise_irq($arrayidx5$i$us$2,0);
     break L29;
     break;
    }
    case 2:  {
     _avr_raise_irq($arrayidx5$i$us$2,1);
     break L29;
     break;
    }
    default: {
     break L29;
    }
    }
   }
  } while(0);
  $155 = $comp_cycles$us$2;
  $156 = $155;
  $157 = HEAP32[$156>>2]|0;
  $158 = (($155) + 4)|0;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  _avr_cycle_timer_register($avr,$157,$160,139,$param);
  $68 = $tov_cycles31;
  $67 = $68;
  $69 = $67;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (_i64Add(($70|0),($73|0),($0|0),($1|0))|0);
  $75 = (getTempRet0() | 0);
  setTempRet0(($75) | 0);
  return ($74|0);
 }
 $overflow = ((($param)) + 464|0);
 (_avr_raise_interrupt($avr,$overflow)|0);
 $54 = $tov_base;
 $55 = $54;
 HEAP32[$55>>2] = $0;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = $1;
 $tov_cycles = ((($param)) + 592|0);
 $avr1$i = ((($param)) + 4|0);
 $irq4$i = ((($param)) + 24|0);
 $comp_cycles = ((($param)) + 280|0);
 $58 = $comp_cycles;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = ($60|0)==(0);
 $65 = ($63|0)==(0);
 $66 = $64 & $65;
 do {
  if (!($66)) {
   $76 = $tov_cycles;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76) + 4)|0;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($63>>>0)<($81>>>0);
   $83 = ($60>>>0)<($78>>>0);
   $84 = ($63|0)==($81|0);
   $85 = $84 & $83;
   $86 = $82 | $85;
   if (!($86)) {
    $97 = ($78|0)==($60|0);
    $98 = ($81|0)==($63|0);
    $99 = $97 & $98;
    if (!($99)) {
     break;
    }
    (_avr_timer_comp($param,$0,$1,0)|0);
    $100 = (getTempRet0() | 0);
    break;
   }
   $com$i = ((($param)) + 272|0);
   $com1$sroa$0$0$copyload$i = HEAPU8[$com$i>>0]|(HEAPU8[$com$i+1>>0]<<8)|(HEAPU8[$com$i+2>>0]<<16)|(HEAPU8[$com$i+3>>0]<<24);
   $bf$clear$i$i = $com1$sroa$0$0$copyload$i & 511;
   $tobool$i$i = ($bf$clear$i$i|0)==(0);
   L43: do {
    if (!($tobool$i$i)) {
     $87 = HEAP32[$avr1$i>>2]|0;
     $data$i$i = ((($87)) + 5892|0);
     $88 = HEAP32[$data$i$i>>2]|0;
     $arrayidx$i$i = (($88) + ($bf$clear$i$i)|0);
     $89 = HEAP8[$arrayidx$i$i>>0]|0;
     $conv1$i$i = $89&255;
     $bf$lshr$i$i = $com1$sroa$0$0$copyload$i >>> 9;
     $bf$clear3$i$i = $bf$lshr$i$i & 7;
     $shr$i$i = $conv1$i$i >>> $bf$clear3$i$i;
     $bf$lshr5$i$i = $com1$sroa$0$0$copyload$i >>> 12;
     $and$i$i = $shr$i$i & $bf$lshr5$i$i;
     $conv7$i$i = $and$i$i&255;
     $90 = HEAP32[$irq4$i>>2]|0;
     $arrayidx5$i = ((($90)) + 48|0);
     switch ($conv7$i$i<<24>>24) {
     case 3:  {
      _avr_raise_irq($arrayidx5$i,0);
      break L43;
      break;
     }
     case 2:  {
      _avr_raise_irq($arrayidx5$i,1);
      break L43;
      break;
     }
     default: {
      break L43;
     }
     }
    }
   } while(0);
   $91 = $comp_cycles;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + 4)|0;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   _avr_cycle_timer_register($avr,$93,$96,137,$param);
  }
 } while(0);
 $comp_cycles$1 = ((($param)) + 368|0);
 $101 = $comp_cycles$1;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 $104 = (($101) + 4)|0;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = ($103|0)==(0);
 $108 = ($106|0)==(0);
 $109 = $107 & $108;
 do {
  if (!($109)) {
   $161 = $tov_cycles;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = (($161) + 4)|0;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   $167 = ($106>>>0)<($166>>>0);
   $168 = ($103>>>0)<($163>>>0);
   $169 = ($106|0)==($166|0);
   $170 = $169 & $168;
   $171 = $167 | $170;
   if (!($171)) {
    $172 = ($163|0)==($103|0);
    $173 = ($166|0)==($106|0);
    $174 = $172 & $173;
    if (!($174)) {
     break;
    }
    (_avr_timer_comp($param,$0,$1,1)|0);
    $175 = (getTempRet0() | 0);
    break;
   }
   $com$i$1 = ((($param)) + 360|0);
   $com1$sroa$0$0$copyload$i$1 = HEAPU8[$com$i$1>>0]|(HEAPU8[$com$i$1+1>>0]<<8)|(HEAPU8[$com$i$1+2>>0]<<16)|(HEAPU8[$com$i$1+3>>0]<<24);
   $bf$clear$i$i$1 = $com1$sroa$0$0$copyload$i$1 & 511;
   $tobool$i$i$1 = ($bf$clear$i$i$1|0)==(0);
   L56: do {
    if (!($tobool$i$i$1)) {
     $176 = HEAP32[$avr1$i>>2]|0;
     $data$i$i$1 = ((($176)) + 5892|0);
     $177 = HEAP32[$data$i$i$1>>2]|0;
     $arrayidx$i$i$1 = (($177) + ($bf$clear$i$i$1)|0);
     $178 = HEAP8[$arrayidx$i$i$1>>0]|0;
     $conv1$i$i$1 = $178&255;
     $bf$lshr$i$i$1 = $com1$sroa$0$0$copyload$i$1 >>> 9;
     $bf$clear3$i$i$1 = $bf$lshr$i$i$1 & 7;
     $shr$i$i$1 = $conv1$i$i$1 >>> $bf$clear3$i$i$1;
     $bf$lshr5$i$i$1 = $com1$sroa$0$0$copyload$i$1 >>> 12;
     $and$i$i$1 = $shr$i$i$1 & $bf$lshr5$i$i$1;
     $conv7$i$i$1 = $and$i$i$1&255;
     $179 = HEAP32[$irq4$i>>2]|0;
     $arrayidx5$i$1 = ((($179)) + 72|0);
     switch ($conv7$i$i$1<<24>>24) {
     case 3:  {
      _avr_raise_irq($arrayidx5$i$1,0);
      break L56;
      break;
     }
     case 2:  {
      _avr_raise_irq($arrayidx5$i$1,1);
      break L56;
      break;
     }
     default: {
      break L56;
     }
     }
    }
   } while(0);
   $180 = $comp_cycles$1;
   $181 = $180;
   $182 = HEAP32[$181>>2]|0;
   $183 = (($180) + 4)|0;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   _avr_cycle_timer_register($avr,$182,$185,138,$param);
  }
 } while(0);
 $comp_cycles$2 = ((($param)) + 456|0);
 $186 = $comp_cycles$2;
 $187 = $186;
 $188 = HEAP32[$187>>2]|0;
 $189 = (($186) + 4)|0;
 $190 = $189;
 $191 = HEAP32[$190>>2]|0;
 $192 = ($188|0)==(0);
 $193 = ($191|0)==(0);
 $194 = $192 & $193;
 if ($194) {
  $68 = $tov_cycles;
  $67 = $68;
  $69 = $67;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (_i64Add(($70|0),($73|0),($0|0),($1|0))|0);
  $75 = (getTempRet0() | 0);
  setTempRet0(($75) | 0);
  return ($74|0);
 }
 $195 = $tov_cycles;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = (($195) + 4)|0;
 $199 = $198;
 $200 = HEAP32[$199>>2]|0;
 $201 = ($191>>>0)<($200>>>0);
 $202 = ($188>>>0)<($197>>>0);
 $203 = ($191|0)==($200|0);
 $204 = $203 & $202;
 $205 = $201 | $204;
 if (!($205)) {
  $206 = ($197|0)==($188|0);
  $207 = ($200|0)==($191|0);
  $208 = $206 & $207;
  if (!($208)) {
   $68 = $tov_cycles;
   $67 = $68;
   $69 = $67;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($67) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (_i64Add(($70|0),($73|0),($0|0),($1|0))|0);
   $75 = (getTempRet0() | 0);
   setTempRet0(($75) | 0);
   return ($74|0);
  }
  (_avr_timer_comp($param,$0,$1,2)|0);
  $209 = (getTempRet0() | 0);
  $68 = $tov_cycles;
  $67 = $68;
  $69 = $67;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (_i64Add(($70|0),($73|0),($0|0),($1|0))|0);
  $75 = (getTempRet0() | 0);
  setTempRet0(($75) | 0);
  return ($74|0);
 }
 $com$i$2 = ((($param)) + 448|0);
 $com1$sroa$0$0$copyload$i$2 = HEAPU8[$com$i$2>>0]|(HEAPU8[$com$i$2+1>>0]<<8)|(HEAPU8[$com$i$2+2>>0]<<16)|(HEAPU8[$com$i$2+3>>0]<<24);
 $bf$clear$i$i$2 = $com1$sroa$0$0$copyload$i$2 & 511;
 $tobool$i$i$2 = ($bf$clear$i$i$2|0)==(0);
 L73: do {
  if (!($tobool$i$i$2)) {
   $210 = HEAP32[$avr1$i>>2]|0;
   $data$i$i$2 = ((($210)) + 5892|0);
   $211 = HEAP32[$data$i$i$2>>2]|0;
   $arrayidx$i$i$2 = (($211) + ($bf$clear$i$i$2)|0);
   $212 = HEAP8[$arrayidx$i$i$2>>0]|0;
   $conv1$i$i$2 = $212&255;
   $bf$lshr$i$i$2 = $com1$sroa$0$0$copyload$i$2 >>> 9;
   $bf$clear3$i$i$2 = $bf$lshr$i$i$2 & 7;
   $shr$i$i$2 = $conv1$i$i$2 >>> $bf$clear3$i$i$2;
   $bf$lshr5$i$i$2 = $com1$sroa$0$0$copyload$i$2 >>> 12;
   $and$i$i$2 = $shr$i$i$2 & $bf$lshr5$i$i$2;
   $conv7$i$i$2 = $and$i$i$2&255;
   $213 = HEAP32[$irq4$i>>2]|0;
   $arrayidx5$i$2 = ((($213)) + 96|0);
   switch ($conv7$i$i$2<<24>>24) {
   case 3:  {
    _avr_raise_irq($arrayidx5$i$2,0);
    break L73;
    break;
   }
   case 2:  {
    _avr_raise_irq($arrayidx5$i$2,1);
    break L73;
    break;
   }
   default: {
    break L73;
   }
   }
  }
 } while(0);
 $214 = $comp_cycles$2;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 $217 = (($214) + 4)|0;
 $218 = $217;
 $219 = HEAP32[$218>>2]|0;
 _avr_cycle_timer_register($avr,$216,$219,139,$param);
 $68 = $tov_cycles;
 $67 = $68;
 $69 = $67;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($67) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (_i64Add(($70|0),($73|0),($0|0),($1|0))|0);
 $75 = (getTempRet0() | 0);
 setTempRet0(($75) | 0);
 return ($74|0);
}
function _avr_timer_compa($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_avr_timer_comp($param,$0,$1,0)|0);
 $3 = (getTempRet0() | 0);
 setTempRet0(($3) | 0);
 return ($2|0);
}
function _avr_timer_compb($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_avr_timer_comp($param,$0,$1,1)|0);
 $3 = (getTempRet0() | 0);
 setTempRet0(($3) | 0);
 return ($2|0);
}
function _avr_timer_compc($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_avr_timer_comp($param,$0,$1,2)|0);
 $3 = (getTempRet0() | 0);
 setTempRet0(($3) | 0);
 return ($2|0);
}
function _avr_timer_comp($p,$0,$1,$comp) {
 $p = $p|0;
 $0 = $0|0;
 $1 = $1|0;
 $comp = $comp|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and$i = 0, $and$i35 = 0, $arrayidx$i = 0, $arrayidx$i29 = 0, $arrayidx9 = 0, $avr1 = 0, $bf$clear = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$clear3$i32 = 0, $bf$load = 0;
 var $bf$lshr$i = 0, $bf$lshr$i31 = 0, $bf$lshr5$i = 0, $bf$lshr5$i34 = 0, $com = 0, $com23$sroa$0$0$copyload = 0, $com_pin = 0, $comp_cycles = 0, $cond = 0, $cond27 = 0, $conv1$i = 0, $conv1$i30 = 0, $conv7$i = 0, $data$i = 0, $idxprom = 0, $interrupt = 0, $irq8 = 0, $or = 0, $shr$i = 0, $shr$i33 = 0;
 var $tobool = 0, $tobool$i = 0, $tobool20 = 0, $tobool26 = 0, $tov_cycles = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($p)) + 4|0);
 $2 = HEAP32[$avr1>>2]|0;
 $idxprom = $comp&255;
 $interrupt = (((($p)) + 200|0) + (($idxprom*88)|0)|0);
 (_avr_raise_interrupt($2,$interrupt)|0);
 $com = (((((($p)) + 200|0) + (($idxprom*88)|0)|0)) + 72|0);
 $com23$sroa$0$0$copyload = HEAPU8[$com>>0]|(HEAPU8[$com+1>>0]<<8)|(HEAPU8[$com+2>>0]<<16)|(HEAPU8[$com+3>>0]<<24);
 $bf$clear$i = $com23$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 L1: do {
  if (!($tobool$i)) {
   $data$i = ((($2)) + 5892|0);
   $3 = HEAP32[$data$i>>2]|0;
   $arrayidx$i = (($3) + ($bf$clear$i)|0);
   $4 = HEAP8[$arrayidx$i>>0]|0;
   $conv1$i = $4&255;
   $bf$lshr$i = $com23$sroa$0$0$copyload >>> 9;
   $bf$clear3$i = $bf$lshr$i & 7;
   $shr$i = $conv1$i >>> $bf$clear3$i;
   $bf$lshr5$i = $com23$sroa$0$0$copyload >>> 12;
   $and$i = $shr$i & $bf$lshr5$i;
   $conv7$i = $and$i&255;
   $irq8 = ((($p)) + 24|0);
   $5 = HEAP32[$irq8>>2]|0;
   $add = (($idxprom) + 2)|0;
   $arrayidx9 = (($5) + (($add*24)|0)|0);
   switch ($conv7$i<<24>>24) {
   case 3:  {
    _avr_raise_irq($arrayidx9,1);
    break L1;
    break;
   }
   case 1:  {
    $com_pin = (((((($p)) + 200|0) + (($idxprom*88)|0)|0)) + 76|0);
    $bf$load = HEAP32[$com_pin>>2]|0;
    $bf$clear = $bf$load & 511;
    $tobool = ($bf$clear|0)==(0);
    if ($tobool) {
     $value = (((($5) + (($add*24)|0)|0)) + 12|0);
     $7 = HEAP32[$value>>2]|0;
     $tobool26 = ($7|0)==(0);
     $cond27 = $tobool26&1;
     _avr_raise_irq($arrayidx9,$cond27);
     break L1;
    } else {
     $arrayidx$i29 = (($3) + ($bf$clear)|0);
     $6 = HEAP8[$arrayidx$i29>>0]|0;
     $conv1$i30 = $6&255;
     $bf$lshr$i31 = $bf$load >>> 9;
     $bf$clear3$i32 = $bf$lshr$i31 & 7;
     $shr$i33 = $conv1$i30 >>> $bf$clear3$i32;
     $bf$lshr5$i34 = $bf$load >>> 12;
     $and$i35 = $shr$i33 & $bf$lshr5$i34;
     $tobool20 = ($and$i35|0)==(0);
     $cond = $tobool20&1;
     $or = $cond | 256;
     _avr_raise_irq($arrayidx9,$or);
     break L1;
    }
    break;
   }
   case 2:  {
    _avr_raise_irq($arrayidx9,0);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $tov_cycles = ((($p)) + 592|0);
 $8 = $tov_cycles;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==(0);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 if ($16) {
  $comp_cycles = (((((($p)) + 200|0) + (($idxprom*88)|0)|0)) + 80|0);
  $17 = $comp_cycles;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)==(0);
  $24 = ($22|0)==(0);
  $25 = $23 & $24;
  $26 = (_i64Add(($19|0),($22|0),($0|0),($1|0))|0);
  $27 = (getTempRet0() | 0);
  $28 = $25 ? 0 : $26;
  $29 = $25 ? 0 : $27;
  setTempRet0(($29) | 0);
  return ($28|0);
 } else {
  setTempRet0((0) | 0);
  return 0;
 }
 return (0)|0;
}
function _avr_timer_reconfigure($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$1$i = 0, $and$2$i = 0, $and$3$i = 0, $and$i = 0, $arraydecay = 0, $arrayidx$1$i = 0, $arrayidx$2$i = 0;
 var $arrayidx$3$i = 0, $arrayidx$i = 0, $arrayidx$i50 = 0, $arrayidx1$i = 0, $arrayidx1$i34 = 0, $arrayidx12$i = 0, $arrayidx12$i39 = 0, $arrayidx6$i = 0, $avr1 = 0, $bf$clear = 0, $bf$clear$1$i = 0, $bf$clear$2$i = 0, $bf$clear$3$i = 0, $bf$clear$i = 0, $bf$clear5$1$i = 0, $bf$clear5$2$i = 0, $bf$clear5$3$i = 0, $bf$clear5$i = 0, $bf$load = 0, $bf$load$1$i = 0;
 var $bf$load$2$i = 0, $bf$load$3$i = 0, $bf$load$i = 0, $bf$lshr = 0, $bf$lshr$1$i = 0, $bf$lshr$2$i = 0, $bf$lshr$3$i = 0, $bf$lshr$i = 0, $bf$lshr7$1$i = 0, $bf$lshr7$2$i = 0, $bf$lshr7$3$i = 0, $bf$lshr7$i = 0, $cmp = 0, $comp_cycles$1$i = 0, $comp_cycles$2$i = 0, $comp_cycles$i = 0, $cond = 0, $cond$i = 0, $cond$i43 = 0, $cond$i55 = 0;
 var $conv = 0, $conv$i = 0, $conv$i35 = 0, $conv$i51 = 0, $conv10$1$i = 0, $conv10$2$i = 0, $conv10$3$i = 0, $conv10$i = 0, $conv13$i = 0, $conv13$i40 = 0, $conv14 = 0, $conv16 = 0, $conv23 = 0, $conv24 = 0, $conv3$1$i = 0, $conv3$2$i = 0, $conv3$3$i = 0, $conv3$i = 0, $conv4$i = 0, $conv4$i38 = 0;
 var $conv7$i = 0, $conv9$1$i = 0, $conv9$2$i = 0, $conv9$3$i = 0, $cs_div_clock = 0, $cs_div_clock18 = 0, $cs_div_clock21 = 0, $cs_div_clock4 = 0, $cs_div_clock7 = 0, $data$i = 0, $data$i28 = 0, $data$i31 = 0, $idxprom$i = 0, $idxprom$i33 = 0, $idxprom$i49 = 0, $idxprom5$i = 0, $incdec$ptr$1$i = 0, $incdec$ptr$2$i = 0, $incdec$ptr$i = 0, $name = 0;
 var $or$1$i = 0, $or$2$i = 0, $or$3$i = 0, $r_icr$i = 0, $r_icrh$i = 0, $r_ocr$i = 0, $r_ocr$i32 = 0, $r_ocrh$i = 0, $r_ocrh$i36 = 0, $r_tcnth$i = 0, $res$1$1$i = 0, $res$1$2$i = 0, $res$1$3$i = 0, $res$1$i = 0, $shl$1$i = 0, $shl$2$i = 0, $shl$3$i = 0, $shl$i = 0, $shl$i41 = 0, $shl$i53 = 0;
 var $shr$1$i = 0, $shr$2$i = 0, $shr$3$i = 0, $shr$i = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0, $tobool$i = 0, $tobool$i29 = 0, $tobool$i37 = 0, $tobool$i52 = 0, $tov_cycles$i = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $wgm_op_mode_kind = 0, $wgm_op_mode_size = 0;
 var $wgm_op_mode_size22 = 0, $wgm_op_mode_size5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $avr1 = ((($p)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $comp_cycles$i = ((($p)) + 280|0);
 $1 = $comp_cycles$i;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $comp_cycles$1$i = ((($p)) + 368|0);
 $5 = $comp_cycles$1$i;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $comp_cycles$2$i = ((($p)) + 456|0);
 $9 = $comp_cycles$2$i;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $tov_cycles$i = ((($p)) + 592|0);
 $13 = $tov_cycles$i;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 _avr_cycle_timer_cancel($0,136,$p);
 _avr_cycle_timer_cancel($0,137,$p);
 _avr_cycle_timer_cancel($0,138,$p);
 _avr_cycle_timer_cancel($0,139,$p);
 $arraydecay = ((($p)) + 60|0);
 $data$i = ((($0)) + 5892|0);
 $bf$load$i = HEAP32[$arraydecay>>2]|0;
 $bf$clear$i = $bf$load$i & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $res$1$i = 0;
 } else {
  $17 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($17) + ($bf$clear$i)|0);
  $18 = HEAP8[$arrayidx$i>>0]|0;
  $conv3$i = $18&255;
  $bf$lshr$i = $bf$load$i >>> 9;
  $bf$clear5$i = $bf$lshr$i & 7;
  $shr$i = $conv3$i >>> $bf$clear5$i;
  $bf$lshr7$i = $bf$load$i >>> 12;
  $and$i = $shr$i & $bf$lshr7$i;
  $conv10$i = $and$i&255;
  $res$1$i = $conv10$i;
 }
 $incdec$ptr$i = ((($p)) + 64|0);
 $bf$load$1$i = HEAP32[$incdec$ptr$i>>2]|0;
 $bf$clear$1$i = $bf$load$1$i & 511;
 $tobool$1$i = ($bf$clear$1$i|0)==(0);
 if ($tobool$1$i) {
  $res$1$1$i = $res$1$i;
 } else {
  $19 = HEAP32[$data$i>>2]|0;
  $arrayidx$1$i = (($19) + ($bf$clear$1$i)|0);
  $20 = HEAP8[$arrayidx$1$i>>0]|0;
  $conv3$1$i = $20&255;
  $bf$lshr$1$i = $bf$load$1$i >>> 9;
  $bf$clear5$1$i = $bf$lshr$1$i & 7;
  $shr$1$i = $conv3$1$i >>> $bf$clear5$1$i;
  $bf$lshr7$1$i = $bf$load$1$i >>> 12;
  $and$1$i = $shr$1$i & $bf$lshr7$1$i;
  $shl$1$i = $and$1$i << 1;
  $conv9$1$i = $res$1$i&255;
  $or$1$i = $shl$1$i | $conv9$1$i;
  $conv10$1$i = $or$1$i&255;
  $res$1$1$i = $conv10$1$i;
 }
 $incdec$ptr$1$i = ((($p)) + 68|0);
 $bf$load$2$i = HEAP32[$incdec$ptr$1$i>>2]|0;
 $bf$clear$2$i = $bf$load$2$i & 511;
 $tobool$2$i = ($bf$clear$2$i|0)==(0);
 if ($tobool$2$i) {
  $res$1$2$i = $res$1$1$i;
 } else {
  $21 = HEAP32[$data$i>>2]|0;
  $arrayidx$2$i = (($21) + ($bf$clear$2$i)|0);
  $22 = HEAP8[$arrayidx$2$i>>0]|0;
  $conv3$2$i = $22&255;
  $bf$lshr$2$i = $bf$load$2$i >>> 9;
  $bf$clear5$2$i = $bf$lshr$2$i & 7;
  $shr$2$i = $conv3$2$i >>> $bf$clear5$2$i;
  $bf$lshr7$2$i = $bf$load$2$i >>> 12;
  $and$2$i = $shr$2$i & $bf$lshr7$2$i;
  $shl$2$i = $and$2$i << 2;
  $conv9$2$i = $res$1$1$i&255;
  $or$2$i = $shl$2$i | $conv9$2$i;
  $conv10$2$i = $or$2$i&255;
  $res$1$2$i = $conv10$2$i;
 }
 $incdec$ptr$2$i = ((($p)) + 72|0);
 $bf$load$3$i = HEAP32[$incdec$ptr$2$i>>2]|0;
 $bf$clear$3$i = $bf$load$3$i & 511;
 $tobool$3$i = ($bf$clear$3$i|0)==(0);
 if ($tobool$3$i) {
  $res$1$3$i = $res$1$2$i;
 } else {
  $23 = HEAP32[$data$i>>2]|0;
  $arrayidx$3$i = (($23) + ($bf$clear$3$i)|0);
  $24 = HEAP8[$arrayidx$3$i>>0]|0;
  $conv3$3$i = $24&255;
  $bf$lshr$3$i = $bf$load$3$i >>> 9;
  $bf$clear5$3$i = $bf$lshr$3$i & 7;
  $shr$3$i = $conv3$3$i >>> $bf$clear5$3$i;
  $bf$lshr7$3$i = $bf$load$3$i >>> 12;
  $and$3$i = $shr$3$i & $bf$lshr7$3$i;
  $shl$3$i = $and$3$i << 3;
  $conv9$3$i = $res$1$2$i&255;
  $or$3$i = $shl$3$i | $conv9$3$i;
  $conv10$3$i = $or$3$i&255;
  $res$1$3$i = $conv10$3$i;
 }
 $25 = ((($p)) + 140|0);
 $bf$load = HEAP32[$25>>2]|0;
 $bf$lshr = $bf$load >>> 24;
 $trunc = $bf$lshr&255;
 switch ($trunc<<24>>24) {
 case 1:  {
  $cs_div_clock = ((($p)) + 188|0);
  $26 = HEAP32[$cs_div_clock>>2]|0;
  $wgm_op_mode_size = ((($p)) + 148|0);
  $27 = HEAP32[$wgm_op_mode_size>>2]|0;
  _avr_timer_configure($p,$26,$27);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $cs_div_clock4 = ((($p)) + 188|0);
  $28 = HEAP32[$cs_div_clock4>>2]|0;
  $wgm_op_mode_size5 = ((($p)) + 148|0);
  $29 = HEAP32[$wgm_op_mode_size5>>2]|0;
  _avr_timer_configure($p,$28,$29);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $cs_div_clock7 = ((($p)) + 188|0);
  $30 = HEAP32[$cs_div_clock7>>2]|0;
  $31 = HEAP32[$avr1>>2]|0;
  $data$i28 = ((($31)) + 5892|0);
  $32 = HEAP32[$data$i28>>2]|0;
  $r_ocr$i = ((($p)) + 268|0);
  $33 = HEAP16[$r_ocr$i>>1]|0;
  $idxprom$i = $33&65535;
  $arrayidx1$i = (($32) + ($idxprom$i)|0);
  $34 = HEAP8[$arrayidx1$i>>0]|0;
  $conv$i = $34&255;
  $r_ocrh$i = ((($p)) + 270|0);
  $35 = HEAP16[$r_ocrh$i>>1]|0;
  $tobool$i29 = ($35<<16>>16)==(0);
  if ($tobool$i29) {
   $cond$i = 0;
  } else {
   $conv4$i = $35&65535;
   $arrayidx12$i = (($32) + ($conv4$i)|0);
   $36 = HEAP8[$arrayidx12$i>>0]|0;
   $conv13$i = $36&255;
   $shl$i = $conv13$i << 8;
   $cond$i = $shl$i;
  }
  $conv = $cond$i | $conv$i;
  _avr_timer_configure($p,$30,$conv);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $bf$clear = $bf$load & 255;
  $cmp = ($bf$clear|0)==(1);
  $37 = HEAP32[$avr1>>2]|0;
  $data$i31 = ((($37)) + 5892|0);
  $38 = HEAP32[$data$i31>>2]|0;
  if ($cmp) {
   $r_ocr$i32 = ((($p)) + 268|0);
   $39 = HEAP16[$r_ocr$i32>>1]|0;
   $idxprom$i33 = $39&65535;
   $arrayidx1$i34 = (($38) + ($idxprom$i33)|0);
   $40 = HEAP8[$arrayidx1$i34>>0]|0;
   $conv$i35 = $40&255;
   $r_ocrh$i36 = ((($p)) + 270|0);
   $41 = HEAP16[$r_ocrh$i36>>1]|0;
   $tobool$i37 = ($41<<16>>16)==(0);
   if ($tobool$i37) {
    $cond$i43 = 0;
   } else {
    $conv4$i38 = $41&65535;
    $arrayidx12$i39 = (($38) + ($conv4$i38)|0);
    $42 = HEAP8[$arrayidx12$i39>>0]|0;
    $conv13$i40 = $42&255;
    $shl$i41 = $conv13$i40 << 8;
    $cond$i43 = $shl$i41;
   }
   $conv14 = $cond$i43 | $conv$i35;
   $cond = $conv14;
  } else {
   $r_icr$i = ((($p)) + 54|0);
   $43 = HEAP16[$r_icr$i>>1]|0;
   $idxprom$i49 = $43&65535;
   $arrayidx$i50 = (($38) + ($idxprom$i49)|0);
   $44 = HEAP8[$arrayidx$i50>>0]|0;
   $conv$i51 = $44&255;
   $r_tcnth$i = ((($p)) + 56|0);
   $45 = HEAP16[$r_tcnth$i>>1]|0;
   $tobool$i52 = ($45<<16>>16)==(0);
   if ($tobool$i52) {
    $cond$i55 = 0;
   } else {
    $r_icrh$i = ((($p)) + 58|0);
    $46 = HEAP16[$r_icrh$i>>1]|0;
    $idxprom5$i = $46&65535;
    $arrayidx6$i = (($38) + ($idxprom5$i)|0);
    $47 = HEAP8[$arrayidx6$i>>0]|0;
    $conv7$i = $47&255;
    $shl$i53 = $conv7$i << 8;
    $cond$i55 = $shl$i53;
   }
   $conv16 = $cond$i55 | $conv$i51;
   $cond = $conv16;
  }
  $cs_div_clock18 = ((($p)) + 188|0);
  $48 = HEAP32[$cs_div_clock18>>2]|0;
  _avr_timer_configure($p,$48,$cond);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $cs_div_clock21 = ((($p)) + 188|0);
  $49 = HEAP32[$cs_div_clock21>>2]|0;
  $wgm_op_mode_size22 = ((($p)) + 148|0);
  $50 = HEAP32[$wgm_op_mode_size22>>2]|0;
  _avr_timer_configure($p,$49,$50);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $name = ((($p)) + 40|0);
  $51 = HEAP8[$name>>0]|0;
  $conv23 = $51 << 24 >> 24;
  $conv24 = $res$1$3$i&255;
  HEAP32[$vararg_buffer>>2] = 362368;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $conv23;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $conv24;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $bf$lshr;
  _avr_global_logger($0,2,362319,$vararg_buffer);
  $wgm_op_mode_kind = ((($p)) + 144|0);
  $52 = HEAP32[$wgm_op_mode_kind>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $52;
  _avr_global_logger($0,2,362390,$vararg_buffer4);
  STACKTOP = sp;return;
 }
 }
}
function _avr_timer_configure($p,$clock,$top) {
 $p = $p|0;
 $clock = $clock|0;
 $top = $top|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $add = 0, $add22 = 0, $add22$1 = 0;
 var $add22$2 = 0, $and = 0, $and$1 = 0, $and$2 = 0, $and46 = 0, $and46$1 = 0, $and46$2 = 0, $arrayidx1$i = 0, $arrayidx1$i$1 = 0, $arrayidx1$i$2 = 0, $arrayidx12$i = 0, $arrayidx12$i$1 = 0, $arrayidx12$i$2 = 0, $avr = 0, $cmp35 = 0, $cmp35$1 = 0, $cmp35$2 = 0, $comp_cycles = 0, $comp_cycles$1 = 0, $comp_cycles$2 = 0;
 var $cond$i = 0, $cond$i$1 = 0, $cond$i$2 = 0, $conv = 0.0, $conv$i52 = 0, $conv$i52$1 = 0, $conv$i52$2 = 0, $conv1 = 0.0, $conv11 = 0, $conv12 = 0.0, $conv13$i = 0, $conv13$i$1 = 0, $conv13$i$2 = 0, $conv14$i = 0, $conv14$i$1 = 0, $conv14$i$2 = 0, $conv20 = 0, $conv20$1 = 0, $conv20$2 = 0, $conv23 = 0.0;
 var $conv23$1 = 0.0, $conv23$2 = 0.0, $conv3 = 0.0, $conv30 = 0, $conv30$1 = 0, $conv30$2 = 0, $conv4 = 0, $conv4$i = 0, $conv4$i$1 = 0, $conv4$i$2 = 0, $conv50 = 0, $conv50$1 = 0, $conv50$2 = 0, $conv52 = 0.0, $conv52$1 = 0.0, $conv52$2 = 0.0, $cycle = 0, $data$i = 0, $data$i$1 = 0, $data$i$2 = 0;
 var $div = 0.0, $div24 = 0.0, $div24$1 = 0.0, $div24$2 = 0.0, $div38 = 0.0, $div38$1 = 0.0, $div38$2 = 0.0, $div39 = 0.0, $div39$1 = 0.0, $div39$2 = 0.0, $div5 = 0.0, $div6 = 0.0, $frequency2 = 0, $idxprom$i = 0, $idxprom$i$1 = 0, $idxprom$i$2 = 0, $name = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0;
 var $or$i = 0, $or$i$1 = 0, $or$i$2 = 0, $r_ocr = 0, $r_ocr$1 = 0, $r_ocr$2 = 0, $r_ocrh$i = 0, $r_ocrh$i$1 = 0, $r_ocrh$i$2 = 0, $shl$i = 0, $shl$i$1 = 0, $shl$i$2 = 0, $tobool = 0, $tobool$1 = 0, $tobool$2 = 0, $tobool$i = 0, $tobool$i$1 = 0, $tobool$i$2 = 0, $tobool27 = 0, $tobool27$1 = 0;
 var $tobool27$2 = 0, $tobool34 = 0, $tobool34$1 = 0, $tobool34$2 = 0, $tobool47 = 0, $tobool47$1 = 0, $tobool47$2 = 0, $tov_base = 0, $tov_cycles = 0, $tov_top = 0, $trace = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer20 = 0, $vararg_buffer28 = 0, $vararg_buffer35 = 0, $vararg_buffer43 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr3 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer43 = sp + 160|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer28 = sp + 104|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $conv = (+($clock>>>0));
 $add = (($top) + 1)|0;
 $conv1 = (+($add>>>0));
 $div = $conv / $conv1;
 $avr = ((($p)) + 4|0);
 $0 = HEAP32[$avr>>2]|0;
 $frequency2 = ((($0)) + 40|0);
 $1 = HEAP32[$frequency2>>2]|0;
 $conv3 = (+($1>>>0));
 $tov_cycles = ((($p)) + 592|0);
 $conv4 = $top&65535;
 $tov_top = ((($p)) + 608|0);
 HEAP16[$tov_top>>1] = $conv4;
 $div5 = $conv3 / $div;
 $div6 = $div5 * 0.5;
 $2 = (~~$div6)>>>0;
 $3 = +Math_abs($div6) >= 1.0 ? $div6 > 0.0 ? (~~+Math_min(+Math_floor($div6 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($div6 - +(~~$div6 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $4 = $tov_cycles;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $name = ((($p)) + 40|0);
 $8 = HEAP8[$name>>0]|0;
 $conv11 = $8 << 24 >> 24;
 $conv12 = $div;
 $9 = (___muldi3(($2|0),($3|0),1000000,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = (___udivdi3(($9|0),($10|0),($1|0),0)|0);
 $12 = (getTempRet0() | 0);
 HEAP32[$vararg_buffer>>2] = 362465;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $conv11;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr2>>3] = $conv12;
 $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr3>>2] = $2;
 $vararg_ptr4 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr4>>2] = $11;
 _avr_global_logger($0,3,362419,$vararg_buffer);
 $trace = ((($p)) + 44|0);
 $r_ocr = ((($p)) + 268|0);
 $13 = HEAP16[$r_ocr>>1]|0;
 $tobool = ($13<<16>>16)==(0);
 if (!($tobool)) {
  $14 = HEAP32[$avr>>2]|0;
  $data$i = ((($14)) + 5892|0);
  $15 = HEAP32[$data$i>>2]|0;
  $idxprom$i = $13&65535;
  $arrayidx1$i = (($15) + ($idxprom$i)|0);
  $16 = HEAP8[$arrayidx1$i>>0]|0;
  $conv$i52 = $16&255;
  $r_ocrh$i = ((($p)) + 270|0);
  $17 = HEAP16[$r_ocrh$i>>1]|0;
  $tobool$i = ($17<<16>>16)==(0);
  if ($tobool$i) {
   $cond$i = 0;
  } else {
   $conv4$i = $17&65535;
   $arrayidx12$i = (($15) + ($conv4$i)|0);
   $18 = HEAP8[$arrayidx12$i>>0]|0;
   $conv13$i = $18&255;
   $shl$i = $conv13$i << 8;
   $cond$i = $shl$i;
  }
  $or$i = $cond$i | $conv$i52;
  $conv14$i = $or$i&65535;
  $conv20 = $or$i & 65535;
  $add22 = (($conv20) + 1)|0;
  $conv23 = (+($add22>>>0));
  $div24 = $conv / $conv23;
  $comp_cycles = ((($p)) + 280|0);
  $19 = $comp_cycles;
  $20 = $19;
  HEAP32[$20>>2] = 0;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = 0;
  $23 = HEAP32[$trace>>2]|0;
  $and = $23 & 256;
  $tobool27 = ($and|0)==(0);
  if (!($tobool27)) {
   $24 = HEAP8[$name>>0]|0;
   $conv30 = $24 << 24 >> 24;
   HEAP32[$vararg_buffer5>>2] = 362465;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $conv30;
   $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
   HEAP32[$vararg_ptr9>>2] = $clock;
   $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
   HEAP32[$vararg_ptr10>>2] = $top;
   $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
   HEAP32[$vararg_ptr11>>2] = 65;
   $vararg_ptr12 = ((($vararg_buffer5)) + 20|0);
   HEAP32[$vararg_ptr12>>2] = $conv20;
   (_printf(362485,$vararg_buffer5)|0);
  }
  $tobool34 = ($conv14$i<<16>>16)==(0);
  $cmp35 = ($conv20>>>0)>($top>>>0);
  $or$cond = $tobool34 | $cmp35;
  if (!($or$cond)) {
   $div38 = $conv3 / $div24;
   $div39 = $div38 * 0.5;
   $25 = (~~$div39)>>>0;
   $26 = +Math_abs($div39) >= 1.0 ? $div39 > 0.0 ? (~~+Math_min(+Math_floor($div39 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($div39 - +(~~$div39 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $27 = $comp_cycles;
   $28 = $27;
   HEAP32[$28>>2] = $25;
   $29 = (($27) + 4)|0;
   $30 = $29;
   HEAP32[$30>>2] = $26;
   $31 = HEAP32[$trace>>2]|0;
   $and46 = $31 & 256;
   $tobool47 = ($and46|0)==(0);
   if (!($tobool47)) {
    $conv52 = $div24;
    $32 = HEAP8[$name>>0]|0;
    $conv50 = $32 << 24 >> 24;
    HEAP32[$vararg_buffer13>>2] = 362465;
    $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
    HEAP32[$vararg_ptr16>>2] = $conv50;
    $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
    HEAP32[$vararg_ptr17>>2] = 65;
    $vararg_ptr18 = ((($vararg_buffer13)) + 16|0);
    HEAPF64[$vararg_ptr18>>3] = $conv52;
    $vararg_ptr19 = ((($vararg_buffer13)) + 24|0);
    HEAP32[$vararg_ptr19>>2] = $25;
    (_printf(362517,$vararg_buffer13)|0);
   }
  }
 }
 $r_ocr$1 = ((($p)) + 356|0);
 $33 = HEAP16[$r_ocr$1>>1]|0;
 $tobool$1 = ($33<<16>>16)==(0);
 if (!($tobool$1)) {
  $49 = HEAP32[$avr>>2]|0;
  $data$i$1 = ((($49)) + 5892|0);
  $50 = HEAP32[$data$i$1>>2]|0;
  $idxprom$i$1 = $33&65535;
  $arrayidx1$i$1 = (($50) + ($idxprom$i$1)|0);
  $51 = HEAP8[$arrayidx1$i$1>>0]|0;
  $conv$i52$1 = $51&255;
  $r_ocrh$i$1 = ((($p)) + 358|0);
  $52 = HEAP16[$r_ocrh$i$1>>1]|0;
  $tobool$i$1 = ($52<<16>>16)==(0);
  if ($tobool$i$1) {
   $cond$i$1 = 0;
  } else {
   $conv4$i$1 = $52&65535;
   $arrayidx12$i$1 = (($50) + ($conv4$i$1)|0);
   $53 = HEAP8[$arrayidx12$i$1>>0]|0;
   $conv13$i$1 = $53&255;
   $shl$i$1 = $conv13$i$1 << 8;
   $cond$i$1 = $shl$i$1;
  }
  $or$i$1 = $cond$i$1 | $conv$i52$1;
  $conv14$i$1 = $or$i$1&65535;
  $conv20$1 = $or$i$1 & 65535;
  $add22$1 = (($conv20$1) + 1)|0;
  $conv23$1 = (+($add22$1>>>0));
  $div24$1 = $conv / $conv23$1;
  $comp_cycles$1 = ((($p)) + 368|0);
  $54 = $comp_cycles$1;
  $55 = $54;
  HEAP32[$55>>2] = 0;
  $56 = (($54) + 4)|0;
  $57 = $56;
  HEAP32[$57>>2] = 0;
  $58 = HEAP32[$trace>>2]|0;
  $and$1 = $58 & 512;
  $tobool27$1 = ($and$1|0)==(0);
  if (!($tobool27$1)) {
   $59 = HEAP8[$name>>0]|0;
   $conv30$1 = $59 << 24 >> 24;
   HEAP32[$vararg_buffer20>>2] = 362465;
   $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
   HEAP32[$vararg_ptr23>>2] = $conv30$1;
   $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
   HEAP32[$vararg_ptr24>>2] = $clock;
   $vararg_ptr25 = ((($vararg_buffer20)) + 12|0);
   HEAP32[$vararg_ptr25>>2] = $top;
   $vararg_ptr26 = ((($vararg_buffer20)) + 16|0);
   HEAP32[$vararg_ptr26>>2] = 66;
   $vararg_ptr27 = ((($vararg_buffer20)) + 20|0);
   HEAP32[$vararg_ptr27>>2] = $conv20$1;
   (_printf(362485,$vararg_buffer20)|0);
  }
  $tobool34$1 = ($conv14$i$1<<16>>16)==(0);
  $cmp35$1 = ($conv20$1>>>0)>($top>>>0);
  $or$cond$1 = $tobool34$1 | $cmp35$1;
  if (!($or$cond$1)) {
   $div38$1 = $conv3 / $div24$1;
   $div39$1 = $div38$1 * 0.5;
   $60 = (~~$div39$1)>>>0;
   $61 = +Math_abs($div39$1) >= 1.0 ? $div39$1 > 0.0 ? (~~+Math_min(+Math_floor($div39$1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($div39$1 - +(~~$div39$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $62 = $comp_cycles$1;
   $63 = $62;
   HEAP32[$63>>2] = $60;
   $64 = (($62) + 4)|0;
   $65 = $64;
   HEAP32[$65>>2] = $61;
   $66 = HEAP32[$trace>>2]|0;
   $and46$1 = $66 & 512;
   $tobool47$1 = ($and46$1|0)==(0);
   if (!($tobool47$1)) {
    $conv52$1 = $div24$1;
    $67 = HEAP8[$name>>0]|0;
    $conv50$1 = $67 << 24 >> 24;
    HEAP32[$vararg_buffer28>>2] = 362465;
    $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
    HEAP32[$vararg_ptr31>>2] = $conv50$1;
    $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
    HEAP32[$vararg_ptr32>>2] = 66;
    $vararg_ptr33 = ((($vararg_buffer28)) + 16|0);
    HEAPF64[$vararg_ptr33>>3] = $conv52$1;
    $vararg_ptr34 = ((($vararg_buffer28)) + 24|0);
    HEAP32[$vararg_ptr34>>2] = $60;
    (_printf(362517,$vararg_buffer28)|0);
   }
  }
 }
 $r_ocr$2 = ((($p)) + 444|0);
 $68 = HEAP16[$r_ocr$2>>1]|0;
 $tobool$2 = ($68<<16>>16)==(0);
 if (!($tobool$2)) {
  $69 = HEAP32[$avr>>2]|0;
  $data$i$2 = ((($69)) + 5892|0);
  $70 = HEAP32[$data$i$2>>2]|0;
  $idxprom$i$2 = $68&65535;
  $arrayidx1$i$2 = (($70) + ($idxprom$i$2)|0);
  $71 = HEAP8[$arrayidx1$i$2>>0]|0;
  $conv$i52$2 = $71&255;
  $r_ocrh$i$2 = ((($p)) + 446|0);
  $72 = HEAP16[$r_ocrh$i$2>>1]|0;
  $tobool$i$2 = ($72<<16>>16)==(0);
  if ($tobool$i$2) {
   $cond$i$2 = 0;
  } else {
   $conv4$i$2 = $72&65535;
   $arrayidx12$i$2 = (($70) + ($conv4$i$2)|0);
   $73 = HEAP8[$arrayidx12$i$2>>0]|0;
   $conv13$i$2 = $73&255;
   $shl$i$2 = $conv13$i$2 << 8;
   $cond$i$2 = $shl$i$2;
  }
  $or$i$2 = $cond$i$2 | $conv$i52$2;
  $conv14$i$2 = $or$i$2&65535;
  $conv20$2 = $or$i$2 & 65535;
  $add22$2 = (($conv20$2) + 1)|0;
  $conv23$2 = (+($add22$2>>>0));
  $div24$2 = $conv / $conv23$2;
  $comp_cycles$2 = ((($p)) + 456|0);
  $74 = $comp_cycles$2;
  $75 = $74;
  HEAP32[$75>>2] = 0;
  $76 = (($74) + 4)|0;
  $77 = $76;
  HEAP32[$77>>2] = 0;
  $78 = HEAP32[$trace>>2]|0;
  $and$2 = $78 & 1024;
  $tobool27$2 = ($and$2|0)==(0);
  if (!($tobool27$2)) {
   $79 = HEAP8[$name>>0]|0;
   $conv30$2 = $79 << 24 >> 24;
   HEAP32[$vararg_buffer35>>2] = 362465;
   $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
   HEAP32[$vararg_ptr38>>2] = $conv30$2;
   $vararg_ptr39 = ((($vararg_buffer35)) + 8|0);
   HEAP32[$vararg_ptr39>>2] = $clock;
   $vararg_ptr40 = ((($vararg_buffer35)) + 12|0);
   HEAP32[$vararg_ptr40>>2] = $top;
   $vararg_ptr41 = ((($vararg_buffer35)) + 16|0);
   HEAP32[$vararg_ptr41>>2] = 67;
   $vararg_ptr42 = ((($vararg_buffer35)) + 20|0);
   HEAP32[$vararg_ptr42>>2] = $conv20$2;
   (_printf(362485,$vararg_buffer35)|0);
  }
  $tobool34$2 = ($conv14$i$2<<16>>16)==(0);
  $cmp35$2 = ($conv20$2>>>0)>($top>>>0);
  $or$cond$2 = $tobool34$2 | $cmp35$2;
  if (!($or$cond$2)) {
   $div38$2 = $conv3 / $div24$2;
   $div39$2 = $div38$2 * 0.5;
   $80 = (~~$div39$2)>>>0;
   $81 = +Math_abs($div39$2) >= 1.0 ? $div39$2 > 0.0 ? (~~+Math_min(+Math_floor($div39$2 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($div39$2 - +(~~$div39$2 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $82 = $comp_cycles$2;
   $83 = $82;
   HEAP32[$83>>2] = $80;
   $84 = (($82) + 4)|0;
   $85 = $84;
   HEAP32[$85>>2] = $81;
   $86 = HEAP32[$trace>>2]|0;
   $and46$2 = $86 & 1024;
   $tobool47$2 = ($and46$2|0)==(0);
   if (!($tobool47$2)) {
    $conv52$2 = $div24$2;
    $87 = HEAP8[$name>>0]|0;
    $conv50$2 = $87 << 24 >> 24;
    HEAP32[$vararg_buffer43>>2] = 362465;
    $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
    HEAP32[$vararg_ptr46>>2] = $conv50$2;
    $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
    HEAP32[$vararg_ptr47>>2] = 67;
    $vararg_ptr48 = ((($vararg_buffer43)) + 16|0);
    HEAPF64[$vararg_ptr48>>3] = $conv52$2;
    $vararg_ptr49 = ((($vararg_buffer43)) + 24|0);
    HEAP32[$vararg_ptr49>>2] = $80;
    (_printf(362517,$vararg_buffer43)|0);
   }
  }
 }
 $88 = $tov_cycles;
 $89 = $88;
 $35 = HEAP32[$89>>2]|0;
 $90 = (($88) + 4)|0;
 $91 = $90;
 $36 = HEAP32[$91>>2]|0;
 $92 = ($36>>>0)>(0);
 $93 = ($35>>>0)>(1);
 $94 = ($36|0)==(0);
 $95 = $94 & $93;
 $96 = $92 | $95;
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[$avr>>2]|0;
 _avr_cycle_timer_register($34,$35,$36,136,$p);
 $tov_base = ((($p)) + 600|0);
 $37 = $tov_base;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$avr>>2]|0;
 $cycle = ((($41)) + 56|0);
 $42 = $cycle;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 (_avr_timer_tov($41,$44,$47,$p)|0);
 $48 = (getTempRet0() | 0);
 STACKTOP = sp;return;
}
function _avr_timer_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx16 = 0, $arrayidx5 = 0, $arrayidx5$1 = 0, $arrayidx5$2 = 0, $arrayidx7 = 0, $avr = 0, $call = 0, $call$1 = 0;
 var $call$2 = 0, $call12 = 0, $cmp13 = 0, $cmp4 = 0, $cmp4$1 = 0, $cmp4$2 = 0, $com_pin = 0, $com_pin$1 = 0, $com_pin$2 = 0, $comp_cycles = 0, $comp_cycles$1 = 0, $comp_cycles$2 = 0, $icp = 0, $irq = 0, $req = 0, $req8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $req = sp + 36|0;
 $req8 = sp;
 $avr = ((($port)) + 4|0);
 $0 = HEAP32[$avr>>2]|0;
 _avr_cycle_timer_cancel($0,136,$port);
 _avr_cycle_timer_cancel($0,137,$port);
 _avr_cycle_timer_cancel($0,138,$port);
 _avr_cycle_timer_cancel($0,139,$port);
 $arrayidx7 = ((($req)) + 4|0);
 $irq = ((($port)) + 24|0);
 $comp_cycles = ((($port)) + 280|0);
 $1 = $comp_cycles;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ((($req)) + 4|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;HEAP32[$5+28>>2]=0|0;
 $com_pin = ((($port)) + 276|0);
 $6 = HEAP32[$com_pin>>2]|0;
 HEAP32[$req>>2] = $6;
 $7 = HEAP32[$avr>>2]|0;
 $call = (_avr_ioctl($7,1768908658,$req)|0);
 $cmp4 = ($call|0)>(0);
 if ($cmp4) {
  $8 = HEAP32[$irq>>2]|0;
  $arrayidx5 = ((($8)) + 48|0);
  $9 = HEAP32[$arrayidx7>>2]|0;
  _avr_connect_irq($arrayidx5,$9);
 }
 $comp_cycles$1 = ((($port)) + 368|0);
 $10 = $comp_cycles$1;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($req)) + 4|0);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;HEAP32[$14+20>>2]=0|0;HEAP32[$14+24>>2]=0|0;HEAP32[$14+28>>2]=0|0;
 $com_pin$1 = ((($port)) + 364|0);
 $15 = HEAP32[$com_pin$1>>2]|0;
 HEAP32[$req>>2] = $15;
 $16 = HEAP32[$avr>>2]|0;
 $call$1 = (_avr_ioctl($16,1768908658,$req)|0);
 $cmp4$1 = ($call$1|0)>(0);
 if ($cmp4$1) {
  $18 = HEAP32[$irq>>2]|0;
  $arrayidx5$1 = ((($18)) + 72|0);
  $19 = HEAP32[$arrayidx7>>2]|0;
  _avr_connect_irq($arrayidx5$1,$19);
 }
 $comp_cycles$2 = ((($port)) + 456|0);
 $20 = $comp_cycles$2;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = ((($req)) + 4|0);
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;HEAP32[$24+20>>2]=0|0;HEAP32[$24+24>>2]=0|0;HEAP32[$24+28>>2]=0|0;
 $com_pin$2 = ((($port)) + 452|0);
 $25 = HEAP32[$com_pin$2>>2]|0;
 HEAP32[$req>>2] = $25;
 $26 = HEAP32[$avr>>2]|0;
 $call$2 = (_avr_ioctl($26,1768908658,$req)|0);
 $cmp4$2 = ($call$2|0)>(0);
 if ($cmp4$2) {
  $27 = HEAP32[$irq>>2]|0;
  $arrayidx5$2 = ((($27)) + 96|0);
  $28 = HEAP32[$arrayidx7>>2]|0;
  _avr_connect_irq($arrayidx5$2,$28);
 }
 $29 = ((($req8)) + 4|0);
 ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;HEAP32[$29+16>>2]=0|0;HEAP32[$29+20>>2]=0|0;HEAP32[$29+24>>2]=0|0;HEAP32[$29+28>>2]=0|0;
 $icp = ((($port)) + 192|0);
 $30 = HEAP32[$icp>>2]|0;
 HEAP32[$req8>>2] = $30;
 $31 = HEAP32[$avr>>2]|0;
 $call12 = (_avr_ioctl($31,1768908658,$req8)|0);
 $cmp13 = ($call12|0)>(0);
 if (!($cmp13)) {
  STACKTOP = sp;return;
 }
 $arrayidx16 = ((($req8)) + 4|0);
 $17 = HEAP32[$arrayidx16>>2]|0;
 _avr_irq_register_notify($17,140,$port);
 STACKTOP = sp;return;
}
function _avr_timer_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $0 = 0, $1 = 0, $cmp = 0, $conv = 0, $name = 0, $or = 0, $res$0 = 0, $trace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $name = ((($port)) + 40|0);
 $0 = HEAP8[$name>>0]|0;
 $conv = $0 << 24 >> 24;
 $or = $conv | 1953330176;
 $cmp = ($or|0)==($ctl|0);
 if (!($cmp)) {
  $res$0 = -1;
  return ($res$0|0);
 }
 $1 = HEAP32[$io_param>>2]|0;
 $trace = ((($port)) + 44|0);
 HEAP32[$trace>>2] = $1;
 $res$0 = 0;
 return ($res$0|0);
}
function _avr_timer_irq_icp($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$i = 0, $and$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx27 = 0, $avr1 = 0, $bf$clear = 0, $bf$clear$i = 0, $bf$clear3$i = 0, $bf$load = 0, $bf$lshr$i = 0, $bf$lshr5$i = 0, $cmp = 0, $conv$i = 0, $conv1$i = 0, $cycle$i = 0, $data = 0, $data$i = 0, $extract = 0;
 var $extract$t25 = 0, $icr = 0, $idxprom = 0, $idxprom26 = 0, $mode = 0, $or$cond = 0, $or$cond2 = 0, $phitmp = 0, $r_icr = 0, $r_icrh = 0, $retval$0$i22$off0 = 0, $retval$0$i22$off8 = 0, $shr$i = 0, $tobool$i = 0, $tobool20 = 0, $tobool4 = 0, $tobool427 = 0, $tobool429 = 0, $tobool5 = 0, $tobool528 = 0;
 var $tobool530 = 0, $tov_base$i = 0, $tov_cycles$i = 0, $tov_top$i = 0, $value3 = 0, $value326 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $mode = ((($param)) + 140|0);
 $bf$load = HEAP32[$mode>>2]|0;
 $bf$clear = $bf$load & 255;
 $cmp = ($bf$clear|0)==(2);
 if ($cmp) {
  return;
 }
 $$sroa$0$0$$sroa_idx = ((($param)) + 196|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $value326 = ((($irq)) + 12|0);
  $1 = HEAP32[$value326>>2]|0;
  $tobool427 = ($1|0)==(0);
  $tobool528 = ($value|0)!=(0);
  $tobool429 = $tobool427;$tobool530 = $tobool528;
  label = 5;
 } else {
  $data$i = ((($0)) + 5892|0);
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($2) + ($bf$clear$i)|0);
  $3 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $3&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $phitmp = ($and$i|0)==(0);
  $value3 = ((($irq)) + 12|0);
  $4 = HEAP32[$value3>>2]|0;
  $tobool4 = ($4|0)==(0);
  $tobool5 = ($value|0)!=(0);
  if ($phitmp) {
   $tobool429 = $tobool4;$tobool530 = $tobool5;
   label = 5;
  } else {
   $or$cond = $tobool5 & $tobool4;
   if (!($or$cond)) {
    return;
   }
  }
 }
 if ((label|0) == 5) {
  $or$cond2 = $tobool530 | $tobool429;
  if ($or$cond2) {
   return;
  }
 }
 $tov_cycles$i = ((($param)) + 592|0);
 $5 = $tov_cycles$i;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 if ($13) {
  $retval$0$i22$off0 = 0;$retval$0$i22$off8 = 0;
 } else {
  $cycle$i = ((($0)) + 56|0);
  $14 = $cycle$i;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $tov_base$i = ((($param)) + 600|0);
  $20 = $tov_base$i;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_i64Subtract(($16|0),($19|0),($22|0),($25|0))|0);
  $27 = (getTempRet0() | 0);
  $tov_top$i = ((($param)) + 608|0);
  $28 = HEAP16[$tov_top$i>>1]|0;
  $conv$i = $28&65535;
  $add$i = (($conv$i) + 1)|0;
  $29 = (___muldi3(($26|0),($27|0),($add$i|0),0)|0);
  $30 = (getTempRet0() | 0);
  $31 = (___udivdi3(($29|0),($30|0),($7|0),($10|0))|0);
  $32 = (getTempRet0() | 0);
  $33 = $31&65535;
  $34 = $31&255;
  $extract = ($33&65535) >>> 8;
  $extract$t25 = $extract&255;
  $retval$0$i22$off0 = $34;$retval$0$i22$off8 = $extract$t25;
 }
 $data = ((($0)) + 5892|0);
 $35 = HEAP32[$data>>2]|0;
 $r_icr = ((($param)) + 54|0);
 $36 = HEAP16[$r_icr>>1]|0;
 $idxprom = $36&65535;
 $arrayidx = (($35) + ($idxprom)|0);
 HEAP8[$arrayidx>>0] = $retval$0$i22$off0;
 $r_icrh = ((($param)) + 58|0);
 $37 = HEAP16[$r_icrh>>1]|0;
 $tobool20 = ($37<<16>>16)==(0);
 if (!($tobool20)) {
  $idxprom26 = $37&65535;
  $38 = HEAP32[$data>>2]|0;
  $arrayidx27 = (($38) + ($idxprom26)|0);
  HEAP8[$arrayidx27>>0] = $retval$0$i22$off8;
 }
 $icr = ((($param)) + 528|0);
 (_avr_raise_interrupt($0,$icr)|0);
 return;
}
function _avr_watchdog_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $bf$clear = 0, $bf$load = 0, $conv = 0, $watchdog = 0, $wdce = 0, $wdrf = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=354512; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $watchdog = ((($p)) + 68|0);
 _avr_register_vector($avr,$watchdog);
 $wdce = ((($p)) + 44|0);
 $bf$load = HEAP32[$wdce>>2]|0;
 $bf$clear = $bf$load & 511;
 $conv = $bf$clear&65535;
 _avr_register_io_write($avr,$conv,141,$p);
 $wdrf = ((($p)) + 144|0);
 HEAP8[$wdrf>>0] = 0;
 return;
}
function _avr_watchdog_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$0172$0$$sroa_idx = 0, $$sroa$0172$0$copyload = 0, $$sroa$0175$0$copyload = 0, $$sroa$0178$0$$sroa_idx = 0, $$sroa$0178$0$copyload = 0, $$sroa$0187$0$$sroa_idx = 0, $$sroa$0187$0$copyload = 0, $$sroa$0190$0$copyload = 0, $$sroa$0193$0$copyload = 0, $$sroa$0196$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$1$i = 0;
 var $and$2$i = 0, $and$3$i = 0, $and$i = 0, $and$i100 = 0, $and$i127 = 0, $and$i140 = 0, $and$i151 = 0, $and$i48 = 0, $and$i60 = 0, $and$i72 = 0, $and11$i = 0, $arrayidx = 0, $arrayidx$1$i = 0, $arrayidx$2$i = 0, $arrayidx$3$i = 0, $arrayidx$i = 0, $arrayidx$i111 = 0, $arrayidx$i121 = 0, $arrayidx$i164 = 0, $arrayidx$i42 = 0;
 var $arrayidx$i58 = 0, $arrayidx$i66 = 0, $arrayidx$i87 = 0, $arrayidx$i96 = 0, $arrayidx15 = 0, $bf$clear$1$i = 0, $bf$clear$2$i = 0, $bf$clear$3$i = 0, $bf$clear$i = 0, $bf$clear$i118 = 0, $bf$clear$i133 = 0, $bf$clear$i144 = 0, $bf$clear$i155 = 0, $bf$clear$i39 = 0, $bf$clear$i54 = 0, $bf$clear$i63 = 0, $bf$clear$i94 = 0, $bf$clear2$i = 0, $bf$clear2$i106 = 0, $bf$clear2$i159 = 0;
 var $bf$clear2$i82 = 0, $bf$clear3$i = 0, $bf$clear3$i124 = 0, $bf$clear3$i137 = 0, $bf$clear3$i148 = 0, $bf$clear3$i45 = 0, $bf$clear3$i69 = 0, $bf$clear5$1$i = 0, $bf$clear5$2$i = 0, $bf$clear5$3$i = 0, $bf$clear5$i = 0, $bf$clear5$i161 = 0, $bf$clear5$i98 = 0, $bf$load$1$i = 0, $bf$load$2$i = 0, $bf$load$3$i = 0, $bf$load$i93 = 0, $bf$lshr$1$i = 0, $bf$lshr$2$i = 0, $bf$lshr$3$i = 0;
 var $bf$lshr$i = 0, $bf$lshr$i123 = 0, $bf$lshr$i136 = 0, $bf$lshr$i147 = 0, $bf$lshr$i158 = 0, $bf$lshr$i44 = 0, $bf$lshr$i56 = 0, $bf$lshr$i68 = 0, $bf$lshr$i97 = 0, $bf$lshr4$i = 0, $bf$lshr4$i160 = 0, $bf$lshr5$i = 0, $bf$lshr5$i126 = 0, $bf$lshr5$i139 = 0, $bf$lshr5$i150 = 0, $bf$lshr5$i47 = 0, $bf$lshr5$i71 = 0, $bf$lshr7$1$i = 0, $bf$lshr7$2$i = 0, $bf$lshr7$3$i = 0;
 var $bf$lshr7$i = 0, $conv$i = 0, $conv$i103 = 0, $conv$i156 = 0, $conv$i79 = 0, $conv1$i = 0, $conv1$i122 = 0, $conv1$i146 = 0, $conv1$i43 = 0, $conv1$i67 = 0, $conv10$1$i = 0, $conv10$2$i = 0, $conv10$3$i = 0, $conv10$i = 0, $conv12$i = 0, $conv3$1$i = 0, $conv3$2$i = 0, $conv3$3$i = 0, $conv3$i = 0, $conv5 = 0;
 var $conv7$i = 0, $conv7$i112 = 0, $conv7$i165 = 0, $conv7$i49 = 0, $conv7$i59 = 0, $conv7$i88 = 0, $conv9$1$i = 0, $conv9$2$i = 0, $conv9$3$i = 0, $conv9$i114 = 0, $conv9$i167 = 0, $conv9$i90 = 0, $data$i = 0, $data$i41 = 0, $data$phi$trans$insert = 0, $idxprom = 0, $incdec$ptr$1$i = 0, $incdec$ptr$2$i = 0, $incdec$ptr$i = 0, $neg$i = 0;
 var $or$1$i = 0, $or$2$i = 0, $or$3$i = 0, $or$cond = 0, $or$i = 0, $or$i113 = 0, $or$i166 = 0, $or$i89 = 0, $phitmp = 0, $res$1$1$i = 0, $res$1$2$i = 0, $res$1$3$i = 0, $res$1$i = 0, $retval$0$i = 0, $retval$0$i51 = 0, $retval$0$i75 = 0, $shl$1$i = 0, $shl$2$i = 0, $shl$3$i = 0, $shl$i = 0;
 var $shl$i109 = 0, $shl$i162 = 0, $shl$i85 = 0, $shr$1$i = 0, $shr$2$i = 0, $shr$3$i = 0, $shr$i = 0, $shr$i125 = 0, $shr$i138 = 0, $shr$i149 = 0, $shr$i46 = 0, $shr$i70 = 0, $shr$i99 = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0, $tobool$i = 0, $tobool$i104 = 0, $tobool$i119 = 0, $tobool$i134 = 0;
 var $tobool$i145 = 0, $tobool$i157 = 0, $tobool$i40 = 0, $tobool$i55 = 0, $tobool$i64 = 0, $tobool$i80 = 0, $tobool$i95 = 0, $tobool21 = 0, $tobool21200 = 0, $tobool23 = 0, $tobool23201 = 0, $tobool9 = 0, $wdp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$$sroa_idx = ((($param)) + 48|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $retval$0$i = 0;
 } else {
  $data$i = ((($avr)) + 5892|0);
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $1&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $conv7$i = $and$i&255;
  $retval$0$i = $conv7$i;
 }
 $$sroa$0172$0$$sroa_idx = ((($param)) + 72|0);
 $$sroa$0172$0$copyload = HEAPU8[$$sroa$0172$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0172$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0172$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0172$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i39 = $$sroa$0172$0$copyload & 511;
 $tobool$i40 = ($bf$clear$i39|0)==(0);
 if ($tobool$i40) {
  $retval$0$i51 = 0;
 } else {
  $data$i41 = ((($avr)) + 5892|0);
  $2 = HEAP32[$data$i41>>2]|0;
  $arrayidx$i42 = (($2) + ($bf$clear$i39)|0);
  $3 = HEAP8[$arrayidx$i42>>0]|0;
  $conv1$i43 = $3&255;
  $bf$lshr$i44 = $$sroa$0172$0$copyload >>> 9;
  $bf$clear3$i45 = $bf$lshr$i44 & 7;
  $shr$i46 = $conv1$i43 >>> $bf$clear3$i45;
  $bf$lshr5$i47 = $$sroa$0172$0$copyload >>> 12;
  $and$i48 = $shr$i46 & $bf$lshr5$i47;
  $conv7$i49 = $and$i48&255;
  $retval$0$i51 = $conv7$i49;
 }
 $$sroa$0178$0$$sroa_idx = ((($param)) + 44|0);
 $$sroa$0178$0$copyload = HEAPU8[$$sroa$0178$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0178$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0178$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0178$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i63 = $$sroa$0178$0$copyload & 511;
 $tobool$i64 = ($bf$clear$i63|0)==(0);
 $data$phi$trans$insert = ((($avr)) + 5892|0);
 $$pre = HEAP32[$data$phi$trans$insert>>2]|0;
 if ($tobool$i64) {
  $retval$0$i75 = 1;
 } else {
  $arrayidx$i66 = (($$pre) + ($bf$clear$i63)|0);
  $4 = HEAP8[$arrayidx$i66>>0]|0;
  $conv1$i67 = $4&255;
  $bf$lshr$i68 = $$sroa$0178$0$copyload >>> 9;
  $bf$clear3$i69 = $bf$lshr$i68 & 7;
  $shr$i70 = $conv1$i67 >>> $bf$clear3$i69;
  $bf$lshr5$i71 = $$sroa$0178$0$copyload >>> 12;
  $and$i72 = $shr$i70 & $bf$lshr5$i71;
  $phitmp = ($and$i72|0)==(0);
  $retval$0$i75 = $phitmp;
 }
 $5 = $retval$0$i51 | $retval$0$i;
 $6 = ($5<<24>>24)!=(0);
 $conv5 = $6&1;
 $idxprom = $addr&65535;
 $arrayidx = (($$pre) + ($idxprom)|0);
 $7 = HEAP8[$arrayidx>>0]|0;
 _avr_core_watch_write($avr,$addr,$v);
 if ($retval$0$i75) {
  $19 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx15 = (($19) + ($idxprom)|0);
  HEAP8[$arrayidx15>>0] = $7;
  $$sroa$0193$0$copyload = HEAPU8[$$sroa$0178$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0178$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0178$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0178$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i144 = $$sroa$0193$0$copyload & 511;
  $tobool$i145 = ($bf$clear$i144|0)==(0);
  $conv1$i146 = $v&255;
  $bf$lshr$i147 = $$sroa$0193$0$copyload >>> 9;
  $bf$clear3$i148 = $bf$lshr$i147 & 7;
  $shr$i149 = $conv1$i146 >>> $bf$clear3$i148;
  $bf$lshr5$i150 = $$sroa$0193$0$copyload >>> 12;
  $and$i151 = $shr$i149 & $bf$lshr5$i150;
  $$sroa$0190$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i133 = $$sroa$0190$0$copyload & 511;
  $tobool$i134 = ($bf$clear$i133|0)==(0);
  $bf$lshr$i136 = $$sroa$0190$0$copyload >>> 9;
  $bf$clear3$i137 = $bf$lshr$i136 & 7;
  $shr$i138 = $conv1$i146 >>> $bf$clear3$i137;
  $bf$lshr5$i139 = $$sroa$0190$0$copyload >>> 12;
  $and$i140 = $shr$i138 & $bf$lshr5$i139;
  $tobool21200 = ($and$i151|0)==(0);
  $tobool21 = $tobool$i145 | $tobool21200;
  $tobool23201 = ($and$i140|0)==(0);
  $tobool23 = $tobool$i134 | $tobool23201;
  $or$cond = $tobool21 | $tobool23;
  if (!($or$cond)) {
   $conv$i103 = $bf$clear$i144&65535;
   $tobool$i104 = ($conv$i103<<16>>16)==(0);
   if (!($tobool$i104)) {
    $bf$clear2$i106 = $bf$lshr5$i150 & 255;
    $shl$i109 = $bf$clear2$i106 << $bf$clear3$i148;
    $20 = HEAP32[$data$phi$trans$insert>>2]|0;
    $arrayidx$i111 = (($20) + ($bf$clear$i144)|0);
    $21 = HEAP8[$arrayidx$i111>>0]|0;
    $conv7$i112 = $21&255;
    $or$i113 = $shl$i109 | $conv7$i112;
    $conv9$i114 = $or$i113&255;
    _avr_core_watch_write($avr,$conv$i103,$conv9$i114);
   }
   _avr_cycle_timer_register($avr,4,0,142,$param);
   return;
  }
  if (!($tobool23)) {
   $conv$i79 = $bf$clear$i133&65535;
   $tobool$i80 = ($conv$i79<<16>>16)==(0);
   if (!($tobool$i80)) {
    $bf$clear2$i82 = $bf$lshr5$i139 & 255;
    $shl$i85 = $bf$clear2$i82 << $bf$clear3$i137;
    $22 = HEAP32[$data$phi$trans$insert>>2]|0;
    $arrayidx$i87 = (($22) + ($bf$clear$i133)|0);
    $23 = HEAP8[$arrayidx$i87>>0]|0;
    $conv7$i88 = $23&255;
    $or$i89 = $shl$i85 | $conv7$i88;
    $conv9$i90 = $or$i89&255;
    _avr_core_watch_write($avr,$conv$i79,$conv9$i90);
   }
  }
  $$sroa$0175$0$copyload = HEAPU8[$$sroa$0172$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0172$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0172$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0172$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i54 = $$sroa$0175$0$copyload & 511;
  $conv$i = $bf$clear$i54&65535;
  $tobool$i55 = ($conv$i<<16>>16)==(0);
  if (!($tobool$i55)) {
   $bf$lshr$i56 = $$sroa$0175$0$copyload >>> 12;
   $bf$clear2$i = $bf$lshr$i56 & 255;
   $bf$lshr4$i = $$sroa$0175$0$copyload >>> 9;
   $bf$clear5$i = $bf$lshr4$i & 7;
   $shl$i = $bf$clear2$i << $bf$clear5$i;
   $24 = HEAP32[$data$phi$trans$insert>>2]|0;
   $arrayidx$i58 = (($24) + ($bf$clear$i54)|0);
   $25 = HEAP8[$arrayidx$i58>>0]|0;
   $conv7$i59 = $25&255;
   $neg$i = $shl$i ^ 255;
   $and$i60 = $neg$i & $conv7$i59;
   $and11$i = $shl$i & $conv1$i146;
   $or$i = $and$i60 | $and11$i;
   $conv12$i = $or$i&255;
   _avr_core_watch_write($avr,$conv$i,$conv12$i);
  }
  _avr_watchdog_set_cycle_count_and_timer($avr,$param,$conv5,-1);
  return;
 }
 $wdp = ((($param)) + 52|0);
 $bf$load$i93 = HEAP32[$wdp>>2]|0;
 $bf$clear$i94 = $bf$load$i93 & 511;
 $tobool$i95 = ($bf$clear$i94|0)==(0);
 if ($tobool$i95) {
  $res$1$i = 0;
 } else {
  $8 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$i96 = (($8) + ($bf$clear$i94)|0);
  $9 = HEAP8[$arrayidx$i96>>0]|0;
  $conv3$i = $9&255;
  $bf$lshr$i97 = $bf$load$i93 >>> 9;
  $bf$clear5$i98 = $bf$lshr$i97 & 7;
  $shr$i99 = $conv3$i >>> $bf$clear5$i98;
  $bf$lshr7$i = $bf$load$i93 >>> 12;
  $and$i100 = $shr$i99 & $bf$lshr7$i;
  $conv10$i = $and$i100&255;
  $res$1$i = $conv10$i;
 }
 $incdec$ptr$i = ((($param)) + 56|0);
 $bf$load$1$i = HEAP32[$incdec$ptr$i>>2]|0;
 $bf$clear$1$i = $bf$load$1$i & 511;
 $tobool$1$i = ($bf$clear$1$i|0)==(0);
 if ($tobool$1$i) {
  $res$1$1$i = $res$1$i;
 } else {
  $10 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$1$i = (($10) + ($bf$clear$1$i)|0);
  $11 = HEAP8[$arrayidx$1$i>>0]|0;
  $conv3$1$i = $11&255;
  $bf$lshr$1$i = $bf$load$1$i >>> 9;
  $bf$clear5$1$i = $bf$lshr$1$i & 7;
  $shr$1$i = $conv3$1$i >>> $bf$clear5$1$i;
  $bf$lshr7$1$i = $bf$load$1$i >>> 12;
  $and$1$i = $shr$1$i & $bf$lshr7$1$i;
  $shl$1$i = $and$1$i << 1;
  $conv9$1$i = $res$1$i&255;
  $or$1$i = $shl$1$i | $conv9$1$i;
  $conv10$1$i = $or$1$i&255;
  $res$1$1$i = $conv10$1$i;
 }
 $incdec$ptr$1$i = ((($param)) + 60|0);
 $bf$load$2$i = HEAP32[$incdec$ptr$1$i>>2]|0;
 $bf$clear$2$i = $bf$load$2$i & 511;
 $tobool$2$i = ($bf$clear$2$i|0)==(0);
 if ($tobool$2$i) {
  $res$1$2$i = $res$1$1$i;
 } else {
  $12 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$2$i = (($12) + ($bf$clear$2$i)|0);
  $13 = HEAP8[$arrayidx$2$i>>0]|0;
  $conv3$2$i = $13&255;
  $bf$lshr$2$i = $bf$load$2$i >>> 9;
  $bf$clear5$2$i = $bf$lshr$2$i & 7;
  $shr$2$i = $conv3$2$i >>> $bf$clear5$2$i;
  $bf$lshr7$2$i = $bf$load$2$i >>> 12;
  $and$2$i = $shr$2$i & $bf$lshr7$2$i;
  $shl$2$i = $and$2$i << 2;
  $conv9$2$i = $res$1$1$i&255;
  $or$2$i = $shl$2$i | $conv9$2$i;
  $conv10$2$i = $or$2$i&255;
  $res$1$2$i = $conv10$2$i;
 }
 $incdec$ptr$2$i = ((($param)) + 64|0);
 $bf$load$3$i = HEAP32[$incdec$ptr$2$i>>2]|0;
 $bf$clear$3$i = $bf$load$3$i & 511;
 $tobool$3$i = ($bf$clear$3$i|0)==(0);
 if ($tobool$3$i) {
  $res$1$3$i = $res$1$2$i;
 } else {
  $14 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$3$i = (($14) + ($bf$clear$3$i)|0);
  $15 = HEAP8[$arrayidx$3$i>>0]|0;
  $conv3$3$i = $15&255;
  $bf$lshr$3$i = $bf$load$3$i >>> 9;
  $bf$clear5$3$i = $bf$lshr$3$i & 7;
  $shr$3$i = $conv3$3$i >>> $bf$clear5$3$i;
  $bf$lshr7$3$i = $bf$load$3$i >>> 12;
  $and$3$i = $shr$3$i & $bf$lshr7$3$i;
  $shl$3$i = $and$3$i << 3;
  $conv9$3$i = $res$1$2$i&255;
  $or$3$i = $shl$3$i | $conv9$3$i;
  $conv10$3$i = $or$3$i&255;
  $res$1$3$i = $conv10$3$i;
 }
 $$sroa$0187$0$$sroa_idx = ((($param)) + 40|0);
 $$sroa$0187$0$copyload = HEAPU8[$$sroa$0187$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0187$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0187$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0187$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i118 = $$sroa$0187$0$copyload & 511;
 $tobool$i119 = ($bf$clear$i118|0)==(0);
 if (!($tobool$i119)) {
  $16 = HEAP32[$data$phi$trans$insert>>2]|0;
  $arrayidx$i121 = (($16) + ($bf$clear$i118)|0);
  $17 = HEAP8[$arrayidx$i121>>0]|0;
  $conv1$i122 = $17&255;
  $bf$lshr$i123 = $$sroa$0187$0$copyload >>> 9;
  $bf$clear3$i124 = $bf$lshr$i123 & 7;
  $shr$i125 = $conv1$i122 >>> $bf$clear3$i124;
  $bf$lshr5$i126 = $$sroa$0187$0$copyload >>> 12;
  $and$i127 = $shr$i125 & $bf$lshr5$i126;
  $tobool9 = ($and$i127|0)==(0);
  if (!($tobool9)) {
   $$sroa$0196$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
   $bf$clear$i155 = $$sroa$0196$0$copyload & 511;
   $conv$i156 = $bf$clear$i155&65535;
   $tobool$i157 = ($conv$i156<<16>>16)==(0);
   if (!($tobool$i157)) {
    $bf$lshr$i158 = $$sroa$0196$0$copyload >>> 12;
    $bf$clear2$i159 = $bf$lshr$i158 & 255;
    $bf$lshr4$i160 = $$sroa$0196$0$copyload >>> 9;
    $bf$clear5$i161 = $bf$lshr4$i160 & 7;
    $shl$i162 = $bf$clear2$i159 << $bf$clear5$i161;
    $arrayidx$i164 = (($16) + ($bf$clear$i155)|0);
    $18 = HEAP8[$arrayidx$i164>>0]|0;
    $conv7$i165 = $18&255;
    $or$i166 = $shl$i162 | $conv7$i165;
    $conv9$i167 = $or$i166&255;
    _avr_core_watch_write($avr,$conv$i156,$conv9$i167);
   }
  }
 }
 _avr_watchdog_set_cycle_count_and_timer($avr,$param,$conv5,$res$1$3$i);
 return;
}
function _avr_watchdog_set_cycle_count_and_timer($avr,$p,$was_enabled,$old_wdp) {
 $avr = $avr|0;
 $p = $p|0;
 $was_enabled = $was_enabled|0;
 $old_wdp = $old_wdp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$1$i = 0, $and$2$i = 0, $and$3$i = 0, $and$i = 0, $and$i34 = 0, $and$i46 = 0, $arraydecay = 0;
 var $arrayidx$1$i = 0, $arrayidx$2$i = 0, $arrayidx$3$i = 0, $arrayidx$i = 0, $arrayidx$i31 = 0, $arrayidx$i40 = 0, $arrayidx31 = 0, $bf$clear$1$i = 0, $bf$clear$2$i = 0, $bf$clear$3$i = 0, $bf$clear$i = 0, $bf$clear$i28 = 0, $bf$clear$i37 = 0, $bf$clear3$i = 0, $bf$clear3$i43 = 0, $bf$clear5$1$i = 0, $bf$clear5$2$i = 0, $bf$clear5$3$i = 0, $bf$clear5$i = 0, $bf$load$1$i = 0;
 var $bf$load$2$i = 0, $bf$load$3$i = 0, $bf$load$i = 0, $bf$lshr$1$i = 0, $bf$lshr$2$i = 0, $bf$lshr$3$i = 0, $bf$lshr$i = 0, $bf$lshr$i32 = 0, $bf$lshr$i42 = 0, $bf$lshr5$i = 0, $bf$lshr5$i45 = 0, $bf$lshr7$1$i = 0, $bf$lshr7$2$i = 0, $bf$lshr7$3$i = 0, $bf$lshr7$i = 0, $cmp = 0, $cmp16 = 0, $cmp20 = 0, $conv = 0, $conv1$i = 0;
 var $conv1$i41 = 0, $conv10$1$i = 0, $conv10$2$i = 0, $conv10$3$i = 0, $conv10$i = 0, $conv15 = 0, $conv3$1$i = 0, $conv3$2$i = 0, $conv3$3$i = 0, $conv3$i = 0, $conv7$i = 0, $conv7$i47 = 0, $conv9 = 0, $conv9$1$i = 0, $conv9$2$i = 0, $conv9$3$i = 0, $cycle_count = 0, $data$i = 0, $enable26$sroa$0$0$$sroa_idx = 0, $enable26$sroa$0$0$copyload = 0;
 var $frequency = 0, $idxprom = 0, $idxprom30 = 0, $incdec$ptr$1$i = 0, $incdec$ptr$2$i = 0, $incdec$ptr$i = 0, $lor$ext = 0, $narrow = 0, $or$1$i = 0, $or$2$i = 0, $or$3$i = 0, $or$cond = 0, $res$1$1$i = 0, $res$1$2$i = 0, $res$1$3$i = 0, $res$1$i = 0, $retval$0$i = 0, $retval$0$i49 = 0, $shl = 0, $shl$1$i = 0;
 var $shl$2$i = 0, $shl$3$i = 0, $shl35 = 0, $shr$1$i = 0, $shr$2$i = 0, $shr$3$i = 0, $shr$i = 0, $shr$i33 = 0, $shr$i44 = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0, $tobool$i = 0, $tobool$i29 = 0, $tobool$i38 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $wde635$sroa$0$0$$sroa_idx = 0, $wde635$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $arraydecay = ((($p)) + 52|0);
 $data$i = ((($avr)) + 5892|0);
 $bf$load$i = HEAP32[$arraydecay>>2]|0;
 $bf$clear$i = $bf$load$i & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  $res$1$i = 0;
 } else {
  $0 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($0) + ($bf$clear$i)|0);
  $1 = HEAP8[$arrayidx$i>>0]|0;
  $conv3$i = $1&255;
  $bf$lshr$i = $bf$load$i >>> 9;
  $bf$clear5$i = $bf$lshr$i & 7;
  $shr$i = $conv3$i >>> $bf$clear5$i;
  $bf$lshr7$i = $bf$load$i >>> 12;
  $and$i = $shr$i & $bf$lshr7$i;
  $conv10$i = $and$i&255;
  $res$1$i = $conv10$i;
 }
 $incdec$ptr$i = ((($p)) + 56|0);
 $bf$load$1$i = HEAP32[$incdec$ptr$i>>2]|0;
 $bf$clear$1$i = $bf$load$1$i & 511;
 $tobool$1$i = ($bf$clear$1$i|0)==(0);
 if ($tobool$1$i) {
  $res$1$1$i = $res$1$i;
 } else {
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$1$i = (($2) + ($bf$clear$1$i)|0);
  $3 = HEAP8[$arrayidx$1$i>>0]|0;
  $conv3$1$i = $3&255;
  $bf$lshr$1$i = $bf$load$1$i >>> 9;
  $bf$clear5$1$i = $bf$lshr$1$i & 7;
  $shr$1$i = $conv3$1$i >>> $bf$clear5$1$i;
  $bf$lshr7$1$i = $bf$load$1$i >>> 12;
  $and$1$i = $shr$1$i & $bf$lshr7$1$i;
  $shl$1$i = $and$1$i << 1;
  $conv9$1$i = $res$1$i&255;
  $or$1$i = $shl$1$i | $conv9$1$i;
  $conv10$1$i = $or$1$i&255;
  $res$1$1$i = $conv10$1$i;
 }
 $incdec$ptr$1$i = ((($p)) + 60|0);
 $bf$load$2$i = HEAP32[$incdec$ptr$1$i>>2]|0;
 $bf$clear$2$i = $bf$load$2$i & 511;
 $tobool$2$i = ($bf$clear$2$i|0)==(0);
 if ($tobool$2$i) {
  $res$1$2$i = $res$1$1$i;
 } else {
  $4 = HEAP32[$data$i>>2]|0;
  $arrayidx$2$i = (($4) + ($bf$clear$2$i)|0);
  $5 = HEAP8[$arrayidx$2$i>>0]|0;
  $conv3$2$i = $5&255;
  $bf$lshr$2$i = $bf$load$2$i >>> 9;
  $bf$clear5$2$i = $bf$lshr$2$i & 7;
  $shr$2$i = $conv3$2$i >>> $bf$clear5$2$i;
  $bf$lshr7$2$i = $bf$load$2$i >>> 12;
  $and$2$i = $shr$2$i & $bf$lshr7$2$i;
  $shl$2$i = $and$2$i << 2;
  $conv9$2$i = $res$1$1$i&255;
  $or$2$i = $shl$2$i | $conv9$2$i;
  $conv10$2$i = $or$2$i&255;
  $res$1$2$i = $conv10$2$i;
 }
 $incdec$ptr$2$i = ((($p)) + 64|0);
 $bf$load$3$i = HEAP32[$incdec$ptr$2$i>>2]|0;
 $bf$clear$3$i = $bf$load$3$i & 511;
 $tobool$3$i = ($bf$clear$3$i|0)==(0);
 if ($tobool$3$i) {
  $res$1$3$i = $res$1$2$i;
 } else {
  $6 = HEAP32[$data$i>>2]|0;
  $arrayidx$3$i = (($6) + ($bf$clear$3$i)|0);
  $7 = HEAP8[$arrayidx$3$i>>0]|0;
  $conv3$3$i = $7&255;
  $bf$lshr$3$i = $bf$load$3$i >>> 9;
  $bf$clear5$3$i = $bf$lshr$3$i & 7;
  $shr$3$i = $conv3$3$i >>> $bf$clear5$3$i;
  $bf$lshr7$3$i = $bf$load$3$i >>> 12;
  $and$3$i = $shr$3$i & $bf$lshr7$3$i;
  $shl$3$i = $and$3$i << 3;
  $conv9$3$i = $res$1$2$i&255;
  $or$3$i = $shl$3$i | $conv9$3$i;
  $conv10$3$i = $or$3$i&255;
  $res$1$3$i = $conv10$3$i;
 }
 $conv = $res$1$3$i&255;
 $shl = 2048 << $conv;
 $8 = ($shl|0)<(0);
 $9 = $8 << 31 >> 31;
 $cycle_count = ((($p)) + 136|0);
 $frequency = ((($avr)) + 40|0);
 $10 = HEAP32[$frequency>>2]|0;
 $11 = (___muldi3(($shl|0),($9|0),($10|0),0)|0);
 $12 = (getTempRet0() | 0);
 $13 = (___udivdi3(($11|0),($12|0),128000,0)|0);
 $14 = (getTempRet0() | 0);
 $15 = $cycle_count;
 $16 = $15;
 HEAP32[$16>>2] = $13;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $wde635$sroa$0$0$$sroa_idx = ((($p)) + 48|0);
 $wde635$sroa$0$0$copyload = HEAPU8[$wde635$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$wde635$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$wde635$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$wde635$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i37 = $wde635$sroa$0$0$copyload & 511;
 $tobool$i38 = ($bf$clear$i37|0)==(0);
 if ($tobool$i38) {
  $retval$0$i49 = 0;
 } else {
  $19 = HEAP32[$data$i>>2]|0;
  $arrayidx$i40 = (($19) + ($bf$clear$i37)|0);
  $20 = HEAP8[$arrayidx$i40>>0]|0;
  $conv1$i41 = $20&255;
  $bf$lshr$i42 = $wde635$sroa$0$0$copyload >>> 9;
  $bf$clear3$i43 = $bf$lshr$i42 & 7;
  $shr$i44 = $conv1$i41 >>> $bf$clear3$i43;
  $bf$lshr5$i45 = $wde635$sroa$0$0$copyload >>> 12;
  $and$i46 = $shr$i44 & $bf$lshr5$i45;
  $conv7$i47 = $and$i46&255;
  $retval$0$i49 = $conv7$i47;
 }
 $enable26$sroa$0$0$$sroa_idx = ((($p)) + 72|0);
 $enable26$sroa$0$0$copyload = HEAPU8[$enable26$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$enable26$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$enable26$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$enable26$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i28 = $enable26$sroa$0$0$copyload & 511;
 $tobool$i29 = ($bf$clear$i28|0)==(0);
 if ($tobool$i29) {
  $retval$0$i = 0;
 } else {
  $21 = HEAP32[$data$i>>2]|0;
  $arrayidx$i31 = (($21) + ($bf$clear$i28)|0);
  $22 = HEAP8[$arrayidx$i31>>0]|0;
  $conv1$i = $22&255;
  $bf$lshr$i32 = $enable26$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i32 & 7;
  $shr$i33 = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $enable26$sroa$0$0$copyload >>> 12;
  $and$i34 = $shr$i33 & $bf$lshr5$i;
  $conv7$i = $and$i34&255;
  $retval$0$i = $conv7$i;
 }
 $conv9 = $was_enabled&255;
 $23 = $retval$0$i | $retval$0$i49;
 $24 = ($23<<24>>24)!=(0);
 $lor$ext = $24&1;
 $cmp = ($conv9|0)!=($lor$ext|0);
 $cmp16 = ($old_wdp<<24>>24)>(-1);
 $conv15 = $old_wdp << 24 >> 24;
 $cmp20 = ($conv|0)!=($conv15|0);
 $narrow = $cmp16 & $cmp20;
 $or$cond = $narrow | $cmp;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $25 = ($23<<24>>24)==(0);
 if (!($25)) {
  $idxprom = $cmp&1;
  $idxprom30 = $narrow&1;
  $arrayidx31 = ((576 + ($idxprom<<3)|0) + ($idxprom30<<2)|0);
  $26 = HEAP32[$arrayidx31>>2]|0;
  $shl35 = 1 << $conv;
  HEAP32[$vararg_buffer>>2] = $26;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $shl;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $shl35;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $13;
  _avr_global_logger($avr,3,362641,$vararg_buffer);
  $27 = $cycle_count;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  _avr_cycle_timer_register($avr,$29,$32,143,$p);
  STACKTOP = sp;return;
 }
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 _avr_global_logger($avr,3,362700,$vararg_buffer4);
 _avr_cycle_timer_cancel($avr,143,$p);
 STACKTOP = sp;return;
}
function _avr_wdce_clear($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $2 = 0, $3 = 0, $4 = 0, $and$i = 0, $arrayidx$i = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear2$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr4$i = 0, $conv$i = 0, $conv7$i = 0, $conv9$i = 0, $data$i = 0, $neg$i = 0, $shl$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $2 = HEAP32[$avr1>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($param)) + 44|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i & 255;
 $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $data$i = ((($2)) + 5892|0);
 $3 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($3) + ($bf$clear$i)|0);
 $4 = HEAP8[$arrayidx$i>>0]|0;
 $conv7$i = $4&255;
 $neg$i = $shl$i ^ 255;
 $and$i = $neg$i & $conv7$i;
 $conv9$i = $and$i&255;
 _avr_core_watch_write($2,$conv$i,$conv9$i);
 setTempRet0((0) | 0);
 return 0;
}
function _avr_watchdog_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$029$0$$sroa_idx = 0, $$sroa$029$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$i = 0;
 var $and$i22 = 0, $arrayidx$i = 0, $arrayidx$i16 = 0, $avr_run = 0, $bf$clear$i = 0, $bf$clear$i13 = 0, $bf$clear3$i = 0, $bf$clear3$i19 = 0, $bf$lshr$i = 0, $bf$lshr$i18 = 0, $bf$lshr5$i = 0, $bf$lshr5$i21 = 0, $conv1$i = 0, $conv1$i17 = 0, $cycle_count = 0, $data$i = 0, $data$i15 = 0, $reset_context = 0, $run = 0, $shr$i = 0;
 var $shr$i20 = 0, $tobool = 0, $tobool$i = 0, $tobool$i14 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $watchdog = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$sroa$0$0$$sroa_idx = ((($param)) + 72|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if (!($tobool$i)) {
  $data$i = ((($avr)) + 5892|0);
  $2 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($2) + ($bf$clear$i)|0);
  $3 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $3&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $tobool = ($and$i|0)==(0);
  if (!($tobool)) {
   $watchdog = ((($param)) + 68|0);
   _avr_global_logger($avr,3,362720,$vararg_buffer);
   (_avr_raise_interrupt($avr,$watchdog)|0);
   $cycle_count = ((($param)) + 136|0);
   $4 = $cycle_count;
   $5 = $4;
   $6 = HEAP32[$5>>2]|0;
   $7 = (($4) + 4)|0;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (_i64Add(($6|0),($9|0),($0|0),($1|0))|0);
   $11 = (getTempRet0() | 0);
   $15 = $11;$16 = $10;
   setTempRet0(($15) | 0);
   STACKTOP = sp;return ($16|0);
  }
 }
 $$sroa$029$0$$sroa_idx = ((($param)) + 48|0);
 $$sroa$029$0$copyload = HEAPU8[$$sroa$029$0$$sroa_idx>>0]|(HEAPU8[$$sroa$029$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$029$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$029$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i13 = $$sroa$029$0$copyload & 511;
 $tobool$i14 = ($bf$clear$i13|0)==(0);
 if ($tobool$i14) {
  $15 = 0;$16 = 0;
  setTempRet0(($15) | 0);
  STACKTOP = sp;return ($16|0);
 }
 $data$i15 = ((($avr)) + 5892|0);
 $12 = HEAP32[$data$i15>>2]|0;
 $arrayidx$i16 = (($12) + ($bf$clear$i13)|0);
 $13 = HEAP8[$arrayidx$i16>>0]|0;
 $conv1$i17 = $13&255;
 $bf$lshr$i18 = $$sroa$029$0$copyload >>> 9;
 $bf$clear3$i19 = $bf$lshr$i18 & 7;
 $shr$i20 = $conv1$i17 >>> $bf$clear3$i19;
 $bf$lshr5$i21 = $$sroa$029$0$copyload >>> 12;
 $and$i22 = $shr$i20 & $bf$lshr5$i21;
 $tobool4 = ($and$i22|0)==(0);
 if ($tobool4) {
  $15 = 0;$16 = 0;
  setTempRet0(($15) | 0);
  STACKTOP = sp;return ($16|0);
 }
 _avr_global_logger($avr,3,362744,$vararg_buffer1);
 $run = ((($avr)) + 104|0);
 $14 = HEAP32[$run>>2]|0;
 $reset_context = ((($param)) + 144|0);
 $avr_run = ((($param)) + 148|0);
 HEAP32[$avr_run>>2] = $14;
 HEAP8[$reset_context>>0] = 1;
 HEAP32[$run>>2] = 144;
 $15 = 0;$16 = 0;
 setTempRet0(($15) | 0);
 STACKTOP = sp;return ($16|0);
}
function _avr_watchdog_run_callback_software_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _avr_reset($avr);
 return;
}
function _avr_watchdog_reset($port) {
 $port = $port|0;
 var $$pre = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$037$0$$sroa_idx = 0, $$sroa$037$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $and$i$1$i = 0, $and$i$2$i = 0, $and$i$3$i = 0, $and$i$i = 0, $arrayidx$i = 0, $arrayidx$i$1$i = 0, $arrayidx$i$2$i = 0, $arrayidx$i$3$i = 0, $arrayidx$i$i = 0, $arrayidx$i26 = 0, $avr1 = 0, $avr_run = 0, $bf$clear$1$i = 0, $bf$clear$2$i = 0, $bf$clear$3$i = 0, $bf$clear$i = 0, $bf$clear$i17 = 0, $bf$clear$i33 = 0, $bf$clear2$i = 0, $bf$clear2$i$1$i = 0;
 var $bf$clear2$i$2$i = 0, $bf$clear2$i$3$i = 0, $bf$clear2$i$i = 0, $bf$clear2$i21 = 0, $bf$clear5$i = 0, $bf$clear5$i$1$i = 0, $bf$clear5$i$2$i = 0, $bf$clear5$i$3$i = 0, $bf$clear5$i$i = 0, $bf$clear5$i23 = 0, $bf$load$1$i = 0, $bf$load$2$i = 0, $bf$load$3$i = 0, $bf$load$i32 = 0, $bf$lshr$i = 0, $bf$lshr$i$1$i = 0, $bf$lshr$i$2$i = 0, $bf$lshr$i$3$i = 0, $bf$lshr$i$i = 0, $bf$lshr$i20 = 0;
 var $bf$lshr4$i = 0, $bf$lshr4$i$1$i = 0, $bf$lshr4$i$2$i = 0, $bf$lshr4$i$3$i = 0, $bf$lshr4$i$i = 0, $bf$lshr4$i22 = 0, $conv$i = 0, $conv$i$1$i = 0, $conv$i$2$i = 0, $conv$i$3$i = 0, $conv$i$i = 0, $conv$i18 = 0, $conv16$i$1$i = 0, $conv16$i$2$i = 0, $conv16$i$3$i = 0, $conv16$i$i = 0, $conv7$i = 0, $conv7$i$1$i = 0, $conv7$i$2$i = 0, $conv7$i$3$i = 0;
 var $conv7$i$i = 0, $conv7$i27 = 0, $conv9$i = 0, $conv9$i29 = 0, $data$i = 0, $data$i$i$pre$phiZZZ2D = 0, $data$i25 = 0, $incdec$ptr$1$i41 = 0, $incdec$ptr$2$i42 = 0, $incdec$ptr$i40 = 0, $irq = 0, $neg$i$1$i = 0, $neg$i$2$i = 0, $neg$i$3$i = 0, $neg$i$i = 0, $or$i = 0, $or$i28 = 0, $reset_context = 0, $run = 0, $shl$i = 0;
 var $shl$i$1$i = 0, $shl$i$2$i = 0, $shl$i$3$i = 0, $shl$i$i = 0, $shl$i24 = 0, $tobool = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0, $tobool$i = 0, $tobool$i$1$i = 0, $tobool$i$2$i = 0, $tobool$i$3$i = 0, $tobool$i$i = 0, $tobool$i19 = 0, $tobool$i34 = 0, $watchdog = 0, $wdp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($port)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $reset_context = ((($port)) + 144|0);
 $1 = HEAP8[$reset_context>>0]|0;
 $tobool = ($1<<24>>24)==(0);
 if ($tobool) {
  $watchdog = ((($port)) + 68|0);
  $irq = ((($watchdog)) + 12|0);
  _avr_irq_register_notify($irq,145,$port);
  return;
 }
 HEAP8[$reset_context>>0] = 0;
 $avr_run = ((($reset_context)) + 4|0);
 $2 = HEAP32[$avr_run>>2]|0;
 $run = ((($0)) + 104|0);
 HEAP32[$run>>2] = $2;
 $$sroa$0$0$$sroa_idx = ((($port)) + 48|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $conv$i = $bf$clear$i&65535;
 $tobool$i = ($conv$i<<16>>16)==(0);
 if (!($tobool$i)) {
  $bf$lshr$i = $$sroa$0$0$copyload >>> 12;
  $bf$clear2$i = $bf$lshr$i & 255;
  $bf$lshr4$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear5$i = $bf$lshr4$i & 7;
  $shl$i = $bf$clear2$i << $bf$clear5$i;
  $data$i = ((($0)) + 5892|0);
  $3 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($3) + ($bf$clear$i)|0);
  $4 = HEAP8[$arrayidx$i>>0]|0;
  $conv7$i = $4&255;
  $or$i = $shl$i | $conv7$i;
  $conv9$i = $or$i&255;
  _avr_core_watch_write($0,$conv$i,$conv9$i);
 }
 $$sroa$037$0$$sroa_idx = ((($port)) + 40|0);
 $$sroa$037$0$copyload = HEAPU8[$$sroa$037$0$$sroa_idx>>0]|(HEAPU8[$$sroa$037$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$037$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$037$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i17 = $$sroa$037$0$copyload & 511;
 $conv$i18 = $bf$clear$i17&65535;
 $tobool$i19 = ($conv$i18<<16>>16)==(0);
 if ($tobool$i19) {
  $$pre = ((($0)) + 5892|0);
  $data$i$i$pre$phiZZZ2D = $$pre;
 } else {
  $bf$lshr$i20 = $$sroa$037$0$copyload >>> 12;
  $bf$clear2$i21 = $bf$lshr$i20 & 255;
  $bf$lshr4$i22 = $$sroa$037$0$copyload >>> 9;
  $bf$clear5$i23 = $bf$lshr4$i22 & 7;
  $shl$i24 = $bf$clear2$i21 << $bf$clear5$i23;
  $data$i25 = ((($0)) + 5892|0);
  $5 = HEAP32[$data$i25>>2]|0;
  $arrayidx$i26 = (($5) + ($bf$clear$i17)|0);
  $6 = HEAP8[$arrayidx$i26>>0]|0;
  $conv7$i27 = $6&255;
  $or$i28 = $shl$i24 | $conv7$i27;
  $conv9$i29 = $or$i28&255;
  _avr_core_watch_write($0,$conv$i18,$conv9$i29);
  $data$i$i$pre$phiZZZ2D = $data$i25;
 }
 $wdp = ((($port)) + 52|0);
 $bf$load$i32 = HEAP32[$wdp>>2]|0;
 $bf$clear$i33 = $bf$load$i32 & 511;
 $tobool$i34 = ($bf$clear$i33|0)==(0);
 if (!($tobool$i34)) {
  $conv$i$i = $bf$clear$i33&65535;
  $tobool$i$i = ($conv$i$i<<16>>16)==(0);
  if (!($tobool$i$i)) {
   $bf$lshr$i$i = $bf$load$i32 >>> 12;
   $bf$clear2$i$i = $bf$lshr$i$i & 255;
   $bf$lshr4$i$i = $bf$load$i32 >>> 9;
   $bf$clear5$i$i = $bf$lshr4$i$i & 7;
   $shl$i$i = $bf$clear2$i$i << $bf$clear5$i$i;
   $7 = HEAP32[$data$i$i$pre$phiZZZ2D>>2]|0;
   $arrayidx$i$i = (($7) + ($bf$clear$i33)|0);
   $8 = HEAP8[$arrayidx$i$i>>0]|0;
   $conv7$i$i = $8&255;
   $neg$i$i = $shl$i$i ^ 255;
   $and$i$i = $neg$i$i & $conv7$i$i;
   $conv16$i$i = $and$i$i&255;
   _avr_core_watch_write($0,$conv$i$i,$conv16$i$i);
  }
 }
 $incdec$ptr$i40 = ((($wdp)) + 4|0);
 $bf$load$1$i = HEAP32[$incdec$ptr$i40>>2]|0;
 $bf$clear$1$i = $bf$load$1$i & 511;
 $tobool$1$i = ($bf$clear$1$i|0)==(0);
 if (!($tobool$1$i)) {
  $conv$i$1$i = $bf$clear$1$i&65535;
  $tobool$i$1$i = ($conv$i$1$i<<16>>16)==(0);
  if (!($tobool$i$1$i)) {
   $bf$lshr$i$1$i = $bf$load$1$i >>> 12;
   $bf$clear2$i$1$i = $bf$lshr$i$1$i & 255;
   $bf$lshr4$i$1$i = $bf$load$1$i >>> 9;
   $bf$clear5$i$1$i = $bf$lshr4$i$1$i & 7;
   $shl$i$1$i = $bf$clear2$i$1$i << $bf$clear5$i$1$i;
   $9 = HEAP32[$data$i$i$pre$phiZZZ2D>>2]|0;
   $arrayidx$i$1$i = (($9) + ($bf$clear$1$i)|0);
   $10 = HEAP8[$arrayidx$i$1$i>>0]|0;
   $conv7$i$1$i = $10&255;
   $neg$i$1$i = $shl$i$1$i ^ 255;
   $and$i$1$i = $neg$i$1$i & $conv7$i$1$i;
   $conv16$i$1$i = $and$i$1$i&255;
   _avr_core_watch_write($0,$conv$i$1$i,$conv16$i$1$i);
  }
 }
 $incdec$ptr$1$i41 = ((($wdp)) + 8|0);
 $bf$load$2$i = HEAP32[$incdec$ptr$1$i41>>2]|0;
 $bf$clear$2$i = $bf$load$2$i & 511;
 $tobool$2$i = ($bf$clear$2$i|0)==(0);
 if (!($tobool$2$i)) {
  $conv$i$2$i = $bf$clear$2$i&65535;
  $tobool$i$2$i = ($conv$i$2$i<<16>>16)==(0);
  if (!($tobool$i$2$i)) {
   $bf$lshr$i$2$i = $bf$load$2$i >>> 12;
   $bf$clear2$i$2$i = $bf$lshr$i$2$i & 255;
   $bf$lshr4$i$2$i = $bf$load$2$i >>> 9;
   $bf$clear5$i$2$i = $bf$lshr4$i$2$i & 7;
   $shl$i$2$i = $bf$clear2$i$2$i << $bf$clear5$i$2$i;
   $11 = HEAP32[$data$i$i$pre$phiZZZ2D>>2]|0;
   $arrayidx$i$2$i = (($11) + ($bf$clear$2$i)|0);
   $12 = HEAP8[$arrayidx$i$2$i>>0]|0;
   $conv7$i$2$i = $12&255;
   $neg$i$2$i = $shl$i$2$i ^ 255;
   $and$i$2$i = $neg$i$2$i & $conv7$i$2$i;
   $conv16$i$2$i = $and$i$2$i&255;
   _avr_core_watch_write($0,$conv$i$2$i,$conv16$i$2$i);
  }
 }
 $incdec$ptr$2$i42 = ((($wdp)) + 12|0);
 $bf$load$3$i = HEAP32[$incdec$ptr$2$i42>>2]|0;
 $bf$clear$3$i = $bf$load$3$i & 511;
 $tobool$3$i = ($bf$clear$3$i|0)==(0);
 if (!($tobool$3$i)) {
  $conv$i$3$i = $bf$clear$3$i&65535;
  $tobool$i$3$i = ($conv$i$3$i<<16>>16)==(0);
  if (!($tobool$i$3$i)) {
   $bf$lshr$i$3$i = $bf$load$3$i >>> 12;
   $bf$clear2$i$3$i = $bf$lshr$i$3$i & 255;
   $bf$lshr4$i$3$i = $bf$load$3$i >>> 9;
   $bf$clear5$i$3$i = $bf$lshr4$i$3$i & 7;
   $shl$i$3$i = $bf$clear2$i$3$i << $bf$clear5$i$3$i;
   $13 = HEAP32[$data$i$i$pre$phiZZZ2D>>2]|0;
   $arrayidx$i$3$i = (($13) + ($bf$clear$3$i)|0);
   $14 = HEAP8[$arrayidx$i$3$i>>0]|0;
   $conv7$i$3$i = $14&255;
   $neg$i$3$i = $shl$i$3$i ^ 255;
   $and$i$3$i = $neg$i$3$i & $conv7$i$3$i;
   $conv16$i$3$i = $and$i$3$i&255;
   _avr_core_watch_write($0,$conv$i$3$i,$conv16$i$3$i);
  }
 }
 _avr_watchdog_set_cycle_count_and_timer($0,$port,0,0);
 $watchdog = ((($port)) + 68|0);
 $irq = ((($watchdog)) + 12|0);
 _avr_irq_register_notify($irq,145,$port);
 return;
}
function _avr_watchdog_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$026$0$$sroa_idx = 0, $$sroa$026$0$copyload = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and$i = 0, $and$i19 = 0, $arrayidx$i = 0, $arrayidx$i13 = 0, $avr = 0;
 var $bf$clear$i = 0, $bf$clear$i10 = 0, $bf$clear3$i = 0, $bf$clear3$i16 = 0, $bf$lshr$i = 0, $bf$lshr$i15 = 0, $bf$lshr5$i = 0, $bf$lshr5$i18 = 0, $cmp = 0, $conv1$i = 0, $conv1$i14 = 0, $cycle_count = 0, $data$i = 0, $data$i12 = 0, $res$0 = 0, $shr$i = 0, $shr$i17 = 0, $tobool = 0, $tobool$i = 0, $tobool$i11 = 0;
 var $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($ctl|0)==(2003072114);
 if (!($cmp)) {
  $res$0 = -1;
  return ($res$0|0);
 }
 $avr = ((($port)) + 4|0);
 $0 = HEAP32[$avr>>2]|0;
 $$sroa$0$0$$sroa_idx = ((($port)) + 48|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  label = 4;
 } else {
  $data$i = ((($0)) + 5892|0);
  $1 = HEAP32[$data$i>>2]|0;
  $arrayidx$i = (($1) + ($bf$clear$i)|0);
  $2 = HEAP8[$arrayidx$i>>0]|0;
  $conv1$i = $2&255;
  $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
  $bf$clear3$i = $bf$lshr$i & 7;
  $shr$i = $conv1$i >>> $bf$clear3$i;
  $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
  $and$i = $shr$i & $bf$lshr5$i;
  $tobool = ($and$i|0)==(0);
  if ($tobool) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $$sroa$026$0$$sroa_idx = ((($port)) + 72|0);
  $$sroa$026$0$copyload = HEAPU8[$$sroa$026$0$$sroa_idx>>0]|(HEAPU8[$$sroa$026$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$026$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$026$0$$sroa_idx+3>>0]<<24);
  $bf$clear$i10 = $$sroa$026$0$copyload & 511;
  $tobool$i11 = ($bf$clear$i10|0)==(0);
  if ($tobool$i11) {
   $res$0 = 0;
   return ($res$0|0);
  }
  $data$i12 = ((($0)) + 5892|0);
  $3 = HEAP32[$data$i12>>2]|0;
  $arrayidx$i13 = (($3) + ($bf$clear$i10)|0);
  $4 = HEAP8[$arrayidx$i13>>0]|0;
  $conv1$i14 = $4&255;
  $bf$lshr$i15 = $$sroa$026$0$copyload >>> 9;
  $bf$clear3$i16 = $bf$lshr$i15 & 7;
  $shr$i17 = $conv1$i14 >>> $bf$clear3$i16;
  $bf$lshr5$i18 = $$sroa$026$0$copyload >>> 12;
  $and$i19 = $shr$i17 & $bf$lshr5$i18;
  $tobool5 = ($and$i19|0)==(0);
  if ($tobool5) {
   $res$0 = 0;
   return ($res$0|0);
  }
 }
 $cycle_count = ((($port)) + 136|0);
 $5 = $cycle_count;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 _avr_cycle_timer_register($0,$7,$10,143,$port);
 $res$0 = 0;
 return ($res$0|0);
}
function _avr_watchdog_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$015$0$$sroa_idx = 0, $$sroa$015$0$copyload = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and$i = 0, $and$i12 = 0, $arrayidx$i = 0, $arrayidx$i10 = 0, $avr1 = 0, $bf$clear$i = 0, $bf$clear$i7 = 0, $bf$clear2$i = 0, $bf$clear3$i = 0, $bf$clear5$i = 0, $bf$lshr$i = 0, $bf$lshr$i8 = 0;
 var $bf$lshr4$i = 0, $bf$lshr5$i = 0, $conv$i = 0, $conv1$i = 0, $conv7$i11 = 0, $conv9$i = 0, $data$i = 0, $neg$i = 0, $shl$i = 0, $shr$i = 0, $tobool = 0, $tobool$i = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr1 = ((($param)) + 4|0);
 $0 = HEAP32[$avr1>>2]|0;
 $tobool = ($value|0)==(0);
 if (!($tobool)) {
  return;
 }
 $$sroa$0$0$$sroa_idx = ((($param)) + 76|0);
 $$sroa$0$0$copyload = HEAPU8[$$sroa$0$0$$sroa_idx>>0]|(HEAPU8[$$sroa$0$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$0$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$0$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i = $$sroa$0$0$copyload & 511;
 $tobool$i = ($bf$clear$i|0)==(0);
 if ($tobool$i) {
  return;
 }
 $data$i = ((($0)) + 5892|0);
 $1 = HEAP32[$data$i>>2]|0;
 $arrayidx$i = (($1) + ($bf$clear$i)|0);
 $2 = HEAP8[$arrayidx$i>>0]|0;
 $conv1$i = $2&255;
 $bf$lshr$i = $$sroa$0$0$copyload >>> 9;
 $bf$clear3$i = $bf$lshr$i & 7;
 $shr$i = $conv1$i >>> $bf$clear3$i;
 $bf$lshr5$i = $$sroa$0$0$copyload >>> 12;
 $and$i = $shr$i & $bf$lshr5$i;
 $tobool2 = ($and$i|0)==(0);
 if ($tobool2) {
  return;
 }
 $$sroa$015$0$$sroa_idx = ((($param)) + 72|0);
 $$sroa$015$0$copyload = HEAPU8[$$sroa$015$0$$sroa_idx>>0]|(HEAPU8[$$sroa$015$0$$sroa_idx+1>>0]<<8)|(HEAPU8[$$sroa$015$0$$sroa_idx+2>>0]<<16)|(HEAPU8[$$sroa$015$0$$sroa_idx+3>>0]<<24);
 $bf$clear$i7 = $$sroa$015$0$copyload & 511;
 $conv$i = $bf$clear$i7&65535;
 $bf$lshr$i8 = $$sroa$015$0$copyload >>> 12;
 $bf$clear2$i = $bf$lshr$i8 & 255;
 $bf$lshr4$i = $$sroa$015$0$copyload >>> 9;
 $bf$clear5$i = $bf$lshr4$i & 7;
 $shl$i = $bf$clear2$i << $bf$clear5$i;
 $arrayidx$i10 = (($1) + ($bf$clear$i7)|0);
 $3 = HEAP8[$arrayidx$i10>>0]|0;
 $conv7$i11 = $3&255;
 $neg$i = $shl$i ^ 255;
 $and$i12 = $neg$i & $conv7$i11;
 $conv9$i = $and$i12&255;
 _avr_core_watch_write($0,$conv$i,$conv9$i);
 return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[91298]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (365232 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[91298] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(365200)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (365232 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[91298] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(365212)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (365232 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[91298] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(365200)>>2] = $sub91;
     HEAP32[(365212)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(365196)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (365496 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (365496 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(365196)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(365212)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (365232 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[91298] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(365200)>>2] = $rsize$0$i;
       HEAP32[(365212)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(365196)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (365496 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (365496 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(365200)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (365496 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(365196)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (365232 + ($shl288$i<<2)|0);
           $58 = HEAP32[91298]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[91298] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (365496 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(365196)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(365200)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(365212)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(365212)>>2] = $add$ptr166;
   HEAP32[(365200)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(365200)>>2] = 0;
   HEAP32[(365212)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(365204)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(365204)>>2] = $sub190;
  $71 = HEAP32[(365216)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(365216)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[91416]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(365672)>>2] = 4096;
  HEAP32[(365668)>>2] = 4096;
  HEAP32[(365676)>>2] = -1;
  HEAP32[(365680)>>2] = -1;
  HEAP32[(365684)>>2] = 0;
  HEAP32[(365636)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[91416] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(365672)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(365632)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(365624)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(365636)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(365216)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (365640);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk(($and80$i|0))|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(365668)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(365624)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(365632)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk(($spec$select96$i|0))|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(365672)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk(($and104$i|0))|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk(($sub112$i|0))|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(365636)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(365636)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk(($and11$i|0))|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(365624)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(365624)>>2] = $add150$i;
  $91 = HEAP32[(365628)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(365628)>>2] = $add150$i;
  }
  $92 = HEAP32[(365216)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(365208)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(365208)>>2] = $tbase$795$i;
    }
    HEAP32[(365640)>>2] = $tbase$795$i;
    HEAP32[(365644)>>2] = $tsize$794$i;
    HEAP32[(365652)>>2] = 0;
    $94 = HEAP32[91416]|0;
    HEAP32[(365228)>>2] = $94;
    HEAP32[(365224)>>2] = -1;
    HEAP32[(365244)>>2] = (365232);
    HEAP32[(365240)>>2] = (365232);
    HEAP32[(365252)>>2] = (365240);
    HEAP32[(365248)>>2] = (365240);
    HEAP32[(365260)>>2] = (365248);
    HEAP32[(365256)>>2] = (365248);
    HEAP32[(365268)>>2] = (365256);
    HEAP32[(365264)>>2] = (365256);
    HEAP32[(365276)>>2] = (365264);
    HEAP32[(365272)>>2] = (365264);
    HEAP32[(365284)>>2] = (365272);
    HEAP32[(365280)>>2] = (365272);
    HEAP32[(365292)>>2] = (365280);
    HEAP32[(365288)>>2] = (365280);
    HEAP32[(365300)>>2] = (365288);
    HEAP32[(365296)>>2] = (365288);
    HEAP32[(365308)>>2] = (365296);
    HEAP32[(365304)>>2] = (365296);
    HEAP32[(365316)>>2] = (365304);
    HEAP32[(365312)>>2] = (365304);
    HEAP32[(365324)>>2] = (365312);
    HEAP32[(365320)>>2] = (365312);
    HEAP32[(365332)>>2] = (365320);
    HEAP32[(365328)>>2] = (365320);
    HEAP32[(365340)>>2] = (365328);
    HEAP32[(365336)>>2] = (365328);
    HEAP32[(365348)>>2] = (365336);
    HEAP32[(365344)>>2] = (365336);
    HEAP32[(365356)>>2] = (365344);
    HEAP32[(365352)>>2] = (365344);
    HEAP32[(365364)>>2] = (365352);
    HEAP32[(365360)>>2] = (365352);
    HEAP32[(365372)>>2] = (365360);
    HEAP32[(365368)>>2] = (365360);
    HEAP32[(365380)>>2] = (365368);
    HEAP32[(365376)>>2] = (365368);
    HEAP32[(365388)>>2] = (365376);
    HEAP32[(365384)>>2] = (365376);
    HEAP32[(365396)>>2] = (365384);
    HEAP32[(365392)>>2] = (365384);
    HEAP32[(365404)>>2] = (365392);
    HEAP32[(365400)>>2] = (365392);
    HEAP32[(365412)>>2] = (365400);
    HEAP32[(365408)>>2] = (365400);
    HEAP32[(365420)>>2] = (365408);
    HEAP32[(365416)>>2] = (365408);
    HEAP32[(365428)>>2] = (365416);
    HEAP32[(365424)>>2] = (365416);
    HEAP32[(365436)>>2] = (365424);
    HEAP32[(365432)>>2] = (365424);
    HEAP32[(365444)>>2] = (365432);
    HEAP32[(365440)>>2] = (365432);
    HEAP32[(365452)>>2] = (365440);
    HEAP32[(365448)>>2] = (365440);
    HEAP32[(365460)>>2] = (365448);
    HEAP32[(365456)>>2] = (365448);
    HEAP32[(365468)>>2] = (365456);
    HEAP32[(365464)>>2] = (365456);
    HEAP32[(365476)>>2] = (365464);
    HEAP32[(365472)>>2] = (365464);
    HEAP32[(365484)>>2] = (365472);
    HEAP32[(365480)>>2] = (365472);
    HEAP32[(365492)>>2] = (365480);
    HEAP32[(365488)>>2] = (365480);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(365216)>>2] = $add$ptr4$i49$i;
    HEAP32[(365204)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(365680)>>2]|0;
    HEAP32[(365220)>>2] = $96;
   } else {
    $sp$0112$i = (365640);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(365204)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(365216)>>2] = $add$ptr4$i41$i;
       HEAP32[(365204)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(365680)>>2]|0;
       HEAP32[(365220)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(365208)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(365208)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (365640);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(365204)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(365204)>>2] = $add$i$i;
        HEAP32[(365216)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(365212)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(365200)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(365200)>>2] = $add26$i$i;
         HEAP32[(365212)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[91298]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[91298] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (365496 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(365196)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(365196)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (365232 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[91298]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[91298] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (365496 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(365196)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(365196)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (365640);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(365216)>>2] = $add$ptr4$i$i$i;
    HEAP32[(365204)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(365680)>>2]|0;
    HEAP32[(365220)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(365640)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(365640)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(365640)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(365640)+12>>2]|0;
    HEAP32[(365640)>>2] = $tbase$795$i;
    HEAP32[(365644)>>2] = $tsize$794$i;
    HEAP32[(365652)>>2] = 0;
    HEAP32[(365648)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (365232 + ($shl$i$i<<2)|0);
      $149 = HEAP32[91298]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[91298] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (365496 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(365196)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(365196)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(365204)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(365204)>>2] = $sub260$i;
   $159 = HEAP32[(365216)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(365216)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(365208)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(365212)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(365200)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[91298]|0;
     $and46 = $6 & $neg;
     HEAP32[91298] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (365496 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(365196)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(365196)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(365216)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(365204)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(365204)>>2] = $add246;
   HEAP32[(365216)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(365212)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(365212)>>2] = 0;
   HEAP32[(365200)>>2] = 0;
   return;
  }
  $26 = HEAP32[(365212)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(365200)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(365200)>>2] = $add258;
   HEAP32[(365212)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[91298]|0;
     $and301 = $30 & $neg300;
     HEAP32[91298] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (365496 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(365196)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(365196)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(365212)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(365200)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (365232 + ($shl508<<2)|0);
  $45 = HEAP32[91298]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[91298] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (365496 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(365196)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(365196)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(365224)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(365224)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (365648);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(365224)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 (_memcpy(($call12|0),($oldmem|0),($cond24|0))|0);
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0;
 var $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and10 = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0, $and80 = 0;
 var $and87 = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx234$sink = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk147 = 0, $bk155 = 0, $bk174 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0;
 var $cmp11 = 0, $cmp111 = 0, $cmp125 = 0, $cmp13 = 0, $cmp15 = 0, $cmp156 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp227 = 0, $cmp239 = 0, $cmp251 = 0, $cmp268 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0;
 var $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd148 = 0, $fd159 = 0, $fd175 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $head99 = 0, $index = 0;
 var $neg = 0, $neg215 = 0, $newp$2 = 0, $or = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0;
 var $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool101 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $and10 = $0 & 3;
 $cmp11 = ($and10|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $1 = HEAP32[(365672)>>2]|0;
   $shl$i = $1 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $head31 = ((($add$ptr)) + 4|0);
  $2 = HEAP32[$head31>>2]|0;
  $or32 = $2 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $3 = HEAP32[(365216)>>2]|0;
 $cmp34 = ($3|0)==($add$ptr|0);
 if ($cmp34) {
  $4 = HEAP32[(365204)>>2]|0;
  $add = (($4) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(365216)>>2] = $add$ptr41;
  HEAP32[(365204)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(365212)>>2]|0;
 $cmp56 = ($5|0)==($add$ptr|0);
 if ($cmp56) {
  $6 = HEAP32[(365200)>>2]|0;
  $add58 = (($6) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $7 = HEAP32[$head79>>2]|0;
   $and80 = $7 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $8 = HEAP32[$head92>>2]|0;
   $or93 = $8 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(365200)>>2] = $storemerge1;
  HEAP32[(365212)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $head99 = ((($add$ptr)) + 4|0);
 $9 = HEAP32[$head99>>2]|0;
 $and100 = $9 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $9 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $9 >>> 3;
 $cmp111 = ($9>>>0)<(256);
 do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $10 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $11 = HEAP32[$bk>>2]|0;
   $cmp125 = ($11|0)==($10|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $12 = HEAP32[91298]|0;
    $and128 = $12 & $neg;
    HEAP32[91298] = $and128;
    break;
   } else {
    $bk147 = ((($10)) + 12|0);
    HEAP32[$bk147>>2] = $11;
    $fd148 = ((($11)) + 8|0);
    HEAP32[$fd148>>2] = $10;
    break;
   }
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $13 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $14 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($14|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $16 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($16|0)==(0|0);
     if ($cmp180) {
      $17 = HEAP32[$child>>2]|0;
      $cmp183 = ($17|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $17;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $16;$RP$1$ph = $arrayidx179;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $18 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($18|0)==(0|0);
      if ($cmp187) {
       $arrayidx190 = ((($R$1)) + 16|0);
       $19 = HEAP32[$arrayidx190>>2]|0;
       $cmp191 = ($19|0)==(0|0);
       if ($cmp191) {
        break;
       } else {
        $R$1$be = $19;$RP$1$be = $arrayidx190;
       }
      } else {
       $R$1$be = $18;$RP$1$be = $arrayidx186;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $15 = HEAP32[$fd159>>2]|0;
     $bk174 = ((($15)) + 12|0);
     HEAP32[$bk174>>2] = $14;
     $fd175 = ((($14)) + 8|0);
     HEAP32[$fd175>>2] = $15;
     $R$3 = $14;
    }
   } while(0);
   $cmp203 = ($13|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $20 = HEAP32[$index>>2]|0;
    $arrayidx206 = (365496 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($21|0)==($add$ptr|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $20;
      $neg215 = $shl214 ^ -1;
      $22 = HEAP32[(365196)>>2]|0;
      $and216 = $22 & $neg215;
      HEAP32[(365196)>>2] = $and216;
      break;
     }
    } else {
     $arrayidx226 = ((($13)) + 16|0);
     $23 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($23|0)==($add$ptr|0);
     $arrayidx234 = ((($13)) + 20|0);
     $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
     HEAP32[$arrayidx234$sink>>2] = $R$3;
     $cmp239 = ($R$3|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $13;
    $child249 = ((($add$ptr)) + 16|0);
    $24 = HEAP32[$child249>>2]|0;
    $cmp251 = ($24|0)==(0|0);
    if (!($cmp251)) {
     $arrayidx261 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx261>>2] = $24;
     $parent262 = ((($24)) + 24|0);
     HEAP32[$parent262>>2] = $R$3;
    }
    $arrayidx267 = ((($child249)) + 4|0);
    $25 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($25|0)==(0|0);
    if (!($cmp268)) {
     $arrayidx278 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx278>>2] = $25;
     $parent279 = ((($25)) + 24|0);
     HEAP32[$parent279>>2] = $R$3;
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $and294 = $0 & 1;
  $or295 = $and294 | $add105;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $26 = HEAP32[$head299>>2]|0;
  $or300 = $26 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $and305 = $0 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($p) + ($add105)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $27 = HEAP32[$head318>>2]|0;
  $or319 = $27 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$010 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0;
 var $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$09 = 0, $add$ptr = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0;
 var $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0;
 var $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $and6067 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx146$sink = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0;
 var $arrayidx428$sink = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk266 = 0, $bk317 = 0, $bk329 = 0, $bk352 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0;
 var $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk81 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp139 = 0, $cmp151 = 0, $cmp163 = 0, $cmp180 = 0, $cmp203 = 0;
 var $cmp227 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp28 = 0, $cmp289 = 0, $cmp330 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp393 = 0, $cmp400 = 0, $cmp421 = 0, $cmp433 = 0, $cmp447 = 0, $cmp464 = 0, $cmp489 = 0, $cmp508 = 0, $cmp547 = 0;
 var $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp6078 = 0, $cmp61 = 0, $cmp615 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $fd = 0, $fd264 = 0, $fd318 = 0, $fd334 = 0, $fd353 = 0, $fd53 = 0, $fd540 = 0, $fd595 = 0;
 var $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd82 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0, $head6056 = 0, $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0;
 var $neg127 = 0, $neg293 = 0, $neg408 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0;
 var $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl126 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0;
 var $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(365212)>>2]|0;
   $cmp10 = ($2|0)==($add$ptr5|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $19 = HEAP32[$head201>>2]|0;
    $and202 = $19 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $19 & -2;
    HEAP32[(365200)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $3 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $4 = HEAP32[$bk>>2]|0;
    $cmp28 = ($4|0)==($3|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $5 = HEAP32[91298]|0;
     $and32 = $5 & $neg;
     HEAP32[91298] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    } else {
     $bk52 = ((($3)) + 12|0);
     HEAP32[$bk52>>2] = $4;
     $fd53 = ((($4)) + 8|0);
     HEAP32[$fd53>>2] = $3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
   }
   $parent = ((($add$ptr5)) + 24|0);
   $6 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $7 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($7|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $9 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($9|0)==(0|0);
     if ($cmp87) {
      $10 = HEAP32[$child>>2]|0;
      $cmp91 = ($10|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $10;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $9;$RP$1$ph = $arrayidx86;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $11 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($11|0)==(0|0);
      if ($cmp96) {
       $arrayidx100 = ((($R$1)) + 16|0);
       $12 = HEAP32[$arrayidx100>>2]|0;
       $cmp101 = ($12|0)==(0|0);
       if ($cmp101) {
        break;
       } else {
        $R$1$be = $12;$RP$1$be = $arrayidx100;
       }
      } else {
       $R$1$be = $11;$RP$1$be = $arrayidx95;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $8 = HEAP32[$fd65>>2]|0;
     $bk81 = ((($8)) + 12|0);
     HEAP32[$bk81>>2] = $7;
     $fd82 = ((($7)) + 8|0);
     HEAP32[$fd82>>2] = $8;
     $R$3 = $7;
    }
   } while(0);
   $cmp115 = ($6|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $13 = HEAP32[$index>>2]|0;
    $arrayidx118 = (365496 + ($13<<2)|0);
    $14 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($14|0)==($add$ptr5|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$3;
     $cond2 = ($R$3|0)==(0|0);
     if ($cond2) {
      $shl126 = 1 << $13;
      $neg127 = $shl126 ^ -1;
      $15 = HEAP32[(365196)>>2]|0;
      $and128 = $15 & $neg127;
      HEAP32[(365196)>>2] = $and128;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    } else {
     $arrayidx138 = ((($6)) + 16|0);
     $16 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($16|0)==($add$ptr5|0);
     $arrayidx146 = ((($6)) + 20|0);
     $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
     HEAP32[$arrayidx146$sink>>2] = $R$3;
     $cmp151 = ($R$3|0)==(0|0);
     if ($cmp151) {
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $6;
    $child161 = ((($add$ptr5)) + 16|0);
    $17 = HEAP32[$child161>>2]|0;
    $cmp163 = ($17|0)==(0|0);
    if (!($cmp163)) {
     $arrayidx173 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx173>>2] = $17;
     $parent174 = ((($17)) + 24|0);
     HEAP32[$parent174>>2] = $R$3;
    }
    $arrayidx179 = ((($child161)) + 4|0);
    $18 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($18|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $arrayidx190 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx190>>2] = $18;
     $parent191 = ((($18)) + 24|0);
     HEAP32[$parent191>>2] = $R$3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $head223 = ((($add$ptr)) + 4|0);
 $20 = HEAP32[$head223>>2]|0;
 $and224 = $20 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $21 = HEAP32[(365216)>>2]|0;
  $cmp227 = ($21|0)==($add$ptr|0);
  if ($cmp227) {
   $22 = HEAP32[(365204)>>2]|0;
   $add230 = (($22) + ($psize$addr$1))|0;
   HEAP32[(365204)>>2] = $add230;
   HEAP32[(365216)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $23 = HEAP32[(365212)>>2]|0;
   $cmp235 = ($p$addr$1|0)==($23|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(365212)>>2] = 0;
   HEAP32[(365200)>>2] = 0;
   return;
  }
  $24 = HEAP32[(365212)>>2]|0;
  $cmp244 = ($24|0)==($add$ptr|0);
  if ($cmp244) {
   $25 = HEAP32[(365200)>>2]|0;
   $add248 = (($25) + ($psize$addr$1))|0;
   HEAP32[(365200)>>2] = $add248;
   HEAP32[(365212)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $20 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $20 >>> 3;
  $cmp260 = ($20>>>0)<(256);
  do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $26 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $27 = HEAP32[$bk266>>2]|0;
    $cmp289 = ($27|0)==($26|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $28 = HEAP32[91298]|0;
     $and295 = $28 & $neg293;
     HEAP32[91298] = $and295;
     break;
    } else {
     $bk317 = ((($26)) + 12|0);
     HEAP32[$bk317>>2] = $27;
     $fd318 = ((($27)) + 8|0);
     HEAP32[$fd318>>2] = $26;
     break;
    }
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $29 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $30 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($30|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $32 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($32|0)==(0|0);
      if ($cmp360) {
       $33 = HEAP32[$child358>>2]|0;
       $cmp365 = ($33|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1$ph = $33;$RP357$1$ph = $child358;
       }
      } else {
       $R328$1$ph = $32;$RP357$1$ph = $arrayidx359;
      }
      $R328$1 = $R328$1$ph;$RP357$1 = $RP357$1$ph;
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $34 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($34|0)==(0|0);
       if ($cmp372) {
        $arrayidx376 = ((($R328$1)) + 16|0);
        $35 = HEAP32[$arrayidx376>>2]|0;
        $cmp377 = ($35|0)==(0|0);
        if ($cmp377) {
         break;
        } else {
         $R328$1$be = $35;$RP357$1$be = $arrayidx376;
        }
       } else {
        $R328$1$be = $34;$RP357$1$be = $arrayidx371;
       }
       $R328$1 = $R328$1$be;$RP357$1 = $RP357$1$be;
      }
      HEAP32[$RP357$1>>2] = 0;
      $R328$3 = $R328$1;
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $31 = HEAP32[$fd334>>2]|0;
      $bk352 = ((($31)) + 12|0);
      HEAP32[$bk352>>2] = $30;
      $fd353 = ((($30)) + 8|0);
      HEAP32[$fd353>>2] = $31;
      $R328$3 = $30;
     }
    } while(0);
    $cmp393 = ($29|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $36 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (365496 + ($36<<2)|0);
     $37 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($37|0)==($add$ptr|0);
     if ($cmp400) {
      HEAP32[$arrayidx399>>2] = $R328$3;
      $cond3 = ($R328$3|0)==(0|0);
      if ($cond3) {
       $shl407 = 1 << $36;
       $neg408 = $shl407 ^ -1;
       $38 = HEAP32[(365196)>>2]|0;
       $and410 = $38 & $neg408;
       HEAP32[(365196)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx420 = ((($29)) + 16|0);
      $39 = HEAP32[$arrayidx420>>2]|0;
      $cmp421 = ($39|0)==($add$ptr|0);
      $arrayidx428 = ((($29)) + 20|0);
      $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
      HEAP32[$arrayidx428$sink>>2] = $R328$3;
      $cmp433 = ($R328$3|0)==(0|0);
      if ($cmp433) {
       break;
      }
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $29;
     $child445 = ((($add$ptr)) + 16|0);
     $40 = HEAP32[$child445>>2]|0;
     $cmp447 = ($40|0)==(0|0);
     if (!($cmp447)) {
      $arrayidx457 = ((($R328$3)) + 16|0);
      HEAP32[$arrayidx457>>2] = $40;
      $parent458 = ((($40)) + 24|0);
      HEAP32[$parent458>>2] = $R328$3;
     }
     $arrayidx463 = ((($child445)) + 4|0);
     $41 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($41|0)==(0|0);
     if (!($cmp464)) {
      $arrayidx474 = ((($R328$3)) + 20|0);
      HEAP32[$arrayidx474>>2] = $41;
      $parent475 = ((($41)) + 24|0);
      HEAP32[$parent475>>2] = $R328$3;
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $42 = HEAP32[(365212)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($42|0);
  if ($cmp489) {
   HEAP32[(365200)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $20 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (365232 + ($shl515<<2)|0);
  $43 = HEAP32[91298]|0;
  $shl519 = 1 << $shr507;
  $and520 = $43 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $43 | $shl519;
   HEAP32[91298] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $44 = ((($arrayidx516)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $$pre$phiZ2D = $44;$F517$0 = $45;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (365496 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $46 = HEAP32[(365196)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $46 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $46 | $shl586;
  HEAP32[(365196)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $47 = HEAP32[$arrayidx579>>2]|0;
 $head6056 = ((($47)) + 4|0);
 $48 = HEAP32[$head6056>>2]|0;
 $and6067 = $48 & -8;
 $cmp6078 = ($and6067|0)==($psize$addr$2|0);
 L104: do {
  if ($cmp6078) {
   $T$0$lcssa = $47;
  } else {
   $cmp598 = ($I545$0|0)==(31);
   $shr600 = $I545$0 >>> 1;
   $sub603 = (25 - ($shr600))|0;
   $cond = $cmp598 ? 0 : $sub603;
   $shl604 = $psize$addr$2 << $cond;
   $K597$010 = $shl604;$T$09 = $47;
   while(1) {
    $shr611 = $K597$010 >>> 31;
    $arrayidx613 = (((($T$09)) + 16|0) + ($shr611<<2)|0);
    $49 = HEAP32[$arrayidx613>>2]|0;
    $cmp615 = ($49|0)==(0|0);
    if ($cmp615) {
     break;
    }
    $shl614 = $K597$010 << 1;
    $head605 = ((($49)) + 4|0);
    $50 = HEAP32[$head605>>2]|0;
    $and606 = $50 & -8;
    $cmp607 = ($and606|0)==($psize$addr$2|0);
    if ($cmp607) {
     $T$0$lcssa = $49;
     break L104;
    } else {
     $K597$010 = $shl614;$T$09 = $49;
    }
   }
   HEAP32[$arrayidx613>>2] = $p$addr$1;
   $parent625 = ((($p$addr$1)) + 24|0);
   HEAP32[$parent625>>2] = $T$09;
   $bk626 = ((($p$addr$1)) + 12|0);
   HEAP32[$bk626>>2] = $p$addr$1;
   $fd627 = ((($p$addr$1)) + 8|0);
   HEAP32[$fd627>>2] = $p$addr$1;
   return;
  }
 } while(0);
 $fd635 = ((($T$0$lcssa)) + 8|0);
 $51 = HEAP32[$fd635>>2]|0;
 $bk648 = ((($51)) + 12|0);
 HEAP32[$bk648>>2] = $p$addr$1;
 HEAP32[$fd635>>2] = $p$addr$1;
 $fd650 = ((($p$addr$1)) + 8|0);
 HEAP32[$fd650>>2] = $51;
 $bk651 = ((($p$addr$1)) + 12|0);
 HEAP32[$bk651>>2] = $T$0$lcssa;
 $parent652 = ((($p$addr$1)) + 24|0);
 HEAP32[$parent652>>2] = 0;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call1)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0;
 var $call40 = 0, $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0;
 var $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0;
 var $wend14 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $iovs = sp;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iovs;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call40 = (___syscall146(146,($vararg_buffer|0))|0);
 $call741 = (___syscall_ret($call40)|0);
 $cmp42 = ($add|0)==($call741|0);
 L1: do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;$iov$043 = $iovs;$iovcnt$045 = 2;$rem$044 = $add;
   while(1) {
    $cmp12 = ($call746|0)<(0);
    if ($cmp12) {
     break;
    }
    $sub21 = (($rem$044) - ($call746))|0;
    $iov_len23 = ((($iov$043)) + 4|0);
    $9 = HEAP32[$iov_len23>>2]|0;
    $cmp24 = ($call746>>>0)>($9>>>0);
    $incdec$ptr = ((($iov$043)) + 8|0);
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = (($iovcnt$045) + ($dec))|0;
    $sub28 = $cmp24 ? $9 : 0;
    $cnt$0 = (($call746) - ($sub28))|0;
    $10 = HEAP32[$iov$1>>2]|0;
    $add$ptr32 = (($10) + ($cnt$0)|0);
    HEAP32[$iov$1>>2] = $add$ptr32;
    $iov_len36 = ((($iov$1)) + 4|0);
    $11 = HEAP32[$iov_len36>>2]|0;
    $sub37 = (($11) - ($cnt$0))|0;
    HEAP32[$iov_len36>>2] = $sub37;
    $12 = HEAP32[$fd>>2]|0;
    $13 = $iov$1;
    HEAP32[$vararg_buffer3>>2] = $12;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $13;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $iovcnt$1;
    $call = (___syscall146(146,($vararg_buffer3|0))|0);
    $call7 = (___syscall_ret($call)|0);
    $cmp = ($sub21|0)==($call7|0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;$iov$043 = $iov$1;$iovcnt$045 = $iovcnt$1;$rem$044 = $sub21;
    }
   }
   $wend14 = ((($f)) + 16|0);
   HEAP32[$wend14>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $7 = HEAP32[$f>>2]|0;
   $or = $7 | 32;
   HEAP32[$f>>2] = $or;
   $cmp17 = ($iovcnt$045|0)==(2);
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = ((($iov$043)) + 4|0);
    $8 = HEAP32[$iov_len19>>2]|0;
    $sub = (($len) - ($8))|0;
    $retval$0 = $sub;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $buf8 = ((($f)) + 44|0);
  $4 = HEAP32[$buf8>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $ret;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $call = (___syscall140(140,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call)|0);
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 } else {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (365752|0);
}
function _dummy($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $arrayidx21 = 0, $arrayinit$element = 0, $buf3 = 0, $buf_size = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp8 = 0;
 var $fd = 0, $incdec$ptr = 0, $iov = 0, $iov_len = 0, $iov_len4 = 0, $lnot$ext = 0, $or = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $tobool = 0, $tobool17 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $xor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $iov = sp;
 HEAP32[$iov>>2] = $buf;
 $iov_len = ((($iov)) + 4|0);
 $buf_size = ((($f)) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)!=(0);
 $lnot$ext = $tobool&1;
 $sub = (($len) - ($lnot$ext))|0;
 HEAP32[$iov_len>>2] = $sub;
 $arrayinit$element = ((($iov)) + 8|0);
 $buf3 = ((($f)) + 44|0);
 $1 = HEAP32[$buf3>>2]|0;
 HEAP32[$arrayinit$element>>2] = $1;
 $iov_len4 = ((($iov)) + 12|0);
 HEAP32[$iov_len4>>2] = $0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iov;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call = (___syscall145(145,($vararg_buffer|0))|0);
 $call6 = (___syscall_ret($call)|0);
 $cmp = ($call6|0)<(1);
 if ($cmp) {
  $and = $call6 & 48;
  $xor = $and ^ 16;
  $4 = HEAP32[$f>>2]|0;
  $or = $4 | $xor;
  HEAP32[$f>>2] = $or;
  $retval$0 = $call6;
 } else {
  $5 = HEAP32[$iov_len>>2]|0;
  $cmp8 = ($call6>>>0)>($5>>>0);
  if ($cmp8) {
   $sub13 = (($call6) - ($5))|0;
   $6 = HEAP32[$buf3>>2]|0;
   $rpos = ((($f)) + 4|0);
   HEAP32[$rpos>>2] = $6;
   $$cast = $6;
   $add$ptr = (($$cast) + ($sub13)|0);
   $rend = ((($f)) + 8|0);
   HEAP32[$rend>>2] = $add$ptr;
   $7 = HEAP32[$buf_size>>2]|0;
   $tobool17 = ($7|0)==(0);
   if ($tobool17) {
    $retval$0 = $len;
   } else {
    $incdec$ptr = ((($$cast)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr;
    $8 = HEAP8[$$cast>>0]|0;
    $sub20 = (($len) + -1)|0;
    $arrayidx21 = (($buf) + ($sub20)|0);
    HEAP8[$arrayidx21>>0] = $8;
    $retval$0 = $len;
   }
  } else {
   $retval$0 = $call6;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call3 = 0, $fd = 0, $lbf = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $wsz = sp + 16|0;
 $write = ((($f)) + 36|0);
 HEAP32[$write>>2] = 75;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 64;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $fd = ((($f)) + 60|0);
  $1 = HEAP32[$fd>>2]|0;
  $2 = $wsz;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $call = (___syscall54(54,($vararg_buffer|0))|0);
  $tobool2 = ($call|0)==(0);
  if (!($tobool2)) {
   $lbf = ((($f)) + 75|0);
   HEAP8[$lbf>>0] = -1;
  }
 }
 $call3 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($call3|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (354564|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $conv11 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $l$015 = 0, $n$addr$017 = 0, $n$addr$017$in = 0, $or$cond = 0, $or$cond12 = 0, $r$0$lcssa = 0, $r$016 = 0, $retval$0 = 0, $sub = 0;
 var $tobool = 0, $tobool1 = 0, $tobool114 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($n|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $0 = HEAP8[$_l>>0]|0;
  $tobool114 = ($0<<24>>24)==(0);
  L3: do {
   if ($tobool114) {
    $$lcssa = 0;$r$0$lcssa = $_r;
   } else {
    $2 = $0;$l$015 = $_l;$n$addr$017$in = $n;$r$016 = $_r;
    while(1) {
     $n$addr$017 = (($n$addr$017$in) + -1)|0;
     $1 = HEAP8[$r$016>>0]|0;
     $tobool3 = ($1<<24>>24)!=(0);
     $tobool5 = ($n$addr$017|0)!=(0);
     $or$cond = $tobool5 & $tobool3;
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond12 = $cmp & $or$cond;
     if (!($or$cond12)) {
      $$lcssa = $2;$r$0$lcssa = $r$016;
      break L3;
     }
     $incdec$ptr = ((($l$015)) + 1|0);
     $incdec$ptr9 = ((($r$016)) + 1|0);
     $3 = HEAP8[$incdec$ptr>>0]|0;
     $tobool1 = ($3<<24>>24)==(0);
     if ($tobool1) {
      $$lcssa = 0;$r$0$lcssa = $incdec$ptr9;
      break;
     } else {
      $2 = $3;$l$015 = $incdec$ptr;$n$addr$017$in = $n$addr$017;$r$016 = $incdec$ptr9;
     }
    }
   }
  } while(0);
  $conv11 = $$lcssa&255;
  $4 = HEAP8[$r$0$lcssa>>0]|0;
  $conv12 = $4&255;
  $sub = (($conv11) - ($conv12))|0;
  $retval$0 = $sub;
 }
 return ($retval$0|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and28 = 0, $and7 = 0, $and729 = 0, $cmp = 0, $d$addr$0$lcssa = 0, $d$addr$037 = 0, $d$addr$1 = 0, $d$addr$224 = 0;
 var $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr19 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $neg = 0, $neg27 = 0, $rem2 = 0, $rem235 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$038 = 0, $s$addr$1 = 0, $s$addr$225 = 0, $sub = 0, $sub26 = 0, $tobool = 0, $tobool16 = 0, $tobool1623 = 0;
 var $tobool3 = 0, $tobool36 = 0, $tobool8 = 0, $tobool830 = 0, $wd$0$lcssa = 0, $wd$031 = 0, $ws$0$lcssa = 0, $ws$032 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 L1: do {
  if ($cmp) {
   $rem235 = $0 & 3;
   $tobool36 = ($rem235|0)==(0);
   if ($tobool36) {
    $d$addr$0$lcssa = $d;$s$addr$0$lcssa = $s;
   } else {
    $d$addr$037 = $d;$s$addr$038 = $s;
    while(1) {
     $4 = HEAP8[$s$addr$038>>0]|0;
     HEAP8[$d$addr$037>>0] = $4;
     $tobool3 = ($4<<24>>24)==(0);
     if ($tobool3) {
      $retval$0 = $d$addr$037;
      break L1;
     }
     $incdec$ptr = ((($s$addr$038)) + 1|0);
     $incdec$ptr5 = ((($d$addr$037)) + 1|0);
     $5 = $incdec$ptr;
     $rem2 = $5 & 3;
     $tobool = ($rem2|0)==(0);
     if ($tobool) {
      $d$addr$0$lcssa = $incdec$ptr5;$s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $d$addr$037 = $incdec$ptr5;$s$addr$038 = $incdec$ptr;
     }
    }
   }
   $6 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub26 = (($6) + -16843009)|0;
   $neg27 = $6 & -2139062144;
   $and28 = $neg27 ^ -2139062144;
   $and729 = $and28 & $sub26;
   $tobool830 = ($and729|0)==(0);
   if ($tobool830) {
    $7 = $6;$wd$031 = $d$addr$0$lcssa;$ws$032 = $s$addr$0$lcssa;
    while(1) {
     $incdec$ptr11 = ((($ws$032)) + 4|0);
     $incdec$ptr12 = ((($wd$031)) + 4|0);
     HEAP32[$wd$031>>2] = $7;
     $8 = HEAP32[$incdec$ptr11>>2]|0;
     $sub = (($8) + -16843009)|0;
     $neg = $8 & -2139062144;
     $and = $neg ^ -2139062144;
     $and7 = $and & $sub;
     $tobool8 = ($and7|0)==(0);
     if ($tobool8) {
      $7 = $8;$wd$031 = $incdec$ptr12;$ws$032 = $incdec$ptr11;
     } else {
      $wd$0$lcssa = $incdec$ptr12;$ws$0$lcssa = $incdec$ptr11;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
   }
   $d$addr$1 = $wd$0$lcssa;$s$addr$1 = $ws$0$lcssa;
   label = 10;
  } else {
   $d$addr$1 = $d;$s$addr$1 = $s;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $9 = HEAP8[$s$addr$1>>0]|0;
  HEAP8[$d$addr$1>>0] = $9;
  $tobool1623 = ($9<<24>>24)==(0);
  if ($tobool1623) {
   $retval$0 = $d$addr$1;
  } else {
   $d$addr$224 = $d$addr$1;$s$addr$225 = $s$addr$1;
   while(1) {
    $incdec$ptr19 = ((($s$addr$225)) + 1|0);
    $incdec$ptr20 = ((($d$addr$224)) + 1|0);
    $10 = HEAP8[$incdec$ptr19>>0]|0;
    HEAP8[$incdec$ptr20>>0] = $10;
    $tobool16 = ($10<<24>>24)==(0);
    if ($tobool16) {
     $retval$0 = $incdec$ptr20;
     break;
    } else {
     $d$addr$224 = $incdec$ptr20;$s$addr$225 = $incdec$ptr19;
    }
   }
  }
 }
 return ($retval$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___strchrnul($s,$c)|0);
 $0 = HEAP8[$call>>0]|0;
 $1 = $c&255;
 $cmp = ($0<<24>>24)==($1<<24>>24);
 $cond = $cmp ? $call : 0;
 return ($cond|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $tobool36 = ($n$addr$0$lcssa52|0)==(0);
    if ($tobool36) {
     label = 16;
     break;
    } else {
     $8 = $s$0$lcssa53;
     break;
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
   L13: do {
    if ($cmp1132) {
     $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
     while(1) {
      $6 = HEAP32[$w$034>>2]|0;
      $xor = $6 ^ $mul;
      $sub = (($xor) + -16843009)|0;
      $neg = $xor & -2139062144;
      $and15 = $neg ^ -2139062144;
      $and16 = $and15 & $sub;
      $tobool17 = ($and16|0)==(0);
      if (!($tobool17)) {
       $$in = $w$034;$n$addr$1$lcssa55 = $n$addr$133;
       break L13;
      }
      $incdec$ptr21 = ((($w$034)) + 4|0);
      $sub22 = (($n$addr$133) + -4)|0;
      $cmp11 = ($sub22>>>0)>(3);
      if ($cmp11) {
       $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
      } else {
       $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
       label = 11;
       break;
      }
     }
    } else {
     $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $tobool2526 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2526) {
     label = 16;
     break;
    } else {
     $$in = $w$0$lcssa;$n$addr$1$lcssa55 = $n$addr$1$lcssa;
    }
   }
   $n$addr$227 = $n$addr$1$lcssa55;$s$128 = $$in;
   while(1) {
    $7 = HEAP8[$s$128>>0]|0;
    $cmp28 = ($7<<24>>24)==($5<<24>>24);
    if ($cmp28) {
     $8 = $s$128;
     break L8;
    }
    $incdec$ptr33 = ((($s$128)) + 1|0);
    $dec34 = (($n$addr$227) + -1)|0;
    $tobool25 = ($dec34|0)==(0);
    if ($tobool25) {
     label = 16;
     break;
    } else {
     $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $8 = 0;
 }
 return ($8|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_dummy($fd)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $cmp = ($call1|0)==(-4);
 $spec$store$select = $cmp ? 0 : $call1;
 $call2 = (___syscall_ret($spec$store$select)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0, $tobool10 = 0;
 var $tobool1031 = 0, $tobool16 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$0 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$0 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $tobool16 = ($and15|0)==(0);
      if (!($tobool16)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$0 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(353392|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,146,147)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_744($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_744($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 362852;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (362853) : (362858);
  $spec$select416 = $tobool9 ? $$ : (362855);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 362871 : 362875;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 362903 : 362879;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_743($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_743($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (1264 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_743($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_743($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_743($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_743($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_743($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_743($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,362883,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_743($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,362883,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_743($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_743($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 255]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 75;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((800 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 362835;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 362835;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 362835 : (362837);
       $spec$select205 = $tobool291 ? $$ : (362836);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 362835;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 362835;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 362845 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 362835;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_743($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 255]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 362835;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (362835 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 362835 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_743($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_743($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_743($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_743($f,48,$w$2,$add436,$xor444);
    _pad_743($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_743($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 255]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (1264 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _pad_743($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_37()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_37() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 255]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 255]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_744($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function ___lctrans_impl($msg,$lm) {
 $msg = $msg|0;
 $lm = $lm|0;
 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $map_size = 0, $tobool = 0, $tobool1 = 0, $trans$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($lm|0)==(0|0);
 if ($tobool) {
  $trans$0 = 0;
 } else {
  $0 = HEAP32[$lm>>2]|0;
  $map_size = ((($lm)) + 4|0);
  $1 = HEAP32[$map_size>>2]|0;
  $call = (___mo_lookup($0,$1,$msg)|0);
  $trans$0 = $call;
 }
 $tobool1 = ($trans$0|0)==(0|0);
 $cond = $tobool1 ? $msg : $trans$0;
 return ($cond|0);
}
function ___mo_lookup($p,$size,$s) {
 $p = $p|0;
 $size = $size|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr65 = 0, $add16 = 0, $add23 = 0, $add31 = 0, $add42 = 0, $add49 = 0, $add59 = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $arrayidx17 = 0, $arrayidx24 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx43 = 0, $arrayidx50 = 0, $arrayidx60 = 0, $b$0 = 0, $b$1 = 0, $call = 0, $call18 = 0, $call2 = 0, $call25 = 0, $call36 = 0, $call4 = 0, $call44 = 0, $call51 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp26 = 0, $cmp29 = 0, $cmp52 = 0, $cmp56 = 0, $cmp6 = 0, $cmp67 = 0, $cmp71 = 0, $div = 0, $div12 = 0, $div13 = 0, $div14 = 0, $mul = 0, $mul15 = 0, $n$0 = 0, $n$1 = 0, $or = 0, $or$cond = 0, $or$cond66 = 0, $or$cond67 = 0, $rem = 0;
 var $retval$4 = 0, $spec$select = 0, $sub = 0, $sub28 = 0, $sub5 = 0, $sub55 = 0, $sub79 = 0, $tobool = 0, $tobool33 = 0, $tobool37 = 0, $tobool62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $sub = (($0) + 1794895138)|0;
 $arrayidx = ((($p)) + 8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $call = (_swapc($1,$sub)|0);
 $arrayidx1 = ((($p)) + 12|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 $call2 = (_swapc($2,$sub)|0);
 $arrayidx3 = ((($p)) + 16|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $call4 = (_swapc($3,$sub)|0);
 $div = $size >>> 2;
 $cmp = ($call>>>0)<($div>>>0);
 L1: do {
  if ($cmp) {
   $mul = $call << 2;
   $sub5 = (($size) - ($mul))|0;
   $cmp6 = ($call2>>>0)<($sub5>>>0);
   $cmp10 = ($call4>>>0)<($sub5>>>0);
   $or$cond = $cmp6 & $cmp10;
   if ($or$cond) {
    $or = $call4 | $call2;
    $rem = $or & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $div12 = $call2 >>> 2;
     $div13 = $call4 >>> 2;
     $b$0 = 0;$n$0 = $call;
     while(1) {
      $div14 = $n$0 >>> 1;
      $add = (($b$0) + ($div14))|0;
      $mul15 = $add << 1;
      $add16 = (($mul15) + ($div12))|0;
      $arrayidx17 = (($p) + ($add16<<2)|0);
      $4 = HEAP32[$arrayidx17>>2]|0;
      $call18 = (_swapc($4,$sub)|0);
      $add23 = (($add16) + 1)|0;
      $arrayidx24 = (($p) + ($add23<<2)|0);
      $5 = HEAP32[$arrayidx24>>2]|0;
      $call25 = (_swapc($5,$sub)|0);
      $cmp26 = ($call25>>>0)<($size>>>0);
      $sub28 = (($size) - ($call25))|0;
      $cmp29 = ($call18>>>0)<($sub28>>>0);
      $or$cond66 = $cmp26 & $cmp29;
      if (!($or$cond66)) {
       $retval$4 = 0;
       break L1;
      }
      $add31 = (($call25) + ($call18))|0;
      $arrayidx32 = (($p) + ($add31)|0);
      $6 = HEAP8[$arrayidx32>>0]|0;
      $tobool33 = ($6<<24>>24)==(0);
      if (!($tobool33)) {
       $retval$4 = 0;
       break L1;
      }
      $add$ptr = (($p) + ($call25)|0);
      $call36 = (_strcmp($s,$add$ptr)|0);
      $tobool37 = ($call36|0)==(0);
      if ($tobool37) {
       break;
      }
      $cmp67 = ($n$0|0)==(1);
      $cmp71 = ($call36|0)<(0);
      if ($cmp67) {
       $retval$4 = 0;
       break L1;
      }
      $b$1 = $cmp71 ? $b$0 : $add;
      $sub79 = (($n$0) - ($div14))|0;
      $n$1 = $cmp71 ? $div14 : $sub79;
      $b$0 = $b$1;$n$0 = $n$1;
     }
     $add42 = (($mul15) + ($div13))|0;
     $arrayidx43 = (($p) + ($add42<<2)|0);
     $7 = HEAP32[$arrayidx43>>2]|0;
     $call44 = (_swapc($7,$sub)|0);
     $add49 = (($add42) + 1)|0;
     $arrayidx50 = (($p) + ($add49<<2)|0);
     $8 = HEAP32[$arrayidx50>>2]|0;
     $call51 = (_swapc($8,$sub)|0);
     $cmp52 = ($call51>>>0)<($size>>>0);
     $sub55 = (($size) - ($call51))|0;
     $cmp56 = ($call44>>>0)<($sub55>>>0);
     $or$cond67 = $cmp52 & $cmp56;
     if ($or$cond67) {
      $add$ptr65 = (($p) + ($call51)|0);
      $add59 = (($call51) + ($call44))|0;
      $arrayidx60 = (($p) + ($add59)|0);
      $9 = HEAP8[$arrayidx60>>0]|0;
      $tobool62 = ($9<<24>>24)==(0);
      $spec$select = $tobool62 ? $add$ptr65 : 0;
      $retval$4 = $spec$select;
     } else {
      $retval$4 = 0;
     }
    } else {
     $retval$4 = 0;
    }
   } else {
    $retval$4 = 0;
   }
  } else {
   $retval$4 = 0;
  }
 } while(0);
 return ($retval$4|0);
}
function _swapc($x,$c) {
 $x = $x|0;
 $c = $c|0;
 var $or5 = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($c|0)==(0);
 $or5 = (_llvm_bswap_i32(($x|0))|0);
 $spec$select = $tobool ? $x : $or5;
 return ($spec$select|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx38 = 0, $c$036 = 0, $c$2 = 0, $call = 0, $call71 = 0, $cmp = 0, $cmp32 = 0, $cmp65 = 0;
 var $conv = 0, $conv29 = 0, $conv31 = 0, $conv42 = 0, $conv52 = 0, $dec = 0, $dec55 = 0, $dec55$lcssa = 0, $dec5547 = 0, $dec5551 = 0, $dummy = 0, $incdec$ptr = 0, $incdec$ptr5149 = 0, $lnot$ext = 0, $locale = 0, $n$addr$035 = 0, $or = 0, $or54 = 0, $or54$lcssa = 0, $or5446 = 0;
 var $or5450 = 0, $retval$0 = 0, $s$037 = 0, $s$037$pn = 0, $shl = 0, $shl42 = 0, $shr46 = 0, $spec$select = 0, $spec$select32 = 0, $sub = 0, $sub43 = 0, $sub53 = 0, $sub5345 = 0, $sub59 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool18 = 0, $tobool21 = 0;
 var $tobool3 = 0, $tobool40 = 0, $tobool48 = 0, $tobool57 = 0, $tobool5748 = 0, $tobool6 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dummy = sp;
 $tobool = ($st|0)==(0|0);
 $spec$select = $tobool ? 365756 : $st;
 $0 = HEAP32[$spec$select>>2]|0;
 $tobool1 = ($src|0)==(0|0);
 L1: do {
  if ($tobool1) {
   $tobool3 = ($0|0)==(0);
   if ($tobool3) {
    $retval$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $tobool6 = ($wc|0)==(0|0);
   $spec$select32 = $tobool6 ? $dummy : $wc;
   $tobool10 = ($n|0)==(0);
   if ($tobool10) {
    $retval$0 = -2;
   } else {
    $tobool13 = ($0|0)==(0);
    if ($tobool13) {
     $1 = HEAP8[$src>>0]|0;
     $cmp = ($1<<24>>24)>(-1);
     if ($cmp) {
      $conv = $1&255;
      HEAP32[$spec$select32>>2] = $conv;
      $tobool18 = ($1<<24>>24)!=(0);
      $lnot$ext = $tobool18&1;
      $retval$0 = $lnot$ext;
      break;
     }
     $call = (___pthread_self_40()|0);
     $locale = ((($call)) + 188|0);
     $2 = HEAP32[$locale>>2]|0;
     $3 = HEAP32[$2>>2]|0;
     $tobool21 = ($3|0)==(0|0);
     $4 = HEAP8[$src>>0]|0;
     if ($tobool21) {
      $conv29 = $4 << 24 >> 24;
      $and = $conv29 & 57343;
      HEAP32[$spec$select32>>2] = $and;
      $retval$0 = 1;
      break;
     }
     $conv31 = $4&255;
     $sub = (($conv31) + -194)|0;
     $cmp32 = ($sub>>>0)>(50);
     if ($cmp32) {
      label = 19;
      break;
     }
     $incdec$ptr = ((($src)) + 1|0);
     $arrayidx38 = (592 + ($sub<<2)|0);
     $5 = HEAP32[$arrayidx38>>2]|0;
     $dec = (($n) + -1)|0;
     $tobool40 = ($dec|0)==(0);
     if ($tobool40) {
      $c$2 = $5;
     } else {
      $c$036 = $5;$n$addr$035 = $dec;$s$037 = $incdec$ptr;
      label = 11;
     }
    } else {
     $c$036 = $0;$n$addr$035 = $n;$s$037 = $src;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $6 = HEAP8[$s$037>>0]|0;
      $conv42 = $6&255;
      $7 = $conv42 >>> 3;
      $sub43 = (($7) + -16)|0;
      $shr46 = $c$036 >> 26;
      $add = (($7) + ($shr46))|0;
      $or = $sub43 | $add;
      $tobool48 = ($or>>>0)>(7);
      if ($tobool48) {
       label = 19;
       break L1;
      }
      $shl42 = $c$036 << 6;
      $sub5345 = (($conv42) + -128)|0;
      $or5446 = $sub5345 | $shl42;
      $dec5547 = (($n$addr$035) + -1)|0;
      $tobool5748 = ($or5446|0)<(0);
      if ($tobool5748) {
       $dec5551 = $dec5547;$or5450 = $or5446;$s$037$pn = $s$037;
       while(1) {
        $incdec$ptr5149 = ((($s$037$pn)) + 1|0);
        $tobool61 = ($dec5551|0)==(0);
        if ($tobool61) {
         $c$2 = $or5450;
         break L14;
        }
        $8 = HEAP8[$incdec$ptr5149>>0]|0;
        $9 = $8 & -64;
        $cmp65 = ($9<<24>>24)==(-128);
        if (!($cmp65)) {
         label = 19;
         break L1;
        }
        $shl = $or5450 << 6;
        $conv52 = $8&255;
        $sub53 = (($conv52) + -128)|0;
        $or54 = $sub53 | $shl;
        $dec55 = (($dec5551) + -1)|0;
        $tobool57 = ($or54|0)<(0);
        if ($tobool57) {
         $dec5551 = $dec55;$or5450 = $or54;$s$037$pn = $incdec$ptr5149;
        } else {
         $dec55$lcssa = $dec55;$or54$lcssa = $or54;
         break;
        }
       }
      } else {
       $dec55$lcssa = $dec5547;$or54$lcssa = $or5446;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select32>>2] = $or54$lcssa;
      $sub59 = (($n) - ($dec55$lcssa))|0;
      $retval$0 = $sub59;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $c$2;
    $retval$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $call71 = (___errno_location()|0);
  HEAP32[$call71>>2] = 84;
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___pthread_self_40() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $phitmp = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  $1 = 1;
 } else {
  $0 = HEAP32[$st>>2]|0;
  $tobool1 = ($0|0)==(0);
  $phitmp = $tobool1&1;
  $1 = $phitmp;
 }
 return ($1|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $or = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $or = $c | 32;
 $sub = (($or) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _isupper($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -65)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $narrow = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 $sub = (($c) + -9)|0;
 $cmp1 = ($sub>>>0)<(5);
 $narrow = $cmp | $cmp1;
 $0 = $narrow&1;
 return ($0|0);
}
function _tolower($c) {
 $c = $c|0;
 var $call = 0, $or = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isupper($c)|0);
 $tobool = ($call|0)==(0);
 $or = $c | 32;
 $retval$0 = $tobool ? $c : $or;
 return ($retval$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (_malloc($add)|0);
 $tobool = ($call1|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call3 = (_memcpy(($call1|0),($s|0),($add|0))|0);
  $retval$0 = $call3;
 }
 return ($retval$0|0);
}
function _sleep($seconds) {
 $seconds = $seconds|0;
 var $0 = 0, $call = 0, $retval$0 = 0, $tobool = 0, $tv = 0, $tv_nsec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tv = sp;
 HEAP32[$tv>>2] = $seconds;
 $tv_nsec = ((($tv)) + 4|0);
 HEAP32[$tv_nsec>>2] = 0;
 $call = (_nanosleep(($tv|0),($tv|0))|0);
 $tobool = ($call|0)==(0);
 $0 = HEAP32[$tv>>2]|0;
 $retval$0 = $tobool ? 0 : $0;
 STACKTOP = sp;return ($retval$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _ntohs($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16($n)|0);
 return ($call|0);
}
function ___bswap_16($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function _send($fd,$buf,$len,$flags) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_sendto($fd,$buf,$len,$flags,0,0)|0);
 return ($call|0);
}
function _sendto($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $2 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 $0 = $buf;
 HEAP32[$arrayinit$element>>2] = $0;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $len;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = $flags;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 $1 = $addr;
 HEAP32[$arrayinit$element3>>2] = $1;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = $alen;
 $2 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _listen($fd,$backlog) {
 $fd = $fd|0;
 $backlog = $backlog|0;
 var $$compoundliteral = 0, $0 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 HEAP32[$arrayinit$element>>2] = $backlog;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 $0 = $$compoundliteral;
 ;HEAP32[$arrayinit$element1>>2]=0|0;HEAP32[$arrayinit$element1+4>>2]=0|0;HEAP32[$arrayinit$element1+8>>2]=0|0;HEAP32[$arrayinit$element1+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _socket($domain,$type,$protocol) {
 $domain = $domain|0;
 $type = $type|0;
 $protocol = $protocol|0;
 var $$compoundliteral = 0, $$compoundliteral11 = 0, $$old = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $and14 = 0, $and24 = 0, $and29 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element13 = 0, $arrayinit$element15 = 0, $arrayinit$element16 = 0, $arrayinit$element17 = 0, $arrayinit$element18 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0;
 var $arrayinit$element4 = 0, $call = 0, $call20 = 0, $call21 = 0, $call5 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $cmp7 = 0, $cmp9 = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, $tobool$old = 0, $tobool25 = 0, $tobool30 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $$compoundliteral = sp + 72|0;
 $$compoundliteral11 = sp + 48|0;
 HEAP32[$$compoundliteral>>2] = $domain;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 HEAP32[$arrayinit$element>>2] = $type;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $protocol;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = 0;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 HEAP32[$arrayinit$element3>>2] = 0;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = 0;
 $0 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 $cmp = ($call5|0)<(0);
 do {
  if ($cmp) {
   $call6 = (___errno_location()|0);
   $1 = HEAP32[$call6>>2]|0;
   $cmp7 = ($1|0)==(22);
   if ($cmp7) {
    $$old = $type & 526336;
    $tobool$old = ($$old|0)==(0);
    if ($tobool$old) {
     $retval$0 = $call5;
     break;
    }
   } else {
    $call8 = (___errno_location()|0);
    $2 = HEAP32[$call8>>2]|0;
    $cmp9 = ($2|0)!=(93);
    $and = $type & 526336;
    $tobool = ($and|0)==(0);
    $or$cond = $tobool | $cmp9;
    if ($or$cond) {
     $retval$0 = $call5;
     break;
    }
   }
   HEAP32[$$compoundliteral11>>2] = $domain;
   $arrayinit$element13 = ((($$compoundliteral11)) + 4|0);
   $and14 = $type & -526337;
   HEAP32[$arrayinit$element13>>2] = $and14;
   $arrayinit$element15 = ((($$compoundliteral11)) + 8|0);
   HEAP32[$arrayinit$element15>>2] = $protocol;
   $arrayinit$element16 = ((($$compoundliteral11)) + 12|0);
   HEAP32[$arrayinit$element16>>2] = 0;
   $arrayinit$element17 = ((($$compoundliteral11)) + 16|0);
   HEAP32[$arrayinit$element17>>2] = 0;
   $arrayinit$element18 = ((($$compoundliteral11)) + 20|0);
   HEAP32[$arrayinit$element18>>2] = 0;
   $3 = $$compoundliteral11;
   HEAP32[$vararg_buffer2>>2] = 1;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $3;
   $call20 = (___syscall102(102,($vararg_buffer2|0))|0);
   $call21 = (___syscall_ret($call20)|0);
   $cmp22 = ($call21|0)<(0);
   if ($cmp22) {
    $retval$0 = $call21;
   } else {
    $and24 = $type & 524288;
    $tobool25 = ($and24|0)==(0);
    if (!($tobool25)) {
     HEAP32[$vararg_buffer6>>2] = $call21;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 2;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = 1;
     (___syscall221(221,($vararg_buffer6|0))|0);
    }
    $and29 = $type & 2048;
    $tobool30 = ($and29|0)==(0);
    if ($tobool30) {
     $retval$0 = $call21;
    } else {
     HEAP32[$vararg_buffer11>>2] = $call21;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 4;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 2048;
     (___syscall221(221,($vararg_buffer11|0))|0);
     $retval$0 = $call21;
    }
   }
  } else {
   $retval$0 = $call5;
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _htons($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16_212($n)|0);
 return ($call|0);
}
function _bind($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 $0 = $addr;
 HEAP32[$arrayinit$element>>2] = $0;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $len;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = 0;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 HEAP32[$arrayinit$element3>>2] = 0;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = 0;
 $1 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _setsockopt($fd,$level,$optname,$optval,$optlen) {
 $fd = $fd|0;
 $level = $level|0;
 $optname = $optname|0;
 $optval = $optval|0;
 $optlen = $optlen|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 HEAP32[$arrayinit$element>>2] = $level;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $optname;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 $0 = $optval;
 HEAP32[$arrayinit$element2>>2] = $0;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 HEAP32[$arrayinit$element3>>2] = $optlen;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = 0;
 $1 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _recvfrom($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 $0 = $buf;
 HEAP32[$arrayinit$element>>2] = $0;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $len;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = $flags;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 $1 = $addr;
 HEAP32[$arrayinit$element3>>2] = $1;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 $2 = $alen;
 HEAP32[$arrayinit$element4>>2] = $2;
 $3 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function ___bswap_16_212($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add$ptr = 0, $add$ptr36 = 0, $and = 0, $call = 0, $call12 = 0, $call50 = 0, $cmp = 0, $cmp1 = 0, $cmp27 = 0, $cmp44 = 0, $cmp53 = 0;
 var $cmp56 = 0, $cmp67 = 0, $cond = 0, $cond26 = 0, $cond32 = 0, $cond5248 = 0, $conv = 0, $conv4 = 0, $conv48 = 0, $conv64 = 0, $dec = 0, $dec63 = 0, $incdec$ptr = 0, $incdec$ptr65 = 0, $lock = 0, $mode = 0, $n$addr$053 = 0, $or = 0, $or$cond = 0, $or$cond58 = 0;
 var $p$052 = 0, $p$1 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $s$addr$050 = 0, $sext$mask = 0, $sub = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub18 = 0, $sub37 = 0, $tobool = 0, $tobool10 = 0, $tobool1051 = 0, $tobool13 = 0, $tobool39 = 0, $tobool59 = 0, $tobool6 = 0;
 var $tobool71 = 0, $tobool74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $dec = (($n) + -1)|0;
 $cmp1 = ($n|0)<(2);
 if ($cmp1) {
  $mode = ((($f)) + 74|0);
  $1 = HEAP8[$mode>>0]|0;
  $conv = $1 << 24 >> 24;
  $sub = (($conv) + 255)|0;
  $or = $sub | $conv;
  $conv4 = $or&255;
  HEAP8[$mode>>0] = $conv4;
  $tobool = ($cond|0)==(0);
  if (!($tobool)) {
   ___unlockfile($f);
  }
  $tobool6 = ($dec|0)==(0);
  if ($tobool6) {
   HEAP8[$s>>0] = 0;
   $retval$0 = $s;
  } else {
   $retval$0 = 0;
  }
 } else {
  $tobool1051 = ($dec|0)==(0);
  L11: do {
   if ($tobool1051) {
    $p$1 = $s;
    label = 17;
   } else {
    $rpos = ((($f)) + 4|0);
    $rend = ((($f)) + 8|0);
    $n$addr$053 = $dec;$p$052 = $s;
    while(1) {
     $2 = HEAP32[$rpos>>2]|0;
     $3 = HEAP32[$rend>>2]|0;
     $sub$ptr$rhs$cast = $2;
     $sub$ptr$sub = (($3) - ($sub$ptr$rhs$cast))|0;
     $call12 = (_memchr($2,10,$sub$ptr$sub)|0);
     $tobool13 = ($call12|0)==(0|0);
     $sub$ptr$lhs$cast16 = $call12;
     $sub$ptr$sub18 = (1 - ($sub$ptr$rhs$cast))|0;
     $add = (($sub$ptr$sub18) + ($sub$ptr$lhs$cast16))|0;
     $cond26 = $tobool13 ? $sub$ptr$sub : $add;
     $cmp27 = ($cond26>>>0)<($n$addr$053>>>0);
     $cond32 = $cmp27 ? $cond26 : $n$addr$053;
     (_memcpy(($p$052|0),($2|0),($cond32|0))|0);
     $4 = HEAP32[$rpos>>2]|0;
     $add$ptr = (($4) + ($cond32)|0);
     HEAP32[$rpos>>2] = $add$ptr;
     $add$ptr36 = (($p$052) + ($cond32)|0);
     $sub37 = (($n$addr$053) - ($cond32))|0;
     $tobool39 = ($sub37|0)!=(0);
     $or$cond = $tobool13 & $tobool39;
     if (!($or$cond)) {
      $p$1 = $add$ptr36;
      label = 17;
      break L11;
     }
     $5 = HEAP32[$rend>>2]|0;
     $cmp44 = ($add$ptr>>>0)<($5>>>0);
     if ($cmp44) {
      $incdec$ptr = ((($add$ptr)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $conv48 = $6&255;
      $cond5248 = $conv48;
     } else {
      $call50 = (___uflow($f)|0);
      $cmp53 = ($call50|0)<(0);
      if ($cmp53) {
       break;
      } else {
       $cond5248 = $call50;
      }
     }
     $conv64 = $cond5248&255;
     $incdec$ptr65 = ((($add$ptr36)) + 1|0);
     HEAP8[$add$ptr36>>0] = $conv64;
     $sext$mask = $cond5248 & 255;
     $cmp67 = ($sext$mask|0)==(10);
     $dec63 = (($sub37) + -1)|0;
     $tobool10 = ($dec63|0)==(0);
     $or$cond58 = $cmp67 | $tobool10;
     if ($or$cond58) {
      $p$1 = $incdec$ptr65;
      label = 17;
      break L11;
     } else {
      $n$addr$053 = $dec63;$p$052 = $incdec$ptr65;
     }
    }
    $cmp56 = ($add$ptr36|0)==($s|0);
    if ($cmp56) {
     $s$addr$050 = 0;
    } else {
     $7 = HEAP32[$f>>2]|0;
     $and = $7 & 16;
     $tobool59 = ($and|0)==(0);
     if ($tobool59) {
      $s$addr$050 = 0;
     } else {
      $p$1 = $add$ptr36;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $tobool71 = ($s|0)==(0|0);
   if ($tobool71) {
    $s$addr$050 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $s$addr$050 = $s;
   }
  }
  $tobool74 = ($cond|0)==(0);
  if ($tobool74) {
   $retval$0 = $s$addr$050;
  } else {
   ___unlockfile($f);
   $retval$0 = $s$addr$050;
  }
 }
 return ($retval$0|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and13 = 0, $and14 = 0, $and2 = 0, $and247 = 0, $cmp = 0, $cmp10 = 0, $cmp1037 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0;
 var $d$addr$3 = 0, $dec = 0, $dec32 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $neg = 0, $or$cond = 0, $or$cond50 = 0, $s$addr$0$lcssa = 0;
 var $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub = 0, $sub19 = 0, $tobool = 0, $tobool15 = 0, $tobool25 = 0, $tobool2530 = 0, $tobool28 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $tobool4 = 0, $tobool48 = 0, $tobool7 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 L1: do {
  if ($cmp) {
   $and247 = $0 & 3;
   $tobool48 = ($and247|0)!=(0);
   $tobool349 = ($n|0)!=(0);
   $or$cond50 = $tobool349 & $tobool48;
   if ($or$cond50) {
    $d$addr$051 = $d;$n$addr$053 = $n;$s$addr$052 = $s;
    while(1) {
     $4 = HEAP8[$s$addr$052>>0]|0;
     HEAP8[$d$addr$051>>0] = $4;
     $tobool4 = ($4<<24>>24)==(0);
     if ($tobool4) {
      $d$addr$3 = $d$addr$051;$n$addr$4 = $n$addr$053;
      break L1;
     }
     $dec = (($n$addr$053) + -1)|0;
     $incdec$ptr = ((($s$addr$052)) + 1|0);
     $incdec$ptr5 = ((($d$addr$051)) + 1|0);
     $5 = $incdec$ptr;
     $and2 = $5 & 3;
     $tobool = ($and2|0)!=(0);
     $tobool3 = ($dec|0)!=(0);
     $or$cond = $tobool3 & $tobool;
     if ($or$cond) {
      $d$addr$051 = $incdec$ptr5;$n$addr$053 = $dec;$s$addr$052 = $incdec$ptr;
     } else {
      $d$addr$0$lcssa = $incdec$ptr5;$n$addr$0$lcssa = $dec;$s$addr$0$lcssa = $incdec$ptr;$tobool3$lcssa = $tobool3;
      break;
     }
    }
   } else {
    $d$addr$0$lcssa = $d;$n$addr$0$lcssa = $n;$s$addr$0$lcssa = $s;$tobool3$lcssa = $tobool349;
   }
   if ($tobool3$lcssa) {
    $$pr = HEAP8[$s$addr$0$lcssa>>0]|0;
    $tobool7 = ($$pr<<24>>24)==(0);
    if ($tobool7) {
     $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = $n$addr$0$lcssa;
    } else {
     $cmp1037 = ($n$addr$0$lcssa>>>0)>(3);
     L11: do {
      if ($cmp1037) {
       $n$addr$138 = $n$addr$0$lcssa;$wd$039 = $d$addr$0$lcssa;$ws$040 = $s$addr$0$lcssa;
       while(1) {
        $6 = HEAP32[$ws$040>>2]|0;
        $sub = (($6) + -16843009)|0;
        $neg = $6 & -2139062144;
        $and13 = $neg ^ -2139062144;
        $and14 = $and13 & $sub;
        $tobool15 = ($and14|0)==(0);
        if (!($tobool15)) {
         $n$addr$1$lcssa = $n$addr$138;$wd$0$lcssa = $wd$039;$ws$0$lcssa = $ws$040;
         break L11;
        }
        HEAP32[$wd$039>>2] = $6;
        $sub19 = (($n$addr$138) + -4)|0;
        $incdec$ptr20 = ((($ws$040)) + 4|0);
        $incdec$ptr21 = ((($wd$039)) + 4|0);
        $cmp10 = ($sub19>>>0)>(3);
        if ($cmp10) {
         $n$addr$138 = $sub19;$wd$039 = $incdec$ptr21;$ws$040 = $incdec$ptr20;
        } else {
         $n$addr$1$lcssa = $sub19;$wd$0$lcssa = $incdec$ptr21;$ws$0$lcssa = $incdec$ptr20;
         break;
        }
       }
      } else {
       $n$addr$1$lcssa = $n$addr$0$lcssa;$wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
      }
     } while(0);
     $d$addr$1 = $wd$0$lcssa;$n$addr$2 = $n$addr$1$lcssa;$s$addr$1 = $ws$0$lcssa;
     label = 13;
    }
   } else {
    $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = 0;
   }
  } else {
   $d$addr$1 = $d;$n$addr$2 = $n;$s$addr$1 = $s;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $tobool2530 = ($n$addr$2|0)==(0);
   if ($tobool2530) {
    $d$addr$3 = $d$addr$1;$n$addr$4 = 0;
   } else {
    $d$addr$231 = $d$addr$1;$n$addr$333 = $n$addr$2;$s$addr$232 = $s$addr$1;
    while(1) {
     $7 = HEAP8[$s$addr$232>>0]|0;
     HEAP8[$d$addr$231>>0] = $7;
     $tobool28 = ($7<<24>>24)==(0);
     if ($tobool28) {
      $d$addr$3 = $d$addr$231;$n$addr$4 = $n$addr$333;
      break L17;
     }
     $dec32 = (($n$addr$333) + -1)|0;
     $incdec$ptr33 = ((($s$addr$232)) + 1|0);
     $incdec$ptr34 = ((($d$addr$231)) + 1|0);
     $tobool25 = ($dec32|0)==(0);
     if ($tobool25) {
      $d$addr$3 = $incdec$ptr34;$n$addr$4 = 0;
      break;
     } else {
      $d$addr$231 = $incdec$ptr34;$n$addr$333 = $dec32;$s$addr$232 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 (_memset(($d$addr$3|0),0,($n$addr$4|0))|0);
 return ($d$addr$3|0);
}
function ___shlim($f,$0,$1) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$ptr = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend5 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $2 = $shlim;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $rend = ((($f)) + 8|0);
 $6 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $7 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($6) - ($7))|0;
 $8 = ($sub$ptr$sub|0)<(0);
 $9 = $8 << 31 >> 31;
 $shcnt = ((($f)) + 120|0);
 $10 = $shcnt;
 $11 = $10;
 HEAP32[$11>>2] = $sub$ptr$sub;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = ($0|0)!=(0);
 $15 = ($1|0)!=(0);
 $16 = $14 | $15;
 $17 = ($9|0)>($1|0);
 $18 = ($sub$ptr$sub>>>0)>($0>>>0);
 $19 = ($9|0)==($1|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $or$cond = $16 & $21;
 if ($or$cond) {
  $22 = $7;
  $add$ptr = (($22) + ($0)|0);
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = $add$ptr;
 } else {
  $shend5 = ((($f)) + 104|0);
  HEAP32[$shend5>>2] = $6;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0, $and174 = 0, $arrayidx = 0, $arrayidx175 = 0;
 var $arrayidx178 = 0, $arrayidx178158 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237176 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0;
 var $call = 0, $call105 = 0, $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0, $call3 = 0, $call326 = 0, $call330 = 0, $call351 = 0, $call357 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0;
 var $cmp112 = 0, $cmp112192 = 0, $cmp114 = 0, $cmp119 = 0, $cmp132 = 0, $cmp132184 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0, $cmp180 = 0, $cmp180160 = 0, $cmp183 = 0, $cmp193 = 0, $cmp208 = 0, $cmp208153 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239178 = 0, $cmp242 = 0, $cmp25 = 0;
 var $cmp253 = 0, $cmp268 = 0, $cmp268167 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0, $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0;
 var $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0, $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179159 = 0, $conv179162 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207152$pre$phiZ2D = 0, $conv229 = 0, $conv238 = 0, $conv238177 = 0, $conv238180 = 0, $conv258 = 0;
 var $conv267 = 0, $conv267166$pre$phiZ2D = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0, $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0, $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr340 = 0;
 var $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul = 0, $mul173 = 0, $mul246 = 0, $neg$0 = 0, $neg$1 = 0, $or = 0, $or$cond = 0, $or$cond155 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond5 = 0, $or189 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0;
 var $spec$select132 = 0, $spec$select133 = 0, $sub = 0, $sub111 = 0, $sub111191 = 0, $sub111194 = 0, $sub131 = 0, $sub131187 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool337 = 0, $tobool349 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $cmp = ($base>>>0)>(36);
 L1: do {
  if ($cmp) {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 22;
   $148 = 0;$149 = 0;
  } else {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $2 = HEAP32[$rpos>>2]|0;
    $3 = HEAP32[$shend>>2]|0;
    $cmp1 = ($2>>>0)<($3>>>0);
    if ($cmp1) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $4 = HEAP8[$2>>0]|0;
     $conv = $4&255;
     $cond = $conv;
    } else {
     $call3 = (___shgetc($f)|0);
     $cond = $call3;
    }
    $call4 = (_isspace($cond)|0);
    $tobool = ($call4|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L11: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp7 = ($cond|0)==(45);
     $sub = $cmp7 << 31 >> 31;
     $5 = HEAP32[$rpos>>2]|0;
     $6 = HEAP32[$shend>>2]|0;
     $cmp14 = ($5>>>0)<($6>>>0);
     if ($cmp14) {
      $incdec$ptr18 = ((($5)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr18;
      $7 = HEAP8[$5>>0]|0;
      $conv19 = $7&255;
      $c$0 = $conv19;$neg$0 = $sub;
      break L11;
     } else {
      $call21 = (___shgetc($f)|0);
      $c$0 = $call21;$neg$0 = $sub;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $cond;$neg$0 = 0;
    }
    }
   } while(0);
   $cmp25 = ($base|0)==(0);
   $8 = $base | 16;
   $9 = ($8|0)==(16);
   $cmp30 = ($c$0|0)==(48);
   $or$cond2 = $9 & $cmp30;
   do {
    if ($or$cond2) {
     $10 = HEAP32[$rpos>>2]|0;
     $11 = HEAP32[$shend>>2]|0;
     $cmp35 = ($10>>>0)<($11>>>0);
     if ($cmp35) {
      $incdec$ptr39 = ((($10)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr39;
      $12 = HEAP8[$10>>0]|0;
      $conv40 = $12&255;
      $cond44 = $conv40;
     } else {
      $call42 = (___shgetc($f)|0);
      $cond44 = $call42;
     }
     $or = $cond44 | 32;
     $cmp45 = ($or|0)==(120);
     if (!($cmp45)) {
      if ($cmp25) {
       $base$addr$1135 = 8;$c$1137 = $cond44;
       label = 47;
       break;
      } else {
       $base$addr$1 = $base;$c$1 = $cond44;
       label = 32;
       break;
      }
     }
     $13 = HEAP32[$rpos>>2]|0;
     $14 = HEAP32[$shend>>2]|0;
     $cmp50 = ($13>>>0)<($14>>>0);
     if ($cmp50) {
      $incdec$ptr54 = ((($13)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr54;
      $15 = HEAP8[$13>>0]|0;
      $conv55 = $15&255;
      $cond59 = $conv55;
     } else {
      $call57 = (___shgetc($f)|0);
      $cond59 = $call57;
     }
     $arrayidx = ((1281) + ($cond59)|0);
     $16 = HEAP8[$arrayidx>>0]|0;
     $cmp61 = ($16&255)>(15);
     if ($cmp61) {
      $17 = HEAP32[$shend>>2]|0;
      $tobool65 = ($17|0)==(0|0);
      if (!($tobool65)) {
       $18 = HEAP32[$rpos>>2]|0;
       $incdec$ptr68 = ((($18)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr68;
      }
      $tobool71 = ($pok|0)==(0);
      if ($tobool71) {
       ___shlim($f,0,0);
       $148 = 0;$149 = 0;
       break L1;
      }
      if ($tobool65) {
       $148 = 0;$149 = 0;
       break L1;
      }
      $19 = HEAP32[$rpos>>2]|0;
      $incdec$ptr77 = ((($19)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr77;
      $148 = 0;$149 = 0;
      break L1;
     } else {
      $base$addr$1135 = 16;$c$1137 = $cond59;
      label = 47;
     }
    } else {
     $spec$select132 = $cmp25 ? 10 : $base;
     $arrayidx93 = ((1281) + ($c$0)|0);
     $20 = HEAP8[$arrayidx93>>0]|0;
     $conv94 = $20&255;
     $cmp95 = ($spec$select132>>>0)>($conv94>>>0);
     if ($cmp95) {
      $base$addr$1 = $spec$select132;$c$1 = $c$0;
      label = 32;
     } else {
      $21 = HEAP32[$shend>>2]|0;
      $tobool99 = ($21|0)==(0|0);
      if (!($tobool99)) {
       $22 = HEAP32[$rpos>>2]|0;
       $incdec$ptr102 = ((($22)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr102;
      }
      ___shlim($f,0,0);
      $call105 = (___errno_location()|0);
      HEAP32[$call105>>2] = 22;
      $148 = 0;$149 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $cmp108 = ($base$addr$1|0)==(10);
     if ($cmp108) {
      $sub111191 = (($c$1) + -48)|0;
      $cmp112192 = ($sub111191>>>0)<(10);
      if ($cmp112192) {
       $sub111194 = $sub111191;$x$0193 = 0;
       while(1) {
        $mul = ($x$0193*10)|0;
        $add = (($mul) + ($sub111194))|0;
        $23 = HEAP32[$rpos>>2]|0;
        $24 = HEAP32[$shend>>2]|0;
        $cmp119 = ($23>>>0)<($24>>>0);
        if ($cmp119) {
         $incdec$ptr123 = ((($23)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr123;
         $25 = HEAP8[$23>>0]|0;
         $conv124 = $25&255;
         $cond128 = $conv124;
        } else {
         $call126 = (___shgetc($f)|0);
         $cond128 = $call126;
        }
        $sub111 = (($cond128) + -48)|0;
        $cmp112 = ($sub111>>>0)<(10);
        $cmp114 = ($add>>>0)<(429496729);
        $26 = $cmp112 & $cmp114;
        if ($26) {
         $sub111194 = $sub111;$x$0193 = $add;
        } else {
         break;
        }
       }
       $cmp132184 = ($sub111>>>0)<(10);
       if ($cmp132184) {
        $27 = $add;$28 = 0;$c$3185 = $cond128;$sub131187 = $sub111;
        while(1) {
         $29 = (___muldi3(($27|0),($28|0),10,0)|0);
         $30 = (getTempRet0() | 0);
         $31 = ($sub131187|0)<(0);
         $32 = $31 << 31 >> 31;
         $33 = $sub131187 ^ -1;
         $34 = $32 ^ -1;
         $35 = ($30>>>0)>($34>>>0);
         $36 = ($29>>>0)>($33>>>0);
         $37 = ($30|0)==($34|0);
         $38 = $37 & $36;
         $39 = $35 | $38;
         if ($39) {
          $150 = $27;$151 = $28;$base$addr$1136 = 10;$c$8 = $c$3185;
          label = 76;
          break L43;
         }
         $40 = (_i64Add(($29|0),($30|0),($sub131187|0),($32|0))|0);
         $41 = (getTempRet0() | 0);
         $42 = HEAP32[$rpos>>2]|0;
         $43 = HEAP32[$shend>>2]|0;
         $cmp153 = ($42>>>0)<($43>>>0);
         if ($cmp153) {
          $incdec$ptr157 = ((($42)) + 1|0);
          HEAP32[$rpos>>2] = $incdec$ptr157;
          $44 = HEAP8[$42>>0]|0;
          $conv158 = $44&255;
          $cond162 = $conv158;
         } else {
          $call160 = (___shgetc($f)|0);
          $cond162 = $call160;
         }
         $sub131 = (($cond162) + -48)|0;
         $cmp132 = ($sub131>>>0)<(10);
         $45 = ($41>>>0)<(429496729);
         $46 = ($40>>>0)<(2576980378);
         $47 = ($41|0)==(429496729);
         $48 = $47 & $46;
         $49 = $45 | $48;
         $or$cond3 = $cmp132 & $49;
         if ($or$cond3) {
          $27 = $40;$28 = $41;$c$3185 = $cond162;$sub131187 = $sub131;
         } else {
          break;
         }
        }
        $cmp165 = ($sub131>>>0)>(9);
        if ($cmp165) {
         $125 = $41;$127 = $40;$neg$1 = $neg$0;
        } else {
         $150 = $40;$151 = $41;$base$addr$1136 = 10;$c$8 = $cond162;
         label = 76;
        }
       } else {
        $125 = 0;$127 = $add;$neg$1 = $neg$0;
       }
      } else {
       $125 = 0;$127 = 0;$neg$1 = $neg$0;
      }
     } else {
      $base$addr$1135 = $base$addr$1;$c$1137 = $c$1;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $sub170 = (($base$addr$1135) + -1)|0;
     $and = $sub170 & $base$addr$1135;
     $tobool171 = ($and|0)==(0);
     if ($tobool171) {
      $mul173 = ($base$addr$1135*23)|0;
      $shr = $mul173 >>> 5;
      $and174 = $shr & 7;
      $arrayidx175 = (362885 + ($and174)|0);
      $50 = HEAP8[$arrayidx175>>0]|0;
      $conv176 = $50 << 24 >> 24;
      $arrayidx178158 = ((1281) + ($c$1137)|0);
      $51 = HEAP8[$arrayidx178158>>0]|0;
      $conv179159 = $51&255;
      $cmp180160 = ($base$addr$1135>>>0)>($conv179159>>>0);
      if ($cmp180160) {
       $conv179162 = $conv179159;$x$1161 = 0;
       while(1) {
        $shl = $x$1161 << $conv176;
        $or189 = $conv179162 | $shl;
        $52 = HEAP32[$rpos>>2]|0;
        $53 = HEAP32[$shend>>2]|0;
        $cmp193 = ($52>>>0)<($53>>>0);
        if ($cmp193) {
         $incdec$ptr197 = ((($52)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr197;
         $54 = HEAP8[$52>>0]|0;
         $conv198 = $54&255;
         $cond202 = $conv198;
        } else {
         $call200 = (___shgetc($f)|0);
         $cond202 = $call200;
        }
        $arrayidx178 = ((1281) + ($cond202)|0);
        $55 = HEAP8[$arrayidx178>>0]|0;
        $conv179 = $55&255;
        $cmp180 = ($base$addr$1135>>>0)>($conv179>>>0);
        $cmp183 = ($or189>>>0)<(134217728);
        $56 = $cmp183 & $cmp180;
        if ($56) {
         $conv179162 = $conv179;$x$1161 = $or189;
        } else {
         break;
        }
       }
       $152 = $55;$60 = 0;$62 = $or189;$c$4$lcssa = $cond202;$conv207152$pre$phiZ2D = $conv179;
      } else {
       $152 = $51;$60 = 0;$62 = 0;$c$4$lcssa = $c$1137;$conv207152$pre$phiZ2D = $conv179159;
      }
      $57 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
      $58 = (getTempRet0() | 0);
      $cmp208153 = ($base$addr$1135>>>0)<=($conv207152$pre$phiZ2D>>>0);
      $59 = ($58>>>0)<($60>>>0);
      $61 = ($57>>>0)<($62>>>0);
      $63 = ($58|0)==($60|0);
      $64 = $63 & $61;
      $65 = $59 | $64;
      $or$cond155 = $cmp208153 | $65;
      if ($or$cond155) {
       $150 = $62;$151 = $60;$base$addr$1136 = $base$addr$1135;$c$8 = $c$4$lcssa;
       label = 76;
       break;
      }
      $66 = $62;$67 = $60;$71 = $152;
      while(1) {
       $68 = (_bitshift64Shl(($66|0),($67|0),($conv176|0))|0);
       $69 = (getTempRet0() | 0);
       $70 = $71&255;
       $72 = $68 | $70;
       $73 = HEAP32[$rpos>>2]|0;
       $74 = HEAP32[$shend>>2]|0;
       $cmp224 = ($73>>>0)<($74>>>0);
       if ($cmp224) {
        $incdec$ptr228 = ((($73)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr228;
        $75 = HEAP8[$73>>0]|0;
        $conv229 = $75&255;
        $cond233 = $conv229;
       } else {
        $call231 = (___shgetc($f)|0);
        $cond233 = $call231;
       }
       $arrayidx206 = ((1281) + ($cond233)|0);
       $76 = HEAP8[$arrayidx206>>0]|0;
       $conv207 = $76&255;
       $cmp208 = ($base$addr$1135>>>0)<=($conv207>>>0);
       $77 = ($69>>>0)>($58>>>0);
       $78 = ($72>>>0)>($57>>>0);
       $79 = ($69|0)==($58|0);
       $80 = $79 & $78;
       $81 = $77 | $80;
       $or$cond = $cmp208 | $81;
       if ($or$cond) {
        $150 = $72;$151 = $69;$base$addr$1136 = $base$addr$1135;$c$8 = $cond233;
        label = 76;
        break L63;
       } else {
        $66 = $72;$67 = $69;$71 = $76;
       }
      }
     }
     $arrayidx237176 = ((1281) + ($c$1137)|0);
     $82 = HEAP8[$arrayidx237176>>0]|0;
     $conv238177 = $82&255;
     $cmp239178 = ($base$addr$1135>>>0)>($conv238177>>>0);
     if ($cmp239178) {
      $conv238180 = $conv238177;$x$2179 = 0;
      while(1) {
       $mul246 = Math_imul($x$2179, $base$addr$1135)|0;
       $add249 = (($conv238180) + ($mul246))|0;
       $83 = HEAP32[$rpos>>2]|0;
       $84 = HEAP32[$shend>>2]|0;
       $cmp253 = ($83>>>0)<($84>>>0);
       if ($cmp253) {
        $incdec$ptr257 = ((($83)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr257;
        $85 = HEAP8[$83>>0]|0;
        $conv258 = $85&255;
        $cond262 = $conv258;
       } else {
        $call260 = (___shgetc($f)|0);
        $cond262 = $call260;
       }
       $arrayidx237 = ((1281) + ($cond262)|0);
       $86 = HEAP8[$arrayidx237>>0]|0;
       $conv238 = $86&255;
       $cmp239 = ($base$addr$1135>>>0)>($conv238>>>0);
       $cmp242 = ($add249>>>0)<(119304647);
       $87 = $cmp242 & $cmp239;
       if ($87) {
        $conv238180 = $conv238;$x$2179 = $add249;
       } else {
        break;
       }
      }
      $153 = $86;$154 = $add249;$155 = 0;$c$6$lcssa = $cond262;$conv267166$pre$phiZ2D = $conv238;
     } else {
      $153 = $82;$154 = 0;$155 = 0;$c$6$lcssa = $c$1137;$conv267166$pre$phiZ2D = $conv238177;
     }
     $cmp268167 = ($base$addr$1135>>>0)>($conv267166$pre$phiZ2D>>>0);
     if ($cmp268167) {
      $88 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
      $89 = (getTempRet0() | 0);
      $100 = $153;$91 = $155;$93 = $154;$c$7168 = $c$6$lcssa;
      while(1) {
       $90 = ($91>>>0)>($89>>>0);
       $92 = ($93>>>0)>($88>>>0);
       $94 = ($91|0)==($89|0);
       $95 = $94 & $92;
       $96 = $90 | $95;
       if ($96) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $97 = (___muldi3(($93|0),($91|0),($base$addr$1135|0),0)|0);
       $98 = (getTempRet0() | 0);
       $99 = $100&255;
       $101 = $99 ^ -1;
       $102 = ($98>>>0)>(4294967295);
       $103 = ($97>>>0)>($101>>>0);
       $104 = ($98|0)==(-1);
       $105 = $104 & $103;
       $106 = $102 | $105;
       if ($106) {
        $150 = $93;$151 = $91;$base$addr$1136 = $base$addr$1135;$c$8 = $c$7168;
        label = 76;
        break L63;
       }
       $107 = (_i64Add(($97|0),($98|0),($99|0),0)|0);
       $108 = (getTempRet0() | 0);
       $109 = HEAP32[$rpos>>2]|0;
       $110 = HEAP32[$shend>>2]|0;
       $cmp292 = ($109>>>0)<($110>>>0);
       if ($cmp292) {
        $incdec$ptr296 = ((($109)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr296;
        $111 = HEAP8[$109>>0]|0;
        $conv297 = $111&255;
        $cond301 = $conv297;
       } else {
        $call299 = (___shgetc($f)|0);
        $cond301 = $call299;
       }
       $arrayidx266 = ((1281) + ($cond301)|0);
       $112 = HEAP8[$arrayidx266>>0]|0;
       $conv267 = $112&255;
       $cmp268 = ($base$addr$1135>>>0)>($conv267>>>0);
       if ($cmp268) {
        $100 = $112;$91 = $108;$93 = $107;$c$7168 = $cond301;
       } else {
        $150 = $107;$151 = $108;$base$addr$1136 = $base$addr$1135;$c$8 = $cond301;
        label = 76;
        break;
       }
      }
     } else {
      $150 = $154;$151 = $155;$base$addr$1136 = $base$addr$1135;$c$8 = $c$6$lcssa;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $arrayidx305 = ((1281) + ($c$8)|0);
    $113 = HEAP8[$arrayidx305>>0]|0;
    $conv306 = $113&255;
    $cmp307 = ($base$addr$1136>>>0)>($conv306>>>0);
    if ($cmp307) {
     while(1) {
      $114 = HEAP32[$rpos>>2]|0;
      $115 = HEAP32[$shend>>2]|0;
      $cmp319 = ($114>>>0)<($115>>>0);
      if ($cmp319) {
       $incdec$ptr323 = ((($114)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr323;
       $116 = HEAP8[$114>>0]|0;
       $conv324 = $116&255;
       $cond328 = $conv324;
      } else {
       $call326 = (___shgetc($f)|0);
       $cond328 = $call326;
      }
      $arrayidx311 = ((1281) + ($cond328)|0);
      $117 = HEAP8[$arrayidx311>>0]|0;
      $conv312 = $117&255;
      $cmp313 = ($base$addr$1136>>>0)>($conv312>>>0);
      if (!($cmp313)) {
       break;
      }
     }
     $call330 = (___errno_location()|0);
     HEAP32[$call330>>2] = 34;
     $118 = $0 & 1;
     $119 = ($118|0)==(0);
     $120 = (0)==(0);
     $121 = $119 & $120;
     $spec$select133 = $121 ? $neg$0 : 0;
     $125 = $1;$127 = $0;$neg$1 = $spec$select133;
    } else {
     $125 = $151;$127 = $150;$neg$1 = $neg$0;
    }
   }
   $122 = HEAP32[$shend>>2]|0;
   $tobool337 = ($122|0)==(0|0);
   if (!($tobool337)) {
    $123 = HEAP32[$rpos>>2]|0;
    $incdec$ptr340 = ((($123)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr340;
   }
   $124 = ($125>>>0)<($1>>>0);
   $126 = ($127>>>0)<($0>>>0);
   $128 = ($125|0)==($1|0);
   $129 = $128 & $126;
   $130 = $124 | $129;
   if (!($130)) {
    $131 = $0 & 1;
    $132 = ($131|0)!=(0);
    $133 = (0)!=(0);
    $134 = $132 | $133;
    $tobool349 = ($neg$1|0)!=(0);
    $or$cond5 = $134 | $tobool349;
    if (!($or$cond5)) {
     $call351 = (___errno_location()|0);
     HEAP32[$call351>>2] = 34;
     $135 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $136 = (getTempRet0() | 0);
     $148 = $136;$149 = $135;
     break;
    }
    $137 = ($125>>>0)>($1>>>0);
    $138 = ($127>>>0)>($0>>>0);
    $139 = ($125|0)==($1|0);
    $140 = $139 & $138;
    $141 = $137 | $140;
    if ($141) {
     $call357 = (___errno_location()|0);
     HEAP32[$call357>>2] = 34;
     $148 = $1;$149 = $0;
     break;
    }
   }
   $142 = ($neg$1|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = $127 ^ $neg$1;
   $145 = $125 ^ $143;
   $146 = (_i64Subtract(($144|0),($145|0),($neg$1|0),($143|0))|0);
   $147 = (getTempRet0() | 0);
   $148 = $147;$149 = $146;
  }
 } while(0);
 setTempRet0(($148) | 0);
 return ($149|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $call = 0, $cmp2 = 0, $cmp35 = 0, $conv34 = 0, $conv38 = 0, $idx$ext = 0, $rend18$phi$trans$insert = 0, $retval$0 = 0;
 var $rpos = 0, $rpos33$phi$trans$insert = 0, $shcnt = 0, $shcnt30 = 0, $shcnt7 = 0, $shend = 0, $shend17 = 0, $shend19 = 0, $shlim = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $tobool22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $0 = $shlim;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==(0);
 $7 = ($5|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  label = 3;
 } else {
  $shcnt = ((($f)) + 120|0);
  $9 = $shcnt;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<($5|0);
  $16 = ($11>>>0)<($2>>>0);
  $17 = ($14|0)==($5|0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if ($19) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if ($cmp2) {
   label = 4;
  } else {
   $20 = $shlim;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)==(0);
   $27 = ($25|0)==(0);
   $28 = $26 & $27;
   $rend18$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$rend18$phi$trans$insert>>2]|0;
   if ($28) {
    $29 = $$pre;
    $66 = $29;
    label = 9;
   } else {
    $rpos = ((($f)) + 4|0);
    $30 = HEAP32[$rpos>>2]|0;
    $sub$ptr$rhs$cast = $30;
    $sub$ptr$sub = (($$pre) - ($sub$ptr$rhs$cast))|0;
    $31 = ($sub$ptr$sub|0)<(0);
    $32 = $31 << 31 >> 31;
    $shcnt7 = ((($f)) + 120|0);
    $33 = $shcnt7;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_i64Subtract(($22|0),($25|0),($35|0),($38|0))|0);
    $40 = (getTempRet0() | 0);
    $41 = ($40|0)>($32|0);
    $42 = ($39>>>0)>($sub$ptr$sub>>>0);
    $43 = ($40|0)==($32|0);
    $44 = $43 & $42;
    $45 = $41 | $44;
    $46 = $$pre;
    if ($45) {
     $66 = $46;
     label = 9;
    } else {
     $idx$ext = (($39) + -1)|0;
     $add$ptr = (($30) + ($idx$ext)|0);
     $shend17 = ((($f)) + 104|0);
     HEAP32[$shend17>>2] = $add$ptr;
     $47 = $46;
    }
   }
   if ((label|0) == 9) {
    $shend19 = ((($f)) + 104|0);
    HEAP32[$shend19>>2] = $$pre;
    $47 = $66;
   }
   $tobool22 = ($47|0)==(0|0);
   $rpos33$phi$trans$insert = ((($f)) + 4|0);
   if ($tobool22) {
    $$pre25 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $64 = $$pre25;
   } else {
    $48 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $sub$ptr$lhs$cast26 = $47;
    $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) + 1)|0;
    $add = (($sub$ptr$sub28) - ($48))|0;
    $49 = ($add|0)<(0);
    $50 = $49 << 31 >> 31;
    $shcnt30 = ((($f)) + 120|0);
    $51 = $shcnt30;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (_i64Add(($53|0),($56|0),($add|0),($50|0))|0);
    $58 = (getTempRet0() | 0);
    $59 = $shcnt30;
    $60 = $59;
    HEAP32[$60>>2] = $57;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    $63 = $48;
    $64 = $63;
   }
   $arrayidx = ((($64)) + -1|0);
   $65 = HEAP8[$arrayidx>>0]|0;
   $conv34 = $65&255;
   $cmp35 = ($call|0)==($conv34|0);
   if ($cmp35) {
    $retval$0 = $call;
   } else {
    $conv38 = $call&255;
    HEAP8[$arrayidx>>0] = $conv38;
    $retval$0 = $call;
   }
  }
 }
 if ((label|0) == 4) {
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = 0;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $c = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $read = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $call = (___toread($f)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $read = ((($f)) + 32|0);
  $0 = HEAP32[$read>>2]|0;
  $call1 = (FUNCTION_TABLE_iiii[$0 & 255]($f,$c,1)|0);
  $cmp = ($call1|0)==(1);
  if ($cmp) {
   $1 = HEAP8[$c>>0]|0;
   $conv = $1&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 } else {
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 255]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _accept($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $2 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 $0 = $addr;
 HEAP32[$arrayinit$element>>2] = $0;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 $1 = $len;
 HEAP32[$arrayinit$element1>>2] = $1;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = 0;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 HEAP32[$arrayinit$element3>>2] = 0;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = 0;
 $2 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _htonl($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_32($n)|0);
 return ($call|0);
}
function ___bswap_32($__x) {
 $__x = $__x|0;
 var $or5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $or5 = (_llvm_bswap_i32(($__x|0))|0);
 return ($or5|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($call|0);
}
function _recv($fd,$buf,$len,$flags) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_recvfrom($fd,$buf,$len,$flags,0,0)|0);
 return ($call|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx95 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0;
 var $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call113 = 0, $call133 = 0, $call157 = 0, $call189 = 0, $call215 = 0, $call229 = 0, $call23 = 0, $call236 = 0.0, $call246 = 0.0, $call43 = 0, $call6 = 0, $cmp = 0, $cmp101 = 0;
 var $cmp106 = 0, $cmp126 = 0, $cmp136 = 0, $cmp150 = 0, $cmp16 = 0, $cmp161 = 0, $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp217 = 0, $cmp222 = 0, $cmp233 = 0, $cmp26 = 0, $cmp29 = 0, $cmp31 = 0, $cmp36 = 0, $cmp53 = 0, $cmp57 = 0, $cmp70 = 0;
 var $cmp7089 = 0, $cmp9 = 0, $cmp91 = 0, $cmp97 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $conv = 0, $conv111 = 0, $conv12 = 0, $conv131 = 0, $conv155 = 0, $conv21 = 0, $conv227 = 0, $conv28 = 0, $conv41 = 0, $conv84 = 0.0, $conv86 = 0.0, $conv96 = 0;
 var $dec = 0, $dec19293 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0, $inc204 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0;
 var $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr242 = 0, $incdec$ptr40 = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $mul = 0, $mul85 = 0.0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond98 = 0, $or232 = 0, $or94 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0;
 var $sub160 = 0, $sub164 = 0, $sub168 = 0, $tobool = 0, $tobool140 = 0, $tobool181 = 0, $tobool193 = 0, $tobool19392 = 0, $tobool209 = 0, $tobool239 = 0, $tobool55 = 0, $tobool61 = 0, $tobool67 = 0, $tobool88 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($prec|0) {
 case 0:  {
  $bits$0 = 24;$emin$0 = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 default: {
  $retval$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $0 = HEAP32[$rpos>>2]|0;
    $1 = HEAP32[$shend>>2]|0;
    $cmp = ($0>>>0)<($1>>>0);
    if ($cmp) {
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $2 = HEAP8[$0>>0]|0;
     $conv = $2&255;
     $cond = $conv;
    } else {
     $call = (___shgetc($f)|0);
     $cond = $call;
    }
    $call6 = (_isspace($cond)|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L13: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp9 = ($cond|0)==(45);
     $conv12 = $cmp9&1;
     $mul = $conv12 << 1;
     $sub13 = (1 - ($mul))|0;
     $3 = HEAP32[$rpos>>2]|0;
     $4 = HEAP32[$shend>>2]|0;
     $cmp16 = ($3>>>0)<($4>>>0);
     if ($cmp16) {
      $incdec$ptr20 = ((($3)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr20;
      $5 = HEAP8[$3>>0]|0;
      $conv21 = $5&255;
      $c$0 = $conv21;$sign$0 = $sub13;
      break L13;
     } else {
      $call23 = (___shgetc($f)|0);
      $c$0 = $call23;$sign$0 = $sub13;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $cond;$sign$0 = 1;
    }
    }
   } while(0);
   $c$197 = $c$0;$i$096 = 0;
   while(1) {
    $or = $c$197 | 32;
    $arrayidx = (362894 + ($i$096)|0);
    $6 = HEAP8[$arrayidx>>0]|0;
    $conv28 = $6 << 24 >> 24;
    $cmp29 = ($or|0)==($conv28|0);
    if (!($cmp29)) {
     $c$1$lcssa = $c$197;$trunc = $i$096;
     break;
    }
    $cmp31 = ($i$096>>>0)<(7);
    do {
     if ($cmp31) {
      $7 = HEAP32[$rpos>>2]|0;
      $8 = HEAP32[$shend>>2]|0;
      $cmp36 = ($7>>>0)<($8>>>0);
      if ($cmp36) {
       $incdec$ptr40 = ((($7)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr40;
       $9 = HEAP8[$7>>0]|0;
       $conv41 = $9&255;
       $c$2 = $conv41;
       break;
      } else {
       $call43 = (___shgetc($f)|0);
       $c$2 = $call43;
       break;
      }
     } else {
      $c$2 = $c$197;
     }
    } while(0);
    $inc = (($i$096) + 1)|0;
    $cmp26 = ($inc>>>0)<(8);
    if ($cmp26) {
     $c$197 = $c$2;$i$096 = $inc;
    } else {
     $c$1$lcssa = $c$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $cmp53 = ($trunc>>>0)>(3);
     $tobool55 = ($pok|0)!=(0);
     $or$cond2 = $tobool55 & $cmp53;
     if ($or$cond2) {
      $cmp57 = ($trunc|0)==(8);
      if ($cmp57) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $tobool88 = ($trunc|0)==(0);
     L34: do {
      if ($tobool88) {
       $c$395 = $c$1$lcssa;$i$294 = 0;
       while(1) {
        $or94 = $c$395 | 32;
        $arrayidx95 = (362903 + ($i$294)|0);
        $13 = HEAP8[$arrayidx95>>0]|0;
        $conv96 = $13 << 24 >> 24;
        $cmp97 = ($or94|0)==($conv96|0);
        if (!($cmp97)) {
         $c$5 = $c$395;$i$3 = $i$294;
         break L34;
        }
        $cmp101 = ($i$294>>>0)<(2);
        do {
         if ($cmp101) {
          $14 = HEAP32[$rpos>>2]|0;
          $15 = HEAP32[$shend>>2]|0;
          $cmp106 = ($14>>>0)<($15>>>0);
          if ($cmp106) {
           $incdec$ptr110 = ((($14)) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr110;
           $16 = HEAP8[$14>>0]|0;
           $conv111 = $16&255;
           $c$4 = $conv111;
           break;
          } else {
           $call113 = (___shgetc($f)|0);
           $c$4 = $call113;
           break;
          }
         } else {
          $c$4 = $c$395;
         }
        } while(0);
        $inc118 = (($i$294) + 1)|0;
        $cmp91 = ($inc118>>>0)<(3);
        if ($cmp91) {
         $c$395 = $c$4;$i$294 = $inc118;
        } else {
         $c$5 = $c$4;$i$3 = 3;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $trunc;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $17 = HEAP32[$rpos>>2]|0;
      $18 = HEAP32[$shend>>2]|0;
      $cmp126 = ($17>>>0)<($18>>>0);
      if ($cmp126) {
       $incdec$ptr130 = ((($17)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr130;
       $19 = HEAP8[$17>>0]|0;
       $conv131 = $19&255;
       $cond135 = $conv131;
      } else {
       $call133 = (___shgetc($f)|0);
       $cond135 = $call133;
      }
      $cmp136 = ($cond135|0)==(40);
      if (!($cmp136)) {
       $20 = HEAP32[$shend>>2]|0;
       $tobool140 = ($20|0)==(0|0);
       if ($tobool140) {
        $retval$0 = nan;
        break L4;
       }
       $21 = HEAP32[$rpos>>2]|0;
       $incdec$ptr143 = ((($21)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr143;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while(1) {
       $22 = HEAP32[$rpos>>2]|0;
       $23 = HEAP32[$shend>>2]|0;
       $cmp150 = ($22>>>0)<($23>>>0);
       if ($cmp150) {
        $incdec$ptr154 = ((($22)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr154;
        $24 = HEAP8[$22>>0]|0;
        $conv155 = $24&255;
        $cond159 = $conv155;
       } else {
        $call157 = (___shgetc($f)|0);
        $cond159 = $call157;
       }
       $sub160 = (($cond159) + -48)|0;
       $cmp161 = ($sub160>>>0)<(10);
       $sub164 = (($cond159) + -65)|0;
       $cmp165 = ($sub164>>>0)<(26);
       $or$cond = $cmp161 | $cmp165;
       if (!($or$cond)) {
        $sub168 = (($cond159) + -97)|0;
        $cmp169 = ($sub168>>>0)<(26);
        $cmp172 = ($cond159|0)==(95);
        $or$cond3 = $cmp172 | $cmp169;
        if (!($or$cond3)) {
         break;
        }
       }
       $inc204 = (($i$4) + 1)|0;
       $i$4 = $inc204;
      }
      $cmp176 = ($cond159|0)==(41);
      if ($cmp176) {
       $retval$0 = nan;
       break L4;
      }
      $25 = HEAP32[$shend>>2]|0;
      $tobool181 = ($25|0)==(0|0);
      if (!($tobool181)) {
       $26 = HEAP32[$rpos>>2]|0;
       $incdec$ptr184 = ((($26)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr184;
      }
      if (!($tobool55)) {
       $call189 = (___errno_location()|0);
       HEAP32[$call189>>2] = 22;
       ___shlim($f,0,0);
       $retval$0 = 0.0;
       break L4;
      }
      $tobool19392 = ($i$4|0)==(0);
      if ($tobool19392) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while(1) {
       $dec19293 = (($dec19293$in) + -1)|0;
       if (!($tobool181)) {
        $27 = HEAP32[$rpos>>2]|0;
        $incdec$ptr199 = ((($27)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr199;
       }
       $tobool193 = ($dec19293|0)==(0);
       if ($tobool193) {
        $retval$0 = nan;
        break L4;
       } else {
        $dec19293$in = $dec19293;
       }
      }
      break;
     }
     case 0:  {
      $cmp217 = ($c$5|0)==(48);
      if ($cmp217) {
       $30 = HEAP32[$rpos>>2]|0;
       $31 = HEAP32[$shend>>2]|0;
       $cmp222 = ($30>>>0)<($31>>>0);
       if ($cmp222) {
        $incdec$ptr226 = ((($30)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr226;
        $32 = HEAP8[$30>>0]|0;
        $conv227 = $32&255;
        $cond231 = $conv227;
       } else {
        $call229 = (___shgetc($f)|0);
        $cond231 = $call229;
       }
       $or232 = $cond231 | 32;
       $cmp233 = ($or232|0)==(120);
       if ($cmp233) {
        $call236 = (+_hexfloat($f,$bits$0,$emin$0,$sign$0,$pok));
        $retval$0 = $call236;
        break L4;
       }
       $33 = HEAP32[$shend>>2]|0;
       $tobool239 = ($33|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
       } else {
        $34 = HEAP32[$rpos>>2]|0;
        $incdec$ptr242 = ((($34)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr242;
        $c$6 = 48;
       }
      } else {
       $c$6 = $c$5;
      }
      $call246 = (+_decfloat($f,$c$6,$bits$0,$emin$0,$sign$0,$pok));
      $retval$0 = $call246;
      break L4;
      break;
     }
     default: {
      $28 = HEAP32[$shend>>2]|0;
      $tobool209 = ($28|0)==(0|0);
      if (!($tobool209)) {
       $29 = HEAP32[$rpos>>2]|0;
       $incdec$ptr212 = ((($29)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr212;
      }
      $call215 = (___errno_location()|0);
      HEAP32[$call215>>2] = 22;
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $10 = HEAP32[$shend>>2]|0;
    $tobool61 = ($10|0)==(0|0);
    if (!($tobool61)) {
     $11 = HEAP32[$rpos>>2]|0;
     $incdec$ptr64 = ((($11)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr64;
    }
    $tobool67 = ($pok|0)!=(0);
    $cmp7089 = ($trunc>>>0)>(3);
    $or$cond98 = $tobool67 & $cmp7089;
    if ($or$cond98) {
     $i$190 = $trunc;
     while(1) {
      if (!($tobool61)) {
       $12 = HEAP32[$rpos>>2]|0;
       $incdec$ptr77 = ((($12)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr77;
      }
      $dec = (($i$190) + -1)|0;
      $cmp70 = ($dec>>>0)>(3);
      if ($cmp70) {
       $i$190 = $dec;
      } else {
       break;
      }
     }
    }
   }
   $conv84 = (+($sign$0|0));
   $mul85 = $conv84 * inf;
   $conv86 = $mul85;
   $retval$0 = $conv86;
  }
 } while(0);
 return (+$retval$0);
}
function _hexfloat($f,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$pre = 0, $$pre136 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add210 = 0, $add214 = 0, $add256 = 0.0, $add259 = 0.0, $add73 = 0, $add80 = 0.0;
 var $add86 = 0.0, $and = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $brmerge = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $call = 0, $call101 = 0, $call13 = 0, $call187 = 0, $call197 = 0, $call240 = 0.0;
 var $call242 = 0.0, $call263 = 0, $call266 = 0.0, $call27 = 0, $call44 = 0, $cmp = 0, $cmp146 = 0, $cmp20 = 0, $cmp203 = 0, $cmp203118 = 0, $cmp206 = 0, $cmp235 = 0, $cmp244 = 0, $cmp31 = 0, $cmp31128 = 0, $cmp37 = 0, $cmp49 = 0, $cmp52 = 0, $cmp54 = 0, $cmp6 = 0;
 var $cmp62 = 0, $cmp94 = 0, $cond29 = 0, $cond46 = 0, $conv = 0, $conv11 = 0, $conv135 = 0.0, $conv179 = 0.0, $conv188 = 0.0, $conv198 = 0.0, $conv241112 = 0.0, $conv25 = 0, $conv253$pre$phiZ2D = 0.0, $conv254 = 0.0, $conv42 = 0, $conv78 = 0.0, $conv99 = 0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0;
 var $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $inc251 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr111 = 0, $incdec$ptr120 = 0, $incdec$ptr129 = 0, $incdec$ptr159 = 0, $incdec$ptr170 = 0, $incdec$ptr24 = 0, $incdec$ptr41 = 0, $incdec$ptr98 = 0;
 var $mul = 0, $mul136 = 0.0, $mul143 = 0, $mul180 = 0.0, $mul189 = 0.0, $mul190 = 0.0, $mul199 = 0.0, $mul200 = 0.0, $mul255 = 0.0, $mul258 = 0.0, $mul79 = 0.0, $mul85 = 0.0, $not$cmp206 = 0, $or$cond = 0, $or$cond103 = 0, $or$cond2 = 0, $or$cond3 = 0, $or145 = 0, $retval$0 = 0.0, $rpos = 0;
 var $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $spec$select113 = 0.0, $spec$select114 = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub211 = 0.0, $sub211$pn = 0.0, $sub239 = 0, $sub239111 = 0, $sub260 = 0.0, $sub51 = 0, $sub66 = 0, $tobool = 0, $tobool105 = 0, $tobool108 = 0, $tobool114 = 0;
 var $tobool123 = 0, $tobool138 = 0, $tobool153 = 0, $tobool156 = 0, $tobool167 = 0, $tobool177 = 0, $tobool247 = 0, $tobool249 = 0, $tobool261 = 0, $tobool82 = 0, $tobool83 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $x$6 = 0;
 var $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, $y$5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $c$0$ph = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $c$0$ph = $call;
 }
 $c$0 = $c$0$ph;$gotdig$0 = 0;
 L5: while(1) {
  switch ($c$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$3$ph = $c$0;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 0;
   break L5;
  }
  }
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp6 = ($3>>>0)<($4>>>0);
  if ($cmp6) {
   $incdec$ptr10 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr10;
   $5 = HEAP8[$3>>0]|0;
   $conv11 = $5&255;
   $c$0$be = $conv11;
  } else {
   $call13 = (___shgetc($f)|0);
   $c$0$be = $call13;
  }
  $c$0 = $c$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 10) {
  $6 = HEAP32[$rpos>>2]|0;
  $7 = HEAP32[$shend>>2]|0;
  $cmp20 = ($6>>>0)<($7>>>0);
  if ($cmp20) {
   $incdec$ptr24 = ((($6)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr24;
   $8 = HEAP8[$6>>0]|0;
   $conv25 = $8&255;
   $cond29 = $conv25;
  } else {
   $call27 = (___shgetc($f)|0);
   $cond29 = $call27;
  }
  $cmp31128 = ($cond29|0)==(48);
  if ($cmp31128) {
   $12 = 0;$13 = 0;
   while(1) {
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp37 = ($9>>>0)<($10>>>0);
    if ($cmp37) {
     $incdec$ptr41 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr41;
     $11 = HEAP8[$9>>0]|0;
     $conv42 = $11&255;
     $cond46 = $conv42;
    } else {
     $call44 = (___shgetc($f)|0);
     $cond46 = $call44;
    }
    $14 = (_i64Add(($12|0),($13|0),-1,-1)|0);
    $15 = (getTempRet0() | 0);
    $cmp31 = ($cond46|0)==(48);
    if ($cmp31) {
     $12 = $14;$13 = $15;
    } else {
     $106 = $14;$107 = $15;$c$3$ph = $cond46;$gotdig$3$ph = 1;$gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$3$ph = $cond29;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 1;
  }
 }
 $17 = 0;$19 = 0;$38 = $106;$40 = $107;$c$3 = $c$3$ph;$gotdig$3 = $gotdig$3$ph;$gotrad$1 = $gotrad$1$ph;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
 while(1) {
  $sub = (($c$3) + -48)|0;
  $cmp49 = ($sub>>>0)<(10);
  $$pre = $c$3 | 32;
  if ($cmp49) {
   label = 24;
  } else {
   $sub51 = (($$pre) + -97)|0;
   $cmp52 = ($sub51>>>0)<(6);
   $cmp54 = ($c$3|0)==(46);
   $or$cond3 = $cmp54 | $cmp52;
   if (!($or$cond3)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) {
    $tobool = ($gotrad$1|0)==(0);
    if ($tobool) {
     $108 = $19;$109 = $17;$110 = $19;$111 = $17;$gotdig$4 = $gotdig$3;$gotrad$2 = 1;$gottail$2 = $gottail$0;$scale$2 = $scale$0;$x$2 = $x$0;$y$2 = $y$0;
    } else {
     $c$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $cmp62 = ($c$3|0)>(57);
   $sub66 = (($$pre) + -87)|0;
   $d$0 = $cmp62 ? $sub66 : $sub;
   $16 = ($17|0)<(0);
   $18 = ($19>>>0)<(8);
   $20 = ($17|0)==(0);
   $21 = $20 & $18;
   $22 = $16 | $21;
   do {
    if ($22) {
     $mul = $x$0 << 4;
     $add73 = (($d$0) + ($mul))|0;
     $gottail$1 = $gottail$0;$scale$1 = $scale$0;$x$1 = $add73;$y$1 = $y$0;
    } else {
     $23 = ($17|0)<(0);
     $24 = ($19>>>0)<(14);
     $25 = ($17|0)==(0);
     $26 = $25 & $24;
     $27 = $23 | $26;
     if ($27) {
      $conv78 = (+($d$0|0));
      $div = $scale$0 * 0.0625;
      $mul79 = $div * $conv78;
      $add80 = $y$0 + $mul79;
      $gottail$1 = $gottail$0;$scale$1 = $div;$x$1 = $x$0;$y$1 = $add80;
      break;
     } else {
      $tobool82 = ($d$0|0)==(0);
      $tobool83 = ($gottail$0|0)!=(0);
      $or$cond = $tobool83 | $tobool82;
      $mul85 = $scale$0 * 0.5;
      $add86 = $y$0 + $mul85;
      $spec$select113 = $or$cond ? $y$0 : $add86;
      $spec$select114 = $or$cond ? $gottail$0 : 1;
      $gottail$1 = $spec$select114;$scale$1 = $scale$0;$x$1 = $x$0;$y$1 = $spec$select113;
      break;
     }
    }
   } while(0);
   $28 = (_i64Add(($19|0),($17|0),1,0)|0);
   $29 = (getTempRet0() | 0);
   $108 = $38;$109 = $40;$110 = $28;$111 = $29;$gotdig$4 = 1;$gotrad$2 = $gotrad$1;$gottail$2 = $gottail$1;$scale$2 = $scale$1;$x$2 = $x$1;$y$2 = $y$1;
  }
  $30 = HEAP32[$rpos>>2]|0;
  $31 = HEAP32[$shend>>2]|0;
  $cmp94 = ($30>>>0)<($31>>>0);
  if ($cmp94) {
   $incdec$ptr98 = ((($30)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr98;
   $32 = HEAP8[$30>>0]|0;
   $conv99 = $32&255;
   $c$3$be = $conv99;
  } else {
   $call101 = (___shgetc($f)|0);
   $c$3$be = $call101;
  }
  $17 = $111;$19 = $110;$38 = $108;$40 = $109;$c$3 = $c$3$be;$gotdig$3 = $gotdig$4;$gotrad$1 = $gotrad$2;$gottail$0 = $gottail$2;$scale$0 = $scale$2;$x$0 = $x$2;$y$0 = $y$2;
 }
 $tobool105 = ($gotdig$3|0)==(0);
 do {
  if ($tobool105) {
   $33 = HEAP32[$shend>>2]|0;
   $tobool108 = ($33|0)==(0|0);
   if (!($tobool108)) {
    $34 = HEAP32[$rpos>>2]|0;
    $incdec$ptr111 = ((($34)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr111;
   }
   $tobool114 = ($pok|0)==(0);
   if ($tobool114) {
    ___shlim($f,0,0);
   } else {
    if (!($tobool108)) {
     $35 = HEAP32[$rpos>>2]|0;
     $incdec$ptr120 = ((($35)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr120;
     $tobool123 = ($gotrad$1|0)==(0);
     $brmerge = $tobool123 | $tobool108;
     if (!($brmerge)) {
      $36 = HEAP32[$rpos>>2]|0;
      $incdec$ptr129 = ((($36)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr129;
     }
    }
   }
   $conv135 = (+($sign|0));
   $mul136 = $conv135 * 0.0;
   $retval$0 = $mul136;
  } else {
   $tobool138 = ($gotrad$1|0)==(0);
   $37 = $tobool138 ? $19 : $38;
   $39 = $tobool138 ? $17 : $40;
   $41 = ($17|0)<(0);
   $42 = ($19>>>0)<(8);
   $43 = ($17|0)==(0);
   $44 = $43 & $42;
   $45 = $41 | $44;
   if ($45) {
    $46 = $19;$47 = $17;$x$3125 = $x$0;
    while(1) {
     $mul143 = $x$3125 << 4;
     $48 = (_i64Add(($46|0),($47|0),1,0)|0);
     $49 = (getTempRet0() | 0);
     $50 = ($47|0)<(0);
     $51 = ($46>>>0)<(7);
     $52 = ($47|0)==(0);
     $53 = $52 & $51;
     $54 = $50 | $53;
     if ($54) {
      $46 = $48;$47 = $49;$x$3125 = $mul143;
     } else {
      $x$3$lcssa = $mul143;
      break;
     }
    }
   } else {
    $x$3$lcssa = $x$0;
   }
   $or145 = $c$3$lcssa | 32;
   $cmp146 = ($or145|0)==(112);
   if ($cmp146) {
    $55 = (_scanexp($f,$pok)|0);
    $56 = (getTempRet0() | 0);
    $57 = ($55|0)==(0);
    $58 = ($56|0)==(-2147483648);
    $59 = $57 & $58;
    if ($59) {
     $tobool153 = ($pok|0)==(0);
     if ($tobool153) {
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break;
     }
     $60 = HEAP32[$shend>>2]|0;
     $tobool156 = ($60|0)==(0|0);
     if ($tobool156) {
      $68 = 0;$69 = 0;
     } else {
      $61 = HEAP32[$rpos>>2]|0;
      $incdec$ptr159 = ((($61)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr159;
      $68 = 0;$69 = 0;
     }
    } else {
     $68 = $55;$69 = $56;
    }
   } else {
    $62 = HEAP32[$shend>>2]|0;
    $tobool167 = ($62|0)==(0|0);
    if ($tobool167) {
     $68 = 0;$69 = 0;
    } else {
     $63 = HEAP32[$rpos>>2]|0;
     $incdec$ptr170 = ((($63)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr170;
     $68 = 0;$69 = 0;
    }
   }
   $64 = (_bitshift64Shl(($37|0),($39|0),2)|0);
   $65 = (getTempRet0() | 0);
   $66 = (_i64Add(($64|0),($65|0),-32,-1)|0);
   $67 = (getTempRet0() | 0);
   $70 = (_i64Add(($66|0),($67|0),($68|0),($69|0))|0);
   $71 = (getTempRet0() | 0);
   $tobool177 = ($x$3$lcssa|0)==(0);
   if ($tobool177) {
    $conv179 = (+($sign|0));
    $mul180 = $conv179 * 0.0;
    $retval$0 = $mul180;
    break;
   }
   $sub182 = (0 - ($emin))|0;
   $72 = ($sub182|0)<(0);
   $73 = $72 << 31 >> 31;
   $74 = ($71|0)>($73|0);
   $75 = ($70>>>0)>($sub182>>>0);
   $76 = ($71|0)==($73|0);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    $call187 = (___errno_location()|0);
    HEAP32[$call187>>2] = 34;
    $conv188 = (+($sign|0));
    $mul189 = $conv188 * 1.7976931348623157E+308;
    $mul190 = $mul189 * 1.7976931348623157E+308;
    $retval$0 = $mul190;
    break;
   }
   $sub192 = (($emin) + -106)|0;
   $79 = ($sub192|0)<(0);
   $80 = $79 << 31 >> 31;
   $81 = ($71|0)<($80|0);
   $82 = ($70>>>0)<($sub192>>>0);
   $83 = ($71|0)==($80|0);
   $84 = $83 & $82;
   $85 = $81 | $84;
   if ($85) {
    $call197 = (___errno_location()|0);
    HEAP32[$call197>>2] = 34;
    $conv198 = (+($sign|0));
    $mul199 = $conv198 * 2.2250738585072014E-308;
    $mul200 = $mul199 * 2.2250738585072014E-308;
    $retval$0 = $mul200;
    break;
   }
   $cmp203118 = ($x$3$lcssa|0)>(-1);
   if ($cmp203118) {
    $86 = $70;$87 = $71;$x$4119 = $x$3$lcssa;$y$3120 = $y$0;
    while(1) {
     $cmp206 = !($y$3120 >= 0.5);
     $add214 = $x$4119 << 1;
     $sub211 = $y$3120 + -1.0;
     $not$cmp206 = $cmp206 ^ 1;
     $add210 = $not$cmp206&1;
     $x$5 = $add214 | $add210;
     $sub211$pn = $cmp206 ? $y$3120 : $sub211;
     $y$4 = $y$3120 + $sub211$pn;
     $88 = (_i64Add(($86|0),($87|0),-1,-1)|0);
     $89 = (getTempRet0() | 0);
     $cmp203 = ($x$5|0)>(-1);
     if ($cmp203) {
      $86 = $88;$87 = $89;$x$4119 = $x$5;$y$3120 = $y$4;
     } else {
      $96 = $88;$97 = $89;$x$4$lcssa = $x$5;$y$3$lcssa = $y$4;
      break;
     }
    }
   } else {
    $96 = $70;$97 = $71;$x$4$lcssa = $x$3$lcssa;$y$3$lcssa = $y$0;
   }
   $90 = ($bits|0)<(0);
   $91 = $90 << 31 >> 31;
   $92 = ($emin|0)<(0);
   $93 = $92 << 31 >> 31;
   $94 = (_i64Subtract(32,0,($emin|0),($93|0))|0);
   $95 = (getTempRet0() | 0);
   $98 = (_i64Add(($94|0),($95|0),($96|0),($97|0))|0);
   $99 = (getTempRet0() | 0);
   $100 = ($99|0)<($91|0);
   $101 = ($98>>>0)<($bits>>>0);
   $102 = ($99|0)==($91|0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $105 = ($98|0)>(0);
    if ($105) {
     $bits$addr$0 = $98;
     label = 65;
    } else {
     $bits$addr$0110 = 0;$sub239111 = 84;
     label = 67;
    }
   } else {
    $bits$addr$0 = $bits;
    label = 65;
   }
   if ((label|0) == 65) {
    $cmp235 = ($bits$addr$0|0)<(53);
    $sub239 = (84 - ($bits$addr$0))|0;
    if ($cmp235) {
     $bits$addr$0110 = $bits$addr$0;$sub239111 = $sub239;
     label = 67;
    } else {
     $$pre136 = (+($sign|0));
     $bias$0 = 0.0;$bits$addr$0109 = $bits$addr$0;$conv253$pre$phiZ2D = $$pre136;
    }
   }
   if ((label|0) == 67) {
    $conv241112 = (+($sign|0));
    $call240 = (+_scalbn(1.0,$sub239111));
    $call242 = (+_copysignl($call240,$conv241112));
    $bias$0 = $call242;$bits$addr$0109 = $bits$addr$0110;$conv253$pre$phiZ2D = $conv241112;
   }
   $cmp244 = ($bits$addr$0109|0)<(32);
   $tobool247 = $y$3$lcssa != 0.0;
   $or$cond2 = $tobool247 & $cmp244;
   $and = $x$4$lcssa & 1;
   $tobool249 = ($and|0)==(0);
   $or$cond103 = $tobool249 & $or$cond2;
   $inc251 = $or$cond103&1;
   $x$6 = (($x$4$lcssa) + ($inc251))|0;
   $y$5 = $or$cond103 ? 0.0 : $y$3$lcssa;
   $conv254 = (+($x$6>>>0));
   $mul255 = $conv253$pre$phiZ2D * $conv254;
   $add256 = $bias$0 + $mul255;
   $mul258 = $y$5 * $conv253$pre$phiZ2D;
   $add259 = $mul258 + $add256;
   $sub260 = $add259 - $bias$0;
   $tobool261 = $sub260 != 0.0;
   if (!($tobool261)) {
    $call263 = (___errno_location()|0);
    HEAP32[$call263>>2] = 34;
   }
   $call266 = (+_scalbnl($sub260,$96));
   $retval$0 = $call266;
  }
 } while(0);
 return (+$retval$0);
}
function _decfloat($f,$c,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $c = $c|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$neg = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa379 = 0, $a$0333 = 0, $a$3$ph = 0, $a$3$ph406 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6326 = 0, $add252 = 0, $add265 = 0, $add275 = 0, $add287 = 0, $add307$sink$off0 = 0, $add345 = 0, $add367 = 0, $add400 = 0;
 var $add412 = 0, $add422 = 0, $add428 = 0, $add433 = 0, $add457 = 0, $add462 = 0, $add472 = 0.0, $add478 = 0, $add501 = 0.0, $add503 = 0, $add517 = 0, $add524 = 0.0, $add531 = 0.0, $add537 = 0, $add544 = 0.0, $add548 = 0.0, $add563 = 0.0, $add59 = 0, $and = 0, $and321 = 0;
 var $and347 = 0, $and352 = 0, $and355 = 0, $and368 = 0, $and409 = 0, $and423 = 0, $and429 = 0, $and434 = 0, $and443 = 0, $and458 = 0, $and463 = 0, $and504 = 0, $and518 = 0, $and538 = 0, $and566 = 0, $arrayidx186 = 0, $arrayidx186$promoted = 0, $arrayidx219 = 0, $arrayidx239 = 0, $arrayidx256 = 0;
 var $arrayidx261 = 0, $arrayidx284 = 0, $arrayidx294 = 0, $arrayidx304 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx372 = 0, $arrayidx373 = 0, $arrayidx406 = 0, $arrayidx438 = 0, $arrayidx444 = 0, $arrayidx465 = 0, $arrayidx470 = 0, $arrayidx510 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0;
 var $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3352 = 0, $call = 0, $call135 = 0, $call15 = 0, $call165 = 0, $call175 = 0, $call32 = 0, $call495 = 0.0, $call496 = 0.0, $call498 = 0.0, $call499 = 0.0, $call557 = 0.0, $call571 = 0.0, $call594 = 0, $call597 = 0.0, $call91 = 0, $carry$0335 = 0;
 var $carry298$0 = 0, $carry298$1 = 0, $carry362$0328 = 0, $cmp100 = 0, $cmp121 = 0, $cmp149 = 0, $cmp152 = 0, $cmp183 = 0, $cmp183339 = 0, $cmp19 = 0, $cmp19363 = 0, $cmp194 = 0, $cmp197 = 0, $cmp2 = 0, $cmp200 = 0, $cmp203 = 0, $cmp211 = 0, $cmp226 = 0, $cmp231 = 0, $cmp246 = 0;
 var $cmp25 = 0, $cmp258 = 0, $cmp258331 = 0, $cmp269 = 0, $cmp289 = 0, $cmp292 = 0, $cmp295 = 0, $cmp322 = 0, $cmp325 = 0, $cmp348 = 0, $cmp364 = 0, $cmp369 = 0, $cmp374 = 0, $cmp38 = 0, $cmp382 = 0, $cmp38343 = 0, $cmp392 = 0, $cmp396 = 0, $cmp40 = 0, $cmp402 = 0;
 var $cmp402324 = 0, $cmp40344 = 0, $cmp40354 = 0, $cmp416 = 0, $cmp435 = 0, $cmp459 = 0, $cmp48 = 0, $cmp480 = 0, $cmp490 = 0, $cmp505 = 0, $cmp51 = 0, $cmp511 = 0, $cmp519 = 0, $cmp526 = 0, $cmp539 = 0, $cmp554 = 0, $cmp568 = 0, $cmp572 = 0, $cmp579 = 0, $cmp587 = 0;
 var $cmp67 = 0, $cmp8 = 0, $cmp84 = 0, $cond17 = 0, $cond254 = 0, $cond268 = 0, $cond34 = 0, $cond93 = 0, $conv = 0, $conv13 = 0, $conv140 = 0.0, $conv155 = 0.0, $conv157 = 0.0, $conv166 = 0.0, $conv176 = 0.0, $conv206 = 0.0, $conv208 = 0.0, $conv214 = 0.0, $conv216 = 0.0, $conv220 = 0.0;
 var $conv234 = 0.0, $conv236 = 0.0, $conv240 = 0.0, $conv30 = 0, $conv471 = 0.0, $conv476 = 0.0, $conv89 = 0, $denormal$2$v = 0, $div = 0, $div221 = 0.0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0, $e2$4 = 0, $exitcond = 0;
 var $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3348 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1349 = 0, $gotrad$2 = 0, $i$0323 = 0, $i$4322 = 0, $inc189 = 0, $inc191 = 0, $inc279 = 0, $inc283 = 0, $inc387 = 0, $inc474 = 0;
 var $inc560 = 0.0, $inc584 = 0, $inc66 = 0, $inc70 = 0, $incdec$ptr = 0, $incdec$ptr113 = 0, $incdec$ptr12 = 0, $incdec$ptr128 = 0, $incdec$ptr29 = 0, $incdec$ptr88 = 0, $j$0$lcssa = 0, $j$0300 = 0, $j$0301 = 0, $j$0302 = 0, $j$0351 = 0, $j$2 = 0, $j$3340 = 0, $k$0$lcssa = 0, $k$0304 = 0, $k$0305 = 0;
 var $k$0306 = 0, $k$0350 = 0, $k$2 = 0, $k$3 = 0, $k$4334 = 0, $k$5 = 0, $k$5$in = 0, $k$6327 = 0, $lnz$0$lcssa = 0, $lnz$0310 = 0, $lnz$0311 = 0, $lnz$0312 = 0, $lnz$0347 = 0, $lnz$2 = 0, $mul = 0, $mul141 = 0.0, $mul158 = 0.0, $mul167 = 0.0, $mul168 = 0.0, $mul177 = 0.0;
 var $mul178 = 0.0, $mul187 = 0, $mul187341 = 0, $mul209 = 0.0, $mul217 = 0.0, $mul224$neg = 0, $mul237 = 0.0, $mul241 = 0.0, $mul268 = 0, $mul415 = 0, $mul467 = 0.0, $mul477 = 0.0, $mul523 = 0.0, $mul530 = 0.0, $mul543 = 0.0, $mul547 = 0.0, $mul583 = 0.0, $narrow = 0, $not$cmp572 = 0, $or = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond260 = 0, $or$cond261 = 0, $or$cond262 = 0, $or$cond263 = 0, $or$cond266 = 0, $or$cond392 = 0, $or$cond5 = 0, $or357 = 0, $or445 = 0, $or99 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa378 = 0, $rp$0332 = 0, $rp$3$ph = 0, $rp$3$ph404 = 0, $rp$5$ph = 0, $rp$5$ph403 = 0;
 var $rp$5$ph403$ph = 0, $rp$6325 = 0, $rpos = 0, $shend = 0, $shl407 = 0, $shr = 0, $shr230 = 0, $shr411 = 0, $shr414 = 0, $spec$select = 0, $spec$select257 = 0, $spec$select258 = 0, $spec$select264 = 0, $spec$select265 = 0, $spec$select290 = 0, $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$store$select = 0;
 var $storemerge296 = 0, $sub1 = 0, $sub170 = 0, $sub218 = 0, $sub225 = 0, $sub238 = 0, $sub255 = 0, $sub276 = 0, $sub286 = 0, $sub299 = 0, $sub300 = 0, $sub320 = 0, $sub340 = 0, $sub346 = 0, $sub351 = 0, $sub354 = 0, $sub37 = 0, $sub37342 = 0, $sub37353 = 0, $sub408 = 0;
 var $sub425 = 0, $sub442 = 0, $sub464 = 0, $sub479 = 0, $sub494 = 0, $sub497 = 0, $sub500 = 0.0, $sub553 = 0, $sub564 = 0.0, $sub567 = 0, $sub60 = 0, $tobool107 = 0, $tobool110 = 0, $tobool125 = 0, $tobool138 = 0, $tobool180 = 0, $tobool244 = 0, $tobool273 = 0, $tobool281 = 0, $tobool329 = 0;
 var $tobool343 = 0, $tobool420 = 0, $tobool431 = 0, $tobool514 = 0, $tobool558 = 0, $tobool56 = 0, $tobool592 = 0, $tobool95 = 0, $tobool98 = 0, $tobool98269 = 0, $tobool98274 = 0, $tobool98275277 = 0, $x = 0, $y$0321 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$10320 = 0, $z$11 = 0;
 var $z$2 = 0, $z$2$ph = 0, $z$2$ph405 = 0, $z$3 = 0, $z$5 = 0, $z$7$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $x = sp;
 $0 = (($emin) + ($bits))|0;
 $sub1 = (0 - ($0))|0;
 $rpos = ((($f)) + 4|0);
 $shend = ((($f)) + 104|0);
 $c$addr$0 = $c;$gotdig$0 = 0;
 L1: while(1) {
  switch ($c$addr$0|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$addr$2 = $c$addr$0;$gotdig$2 = $gotdig$0;$gotrad$0 = 0;
   break L1;
  }
  }
  $1 = HEAP32[$rpos>>2]|0;
  $2 = HEAP32[$shend>>2]|0;
  $cmp2 = ($1>>>0)<($2>>>0);
  if ($cmp2) {
   $incdec$ptr = ((($1)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $3 = HEAP8[$1>>0]|0;
   $conv = $3&255;
   $c$addr$0$be = $conv;
  } else {
   $call = (___shgetc($f)|0);
   $c$addr$0$be = $call;
  }
  $c$addr$0 = $c$addr$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 7) {
  $4 = HEAP32[$rpos>>2]|0;
  $5 = HEAP32[$shend>>2]|0;
  $cmp8 = ($4>>>0)<($5>>>0);
  if ($cmp8) {
   $incdec$ptr12 = ((($4)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr12;
   $6 = HEAP8[$4>>0]|0;
   $conv13 = $6&255;
   $cond17 = $conv13;
  } else {
   $call15 = (___shgetc($f)|0);
   $cond17 = $call15;
  }
  $cmp19363 = ($cond17|0)==(48);
  if ($cmp19363) {
   $7 = 0;$8 = 0;
   while(1) {
    $9 = (_i64Add(($7|0),($8|0),-1,-1)|0);
    $10 = (getTempRet0() | 0);
    $11 = HEAP32[$rpos>>2]|0;
    $12 = HEAP32[$shend>>2]|0;
    $cmp25 = ($11>>>0)<($12>>>0);
    if ($cmp25) {
     $incdec$ptr29 = ((($11)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr29;
     $13 = HEAP8[$11>>0]|0;
     $conv30 = $13&255;
     $cond34 = $conv30;
    } else {
     $call32 = (___shgetc($f)|0);
     $cond34 = $call32;
    }
    $cmp19 = ($cond34|0)==(48);
    if ($cmp19) {
     $7 = $9;$8 = $10;
    } else {
     $106 = $9;$107 = $10;$c$addr$2 = $cond34;$gotdig$2 = 1;$gotrad$0 = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$addr$2 = $cond17;$gotdig$2 = $gotdig$0;$gotrad$0 = 1;
  }
 }
 HEAP32[$x>>2] = 0;
 $sub37342 = (($c$addr$2) + -48)|0;
 $cmp38343 = ($sub37342>>>0)<(10);
 $cmp40344 = ($c$addr$2|0)==(46);
 $14 = $cmp40344 | $cmp38343;
 L22: do {
  if ($14) {
   $arrayidx77 = ((($x)) + 496|0);
   $108 = $106;$109 = $107;$15 = 0;$16 = 0;$c$addr$3352 = $c$addr$2;$cmp40354 = $cmp40344;$gotdig$3348 = $gotdig$2;$gotrad$1349 = $gotrad$0;$j$0351 = 0;$k$0350 = 0;$lnz$0347 = 0;$sub37353 = $sub37342;
   L24: while(1) {
    do {
     if ($cmp40354) {
      $cond268 = ($gotrad$1349|0)==(0);
      if ($cond268) {
       $110 = $15;$111 = $16;$112 = $15;$113 = $16;$gotdig$4 = $gotdig$3348;$gotrad$2 = 1;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
      } else {
       break L24;
      }
     } else {
      $cmp48 = ($k$0350|0)<(125);
      $17 = (_i64Add(($15|0),($16|0),1,0)|0);
      $18 = (getTempRet0() | 0);
      $cmp51 = ($c$addr$3352|0)!=(48);
      if (!($cmp48)) {
       if (!($cmp51)) {
        $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = $gotdig$3348;$gotrad$2 = $gotrad$1349;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
        break;
       }
       $20 = HEAP32[$arrayidx77>>2]|0;
       $or = $20 | 1;
       HEAP32[$arrayidx77>>2] = $or;
       $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = $gotdig$3348;$gotrad$2 = $gotrad$1349;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
       break;
      }
      $spec$select = $cmp51 ? $17 : $lnz$0347;
      $tobool56 = ($j$0351|0)==(0);
      $arrayidx64 = (($x) + ($k$0350<<2)|0);
      if ($tobool56) {
       $storemerge296 = $sub37353;
      } else {
       $19 = HEAP32[$arrayidx64>>2]|0;
       $mul = ($19*10)|0;
       $add59 = (($c$addr$3352) + -48)|0;
       $sub60 = (($add59) + ($mul))|0;
       $storemerge296 = $sub60;
      }
      HEAP32[$arrayidx64>>2] = $storemerge296;
      $inc66 = (($j$0351) + 1)|0;
      $cmp67 = ($inc66|0)==(9);
      $inc70 = $cmp67&1;
      $spec$select257 = (($k$0350) + ($inc70))|0;
      $spec$select258 = $cmp67 ? 0 : $inc66;
      $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = 1;$gotrad$2 = $gotrad$1349;$j$2 = $spec$select258;$k$2 = $spec$select257;$lnz$2 = $spec$select;
     }
    } while(0);
    $21 = HEAP32[$rpos>>2]|0;
    $22 = HEAP32[$shend>>2]|0;
    $cmp84 = ($21>>>0)<($22>>>0);
    if ($cmp84) {
     $incdec$ptr88 = ((($21)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr88;
     $23 = HEAP8[$21>>0]|0;
     $conv89 = $23&255;
     $cond93 = $conv89;
    } else {
     $call91 = (___shgetc($f)|0);
     $cond93 = $call91;
    }
    $sub37 = (($cond93) + -48)|0;
    $cmp38 = ($sub37>>>0)<(10);
    $cmp40 = ($cond93|0)==(46);
    $24 = $cmp40 | $cmp38;
    if ($24) {
     $108 = $110;$109 = $111;$15 = $112;$16 = $113;$c$addr$3352 = $cond93;$cmp40354 = $cmp40;$gotdig$3348 = $gotdig$4;$gotrad$1349 = $gotrad$2;$j$0351 = $j$2;$k$0350 = $k$2;$lnz$0347 = $lnz$2;$sub37353 = $sub37;
    } else {
     $26 = $112;$27 = $110;$29 = $113;$30 = $111;$c$addr$3$lcssa = $cond93;$gotdig$3$lcssa = $gotdig$4;$gotrad$1$lcssa = $gotrad$2;$j$0$lcssa = $j$2;$k$0$lcssa = $k$2;$lnz$0$lcssa = $lnz$2;
     label = 31;
     break L22;
    }
   }
   $tobool98269 = ($gotdig$3348|0)!=(0);
   $114 = $15;$115 = $16;$116 = $108;$117 = $109;$j$0302 = $j$0351;$k$0306 = $k$0350;$lnz$0312 = $lnz$0347;$tobool98275277 = $tobool98269;
   label = 39;
  } else {
   $26 = 0;$27 = $106;$29 = 0;$30 = $107;$c$addr$3$lcssa = $c$addr$2;$gotdig$3$lcssa = $gotdig$2;$gotrad$1$lcssa = $gotrad$0;$j$0$lcssa = 0;$k$0$lcssa = 0;$lnz$0$lcssa = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $tobool95 = ($gotrad$1$lcssa|0)==(0);
   $25 = $tobool95 ? $26 : $27;
   $28 = $tobool95 ? $29 : $30;
   $tobool98 = ($gotdig$3$lcssa|0)!=(0);
   $or99 = $c$addr$3$lcssa | 32;
   $cmp100 = ($or99|0)==(101);
   $or$cond260 = $tobool98 & $cmp100;
   if (!($or$cond260)) {
    $cmp121 = ($c$addr$3$lcssa|0)>(-1);
    if ($cmp121) {
     $114 = $26;$115 = $29;$116 = $25;$117 = $28;$j$0302 = $j$0$lcssa;$k$0306 = $k$0$lcssa;$lnz$0312 = $lnz$0$lcssa;$tobool98275277 = $tobool98;
     label = 39;
     break;
    } else {
     $118 = $26;$119 = $29;$120 = $25;$121 = $28;$j$0301 = $j$0$lcssa;$k$0305 = $k$0$lcssa;$lnz$0311 = $lnz$0$lcssa;$tobool98274 = $tobool98;
     label = 41;
     break;
    }
   }
   $31 = (_scanexp($f,$pok)|0);
   $32 = (getTempRet0() | 0);
   $33 = ($31|0)==(0);
   $34 = ($32|0)==(-2147483648);
   $35 = $33 & $34;
   if ($35) {
    $tobool107 = ($pok|0)==(0);
    if ($tobool107) {
     ___shlim($f,0,0);
     $retval$1 = 0.0;
     break;
    }
    $36 = HEAP32[$shend>>2]|0;
    $tobool110 = ($36|0)==(0|0);
    if ($tobool110) {
     $38 = 0;$39 = 0;
    } else {
     $37 = HEAP32[$rpos>>2]|0;
     $incdec$ptr113 = ((($37)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr113;
     $38 = 0;$39 = 0;
    }
   } else {
    $38 = $31;$39 = $32;
   }
   $40 = (_i64Add(($38|0),($39|0),($25|0),($28|0))|0);
   $41 = (getTempRet0() | 0);
   $46 = $40;$47 = $26;$49 = $41;$50 = $29;$j$0300 = $j$0$lcssa;$k$0304 = $k$0$lcssa;$lnz$0310 = $lnz$0$lcssa;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $42 = HEAP32[$shend>>2]|0;
  $tobool125 = ($42|0)==(0|0);
  if ($tobool125) {
   $118 = $114;$119 = $115;$120 = $116;$121 = $117;$j$0301 = $j$0302;$k$0305 = $k$0306;$lnz$0311 = $lnz$0312;$tobool98274 = $tobool98275277;
   label = 41;
  } else {
   $43 = HEAP32[$rpos>>2]|0;
   $incdec$ptr128 = ((($43)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr128;
   if ($tobool98275277) {
    $46 = $116;$47 = $114;$49 = $117;$50 = $115;$j$0300 = $j$0302;$k$0304 = $k$0306;$lnz$0310 = $lnz$0312;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($tobool98274) {
   $46 = $120;$47 = $118;$49 = $121;$50 = $119;$j$0300 = $j$0301;$k$0304 = $k$0305;$lnz$0310 = $lnz$0311;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $call135 = (___errno_location()|0);
   HEAP32[$call135>>2] = 22;
   ___shlim($f,0,0);
   $retval$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $44 = HEAP32[$x>>2]|0;
   $tobool138 = ($44|0)==(0);
   if ($tobool138) {
    $conv140 = (+($sign|0));
    $mul141 = $conv140 * 0.0;
    $retval$1 = $mul141;
    break;
   }
   $45 = ($46|0)==($47|0);
   $48 = ($49|0)==($50|0);
   $51 = $45 & $48;
   $52 = ($50|0)<(0);
   $53 = ($47>>>0)<(10);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   $or$cond = $56 & $51;
   if ($or$cond) {
    $cmp149 = ($bits|0)>(30);
    $shr = $44 >>> $bits;
    $cmp152 = ($shr|0)==(0);
    $or$cond261 = $cmp149 | $cmp152;
    if ($or$cond261) {
     $conv155 = (+($sign|0));
     $conv157 = (+($44>>>0));
     $mul158 = $conv155 * $conv157;
     $retval$1 = $mul158;
     break;
    }
   }
   $div = (($emin|0) / -2)&-1;
   $57 = ($div|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = ($49|0)>($58|0);
   $60 = ($46>>>0)>($div>>>0);
   $61 = ($49|0)==($58|0);
   $62 = $61 & $60;
   $63 = $59 | $62;
   if ($63) {
    $call165 = (___errno_location()|0);
    HEAP32[$call165>>2] = 34;
    $conv166 = (+($sign|0));
    $mul167 = $conv166 * 1.7976931348623157E+308;
    $mul168 = $mul167 * 1.7976931348623157E+308;
    $retval$1 = $mul168;
    break;
   }
   $sub170 = (($emin) + -106)|0;
   $64 = ($sub170|0)<(0);
   $65 = $64 << 31 >> 31;
   $66 = ($49|0)<($65|0);
   $67 = ($46>>>0)<($sub170>>>0);
   $68 = ($49|0)==($65|0);
   $69 = $68 & $67;
   $70 = $66 | $69;
   if ($70) {
    $call175 = (___errno_location()|0);
    HEAP32[$call175>>2] = 34;
    $conv176 = (+($sign|0));
    $mul177 = $conv176 * 2.2250738585072014E-308;
    $mul178 = $mul177 * 2.2250738585072014E-308;
    $retval$1 = $mul178;
    break;
   }
   $tobool180 = ($j$0300|0)==(0);
   if ($tobool180) {
    $k$3 = $k$0304;
   } else {
    $cmp183339 = ($j$0300|0)<(9);
    if ($cmp183339) {
     $arrayidx186 = (($x) + ($k$0304<<2)|0);
     $arrayidx186$promoted = HEAP32[$arrayidx186>>2]|0;
     $j$3340 = $j$0300;$mul187341 = $arrayidx186$promoted;
     while(1) {
      $mul187 = ($mul187341*10)|0;
      $inc189 = (($j$3340) + 1)|0;
      $cmp183 = ($j$3340|0)<(8);
      if ($cmp183) {
       $j$3340 = $inc189;$mul187341 = $mul187;
      } else {
       break;
      }
     }
     HEAP32[$arrayidx186>>2] = $mul187;
    }
    $inc191 = (($k$0304) + 1)|0;
    $k$3 = $inc191;
   }
   $cmp194 = ($lnz$0310|0)<(9);
   if ($cmp194) {
    $cmp197 = ($lnz$0310|0)<=($46|0);
    $cmp200 = ($46|0)<(18);
    $or$cond2 = $cmp197 & $cmp200;
    if ($or$cond2) {
     $cmp203 = ($46|0)==(9);
     if ($cmp203) {
      $conv206 = (+($sign|0));
      $71 = HEAP32[$x>>2]|0;
      $conv208 = (+($71>>>0));
      $mul209 = $conv206 * $conv208;
      $retval$1 = $mul209;
      break;
     }
     $cmp211 = ($46|0)<(9);
     if ($cmp211) {
      $conv214 = (+($sign|0));
      $72 = HEAP32[$x>>2]|0;
      $conv216 = (+($72>>>0));
      $mul217 = $conv214 * $conv216;
      $sub218 = (8 - ($46))|0;
      $arrayidx219 = (1552 + ($sub218<<2)|0);
      $73 = HEAP32[$arrayidx219>>2]|0;
      $conv220 = (+($73|0));
      $div221 = $mul217 / $conv220;
      $retval$1 = $div221;
      break;
     }
     $$neg = Math_imul($46, -3)|0;
     $mul224$neg = (($bits) + 27)|0;
     $sub225 = (($mul224$neg) + ($$neg))|0;
     $cmp226 = ($sub225|0)>(30);
     $$pre = HEAP32[$x>>2]|0;
     $shr230 = $$pre >>> $sub225;
     $cmp231 = ($shr230|0)==(0);
     $or$cond392 = $cmp226 | $cmp231;
     if ($or$cond392) {
      $conv234 = (+($sign|0));
      $conv236 = (+($$pre>>>0));
      $mul237 = $conv234 * $conv236;
      $sub238 = (($46) + -10)|0;
      $arrayidx239 = (1552 + ($sub238<<2)|0);
      $74 = HEAP32[$arrayidx239>>2]|0;
      $conv240 = (+($74|0));
      $mul241 = $mul237 * $conv240;
      $retval$1 = $mul241;
      break;
     }
    }
   }
   $rem = (($46|0) % 9)&-1;
   $tobool244 = ($rem|0)==(0);
   if ($tobool244) {
    $a$3$ph = 0;$rp$3$ph = $46;$z$2$ph = $k$3;
   } else {
    $cmp246 = ($46|0)>(-1);
    $add252 = (($rem) + 9)|0;
    $cond254 = $cmp246 ? $rem : $add252;
    $sub255 = (8 - ($cond254))|0;
    $arrayidx256 = (1552 + ($sub255<<2)|0);
    $75 = HEAP32[$arrayidx256>>2]|0;
    $cmp258331 = ($k$3|0)==(0);
    if ($cmp258331) {
     $a$0$lcssa379 = 0;$rp$0$lcssa378 = $46;$z$0 = 0;
    } else {
     $div267 = (1000000000 / ($75|0))&-1;
     $a$0333 = 0;$carry$0335 = 0;$k$4334 = 0;$rp$0332 = $46;
     while(1) {
      $arrayidx261 = (($x) + ($k$4334<<2)|0);
      $76 = HEAP32[$arrayidx261>>2]|0;
      $div264 = (($76>>>0) / ($75>>>0))&-1;
      $77 = Math_imul($div264, $75)|0;
      $78 = (($76) - ($77))|0;
      $add265 = (($div264) + ($carry$0335))|0;
      HEAP32[$arrayidx261>>2] = $add265;
      $mul268 = Math_imul($div267, $78)|0;
      $cmp269 = ($k$4334|0)==($a$0333|0);
      $tobool273 = ($add265|0)==(0);
      $or$cond262 = $cmp269 & $tobool273;
      $add275 = (($a$0333) + 1)|0;
      $and = $add275 & 127;
      $sub276 = (($rp$0332) + -9)|0;
      $spec$select290 = $or$cond262 ? $sub276 : $rp$0332;
      $spec$select291 = $or$cond262 ? $and : $a$0333;
      $inc279 = (($k$4334) + 1)|0;
      $cmp258 = ($inc279|0)==($k$3|0);
      if ($cmp258) {
       break;
      } else {
       $a$0333 = $spec$select291;$carry$0335 = $mul268;$k$4334 = $inc279;$rp$0332 = $spec$select290;
      }
     }
     $tobool281 = ($mul268|0)==(0);
     if ($tobool281) {
      $a$0$lcssa379 = $spec$select291;$rp$0$lcssa378 = $spec$select290;$z$0 = $k$3;
     } else {
      $arrayidx284 = (($x) + ($k$3<<2)|0);
      $inc283 = (($k$3) + 1)|0;
      HEAP32[$arrayidx284>>2] = $mul268;
      $a$0$lcssa379 = $spec$select291;$rp$0$lcssa378 = $spec$select290;$z$0 = $inc283;
     }
    }
    $sub286 = (9 - ($cond254))|0;
    $add287 = (($sub286) + ($rp$0$lcssa378))|0;
    $a$3$ph = $a$0$lcssa379;$rp$3$ph = $add287;$z$2$ph = $z$0;
   }
   $a$3$ph406 = $a$3$ph;$e2$0$ph = 0;$rp$3$ph404 = $rp$3$ph;$z$2$ph405 = $z$2$ph;
   L104: while(1) {
    $cmp289 = ($rp$3$ph404|0)<(18);
    $cmp292 = ($rp$3$ph404|0)==(18);
    $arrayidx294 = (($x) + ($a$3$ph406<<2)|0);
    $e2$0 = $e2$0$ph;$z$2 = $z$2$ph405;
    while(1) {
     if (!($cmp289)) {
      if (!($cmp292)) {
       $rp$5$ph = $rp$3$ph404;
       break L104;
      }
      $79 = HEAP32[$arrayidx294>>2]|0;
      $cmp295 = ($79>>>0)<(9007199);
      if (!($cmp295)) {
       $rp$5$ph = 18;
       break L104;
      }
     }
     $sub300 = (($z$2) + 127)|0;
     $carry298$0 = 0;$k$5$in = $sub300;$z$3 = $z$2;
     while(1) {
      $k$5 = $k$5$in & 127;
      $arrayidx304 = (($x) + ($k$5<<2)|0);
      $80 = HEAP32[$arrayidx304>>2]|0;
      $81 = (_bitshift64Shl(($80|0),0,29)|0);
      $82 = (getTempRet0() | 0);
      $83 = (_i64Add(($81|0),($82|0),($carry298$0|0),0)|0);
      $84 = (getTempRet0() | 0);
      $85 = ($84>>>0)>(0);
      $86 = ($83>>>0)>(1000000000);
      $87 = ($84|0)==(0);
      $88 = $87 & $86;
      $89 = $85 | $88;
      if ($89) {
       $90 = (___udivdi3(($83|0),($84|0),1000000000,0)|0);
       $91 = (getTempRet0() | 0);
       $92 = (___muldi3(($90|0),($91|0),1000000000,0)|0);
       $93 = (getTempRet0() | 0);
       $94 = (_i64Subtract(($83|0),($84|0),($92|0),($93|0))|0);
       $95 = (getTempRet0() | 0);
       $add307$sink$off0 = $94;$carry298$1 = $90;
      } else {
       $add307$sink$off0 = $83;$carry298$1 = 0;
      }
      HEAP32[$arrayidx304>>2] = $add307$sink$off0;
      $sub320 = (($z$3) + 127)|0;
      $and321 = $sub320 & 127;
      $cmp322 = ($k$5|0)!=($and321|0);
      $cmp325 = ($k$5|0)==($a$3$ph406|0);
      $or$cond263 = $cmp322 | $cmp325;
      $tobool329 = ($add307$sink$off0|0)==(0);
      $spec$select264 = $tobool329 ? $k$5 : $z$3;
      $spec$select292 = $or$cond263 ? $z$3 : $spec$select264;
      $sub340 = (($k$5) + -1)|0;
      if ($cmp325) {
       break;
      } else {
       $carry298$0 = $carry298$1;$k$5$in = $sub340;$z$3 = $spec$select292;
      }
     }
     $sub299 = (($e2$0) + -29)|0;
     $tobool343 = ($carry298$1|0)==(0);
     if ($tobool343) {
      $e2$0 = $sub299;$z$2 = $z$3;
     } else {
      break;
     }
    }
    $add345 = (($rp$3$ph404) + 9)|0;
    $sub346 = (($a$3$ph406) + 127)|0;
    $and347 = $sub346 & 127;
    $cmp348 = ($and347|0)==($spec$select292|0);
    $sub351 = (($spec$select292) + 127)|0;
    $and352 = $sub351 & 127;
    $sub354 = (($spec$select292) + 126)|0;
    $and355 = $sub354 & 127;
    $arrayidx356 = (($x) + ($and355<<2)|0);
    if ($cmp348) {
     $arrayidx353 = (($x) + ($and352<<2)|0);
     $96 = HEAP32[$arrayidx353>>2]|0;
     $97 = HEAP32[$arrayidx356>>2]|0;
     $or357 = $97 | $96;
     HEAP32[$arrayidx356>>2] = $or357;
     $z$5 = $and352;
    } else {
     $z$5 = $z$3;
    }
    $arrayidx359 = (($x) + ($and347<<2)|0);
    HEAP32[$arrayidx359>>2] = $carry298$1;
    $a$3$ph406 = $and347;$e2$0$ph = $sub299;$rp$3$ph404 = $add345;$z$2$ph405 = $z$5;
   }
   $a$5$ph$ph = $a$3$ph406;$e2$1$ph$ph = $e2$0;$rp$5$ph403$ph = $rp$5$ph;$z$7$ph$ph = $z$2;
   L123: while(1) {
    $add433 = (($z$7$ph$ph) + 1)|0;
    $and434 = $add433 & 127;
    $sub442 = (($z$7$ph$ph) + 127)|0;
    $and443 = $sub442 & 127;
    $arrayidx444 = (($x) + ($and443<<2)|0);
    $a$5$ph = $a$5$ph$ph;$e2$1$ph = $e2$1$ph$ph;$rp$5$ph403 = $rp$5$ph403$ph;
    while(1) {
     $cmp392 = ($rp$5$ph403|0)==(18);
     $cmp396 = ($rp$5$ph403|0)>(27);
     $spec$select265 = $cmp396 ? 9 : 1;
     $a$5 = $a$5$ph;$e2$1 = $e2$1$ph;
     while(1) {
      $i$0323 = 0;
      while(1) {
       $add367 = (($i$0323) + ($a$5))|0;
       $and368 = $add367 & 127;
       $cmp369 = ($and368|0)==($z$7$ph$ph|0);
       if ($cmp369) {
        label = 92;
        break;
       }
       $arrayidx372 = (($x) + ($and368<<2)|0);
       $98 = HEAP32[$arrayidx372>>2]|0;
       $arrayidx373 = (354808 + ($i$0323<<2)|0);
       $99 = HEAP32[$arrayidx373>>2]|0;
       $cmp374 = ($98>>>0)<($99>>>0);
       if ($cmp374) {
        label = 92;
        break;
       }
       $cmp382 = ($98>>>0)>($99>>>0);
       if ($cmp382) {
        break;
       }
       $inc387 = (($i$0323) + 1)|0;
       $cmp364 = ($inc387>>>0)<(2);
       if ($cmp364) {
        $i$0323 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($cmp392) {
        break L123;
       }
      }
      $add400 = (($spec$select265) + ($e2$1))|0;
      $cmp402324 = ($a$5|0)==($z$7$ph$ph|0);
      if ($cmp402324) {
       $a$5 = $z$7$ph$ph;$e2$1 = $add400;
      } else {
       break;
      }
     }
     $shl407 = 1 << $spec$select265;
     $sub408 = (($shl407) + -1)|0;
     $shr414 = 1000000000 >>> $spec$select265;
     $a$6326 = $a$5;$carry362$0328 = 0;$k$6327 = $a$5;$rp$6325 = $rp$5$ph403;
     while(1) {
      $arrayidx406 = (($x) + ($k$6327<<2)|0);
      $100 = HEAP32[$arrayidx406>>2]|0;
      $and409 = $100 & $sub408;
      $shr411 = $100 >>> $spec$select265;
      $add412 = (($shr411) + ($carry362$0328))|0;
      HEAP32[$arrayidx406>>2] = $add412;
      $mul415 = Math_imul($and409, $shr414)|0;
      $cmp416 = ($k$6327|0)==($a$6326|0);
      $tobool420 = ($add412|0)==(0);
      $or$cond266 = $cmp416 & $tobool420;
      $add422 = (($a$6326) + 1)|0;
      $and423 = $add422 & 127;
      $sub425 = (($rp$6325) + -9)|0;
      $spec$select293 = $or$cond266 ? $sub425 : $rp$6325;
      $spec$select294 = $or$cond266 ? $and423 : $a$6326;
      $add428 = (($k$6327) + 1)|0;
      $and429 = $add428 & 127;
      $cmp402 = ($and429|0)==($z$7$ph$ph|0);
      if ($cmp402) {
       break;
      } else {
       $a$6326 = $spec$select294;$carry362$0328 = $mul415;$k$6327 = $and429;$rp$6325 = $spec$select293;
      }
     }
     $tobool431 = ($mul415|0)==(0);
     if (!($tobool431)) {
      $cmp435 = ($and434|0)==($spec$select294|0);
      if (!($cmp435)) {
       break;
      }
      $101 = HEAP32[$arrayidx444>>2]|0;
      $or445 = $101 | 1;
      HEAP32[$arrayidx444>>2] = $or445;
     }
     $a$5$ph = $spec$select294;$e2$1$ph = $add400;$rp$5$ph403 = $spec$select293;
    }
    $arrayidx438 = (($x) + ($z$7$ph$ph<<2)|0);
    HEAP32[$arrayidx438>>2] = $mul415;
    $a$5$ph$ph = $spec$select294;$e2$1$ph$ph = $add400;$rp$5$ph403$ph = $spec$select293;$z$7$ph$ph = $and434;
   }
   $i$4322 = 0;$y$0321 = 0.0;$z$10320 = $z$7$ph$ph;
   while(1) {
    $add457 = (($i$4322) + ($a$5))|0;
    $and458 = $add457 & 127;
    $cmp459 = ($and458|0)==($z$10320|0);
    $add462 = (($z$10320) + 1)|0;
    $and463 = $add462 & 127;
    if ($cmp459) {
     $sub464 = (($and463) + -1)|0;
     $arrayidx465 = (($x) + ($sub464<<2)|0);
     HEAP32[$arrayidx465>>2] = 0;
     $z$11 = $and463;
    } else {
     $z$11 = $z$10320;
    }
    $mul467 = $y$0321 * 1.0E+9;
    $arrayidx470 = (($x) + ($and458<<2)|0);
    $102 = HEAP32[$arrayidx470>>2]|0;
    $conv471 = (+($102>>>0));
    $add472 = $mul467 + $conv471;
    $inc474 = (($i$4322) + 1)|0;
    $exitcond = ($inc474|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $i$4322 = $inc474;$y$0321 = $add472;$z$10320 = $z$11;
    }
   }
   $conv476 = (+($sign|0));
   $mul477 = $add472 * $conv476;
   $add478 = (($e2$1) + 53)|0;
   $sub479 = (($add478) - ($emin))|0;
   $cmp480 = ($sub479|0)<($bits|0);
   $103 = ($sub479|0)>(0);
   $spec$store$select = $103 ? $sub479 : 0;
   $bits$addr$0 = $cmp480 ? $spec$store$select : $bits;
   $cmp490 = ($bits$addr$0|0)<(53);
   if ($cmp490) {
    $sub494 = (105 - ($bits$addr$0))|0;
    $call495 = (+_scalbn(1.0,$sub494));
    $call496 = (+_copysignl($call495,$mul477));
    $sub497 = (53 - ($bits$addr$0))|0;
    $call498 = (+_scalbn(1.0,$sub497));
    $call499 = (+_fmodl($mul477,$call498));
    $sub500 = $mul477 - $call499;
    $add501 = $call496 + $sub500;
    $bias$0 = $call496;$frac$0 = $call499;$y$1 = $add501;
   } else {
    $bias$0 = 0.0;$frac$0 = 0.0;$y$1 = $mul477;
   }
   $add503 = (($a$5) + 2)|0;
   $and504 = $add503 & 127;
   $cmp505 = ($and504|0)==($z$11|0);
   if ($cmp505) {
    $frac$3 = $frac$0;
   } else {
    $arrayidx510 = (($x) + ($and504<<2)|0);
    $104 = HEAP32[$arrayidx510>>2]|0;
    $cmp511 = ($104>>>0)<(500000000);
    do {
     if ($cmp511) {
      $tobool514 = ($104|0)==(0);
      if ($tobool514) {
       $add517 = (($a$5) + 3)|0;
       $and518 = $add517 & 127;
       $cmp519 = ($and518|0)==($z$11|0);
       if ($cmp519) {
        $frac$1 = $frac$0;
        break;
       }
      }
      $mul523 = $conv476 * 0.25;
      $add524 = $mul523 + $frac$0;
      $frac$1 = $add524;
     } else {
      $cmp526 = ($104|0)==(500000000);
      if (!($cmp526)) {
       $mul530 = $conv476 * 0.75;
       $add531 = $mul530 + $frac$0;
       $frac$1 = $add531;
       break;
      }
      $add537 = (($a$5) + 3)|0;
      $and538 = $add537 & 127;
      $cmp539 = ($and538|0)==($z$11|0);
      if ($cmp539) {
       $mul543 = $conv476 * 0.5;
       $add544 = $mul543 + $frac$0;
       $frac$1 = $add544;
       break;
      } else {
       $mul547 = $conv476 * 0.75;
       $add548 = $mul547 + $frac$0;
       $frac$1 = $add548;
       break;
      }
     }
    } while(0);
    $sub553 = (53 - ($bits$addr$0))|0;
    $cmp554 = ($sub553|0)>(1);
    if ($cmp554) {
     $call557 = (+_fmodl($frac$1,1.0));
     $tobool558 = $call557 != 0.0;
     if ($tobool558) {
      $frac$3 = $frac$1;
     } else {
      $inc560 = $frac$1 + 1.0;
      $frac$3 = $inc560;
     }
    } else {
     $frac$3 = $frac$1;
    }
   }
   $add563 = $y$1 + $frac$3;
   $sub564 = $add563 - $bias$0;
   $and566 = $add478 & 2147483647;
   $sub567 = (-2 - ($0))|0;
   $cmp568 = ($and566|0)>($sub567|0);
   do {
    if ($cmp568) {
     $call571 = (+Math_abs((+$sub564)));
     $cmp572 = !($call571 >= 9007199254740992.0);
     $mul583 = $sub564 * 0.5;
     $not$cmp572 = $cmp572 ^ 1;
     $inc584 = $not$cmp572&1;
     $e2$3 = (($e2$1) + ($inc584))|0;
     $y$2 = $cmp572 ? $sub564 : $mul583;
     $105 = (($e2$3) + 50)|0;
     $cmp587 = ($105|0)>($sub1|0);
     if (!($cmp587)) {
      $cmp579 = ($bits$addr$0|0)!=($sub479|0);
      $narrow = $cmp579 | $cmp572;
      $denormal$2$v = $cmp480 & $narrow;
      $tobool592 = $frac$3 != 0.0;
      $or$cond5 = $tobool592 & $denormal$2$v;
      if (!($or$cond5)) {
       $e2$4 = $e2$3;$y$3 = $y$2;
       break;
      }
     }
     $call594 = (___errno_location()|0);
     HEAP32[$call594>>2] = 34;
     $e2$4 = $e2$3;$y$3 = $y$2;
    } else {
     $e2$4 = $e2$1;$y$3 = $sub564;
    }
   } while(0);
   $call597 = (+_scalbnl($y$3,$e2$4));
   $retval$1 = $call597;
  }
 } while(0);
 STACKTOP = sp;return (+$retval$1);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp51 = 0, $cmp64 = 0, $cmp6440 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9138 = 0, $cmp97 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv = 0, $conv102 = 0, $conv15 = 0;
 var $conv56 = 0, $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $mul = 0, $neg$0 = 0, $or$cond1 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub48 = 0;
 var $sub63 = 0, $sub90 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$047 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 switch ($cond|0) {
 case 43: case 45:  {
  $cmp4 = ($cond|0)==(45);
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)>(9);
  $tobool = ($pok|0)!=(0);
  $or$cond1 = $tobool & $cmp20;
  if ($or$cond1) {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $45 = -2147483648;$46 = 0;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = ((($7)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    label = 14;
   }
  } else {
   $c$0 = $cond19;$neg$0 = $conv7;$sub31$pre$phiZ2D = $sub;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($cond) + -48)|0;
  $c$0 = $cond;$neg$0 = 0;$sub31$pre$phiZ2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $cmp32 = ($sub31$pre$phiZ2D>>>0)>(9);
  if ($cmp32) {
   label = 14;
  } else {
   $c$146 = $c$0;$x$047 = 0;
   while(1) {
    $mul = ($x$047*10)|0;
    $add = (($c$146) + -48)|0;
    $sub48 = (($add) + ($mul))|0;
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp51 = ($9>>>0)<($10>>>0);
    if ($cmp51) {
     $incdec$ptr55 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr55;
     $11 = HEAP8[$9>>0]|0;
     $conv56 = $11&255;
     $cond60 = $conv56;
    } else {
     $call58 = (___shgetc($f)|0);
     $cond60 = $call58;
    }
    $sub43 = (($cond60) + -48)|0;
    $cmp44 = ($sub43>>>0)<(10);
    $cmp46 = ($sub48|0)<(214748364);
    $12 = $cmp44 & $cmp46;
    if ($12) {
     $c$146 = $cond60;$x$047 = $sub48;
    } else {
     break;
    }
   }
   $13 = ($sub48|0)<(0);
   $14 = $13 << 31 >> 31;
   $cmp6440 = ($sub43>>>0)<(10);
   if ($cmp6440) {
    $15 = $sub48;$16 = $14;$c$241 = $cond60;
    while(1) {
     $17 = (___muldi3(($15|0),($16|0),10,0)|0);
     $18 = (getTempRet0() | 0);
     $19 = ($c$241|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = (_i64Add(($c$241|0),($20|0),-48,-1)|0);
     $22 = (getTempRet0() | 0);
     $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
     $24 = (getTempRet0() | 0);
     $25 = HEAP32[$rpos>>2]|0;
     $26 = HEAP32[$shend>>2]|0;
     $cmp78 = ($25>>>0)<($26>>>0);
     if ($cmp78) {
      $incdec$ptr82 = ((($25)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr82;
      $27 = HEAP8[$25>>0]|0;
      $conv83 = $27&255;
      $cond87 = $conv83;
     } else {
      $call85 = (___shgetc($f)|0);
      $cond87 = $call85;
     }
     $sub63 = (($cond87) + -48)|0;
     $cmp64 = ($sub63>>>0)<(10);
     $28 = ($24|0)<(21474836);
     $29 = ($23>>>0)<(2061584302);
     $30 = ($24|0)==(21474836);
     $31 = $30 & $29;
     $32 = $28 | $31;
     $33 = $cmp64 & $32;
     if ($33) {
      $15 = $23;$16 = $24;$c$241 = $cond87;
     } else {
      break;
     }
    }
    $cmp9138 = ($sub63>>>0)<(10);
    if ($cmp9138) {
     while(1) {
      $34 = HEAP32[$rpos>>2]|0;
      $35 = HEAP32[$shend>>2]|0;
      $cmp97 = ($34>>>0)<($35>>>0);
      if ($cmp97) {
       $incdec$ptr101 = ((($34)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr101;
       $36 = HEAP8[$34>>0]|0;
       $conv102 = $36&255;
       $cond106 = $conv102;
      } else {
       $call104 = (___shgetc($f)|0);
       $cond106 = $call104;
      }
      $sub90 = (($cond106) + -48)|0;
      $cmp91 = ($sub90>>>0)<(10);
      if (!($cmp91)) {
       $39 = $23;$40 = $24;
       break;
      }
     }
    } else {
     $39 = $23;$40 = $24;
    }
   } else {
    $39 = $sub48;$40 = $14;
   }
   $37 = HEAP32[$shend>>2]|0;
   $tobool109 = ($37|0)==(0|0);
   if (!($tobool109)) {
    $38 = HEAP32[$rpos>>2]|0;
    $incdec$ptr112 = ((($38)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr112;
   }
   $tobool115 = ($neg$0|0)==(0);
   $41 = (_i64Subtract(0,0,($39|0),($40|0))|0);
   $42 = (getTempRet0() | 0);
   $43 = $tobool115 ? $39 : $41;
   $44 = $tobool115 ? $40 : $42;
   $45 = $44;$46 = $43;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$shend>>2]|0;
  $tobool36 = ($$pr|0)==(0|0);
  if ($tobool36) {
   $45 = -2147483648;$46 = 0;
  } else {
   $8 = HEAP32[$rpos>>2]|0;
   $incdec$ptr39 = ((($8)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr39;
   $45 = -2147483648;$46 = 0;
  }
 }
 setTempRet0(($45) | 0);
 return ($46|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0, $spec$select = 0, $spec$select20 = 0.0;
 var $spec$select21 = 0, $spec$select22 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.9884656743115795E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($n|0)>(2046);
  $mul3 = $mul * 8.9884656743115795E+307;
  $sub4 = (($n) + -2046)|0;
  $0 = ($sub4|0)<(1023);
  $spec$store$select = $0 ? $sub4 : 1023;
  $spec$select = $cmp1 ? $spec$store$select : $sub;
  $spec$select20 = $cmp1 ? $mul3 : $mul;
  $n$addr$0 = $spec$select;$y$0 = $spec$select20;
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.2250738585072014E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($n|0)<(-2044);
   $mul13 = $mul10 * 2.2250738585072014E-308;
   $add14 = (($n) + 2044)|0;
   $1 = ($add14|0)>(-1022);
   $spec$store$select1 = $1 ? $add14 : -1022;
   $spec$select21 = $cmp11 ? $spec$store$select1 : $add;
   $spec$select22 = $cmp11 ? $mul13 : $mul10;
   $n$addr$0 = $spec$select21;$y$0 = $spec$select22;
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $2 = (_bitshift64Shl(($add21|0),0,52)|0);
 $3 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $4;
 return (+$mul22);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_copysign($x,$y));
 return (+$call);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_fmod($x,$y));
 return (+$call);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 return (+$call);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add128 = 0;
 var $add68 = 0, $cmp119 = 0, $cmp27 = 0, $cmp79 = 0, $cmp7965 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $div = 0.0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0;
 var $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $mul107 = 0.0, $mul42 = 0.0, $mul91 = 0.0, $or$cond = 0, $retval$0 = 0.0, $spec$select = 0.0, $tobool = 0, $tobool54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = (getTempRet0() | 0);
 $conv = $4 & 2047;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $10 = (getTempRet0() | 0);
 $11 = ($9|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 L1: do {
  if ($13) {
   label = 3;
  } else {
   $14 = (___DOUBLE_BITS_581($y)|0);
   $15 = (getTempRet0() | 0);
   $16 = $15 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($14>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $cmp27 = ($conv|0)==(2047);
   $or$cond = $cmp27 | $21;
   if ($or$cond) {
    label = 3;
   } else {
    $22 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $23 = (getTempRet0() | 0);
    $24 = ($23>>>0)>($10>>>0);
    $25 = ($22>>>0)>($9>>>0);
    $26 = ($23|0)==($10|0);
    $27 = $26 & $25;
    $28 = $24 | $27;
    if (!($28)) {
     $29 = ($22|0)==($9|0);
     $30 = ($23|0)==($10|0);
     $31 = $29 & $30;
     $mul42 = $x * 0.0;
     $spec$select = $31 ? $mul42 : $x;
     return (+$spec$select);
    }
    $tobool = ($conv|0)==(0);
    if ($tobool) {
     $32 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $33 = (getTempRet0() | 0);
     $34 = ($33|0)>(-1);
     $35 = ($32>>>0)>(4294967295);
     $36 = ($33|0)==(-1);
     $37 = $36 & $35;
     $38 = $34 | $37;
     if ($38) {
      $39 = $32;$40 = $33;$ex$081 = 0;
      while(1) {
       $dec = (($ex$081) + -1)|0;
       $41 = (_bitshift64Shl(($39|0),($40|0),1)|0);
       $42 = (getTempRet0() | 0);
       $43 = ($42|0)>(-1);
       $44 = ($41>>>0)>(4294967295);
       $45 = ($42|0)==(-1);
       $46 = $45 & $44;
       $47 = $43 | $46;
       if ($47) {
        $39 = $41;$40 = $42;$ex$081 = $dec;
       } else {
        $ex$0$lcssa = $dec;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $add = (1 - ($ex$0$lcssa))|0;
     $48 = (_bitshift64Shl(($0|0),($1|0),($add|0))|0);
     $49 = (getTempRet0() | 0);
     $72 = $48;$73 = $49;$ex$1 = $ex$0$lcssa;
    } else {
     $50 = $1 & 1048575;
     $51 = $50 | 1048576;
     $72 = $0;$73 = $51;$ex$1 = $conv;
    }
    $tobool54 = ($conv5|0)==(0);
    if ($tobool54) {
     $52 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $53 = (getTempRet0() | 0);
     $54 = ($53|0)>(-1);
     $55 = ($52>>>0)>(4294967295);
     $56 = ($53|0)==(-1);
     $57 = $56 & $55;
     $58 = $54 | $57;
     if ($58) {
      $59 = $52;$60 = $53;$ey$077 = 0;
      while(1) {
       $dec64 = (($ey$077) + -1)|0;
       $61 = (_bitshift64Shl(($59|0),($60|0),1)|0);
       $62 = (getTempRet0() | 0);
       $63 = ($62|0)>(-1);
       $64 = ($61>>>0)>(4294967295);
       $65 = ($62|0)==(-1);
       $66 = $65 & $64;
       $67 = $63 | $66;
       if ($67) {
        $59 = $61;$60 = $62;$ey$077 = $dec64;
       } else {
        $ey$0$lcssa = $dec64;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $add68 = (1 - ($ey$0$lcssa))|0;
     $68 = (_bitshift64Shl(($2|0),($3|0),($add68|0))|0);
     $69 = (getTempRet0() | 0);
     $74 = $68;$75 = $69;$ey$1 = $ey$0$lcssa;
    } else {
     $70 = $3 & 1048575;
     $71 = $70 | 1048576;
     $74 = $2;$75 = $71;$ey$1 = $conv5;
    }
    $cmp7965 = ($ex$1|0)>($ey$1|0);
    $76 = (_i64Subtract(($72|0),($73|0),($74|0),($75|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = ($77|0)>(-1);
    $79 = ($76>>>0)>(4294967295);
    $80 = ($77|0)==(-1);
    $81 = $80 & $79;
    $82 = $78 | $81;
    L25: do {
     if ($cmp7965) {
      $136 = $72;$137 = $73;$84 = $76;$86 = $77;$cmp8571 = $82;$ex$268 = $ex$1;
      while(1) {
       if ($cmp8571) {
        $83 = ($84|0)==(0);
        $85 = ($86|0)==(0);
        $87 = $83 & $85;
        if ($87) {
         break;
        } else {
         $88 = $84;$89 = $86;
        }
       } else {
        $88 = $136;$89 = $137;
       }
       $90 = (_bitshift64Shl(($88|0),($89|0),1)|0);
       $91 = (getTempRet0() | 0);
       $dec96 = (($ex$268) + -1)|0;
       $cmp79 = ($dec96|0)>($ey$1|0);
       $92 = (_i64Subtract(($90|0),($91|0),($74|0),($75|0))|0);
       $93 = (getTempRet0() | 0);
       $94 = ($93|0)>(-1);
       $95 = ($92>>>0)>(4294967295);
       $96 = ($93|0)==(-1);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($cmp79) {
        $136 = $90;$137 = $91;$84 = $92;$86 = $93;$cmp8571 = $98;$ex$268 = $dec96;
       } else {
        $100 = $92;$102 = $93;$134 = $90;$135 = $91;$cmp85$lcssa = $98;$ex$2$lcssa = $dec96;
        break L25;
       }
      }
      $mul91 = $x * 0.0;
      $retval$0 = $mul91;
      break L1;
     } else {
      $100 = $76;$102 = $77;$134 = $72;$135 = $73;$cmp85$lcssa = $82;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($cmp85$lcssa) {
     $99 = ($100|0)==(0);
     $101 = ($102|0)==(0);
     $103 = $99 & $101;
     if ($103) {
      $mul107 = $x * 0.0;
      $retval$0 = $mul107;
      break;
     } else {
      $105 = $102;$107 = $100;
     }
    } else {
     $105 = $135;$107 = $134;
    }
    $104 = ($105>>>0)<(1048576);
    $106 = ($107>>>0)<(0);
    $108 = ($105|0)==(1048576);
    $109 = $108 & $106;
    $110 = $104 | $109;
    if ($110) {
     $111 = $107;$112 = $105;$ex$362 = $ex$2$lcssa;
     while(1) {
      $113 = (_bitshift64Shl(($111|0),($112|0),1)|0);
      $114 = (getTempRet0() | 0);
      $dec117 = (($ex$362) + -1)|0;
      $115 = ($114>>>0)<(1048576);
      $116 = ($113>>>0)<(0);
      $117 = ($114|0)==(1048576);
      $118 = $117 & $116;
      $119 = $115 | $118;
      if ($119) {
       $111 = $113;$112 = $114;$ex$362 = $dec117;
      } else {
       $120 = $113;$121 = $114;$ex$3$lcssa = $dec117;
       break;
      }
     }
    } else {
     $120 = $107;$121 = $105;$ex$3$lcssa = $ex$2$lcssa;
    }
    $cmp119 = ($ex$3$lcssa|0)>(0);
    if ($cmp119) {
     $122 = (_i64Add(($120|0),($121|0),0,-1048576)|0);
     $123 = (getTempRet0() | 0);
     $124 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $125 = (getTempRet0() | 0);
     $126 = $122 | $124;
     $127 = $123 | $125;
     $131 = $127;$132 = $126;
    } else {
     $add128 = (1 - ($ex$3$lcssa))|0;
     $128 = (_bitshift64Lshr(($120|0),($121|0),($add128|0))|0);
     $129 = (getTempRet0() | 0);
     $131 = $129;$132 = $128;
    }
    $130 = $131 | $8;
    HEAP32[tempDoublePtr>>2] = $132;HEAP32[tempDoublePtr+4>>2] = $130;$133 = +HEAPF64[tempDoublePtr>>3];
    $retval$0 = $133;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $mul = $x * $y;
  $div = $mul / $mul;
  $retval$0 = $div;
 }
 return (+$retval$0);
}
function ___DOUBLE_BITS_581($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function ___lctrans($msg,$lm) {
 $msg = $msg|0;
 $lm = $lm|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___lctrans_impl($msg,$lm)|0);
 return ($call|0);
}
function _strerror($e) {
 $e = $e|0;
 var $0 = 0, $call = 0, $call1 = 0, $locale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self_448()|0);
 $locale = ((($call)) + 188|0);
 $0 = HEAP32[$locale>>2]|0;
 $call1 = (___strerror_l($e,$0)|0);
 return ($call1|0);
}
function ___pthread_self_448() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___strerror_l($e,$loc) {
 $e = $e|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $arrayidx15 = 0, $call = 0, $cmp = 0, $conv = 0, $dec = 0, $i$012 = 0, $i$111 = 0, $i$111$ph = 0, $inc = 0, $incdec$ptr = 0, $s$0$lcssa = 0, $s$010 = 0, $s$1 = 0, $tobool = 0, $tobool5 = 0, $tobool59 = 0;
 var $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$012 = 0;
 while(1) {
  $arrayidx = (1584 + ($i$012)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $conv = $0&255;
  $cmp = ($conv|0)==($e|0);
  if ($cmp) {
   label = 4;
   break;
  }
  $inc = (($i$012) + 1)|0;
  $tobool = ($inc|0)==(87);
  if ($tobool) {
   $i$111$ph = 87;
   label = 5;
   break;
  } else {
   $i$012 = $inc;
  }
 }
 if ((label|0) == 4) {
  $tobool59 = ($i$012|0)==(0);
  if ($tobool59) {
   $s$0$lcssa = 1680;
  } else {
   $i$111$ph = $i$012;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $i$111 = $i$111$ph;$s$010 = 1680;
  while(1) {
   $s$1 = $s$010;
   while(1) {
    $1 = HEAP8[$s$1>>0]|0;
    $tobool8 = ($1<<24>>24)==(0);
    $incdec$ptr = ((($s$1)) + 1|0);
    if ($tobool8) {
     break;
    } else {
     $s$1 = $incdec$ptr;
    }
   }
   $dec = (($i$111) + -1)|0;
   $tobool5 = ($dec|0)==(0);
   if ($tobool5) {
    $s$0$lcssa = $incdec$ptr;
    break;
   } else {
    $i$111 = $dec;$s$010 = $incdec$ptr;
   }
  }
 }
 $arrayidx15 = ((($loc)) + 20|0);
 $2 = HEAP32[$arrayidx15>>2]|0;
 $call = (___lctrans($s$0$lcssa,$2)|0);
 return ($call|0);
}
function _select($n,$rfds,$wfds,$efds,$tv) {
 $n = $n|0;
 $rfds = $rfds|0;
 $wfds = $wfds|0;
 $efds = $efds|0;
 $tv = $tv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = $rfds;
 $1 = $wfds;
 $2 = $efds;
 $3 = $tv;
 HEAP32[$vararg_buffer>>2] = $n;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $2;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 $call = (___syscall142(142,($vararg_buffer|0))|0);
 $call1 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call1|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $and = 0, $call = 0, $call1 = 0, $call12 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $conv = 0, $or = 0, $retval$0 = 0, $tobool = 0, $tobool13 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(362907,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = (___fmodeflags($mode)|0);
  $1 = $filename;
  $or = $call2 | 32768;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $or;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $call3 = (___syscall5(5,($vararg_buffer|0))|0);
  $call4 = (___syscall_ret($call3)|0);
  $cmp = ($call4|0)<(0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $and = $call2 & 524288;
   $tobool8 = ($and|0)==(0);
   if (!($tobool8)) {
    HEAP32[$vararg_buffer3>>2] = $call4;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $call12 = (___fdopen($call4,$mode)|0);
   $tobool13 = ($call12|0)==(0|0);
   if ($tobool13) {
    HEAP32[$vararg_buffer8>>2] = $call4;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $retval$0 = 0;
   } else {
    $retval$0 = $call12;
   }
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $0 = 0, $call = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cmp27 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $or = 0, $or12 = 0, $or18 = 0, $or24 = 0, $or30 = 0, $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0;
 var $tobool = 0, $tobool10 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strchr($mode,43)|0);
 $tobool = ($call|0)==(0|0);
 $0 = HEAP8[$mode>>0]|0;
 $cmp = ($0<<24>>24)!=(114);
 $$ = $cmp&1;
 $flags$0 = $tobool ? $$ : 2;
 $call5 = (_strchr($mode,120)|0);
 $tobool6 = ($call5|0)==(0|0);
 $or = $flags$0 | 128;
 $spec$select = $tobool6 ? $flags$0 : $or;
 $call9 = (_strchr($mode,101)|0);
 $tobool10 = ($call9|0)==(0|0);
 $or12 = $spec$select | 524288;
 $flags$2 = $tobool10 ? $spec$select : $or12;
 $cmp15 = ($0<<24>>24)==(114);
 $or18 = $flags$2 | 64;
 $spec$select13 = $cmp15 ? $flags$2 : $or18;
 $cmp21 = ($0<<24>>24)==(119);
 $or24 = $spec$select13 | 512;
 $flags$4 = $cmp21 ? $or24 : $spec$select13;
 $cmp27 = ($0<<24>>24)==(97);
 $or30 = $flags$4 | 1024;
 $spec$select14 = $cmp27 ? $or30 : $flags$4;
 return ($spec$select14|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr32 = 0, $and = 0, $and34 = 0, $buf = 0, $buf_size = 0, $call = 0, $call1 = 0, $call13 = 0, $call2 = 0, $call23 = 0, $call36 = 0;
 var $call44 = 0, $call7 = 0, $close = 0, $cmp = 0, $cmp19 = 0, $cond = 0, $conv = 0, $fd31 = 0, $lock = 0, $or = 0, $or29 = 0, $read = 0, $retval$0 = 0, $seek = 0, $tobool = 0, $tobool14 = 0, $tobool24 = 0, $tobool3 = 0, $tobool35 = 0, $tobool37 = 0;
 var $tobool41 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $wsz = sp + 56|0;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(362907,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = (_malloc(1176)|0);
  $tobool3 = ($call2|0)==(0|0);
  if ($tobool3) {
   $retval$0 = 0;
  } else {
   (_memset(($call2|0),0,144)|0);
   $call7 = (_strchr($mode,43)|0);
   $tobool8 = ($call7|0)==(0|0);
   if ($tobool8) {
    $1 = HEAP8[$mode>>0]|0;
    $cmp = ($1<<24>>24)==(114);
    $cond = $cmp ? 8 : 4;
    HEAP32[$call2>>2] = $cond;
   }
   $call13 = (_strchr($mode,101)|0);
   $tobool14 = ($call13|0)==(0|0);
   if (!($tobool14)) {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $2 = HEAP8[$mode>>0]|0;
   $cmp19 = ($2<<24>>24)==(97);
   if ($cmp19) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $call23 = (___syscall221(221,($vararg_buffer3|0))|0);
    $and = $call23 & 1024;
    $tobool24 = ($and|0)==(0);
    if ($tobool24) {
     $or = $call23 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $or;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $3 = HEAP32[$call2>>2]|0;
    $or29 = $3 | 128;
    HEAP32[$call2>>2] = $or29;
    $5 = $or29;
   } else {
    $$pre = HEAP32[$call2>>2]|0;
    $5 = $$pre;
   }
   $fd31 = ((($call2)) + 60|0);
   HEAP32[$fd31>>2] = $fd;
   $add$ptr32 = ((($call2)) + 152|0);
   $buf = ((($call2)) + 44|0);
   HEAP32[$buf>>2] = $add$ptr32;
   $buf_size = ((($call2)) + 48|0);
   HEAP32[$buf_size>>2] = 1024;
   $4 = ((($call2)) + 75|0);
   HEAP8[$4>>0] = -1;
   $and34 = $5 & 8;
   $tobool35 = ($and34|0)==(0);
   if ($tobool35) {
    $6 = $wsz;
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $6;
    $call36 = (___syscall54(54,($vararg_buffer12|0))|0);
    $tobool37 = ($call36|0)==(0);
    if ($tobool37) {
     HEAP8[$4>>0] = 10;
    }
   }
   $read = ((($call2)) + 32|0);
   HEAP32[$read>>2] = 148;
   $write = ((($call2)) + 36|0);
   HEAP32[$write>>2] = 75;
   $seek = ((($call2)) + 40|0);
   HEAP32[$seek>>2] = 76;
   $close = ((($call2)) + 12|0);
   HEAP32[$close>>2] = 74;
   $7 = HEAP32[(365692)>>2]|0;
   $tobool41 = ($7|0)==(0);
   if ($tobool41) {
    $lock = ((($call2)) + 76|0);
    HEAP32[$lock>>2] = -1;
   }
   $call44 = (___ofl_add($call2)|0);
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___ofl_add($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $call = 0, $next = 0, $prev = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ofl_lock()|0);
 $0 = HEAP32[$call>>2]|0;
 $next = ((($f)) + 56|0);
 HEAP32[$next>>2] = $0;
 $1 = HEAP32[$call>>2]|0;
 $tobool = ($1|0)==(0|0);
 if (!($tobool)) {
  $prev = ((($1)) + 52|0);
  HEAP32[$prev>>2] = $f;
 }
 HEAP32[$call>>2] = $f;
 ___ofl_unlock();
 return ($f|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((365760|0));
 return (365768|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((365760|0));
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $call1 = 0, $call18 = 0, $call19 = 0, $close = 0, $cmp = 0, $cmp13 = 0, $cond = 0;
 var $getln_buf = 0, $lock = 0, $next5 = 0, $or = 0, $prev = 0, $prev11 = 0, $tobool = 0, $tobool2 = 0, $tobool20 = 0, $tobool26 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 ___unlist_locked_file($f);
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $call1 = (___ofl_lock()|0);
  $prev = ((($f)) + 52|0);
  $2 = HEAP32[$prev>>2]|0;
  $tobool2 = ($2|0)==(0|0);
  $3 = $2;
  $$pre = ((($f)) + 56|0);
  if (!($tobool2)) {
   $4 = HEAP32[$$pre>>2]|0;
   $next5 = ((($2)) + 56|0);
   HEAP32[$next5>>2] = $4;
  }
  $5 = HEAP32[$$pre>>2]|0;
  $tobool7 = ($5|0)==(0|0);
  $6 = $5;
  if (!($tobool7)) {
   $prev11 = ((($5)) + 52|0);
   HEAP32[$prev11>>2] = $3;
  }
  $7 = HEAP32[$call1>>2]|0;
  $cmp13 = ($7|0)==($f|0);
  if ($cmp13) {
   HEAP32[$call1>>2] = $6;
  }
  ___ofl_unlock();
 }
 $call18 = (_fflush($f)|0);
 $close = ((($f)) + 12|0);
 $8 = HEAP32[$close>>2]|0;
 $call19 = (FUNCTION_TABLE_ii[$8 & 127]($f)|0);
 $or = $call19 | $call18;
 $getln_buf = ((($f)) + 96|0);
 $9 = HEAP32[$getln_buf>>2]|0;
 $tobool20 = ($9|0)==(0|0);
 if (!($tobool20)) {
  _free($9);
 }
 if ($tobool) {
  $tobool26 = ($cond|0)==(0);
  if (!($tobool26)) {
   ___unlockfile($f);
  }
 } else {
  _free($f);
 }
 return ($or|0);
}
function ___unlist_locked_file($f) {
 $f = $f|0;
 var $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $lockcount = 0, $next_locked = 0, $next_locked10 = 0, $prev_locked4 = 0, $stdio_locks = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lockcount = ((($f)) + 68|0);
 $0 = HEAP32[$lockcount>>2]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $next_locked = ((($f)) + 132|0);
  $1 = HEAP32[$next_locked>>2]|0;
  $tobool1 = ($1|0)==(0|0);
  $2 = $1;
  $$pre = ((($f)) + 128|0);
  if (!($tobool1)) {
   $3 = HEAP32[$$pre>>2]|0;
   $prev_locked4 = ((($1)) + 128|0);
   HEAP32[$prev_locked4>>2] = $3;
  }
  $4 = HEAP32[$$pre>>2]|0;
  $tobool6 = ($4|0)==(0|0);
  if ($tobool6) {
   $call = (___pthread_self_875()|0);
   $stdio_locks = ((($call)) + 232|0);
   $$sink = $stdio_locks;
  } else {
   $next_locked10 = ((($4)) + 132|0);
   $$sink = $next_locked10;
  }
  HEAP32[$$sink>>2] = $2;
 }
 return;
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[88640]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[88640]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 255]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $6 = ($sub$ptr$sub|0)<(0);
   $7 = $6 << 31 >> 31;
   $seek = ((($f)) + 40|0);
   $8 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiiii[$8 & 255]($f,$sub$ptr$sub,$7,1)|0);
   $9 = (getTempRet0() | 0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function ___pthread_self_875() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _feof($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $and$lobit = 0, $and$lobit8 = 0, $and$lobit9 = 0, $and7 = 0, $call = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $2 = HEAP32[$f>>2]|0;
  $and = $2 >>> 4;
  $and$lobit = $and & 1;
  if ($phitmp) {
   $and$lobit9 = $and$lobit;
  } else {
   ___unlockfile($f);
   $and$lobit9 = $and$lobit;
  }
 } else {
  $1 = HEAP32[$f>>2]|0;
  $and7 = $1 >>> 4;
  $and$lobit8 = $and7 & 1;
  $and$lobit9 = $and$lobit8;
 }
 return ($and$lobit9|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $buf = 0, $call = 0, $cookie = 0, $f = 0, $lock = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $f = sp;
 _memset(($f|0),0,144)|0;
 $read = ((($f)) + 32|0);
 HEAP32[$read>>2] = 149;
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 $cookie = ((($f)) + 84|0);
 HEAP32[$cookie>>2] = $s;
 $call = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _do_read_836($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___string_read($f,$buf,$len)|0);
 return ($call|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral333 = 0, $$ph$ph = 0, $$pr = 0, $$pr233 = 0, $$pre = 0, $$pre370 = 0, $$pre372 = 0, $$pre373 = 0, $$pre374 = 0, $$pre375 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0;
 var $add$ptr87 = 0, $add282 = 0, $add291 = 0, $add300 = 0, $add329 = 0, $add350 = 0, $add382 = 0, $add393 = 0, $add420 = 0, $add442 = 0, $add97 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $and = 0, $arglist_current = 0, $arglist_next = 0, $arrayidx = 0, $arrayidx213 = 0, $arrayidx218 = 0;
 var $arrayidx239 = 0, $arrayidx248 = 0, $arrayidx263 = 0, $arrayidx273 = 0, $arrayidx283 = 0, $arrayidx292 = 0, $arrayidx330 = 0, $arrayidx34 = 0, $arrayidx342 = 0, $arrayidx383 = 0, $arrayidx388 = 0, $arrayidx421 = 0, $arrayidx426 = 0, $arrayidx443 = 0, $arrayidx497 = 0, $arrayidx501 = 0, $arrayidx80 = 0, $base$0 = 0, $c$0304 = 0, $call = 0;
 var $call1 = 0, $call14 = 0, $call153 = 0, $call156 = 0, $call17 = 0, $call187 = 0, $call310 = 0, $call326 = 0, $call335 = 0, $call352 = 0, $call358 = 0, $call365 = 0, $call379 = 0, $call395 = 0, $call4 = 0, $call417 = 0, $call439 = 0, $call51 = 0, $call529 = 0.0, $call78 = 0;
 var $call86 = 0, $call93 = 0, $call93297 = 0, $cmp = 0, $cmp101 = 0, $cmp112 = 0, $cmp120 = 0, $cmp132 = 0, $cmp146 = 0, $cmp180 = 0, $cmp190 = 0, $cmp202 = 0, $cmp202$not = 0, $cmp205 = 0, $cmp223 = 0, $cmp277 = 0, $cmp277303 = 0, $cmp304 = 0, $cmp319 = 0, $cmp32 = 0;
 var $cmp346 = 0, $cmp372 = 0, $cmp389 = 0, $cmp410 = 0, $cmp432 = 0, $cmp44 = 0, $cmp520 = 0, $cmp55 = 0, $cmp65 = 0, $cmp7 = 0, $cmp82 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond303 = 0, $cond328 = 0, $cond381 = 0, $cond419 = 0, $cond441 = 0, $cond53 = 0;
 var $conv = 0, $conv12 = 0, $conv131 = 0, $conv151 = 0, $conv238 = 0, $conv247 = 0, $conv274 = 0, $conv276 = 0, $conv289$pre$phiZ2D = 0, $conv290 = 0, $conv3 = 0, $conv324 = 0, $conv334 = 0, $conv35 = 0, $conv377 = 0, $conv386 = 0, $conv41 = 0, $conv415 = 0, $conv424 = 0, $conv437 = 0;
 var $conv49 = 0, $conv54 = 0, $conv544 = 0.0, $conv85 = 0, $conv92 = 0, $conv92296 = 0, $conv96 = 0, $dest$0 = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor235 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0;
 var $i$3 = 0, $i$4 = 0, $inc341 = 0, $inc387 = 0, $inc425 = 0, $inc561 = 0, $incdec$ptr106 = 0, $incdec$ptr109$pre$phiZZ2D = 0, $incdec$ptr11 = 0, $incdec$ptr115 = 0, $incdec$ptr123 = 0, $incdec$ptr150 = 0, $incdec$ptr164 = 0, $incdec$ptr184 = 0, $incdec$ptr198 = 0, $incdec$ptr221 = 0, $incdec$ptr226 = 0, $incdec$ptr236 = 0, $incdec$ptr245 = 0, $incdec$ptr25 = 0;
 var $incdec$ptr294 = 0, $incdec$ptr323 = 0, $incdec$ptr376 = 0, $incdec$ptr414 = 0, $incdec$ptr436 = 0, $incdec$ptr454 = 0, $incdec$ptr48 = 0, $incdec$ptr564 = 0, $incdec$ptr62 = 0, $incdec$ptr76 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $k$0$ph$ph = 0, $k$2$ph = 0, $lnot$ext = 0, $lock = 0, $matches$0308 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0;
 var $mul = 0, $mul309 = 0, $mul351 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond221 = 0, $p$0312 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$12 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3299 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0;
 var $p$8 = 0, $p$9 = 0, $rend = 0, $rpos42 = 0, $s$0306 = 0, $s$1 = 0, $s$10 = 0, $s$2$ph = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $shcnt = 0, $shend43 = 0, $size$0 = 0, $spec$select = 0, $spec$select219 = 0, $spec$select220 = 0;
 var $spec$select222 = 0, $spec$select223 = 0, $spec$select224 = 0, $spec$select225 = 0, $spec$select226 = 0, $st = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub462 = 0, $sub$ptr$sub514 = 0, $sub$ptr$sub535 = 0, $sub$ptr$sub555 = 0, $sub237 = 0, $sub246 = 0, $sub98 = 0, $tobool = 0, $tobool104 = 0, $tobool157 = 0, $tobool161 = 0;
 var $tobool18 = 0, $tobool195 = 0, $tobool2 = 0, $tobool22 = 0, $tobool305 = 0, $tobool307 = 0, $tobool311 = 0, $tobool331 = 0, $tobool339 = 0, $tobool353 = 0, $tobool359 = 0, $tobool366 = 0, $tobool384 = 0, $tobool396 = 0, $tobool405 = 0, $tobool422 = 0, $tobool444 = 0, $tobool451 = 0, $tobool495 = 0, $tobool499 = 0;
 var $tobool5 = 0, $tobool523 = 0, $tobool541 = 0, $tobool559 = 0, $tobool567 = 0, $tobool567$old = 0, $tobool570 = 0, $tobool574 = 0, $tobool59 = 0, $tobool79 = 0, $tobool94 = 0, $tobool94298 = 0, $trunc = 0, $wc = 0, $wcs$6 = 0, $width$0$lcssa = 0, $width$0300 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $st = sp + 264|0;
 $scanset = sp;
 $wc = sp + 260|0;
 $$compoundliteral333 = sp + 272|0;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $1 = HEAP8[$fmt>>0]|0;
 $tobool305 = ($1<<24>>24)==(0);
 L4: do {
  if ($tobool305) {
   $matches$3 = 0;
  } else {
   $rpos42 = ((($f)) + 4|0);
   $shend43 = ((($f)) + 104|0);
   $shcnt = ((($f)) + 120|0);
   $rend = ((($f)) + 8|0);
   $arrayidx213 = ((($scanset)) + 10|0);
   $arrayidx218 = ((($scanset)) + 33|0);
   $arrayidx239 = ((($scanset)) + 46|0);
   $arrayidx248 = ((($scanset)) + 94|0);
   $$compoundliteral$sroa$2$0$$sroa_idx8 = ((($st)) + 4|0);
   $178 = 0;$2 = $1;$20 = 0;$21 = 0;$matches$0308 = 0;$p$0312 = $fmt;$s$0306 = 0;
   L6: while(1) {
    $conv = $2&255;
    $call1 = (_isspace($conv)|0);
    $tobool2 = ($call1|0)==(0);
    L8: do {
     if ($tobool2) {
      $26 = HEAP8[$p$0312>>0]|0;
      $cmp32 = ($26<<24>>24)==(37);
      L10: do {
       if ($cmp32) {
        $arrayidx34 = ((($p$0312)) + 1|0);
        $27 = HEAP8[$arrayidx34>>0]|0;
        L12: do {
         switch ($27<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $incdec$ptr76 = ((($p$0312)) + 2|0);
          $dest$0 = 0;$p$2 = $incdec$ptr76;
          break;
         }
         default: {
          $conv35 = $27&255;
          $call78 = (_isdigit($conv35)|0);
          $tobool79 = ($call78|0)==(0);
          if (!($tobool79)) {
           $arrayidx80 = ((($p$0312)) + 2|0);
           $36 = HEAP8[$arrayidx80>>0]|0;
           $cmp82 = ($36<<24>>24)==(36);
           if ($cmp82) {
            $37 = HEAP8[$arrayidx34>>0]|0;
            $conv85 = $37&255;
            $sub = (($conv85) + -48)|0;
            $call86 = (_arg_n($ap,$sub)|0);
            $add$ptr87 = ((($p$0312)) + 3|0);
            $dest$0 = $call86;$p$2 = $add$ptr87;
            break L12;
           }
          }
          $arglist_current = HEAP32[$ap>>2]|0;
          $38 = $arglist_current;
          $39 = ((0) + 4|0);
          $expanded1 = $39;
          $expanded = (($expanded1) - 1)|0;
          $40 = (($38) + ($expanded))|0;
          $41 = ((0) + 4|0);
          $expanded5 = $41;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $42 = $40 & $expanded3;
          $43 = $42;
          $44 = HEAP32[$43>>2]|0;
          $arglist_next = ((($43)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next;
          $dest$0 = $44;$p$2 = $arrayidx34;
         }
         }
        } while(0);
        $45 = HEAP8[$p$2>>0]|0;
        $conv92296 = $45&255;
        $call93297 = (_isdigit($conv92296)|0);
        $tobool94298 = ($call93297|0)==(0);
        if ($tobool94298) {
         $p$3$lcssa = $p$2;$width$0$lcssa = 0;
        } else {
         $p$3299 = $p$2;$width$0300 = 0;
         while(1) {
          $mul = ($width$0300*10)|0;
          $46 = HEAP8[$p$3299>>0]|0;
          $conv96 = $46&255;
          $add97 = (($mul) + -48)|0;
          $sub98 = (($add97) + ($conv96))|0;
          $incdec$ptr99 = ((($p$3299)) + 1|0);
          $47 = HEAP8[$incdec$ptr99>>0]|0;
          $conv92 = $47&255;
          $call93 = (_isdigit($conv92)|0);
          $tobool94 = ($call93|0)==(0);
          if ($tobool94) {
           $p$3$lcssa = $incdec$ptr99;$width$0$lcssa = $sub98;
           break;
          } else {
           $p$3299 = $incdec$ptr99;$width$0300 = $sub98;
          }
         }
        }
        $48 = HEAP8[$p$3$lcssa>>0]|0;
        $cmp101 = ($48<<24>>24)==(109);
        $incdec$ptr106 = ((($p$3$lcssa)) + 1|0);
        if ($cmp101) {
         $tobool104 = ($dest$0|0)!=(0|0);
         $lnot$ext = $tobool104&1;
         $$pr = HEAP8[$incdec$ptr106>>0]|0;
         $$pre373 = ((($p$3$lcssa)) + 2|0);
         $183 = 0;$49 = $$pr;$alloc$0 = $lnot$ext;$incdec$ptr109$pre$phiZZ2D = $$pre373;$p$4 = $incdec$ptr106;$s$1 = 0;
        } else {
         $183 = $178;$49 = $48;$alloc$0 = 0;$incdec$ptr109$pre$phiZZ2D = $incdec$ptr106;$p$4 = $p$3$lcssa;$s$1 = $s$0306;
        }
        switch ($49<<24>>24) {
        case 104:  {
         $50 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp112 = ($50<<24>>24)==(104);
         $incdec$ptr115 = ((($p$4)) + 2|0);
         $spec$select223 = $cmp112 ? $incdec$ptr115 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select224 = $cmp112 ? -2 : -1;
         $p$5 = $spec$select223;$size$0 = $spec$select224;
         break;
        }
        case 108:  {
         $51 = HEAP8[$incdec$ptr109$pre$phiZZ2D>>0]|0;
         $cmp120 = ($51<<24>>24)==(108);
         $incdec$ptr123 = ((($p$4)) + 2|0);
         $spec$select225 = $cmp120 ? $incdec$ptr123 : $incdec$ptr109$pre$phiZZ2D;
         $spec$select226 = $cmp120 ? 3 : 1;
         $p$5 = $spec$select225;$size$0 = $spec$select226;
         break;
        }
        case 106:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $incdec$ptr109$pre$phiZZ2D;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $184 = $183;$s$8 = $s$1;
         label = 143;
         break L6;
        }
        }
        $52 = HEAP8[$p$5>>0]|0;
        $conv131 = $52&255;
        $and = $conv131 & 47;
        $cmp132 = ($and|0)==(3);
        $or = $conv131 | 32;
        $spec$select = $cmp132 ? $or : $conv131;
        $spec$select219 = $cmp132 ? 1 : $size$0;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $53 = ($width$0$lcssa|0)>(1);
         $spec$select220 = $53 ? $width$0$lcssa : 1;
         $170 = $20;$171 = $21;$width$1 = $spec$select220;
         break;
        }
        case 91:  {
         $170 = $20;$171 = $21;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         _store_int($dest$0,$spec$select219,$20,$21);
         $179 = $183;$180 = $20;$181 = $21;$matches$1 = $matches$0308;$p$12 = $p$5;$s$7 = $s$1;
         break L8;
         break;
        }
        default: {
         ___shlim($f,0,0);
         while(1) {
          $54 = HEAP32[$rpos42>>2]|0;
          $55 = HEAP32[$shend43>>2]|0;
          $cmp146 = ($54>>>0)<($55>>>0);
          if ($cmp146) {
           $incdec$ptr150 = ((($54)) + 1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr150;
           $56 = HEAP8[$54>>0]|0;
           $conv151 = $56&255;
           $cond155 = $conv151;
          } else {
           $call153 = (___shgetc($f)|0);
           $cond155 = $call153;
          }
          $call156 = (_isspace($cond155)|0);
          $tobool157 = ($call156|0)==(0);
          if ($tobool157) {
           break;
          }
         }
         $57 = HEAP32[$shend43>>2]|0;
         $tobool161 = ($57|0)==(0|0);
         if ($tobool161) {
          $$pre370 = HEAP32[$rpos42>>2]|0;
          $67 = $$pre370;
         } else {
          $58 = HEAP32[$rpos42>>2]|0;
          $incdec$ptr164 = ((($58)) + -1|0);
          HEAP32[$rpos42>>2] = $incdec$ptr164;
          $59 = $incdec$ptr164;
          $67 = $59;
         }
         $60 = $shcnt;
         $61 = $60;
         $62 = HEAP32[$61>>2]|0;
         $63 = (($60) + 4)|0;
         $64 = $63;
         $65 = HEAP32[$64>>2]|0;
         $66 = HEAP32[$rend>>2]|0;
         $sub$ptr$sub172 = (($67) - ($66))|0;
         $68 = ($sub$ptr$sub172|0)<(0);
         $69 = $68 << 31 >> 31;
         $70 = (_i64Add(($62|0),($65|0),($20|0),($21|0))|0);
         $71 = (getTempRet0() | 0);
         $72 = (_i64Add(($70|0),($71|0),($sub$ptr$sub172|0),($69|0))|0);
         $73 = (getTempRet0() | 0);
         $170 = $72;$171 = $73;$width$1 = $width$0$lcssa;
        }
        }
        $74 = ($width$1|0)<(0);
        $75 = $74 << 31 >> 31;
        ___shlim($f,$width$1,$75);
        $76 = HEAP32[$rpos42>>2]|0;
        $77 = HEAP32[$shend43>>2]|0;
        $cmp180 = ($76>>>0)<($77>>>0);
        if ($cmp180) {
         $incdec$ptr184 = ((($76)) + 1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr184;
         $78 = $77;
        } else {
         $call187 = (___shgetc($f)|0);
         $cmp190 = ($call187|0)<(0);
         if ($cmp190) {
          $184 = $183;$s$8 = $s$1;
          label = 143;
          break L6;
         }
         $$pr233 = HEAP32[$shend43>>2]|0;
         $78 = $$pr233;
        }
        $tobool195 = ($78|0)==(0|0);
        if (!($tobool195)) {
         $79 = HEAP32[$rpos42>>2]|0;
         $incdec$ptr198 = ((($79)) + -1|0);
         HEAP32[$rpos42>>2] = $incdec$ptr198;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $cmp202 = ($spec$select|0)==(99);
          $80 = $spec$select | 16;
          $81 = ($80|0)==(115);
          L61: do {
           if ($81) {
            $cmp205 = ($spec$select|0)==(115);
            (_memset(($scanset|0),-1,257)|0);
            HEAP8[$scanset>>0] = 0;
            if ($cmp205) {
             HEAP8[$arrayidx218>>0] = 0;
             ;HEAP16[$arrayidx213>>1]=0|0;HEAP16[$arrayidx213+2>>1]=0|0;HEAP8[$arrayidx213+4>>0]=0|0;
             $p$10 = $p$5;
            } else {
             $p$10 = $p$5;
            }
           } else {
            $incdec$ptr221 = ((($p$5)) + 1|0);
            $82 = HEAP8[$incdec$ptr221>>0]|0;
            $cmp223 = ($82<<24>>24)==(94);
            $incdec$ptr226 = ((($p$5)) + 2|0);
            $invert$0 = $cmp223&1;
            $p$6 = $cmp223 ? $incdec$ptr226 : $incdec$ptr221;
            (_memset(($scanset|0),($invert$0|0),257)|0);
            HEAP8[$scanset>>0] = 0;
            $83 = HEAP8[$p$6>>0]|0;
            switch ($83<<24>>24) {
            case 45:  {
             $incdec$ptr236 = ((($p$6)) + 1|0);
             $sub237 = $invert$0 ^ 1;
             $conv238 = $sub237&255;
             HEAP8[$arrayidx239>>0] = $conv238;
             $conv289$pre$phiZ2D = $conv238;$p$7 = $incdec$ptr236;
             break;
            }
            case 93:  {
             $incdec$ptr245 = ((($p$6)) + 1|0);
             $sub246 = $invert$0 ^ 1;
             $conv247 = $sub246&255;
             HEAP8[$arrayidx248>>0] = $conv247;
             $conv289$pre$phiZ2D = $conv247;$p$7 = $incdec$ptr245;
             break;
            }
            default: {
             $$pre374 = $invert$0 ^ 1;
             $$pre375 = $$pre374&255;
             $conv289$pre$phiZ2D = $$pre375;$p$7 = $p$6;
            }
            }
            $p$8 = $p$7;
            while(1) {
             $84 = HEAP8[$p$8>>0]|0;
             L72: do {
              switch ($84<<24>>24) {
              case 0:  {
               $184 = $183;$s$8 = $s$1;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $p$10 = $p$8;
               break L61;
               break;
              }
              case 45:  {
               $arrayidx263 = ((($p$8)) + 1|0);
               $85 = HEAP8[$arrayidx263>>0]|0;
               switch ($85<<24>>24) {
               case 93: case 0:  {
                $88 = 45;$p$9 = $p$8;
                break L72;
                break;
               }
               default: {
               }
               }
               $arrayidx273 = ((($p$8)) + -1|0);
               $86 = HEAP8[$arrayidx273>>0]|0;
               $cmp277303 = ($86&255)<($85&255);
               if ($cmp277303) {
                $conv274 = $86&255;
                $c$0304 = $conv274;
                while(1) {
                 $add282 = (($c$0304) + 1)|0;
                 $arrayidx283 = (($scanset) + ($add282)|0);
                 HEAP8[$arrayidx283>>0] = $conv289$pre$phiZ2D;
                 $87 = HEAP8[$arrayidx263>>0]|0;
                 $conv276 = $87&255;
                 $cmp277 = ($add282>>>0)<($conv276>>>0);
                 if ($cmp277) {
                  $c$0304 = $add282;
                 } else {
                  $88 = $87;$p$9 = $arrayidx263;
                  break;
                 }
                }
               } else {
                $88 = $85;$p$9 = $arrayidx263;
               }
               break;
              }
              default: {
               $88 = $84;$p$9 = $p$8;
              }
              }
             } while(0);
             $conv290 = $88&255;
             $add291 = (($conv290) + 1)|0;
             $arrayidx292 = (($scanset) + ($add291)|0);
             HEAP8[$arrayidx292>>0] = $conv289$pre$phiZ2D;
             $incdec$ptr294 = ((($p$9)) + 1|0);
             $p$8 = $incdec$ptr294;
            }
           }
          } while(0);
          $add300 = (($width$1) + 1)|0;
          $cond303 = $cmp202 ? $add300 : 31;
          $cmp304 = ($spec$select219|0)==(1);
          $tobool307 = ($alloc$0|0)!=(0);
          L80: do {
           if ($cmp304) {
            if ($tobool307) {
             $mul309 = $cond303 << 2;
             $call310 = (_malloc($mul309)|0);
             $tobool311 = ($call310|0)==(0|0);
             if ($tobool311) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $186 = $call310;
             }
            } else {
             $186 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8>>2] = 0;
            $$ph$ph = $186;$i$0$ph$ph = 0;$k$0$ph$ph = $cond303;
            L85: while(1) {
             $tobool339 = ($$ph$ph|0)==(0|0);
             $i$0$ph = $i$0$ph$ph;
             while(1) {
              L89: while(1) {
               $89 = HEAP32[$rpos42>>2]|0;
               $90 = HEAP32[$shend43>>2]|0;
               $cmp319 = ($89>>>0)<($90>>>0);
               if ($cmp319) {
                $incdec$ptr323 = ((($89)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr323;
                $91 = HEAP8[$89>>0]|0;
                $conv324 = $91&255;
                $cond328 = $conv324;
               } else {
                $call326 = (___shgetc($f)|0);
                $cond328 = $call326;
               }
               $add329 = (($cond328) + 1)|0;
               $arrayidx330 = (($scanset) + ($add329)|0);
               $92 = HEAP8[$arrayidx330>>0]|0;
               $tobool331 = ($92<<24>>24)==(0);
               if ($tobool331) {
                break L85;
               }
               $conv334 = $cond328&255;
               HEAP8[$$compoundliteral333>>0] = $conv334;
               $call335 = (_mbrtowc($wc,$$compoundliteral333,1,$st)|0);
               switch ($call335|0) {
               case -1:  {
                $184 = $$ph$ph;$s$8 = 0;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($tobool339) {
               $i$1 = $i$0$ph;
              } else {
               $arrayidx342 = (($$ph$ph) + ($i$0$ph<<2)|0);
               $inc341 = (($i$0$ph) + 1)|0;
               $93 = HEAP32[$wc>>2]|0;
               HEAP32[$arrayidx342>>2] = $93;
               $i$1 = $inc341;
              }
              $cmp346 = ($i$1|0)==($k$0$ph$ph|0);
              $or$cond = $tobool307 & $cmp346;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph = $i$1;
              }
             }
             $factor235 = $k$0$ph$ph << 1;
             $add350 = $factor235 | 1;
             $mul351 = $add350 << 2;
             $call352 = (_realloc($$ph$ph,$mul351)|0);
             $tobool353 = ($call352|0)==(0|0);
             if ($tobool353) {
              $184 = $$ph$ph;$s$8 = 0;
              label = 143;
              break L6;
             } else {
              $$ph$ph = $call352;$i$0$ph$ph = $i$1;$k$0$ph$ph = $add350;
             }
            }
            $call358 = (_mbsinit($st)|0);
            $tobool359 = ($call358|0)==(0);
            if ($tobool359) {
             $184 = $$ph$ph;$s$8 = 0;
             label = 143;
             break L6;
            } else {
             $187 = $$ph$ph;$i$4 = $i$0$ph;$s$5 = 0;$wcs$6 = $$ph$ph;
            }
           } else {
            if ($tobool307) {
             $call365 = (_malloc($cond303)|0);
             $tobool366 = ($call365|0)==(0|0);
             if ($tobool366) {
              $184 = 0;$s$8 = 0;
              label = 143;
              break L6;
             }
             $i$2$ph = 0;$k$2$ph = $cond303;$s$2$ph = $call365;
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $94 = HEAP32[$rpos42>>2]|0;
               $95 = HEAP32[$shend43>>2]|0;
               $cmp372 = ($94>>>0)<($95>>>0);
               if ($cmp372) {
                $incdec$ptr376 = ((($94)) + 1|0);
                HEAP32[$rpos42>>2] = $incdec$ptr376;
                $96 = HEAP8[$94>>0]|0;
                $conv377 = $96&255;
                $cond381 = $conv377;
               } else {
                $call379 = (___shgetc($f)|0);
                $cond381 = $call379;
               }
               $add382 = (($cond381) + 1)|0;
               $arrayidx383 = (($scanset) + ($add382)|0);
               $97 = HEAP8[$arrayidx383>>0]|0;
               $tobool384 = ($97<<24>>24)==(0);
               if ($tobool384) {
                $187 = 0;$i$4 = $i$2;$s$5 = $s$2$ph;$wcs$6 = 0;
                break L80;
               }
               $conv386 = $cond381&255;
               $inc387 = (($i$2) + 1)|0;
               $arrayidx388 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$arrayidx388>>0] = $conv386;
               $cmp389 = ($inc387|0)==($k$2$ph|0);
               if ($cmp389) {
                break;
               } else {
                $i$2 = $inc387;
               }
              }
              $factor = $k$2$ph << 1;
              $add393 = $factor | 1;
              $call395 = (_realloc($s$2$ph,$add393)|0);
              $tobool396 = ($call395|0)==(0|0);
              if ($tobool396) {
               $184 = 0;$s$8 = $s$2$ph;
               label = 143;
               break L6;
              } else {
               $i$2$ph = $inc387;$k$2$ph = $add393;$s$2$ph = $call395;
              }
             }
            }
            $tobool405 = ($dest$0|0)==(0|0);
            if ($tobool405) {
             while(1) {
              $102 = HEAP32[$rpos42>>2]|0;
              $103 = HEAP32[$shend43>>2]|0;
              $cmp432 = ($102>>>0)<($103>>>0);
              if ($cmp432) {
               $incdec$ptr436 = ((($102)) + 1|0);
               HEAP32[$rpos42>>2] = $incdec$ptr436;
               $104 = HEAP8[$102>>0]|0;
               $conv437 = $104&255;
               $cond441 = $conv437;
              } else {
               $call439 = (___shgetc($f)|0);
               $cond441 = $call439;
              }
              $add442 = (($cond441) + 1)|0;
              $arrayidx443 = (($scanset) + ($add442)|0);
              $105 = HEAP8[$arrayidx443>>0]|0;
              $tobool444 = ($105<<24>>24)==(0);
              if ($tobool444) {
               $187 = 0;$i$4 = 0;$s$5 = 0;$wcs$6 = 0;
               break L80;
              }
             }
            }
            $i$3 = 0;
            while(1) {
             $98 = HEAP32[$rpos42>>2]|0;
             $99 = HEAP32[$shend43>>2]|0;
             $cmp410 = ($98>>>0)<($99>>>0);
             if ($cmp410) {
              $incdec$ptr414 = ((($98)) + 1|0);
              HEAP32[$rpos42>>2] = $incdec$ptr414;
              $100 = HEAP8[$98>>0]|0;
              $conv415 = $100&255;
              $cond419 = $conv415;
             } else {
              $call417 = (___shgetc($f)|0);
              $cond419 = $call417;
             }
             $add420 = (($cond419) + 1)|0;
             $arrayidx421 = (($scanset) + ($add420)|0);
             $101 = HEAP8[$arrayidx421>>0]|0;
             $tobool422 = ($101<<24>>24)==(0);
             if ($tobool422) {
              $187 = 0;$i$4 = $i$3;$s$5 = $dest$0;$wcs$6 = 0;
              break L80;
             }
             $conv424 = $cond419&255;
             $inc425 = (($i$3) + 1)|0;
             $arrayidx426 = (($dest$0) + ($i$3)|0);
             HEAP8[$arrayidx426>>0] = $conv424;
             $i$3 = $inc425;
            }
           }
          } while(0);
          $106 = HEAP32[$shend43>>2]|0;
          $tobool451 = ($106|0)==(0|0);
          if ($tobool451) {
           $$pre372 = HEAP32[$rpos42>>2]|0;
           $116 = $$pre372;
          } else {
           $107 = HEAP32[$rpos42>>2]|0;
           $incdec$ptr454 = ((($107)) + -1|0);
           HEAP32[$rpos42>>2] = $incdec$ptr454;
           $108 = $incdec$ptr454;
           $116 = $108;
          }
          $109 = $shcnt;
          $110 = $109;
          $111 = HEAP32[$110>>2]|0;
          $112 = (($109) + 4)|0;
          $113 = $112;
          $114 = HEAP32[$113>>2]|0;
          $115 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub462 = (($116) - ($115))|0;
          $117 = ($sub$ptr$sub462|0)<(0);
          $118 = $117 << 31 >> 31;
          $119 = (_i64Add(($111|0),($114|0),($sub$ptr$sub462|0),($118|0))|0);
          $120 = (getTempRet0() | 0);
          $121 = ($119|0)==(0);
          $122 = ($120|0)==(0);
          $123 = $121 & $122;
          if ($123) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          $cmp202$not = $cmp202 ^ 1;
          $124 = ($119|0)==($width$1|0);
          $125 = ($120|0)==($75|0);
          $126 = $124 & $125;
          $or$cond221 = $126 | $cmp202$not;
          if (!($or$cond221)) {
           $177 = $187;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$5;
           break L6;
          }
          do {
           if ($tobool307) {
            if ($cmp304) {
             HEAP32[$dest$0>>2] = $wcs$6;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$5;
             break;
            }
           }
          } while(0);
          if ($cmp202) {
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          } else {
           $tobool495 = ($wcs$6|0)==(0|0);
           if (!($tobool495)) {
            $arrayidx497 = (($wcs$6) + ($i$4<<2)|0);
            HEAP32[$arrayidx497>>2] = 0;
           }
           $tobool499 = ($s$5|0)==(0|0);
           if ($tobool499) {
            $185 = $187;$p$11 = $p$10;$s$6 = 0;
            break L59;
           }
           $arrayidx501 = (($s$5) + ($i$4)|0);
           HEAP8[$arrayidx501>>0] = 0;
           $185 = $187;$p$11 = $p$10;$s$6 = $s$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $call529 = (+___floatscan($f,$spec$select219,0));
          $145 = $shcnt;
          $146 = $145;
          $147 = HEAP32[$146>>2]|0;
          $148 = (($145) + 4)|0;
          $149 = $148;
          $150 = HEAP32[$149>>2]|0;
          $151 = HEAP32[$rpos42>>2]|0;
          $152 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub535 = (($151) - ($152))|0;
          $153 = ($sub$ptr$sub535|0)<(0);
          $154 = $153 << 31 >> 31;
          $155 = (_i64Subtract(0,0,($sub$ptr$sub535|0),($154|0))|0);
          $156 = (getTempRet0() | 0);
          $157 = ($147|0)==($155|0);
          $158 = ($150|0)==($156|0);
          $159 = $157 & $158;
          if ($159) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $tobool541 = ($dest$0|0)==(0|0);
          if ($tobool541) {
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
          } else {
           switch ($spec$select219|0) {
           case 0:  {
            $conv544 = $call529;
            HEAPF32[$dest$0>>2] = $conv544;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $call529;
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
            break;
           }
           default: {
            $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $127 = (___intscan($f,$base$0,0,-1,-1)|0);
          $128 = (getTempRet0() | 0);
          $129 = $shcnt;
          $130 = $129;
          $131 = HEAP32[$130>>2]|0;
          $132 = (($129) + 4)|0;
          $133 = $132;
          $134 = HEAP32[$133>>2]|0;
          $135 = HEAP32[$rpos42>>2]|0;
          $136 = HEAP32[$rend>>2]|0;
          $sub$ptr$sub514 = (($135) - ($136))|0;
          $137 = ($sub$ptr$sub514|0)<(0);
          $138 = $137 << 31 >> 31;
          $139 = (_i64Subtract(0,0,($sub$ptr$sub514|0),($138|0))|0);
          $140 = (getTempRet0() | 0);
          $141 = ($131|0)==($139|0);
          $142 = ($134|0)==($140|0);
          $143 = $141 & $142;
          if ($143) {
           $177 = $183;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$1;
           break L6;
          }
          $cmp520 = ($spec$select|0)==(112);
          $tobool523 = ($dest$0|0)!=(0|0);
          $or$cond1 = $tobool523 & $cmp520;
          if ($or$cond1) {
           $144 = $127;
           HEAP32[$dest$0>>2] = $144;
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          } else {
           _store_int($dest$0,$spec$select219,$127,$128);
           $185 = $183;$p$11 = $p$5;$s$6 = $s$1;
           break;
          }
         }
        } while(0);
        $160 = $shcnt;
        $161 = $160;
        $162 = HEAP32[$161>>2]|0;
        $163 = (($160) + 4)|0;
        $164 = $163;
        $165 = HEAP32[$164>>2]|0;
        $166 = HEAP32[$rpos42>>2]|0;
        $167 = HEAP32[$rend>>2]|0;
        $sub$ptr$sub555 = (($166) - ($167))|0;
        $168 = ($sub$ptr$sub555|0)<(0);
        $169 = $168 << 31 >> 31;
        $172 = (_i64Add(($162|0),($165|0),($170|0),($171|0))|0);
        $173 = (getTempRet0() | 0);
        $174 = (_i64Add(($172|0),($173|0),($sub$ptr$sub555|0),($169|0))|0);
        $175 = (getTempRet0() | 0);
        $tobool559 = ($dest$0|0)!=(0|0);
        $inc561 = $tobool559&1;
        $spec$select222 = (($matches$0308) + ($inc561))|0;
        $179 = $185;$180 = $174;$181 = $175;$matches$1 = $spec$select222;$p$12 = $p$11;$s$7 = $s$6;
        break L8;
       }
      } while(0);
      $conv41 = $cmp32&1;
      $add$ptr = (($p$0312) + ($conv41)|0);
      ___shlim($f,0,0);
      $28 = HEAP32[$rpos42>>2]|0;
      $29 = HEAP32[$shend43>>2]|0;
      $cmp44 = ($28>>>0)<($29>>>0);
      if ($cmp44) {
       $incdec$ptr48 = ((($28)) + 1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr48;
       $30 = HEAP8[$28>>0]|0;
       $conv49 = $30&255;
       $cond53 = $conv49;
      } else {
       $call51 = (___shgetc($f)|0);
       $cond53 = $call51;
      }
      $31 = HEAP8[$add$ptr>>0]|0;
      $conv54 = $31&255;
      $cmp55 = ($cond53|0)==($conv54|0);
      if (!($cmp55)) {
       label = 23;
       break L6;
      }
      $34 = (_i64Add(($20|0),($21|0),1,0)|0);
      $35 = (getTempRet0() | 0);
      $179 = $178;$180 = $34;$181 = $35;$matches$1 = $matches$0308;$p$12 = $add$ptr;$s$7 = $s$0306;
     } else {
      $p$1 = $p$0312;
      while(1) {
       $arrayidx = ((($p$1)) + 1|0);
       $3 = HEAP8[$arrayidx>>0]|0;
       $conv3 = $3&255;
       $call4 = (_isspace($conv3)|0);
       $tobool5 = ($call4|0)==(0);
       if ($tobool5) {
        break;
       } else {
        $p$1 = $arrayidx;
       }
      }
      ___shlim($f,0,0);
      while(1) {
       $4 = HEAP32[$rpos42>>2]|0;
       $5 = HEAP32[$shend43>>2]|0;
       $cmp7 = ($4>>>0)<($5>>>0);
       if ($cmp7) {
        $incdec$ptr11 = ((($4)) + 1|0);
        HEAP32[$rpos42>>2] = $incdec$ptr11;
        $6 = HEAP8[$4>>0]|0;
        $conv12 = $6&255;
        $cond16 = $conv12;
       } else {
        $call14 = (___shgetc($f)|0);
        $cond16 = $call14;
       }
       $call17 = (_isspace($cond16)|0);
       $tobool18 = ($call17|0)==(0);
       if ($tobool18) {
        break;
       }
      }
      $7 = HEAP32[$shend43>>2]|0;
      $tobool22 = ($7|0)==(0|0);
      if ($tobool22) {
       $$pre = HEAP32[$rpos42>>2]|0;
       $17 = $$pre;
      } else {
       $8 = HEAP32[$rpos42>>2]|0;
       $incdec$ptr25 = ((($8)) + -1|0);
       HEAP32[$rpos42>>2] = $incdec$ptr25;
       $9 = $incdec$ptr25;
       $17 = $9;
      }
      $10 = $shcnt;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = (($10) + 4)|0;
      $14 = $13;
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP32[$rend>>2]|0;
      $sub$ptr$sub = (($17) - ($16))|0;
      $18 = ($sub$ptr$sub|0)<(0);
      $19 = $18 << 31 >> 31;
      $22 = (_i64Add(($12|0),($15|0),($20|0),($21|0))|0);
      $23 = (getTempRet0() | 0);
      $24 = (_i64Add(($22|0),($23|0),($sub$ptr$sub|0),($19|0))|0);
      $25 = (getTempRet0() | 0);
      $179 = $178;$180 = $24;$181 = $25;$matches$1 = $matches$0308;$p$12 = $p$1;$s$7 = $s$0306;
     }
    } while(0);
    $incdec$ptr564 = ((($p$12)) + 1|0);
    $176 = HEAP8[$incdec$ptr564>>0]|0;
    $tobool = ($176<<24>>24)==(0);
    if ($tobool) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $178 = $179;$2 = $176;$20 = $180;$21 = $181;$matches$0308 = $matches$1;$p$0312 = $incdec$ptr564;$s$0306 = $s$7;
    }
   }
   if ((label|0) == 23) {
    $32 = HEAP32[$shend43>>2]|0;
    $tobool59 = ($32|0)==(0|0);
    if (!($tobool59)) {
     $33 = HEAP32[$rpos42>>2]|0;
     $incdec$ptr62 = ((($33)) + -1|0);
     HEAP32[$rpos42>>2] = $incdec$ptr62;
    }
    $cmp65 = ($cond53|0)>(-1);
    $tobool567 = ($matches$0308|0)!=(0);
    $or$cond2 = $tobool567 | $cmp65;
    if ($or$cond2) {
     $matches$3 = $matches$0308;
     break;
    } else {
     $182 = $178;$alloc$1 = 0;$s$9 = $s$0306;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $tobool567$old = ($matches$0308|0)==(0);
    if ($tobool567$old) {
     $182 = $184;$alloc$1 = $alloc$0;$s$9 = $s$8;
     label = 144;
    } else {
     $177 = $184;$alloc$2 = $alloc$0;$matches$2 = $matches$0308;$s$10 = $s$8;
    }
   }
   if ((label|0) == 144) {
    $177 = $182;$alloc$2 = $alloc$1;$matches$2 = -1;$s$10 = $s$9;
   }
   $tobool570 = ($alloc$2|0)==(0);
   if ($tobool570) {
    $matches$3 = $matches$2;
   } else {
    _free($s$10);
    _free($177);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $tobool574 = ($cond|0)==(0);
 if (!($tobool574)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _arg_n($ap,$n) {
 $ap = $ap|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ap2 = 0, $arglist_current = 0, $arglist_next = 0, $cmp = 0, $dec = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $i$0 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap2 = sp;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $i$0 = $n;
 while(1) {
  $cmp = ($i$0>>>0)>(1);
  $arglist_current = HEAP32[$ap2>>2]|0;
  $0 = $arglist_current;
  $1 = ((0) + 4|0);
  $expanded1 = $1;
  $expanded = (($expanded1) - 1)|0;
  $2 = (($0) + ($expanded))|0;
  $3 = ((0) + 4|0);
  $expanded5 = $3;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $4 = $2 & $expanded3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $arglist_next = ((($5)) + 4|0);
  HEAP32[$ap2>>2] = $arglist_next;
  $dec = (($i$0) + -1)|0;
  if ($cmp) {
   $i$0 = $dec;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function _store_int($dest,$size,$0,$1) {
 $dest = $dest|0;
 $size = $size|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($dest|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   switch ($size|0) {
   case -2:  {
    $2 = $0&255;
    HEAP8[$dest>>0] = $2;
    break L1;
    break;
   }
   case -1:  {
    $3 = $0&65535;
    HEAP16[$dest>>1] = $3;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 3:  {
    $4 = $dest;
    $5 = $4;
    HEAP32[$5>>2] = $0;
    $6 = (($4) + 4)|0;
    $7 = $6;
    HEAP32[$7>>2] = $1;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $add = 0, $add$ptr = 0, $add$ptr4 = 0, $call = 0, $cmp = 0, $cookie = 0, $k$0 = 0, $rend = 0, $rpos = 0, $spec$select = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cookie = ((($f)) + 84|0);
 $0 = HEAP32[$cookie>>2]|0;
 $add = (($len) + 256)|0;
 $call = (_memchr($0,0,$add)|0);
 $tobool = ($call|0)==(0|0);
 $sub$ptr$lhs$cast = $call;
 $sub$ptr$rhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $k$0 = $tobool ? $add : $sub$ptr$sub;
 $cmp = ($k$0>>>0)<($len>>>0);
 $spec$select = $cmp ? $k$0 : $len;
 (_memcpy(($buf|0),($0|0),($spec$select|0))|0);
 $add$ptr = (($0) + ($spec$select)|0);
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $add$ptr;
 $add$ptr4 = (($0) + ($k$0)|0);
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = $add$ptr4;
 HEAP32[$cookie>>2] = $add$ptr4;
 return ($spec$select|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $call = 0, $call1 = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_fwrite($s,1,$call,$f)|0);
 $cmp = ($call1|0)!=($call|0);
 $sub = $cmp << 31 >> 31;
 return ($sub|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $spec$select;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 255]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call10 = 0, $call10$lobit = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $lbf = 0, $lock = 0, $tobool = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[88639]|0;
 $lock = ((($0)) + 76|0);
 $1 = HEAP32[$lock>>2]|0;
 $cmp = ($1|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($0)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $call1 = (_fputs($s,$0)|0);
 $cmp2 = ($call1|0)<(0);
 do {
  if ($cmp2) {
   $5 = -1;
  } else {
   $lbf = ((($0)) + 75|0);
   $2 = HEAP8[$lbf>>0]|0;
   $cmp3 = ($2<<24>>24)==(10);
   if (!($cmp3)) {
    $wpos = ((($0)) + 20|0);
    $3 = HEAP32[$wpos>>2]|0;
    $wend = ((($0)) + 16|0);
    $4 = HEAP32[$wend>>2]|0;
    $cmp5 = ($3>>>0)<($4>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($3)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$3>>0] = 10;
     $5 = 0;
     break;
    }
   }
   $call10 = (___overflow($0,10)|0);
   $call10$lobit = $call10 >> 31;
   $5 = $call10$lobit;
  }
 } while(0);
 $tobool = ($cond|0)==(0);
 if (!($tobool)) {
  ___unlockfile($0);
 }
 return ($5|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[88639]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0;
 var $conv14 = 0, $conv2 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $conv11 = $c&255;
   $conv12 = $c & 255;
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv12|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv11;
     $cond30 = $conv12;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $conv = $c&255;
   $conv1 = $c & 255;
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _perror($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $cond = 0, $lock = 0, $tobool = 0, $tobool11 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[88638]|0;
 $call = (___errno_location()|0);
 $1 = HEAP32[$call>>2]|0;
 $call1 = (_strerror($1)|0);
 $lock = ((($0)) + 76|0);
 $2 = HEAP32[$lock>>2]|0;
 $cmp = ($2|0)>(-1);
 if ($cmp) {
  $call2 = (___lockfile($0)|0);
  $cond = $call2;
 } else {
  $cond = 0;
 }
 $tobool = ($msg|0)==(0|0);
 if (!($tobool)) {
  $3 = HEAP8[$msg>>0]|0;
  $tobool3 = ($3<<24>>24)==(0);
  if (!($tobool3)) {
   $call4 = (_strlen($msg)|0);
   (_fwrite($msg,$call4,1,$0)|0);
   (_fputc(58,$0)|0);
   (_fputc(32,$0)|0);
  }
 }
 $call8 = (_strlen($call1)|0);
 (_fwrite($call1,$call8,1,$0)|0);
 (_fputc(10,$0)|0);
 $tobool11 = ($cond|0)==(0);
 if (!($tobool11)) {
  ___unlockfile($0);
 }
 return;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&255](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5() {
 ; nullFunc_v(5);
}
function b6(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(8);
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,_make,b0,b0,_make_160,b0,b0,_make_165,b0,b0,_make_170,b0,b0,_make_174,b0,b0,_make_178,_make_184,b0,b0,_make_190,b0,b0,_make_194,b0,b0,_make_198
,b0,b0,_make_202,_make_207,_make_212,_make_217,_make_221,_make_227,_make_232,_make_238,_make_243,_make_264,b0,b0,_make_270,b0,b0,b0,b0,_make_277,b0,b0,_make_281,_make_285,_make_289,_make_293,_make_297,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iidiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_fmt_fp,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,_avr_flash_ioctl,b3,b3,_avr_uart_ioctl,b3,b3,_avr_ioport_ioctl,b3,_avr_eeprom_ioctl,b3,b3,_avr_timer_ioctl,b3,_avr_watchdog_ioctl,b3,___stdio_write,b3,___stdout_write,_sn_write,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,_avr_adc_read_l,_avr_adc_read_h,b3,b3,b3,b3,b3,b3,_avr_twi_read_data,b3,b3,b3,b3,b3,b3,b3,b3,_avr_uart_read,_avr_uart_rxc_read,b3,b3,b3
,b3,_avr_spi_read,b3,b3,_avr_ioport_read,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_avr_timer_tcnt_read,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___stdio_read
,_do_read_836,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,___stdio_seek,b4,b4,b4,b4,b4,_wdg0151_busy_timer,b4,__hd44780_busy_timer,b4,__avr_vcd_timer,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_avr_adc_int_raise,b4,b4,_avr_twi_set_state_timer,b4,b4,b4,b4,b4,b4,_avr_progen_clear,b4,_avr_uart_rxc_raise,_avr_uart_txc_raise,b4,b4,b4,b4,b4,b4
,b4,b4,_avr_spi_raise,b4,b4,b4,b4,b4,b4,b4,_avr_eempe_clear,_avr_eei_raise,b4,b4,b4,b4,b4,_avr_timer_tov,_avr_timer_compa,_avr_timer_compb,_avr_timer_compc,b4,b4,_avr_wdce_clear,_avr_watchdog_timer,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_glcd_callback,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vi = [b6,_m1280_init,_m1280_reset,b6,_m1281_init,_m1281_reset,b6,_mx4_init,_mx4_reset,b6,_m128_init,_m128_reset,b6,_m128rfa1_init,_m128rfa1_reset,b6,_m128rfr2_init,_m128rfr2_reset,b6,b6,_mx8_init,_mx8_reset,b6,_mx_init,_mx_reset,b6,_mxm1_init,_mxm1_reset,b6
,_m2560_init,_m2560_reset,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_init_265,_reset,b6,_init_272,_reset_273,_tx4_init,_tx4_reset,b6,_tx5_init,_tx5_reset,b6,b6,b6,b6,b6,_avr_adc_reset,_avr_twi_reset,_avr_lin_reset
,_avr_flash_reset,b6,_avr_flash_dealloc,_avr_uart_reset,b6,_avr_spi_reset,_avr_ioport_reset,b6,_avr_extint_reset,b6,_avr_eeprom_dealloc,_avr_timer_reset,b6,_avr_watchdog_reset,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,_avr_callback_run_raw,b6,b6,b6,_avr_callback_run_gdb,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_avr_watchdog_run_callback_software_reset,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_pop_arg_long_double,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_pin_changed_hook,b8,_wdg0151_pin_changed,b8,_hd44780_pin_changed,b8,b8,b8,__avr_vcd_notify,b8
,b8,_avr_callback_sleep_raw,b8,b8,b8,_avr_callback_sleep_gdb,b8,b8,b8,b8,b8,_avr_adc_irq_notify,_avr_twi_irq_input,b8,b8,b8,b8,b8,b8,b8,b8,_avr_uart_irq_input,b8,b8,b8,b8,b8,b8,b8,_avr_spi_irq_input
,b8,b8,b8,b8,b8,b8,b8,_avr_ioport_irq_notify,_avr_extint_irq_notify,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_avr_timer_irq_icp,b8,b8,b8,b8,_avr_watchdog_irq_notify,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__avr_io_mux_write,b9,b9,_std_logger
,b9,b9,__avr_io_command_write,__avr_io_console_write,b9,b9,_avr_adc_write_adcsra,_avr_adc_write_adcsrb,b9,b9,b9,b9,b9,b9,_avr_twi_write,_avr_twi_write_data,b9,_avr_twi_write_status,_avr_lin_baud_write,_avr_flash_write,b9,b9,b9,b9,_avr_uart_udr_write,b9,b9,_avr_uart_write,_avr_uart_baud_write,b9
,_avr_spi_write,b9,b9,_avr_ioport_write,b9,_avr_ioport_pin_write,_avr_ioport_ddr_write,b9,b9,_avr_eeprom_write,b9,b9,_avr_timer_write,_avr_timer_write_pending,_avr_timer_write_ocr,_avr_timer_tcnt_write,b9,b9,b9,b9,b9,b9,_avr_watchdog_write,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _get_ports: _get_ports, _htonl: _htonl, _htons: _htons, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _init: _init, _llvm_bswap_i16: _llvm_bswap_i16, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _ntohs: _ntohs, _run: _run, _sbrk: _sbrk, _set_pin: _set_pin, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__get_ports = asm["_get_ports"];
asm["_get_ports"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__get_ports.apply(null, arguments);
};

var real__htonl = asm["_htonl"];
asm["_htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htonl.apply(null, arguments);
};

var real__htons = asm["_htons"];
asm["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htons.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__init = asm["_init"];
asm["_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__init.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"];
asm["_llvm_bswap_i16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i16.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"];
asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"];
asm["_ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ntohs.apply(null, arguments);
};

var real__run = asm["_run"];
asm["_run"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__run.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"];
asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__set_pin = asm["_set_pin"];
asm["_set_pin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__set_pin.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _get_ports = Module["_get_ports"] = asm["_get_ports"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _htons = Module["_htons"] = asm["_htons"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _init = Module["_init"] = asm["_init"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _run = Module["_run"] = asm["_run"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _set_pin = Module["_set_pin"] = asm["_set_pin"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = '"' + what + '"';
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



