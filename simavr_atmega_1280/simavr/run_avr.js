
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
var fileData0 = [];
fileData0.push.apply(fileData0, [58, 49, 48, 48, 48, 48, 48, 48, 48, 48, 67, 57, 52, 54, 69, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 53, 55, 13, 10, 58, 49, 48, 48, 48, 49, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 50, 56, 13, 10, 58, 49, 48, 48, 48, 50, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 49, 56, 13, 10, 58, 49, 48, 48, 48, 51, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 56, 13, 10, 58, 49, 48, 48, 48, 52, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 52, 70, 48, 54, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 51, 49, 13, 10, 58, 49, 48, 48, 48, 53, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 69, 56, 13, 10, 58, 49, 48, 48, 48, 54, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 68, 56, 13, 10, 58, 49, 48, 48, 48, 55, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 67, 56, 13, 10, 58, 49, 48, 48, 48, 56, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 55, 55, 48, 54, 67, 57, 13, 10, 58, 49, 48, 48, 48, 57, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 65, 56, 13, 10, 58, 49, 48, 48, 48, 65, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 69, 48, 54, 48, 67, 57, 52, 56, 68, 48, 49, 57, 50, 13, 10, 58, 49, 48, 48, 48, 66, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 56, 56, 13, 10, 58, 49, 48, 48, 48, 67, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 55, 56, 13, 10, 58, 49, 48, 48, 48, 68, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 48, 67, 57, 52, 56, 68, 48, 49, 54, 56, 13, 10, 58, 49, 48, 48, 48, 69, 48, 48, 48, 48, 67, 57, 52, 56, 68, 48, 49, 52, 53, 52, 54, 52, 55, 54, 53, 54, 54, 54, 55, 48, 48, 50, 48, 50, 66, 50, 68, 50, 69, 51, 48, 48, 56, 13, 10, 58, 49, 48, 48, 48, 70, 48, 48, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 54, 56, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 66, 66, 13, 10, 58, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 53, 70, 48, 48, 48, 48, 48, 48, 48, 55, 48, 48, 48, 55, 48, 48, 49, 52, 55, 70, 49, 52, 55, 70, 49, 52, 50, 52, 50, 52, 13, 10, 58, 49, 48, 48, 49, 49, 48, 48, 48, 50, 65, 55, 70, 50, 65, 49, 50, 50, 51, 49, 51, 48, 56, 54, 52, 54, 50, 51, 54, 52, 57, 53, 53, 50, 50, 53, 48, 48, 48, 48, 53, 65, 66, 13, 10, 58, 49, 48, 48, 49, 50, 48, 48, 48, 48, 51, 48, 48, 48, 48, 48, 48, 49, 67, 50, 50, 52, 49, 48, 48, 48, 48, 52, 49, 50, 50, 49, 67, 48, 48, 48, 56, 50, 65, 49, 67, 56, 48, 13, 10, 58, 49, 48, 48, 49, 51, 48, 48, 48, 50, 65, 48, 56, 48, 56, 48, 56, 51, 69, 48, 56, 48, 56, 48, 48, 53, 48, 51, 48, 48, 48, 48, 48, 48, 56, 48, 56, 48, 56, 48, 56, 56, 70, 13, 10, 58, 49, 48, 48, 49, 52, 48, 48, 48, 48, 56, 48, 48, 54, 48, 54, 48, 48, 48, 48, 48, 50, 48, 49, 48, 48, 56, 48, 52, 48, 50, 51, 69, 53, 49, 52, 57, 52, 53, 51, 69, 52, 69, 13, 10, 58, 49, 48, 48, 49, 53, 48, 48, 48, 48, 48, 52, 50, 55, 70, 52, 48, 48, 48, 52, 50, 54, 49, 53, 49, 52, 57, 52, 54, 50, 49, 52, 49, 52, 53, 52, 66, 51, 49, 49, 56, 69, 48, 13, 10, 58, 49, 48, 48, 49, 54, 48, 48, 48, 49, 52, 49, 50, 55, 70, 49, 48, 50, 55, 52, 53, 52, 53, 52, 53, 51, 57, 51, 67, 52, 65, 52, 57, 52, 57, 51, 48, 48, 49, 55, 49, 70, 49, 13, 10, 58, 49, 48, 48, 49, 55, 48, 48, 48, 48, 57, 48, 53, 48, 51, 51, 54, 52, 57, 52, 57, 52, 57, 51, 54, 48, 54, 52, 57, 52, 57, 50, 57, 49, 69, 48, 48, 51, 54, 51, 54, 68, 67, 13, 10, 58, 49, 48, 48, 49, 56, 48, 48, 48, 48, 48, 48, 48, 48, 48, 53, 54, 51, 54, 48, 48, 48, 48, 48, 48, 48, 56, 49, 52, 50, 50, 52, 49, 49, 52, 49, 52, 49, 52, 49, 52, 49, 52, 13, 10, 58, 49, 48, 48, 49, 57, 48, 48, 48, 49, 52, 52, 49, 50, 50, 49, 52, 48, 56, 48, 48, 48, 50, 48, 49, 53, 49, 48, 57, 48, 54, 51, 50, 52, 57, 55, 57, 52, 49, 51, 69, 70, 54, 13, 10, 58, 49, 48, 48, 49, 65, 48, 48, 48, 55, 69, 49, 49, 49, 49, 49, 49, 55, 69, 55, 70, 52, 57, 52, 57, 52, 57, 51, 54, 51, 69, 52, 49, 52, 49, 52, 49, 50, 50, 55, 70, 69, 69, 13, 10, 58, 49, 48, 48, 49, 66, 48, 48, 48, 52, 49, 52, 49, 50, 50, 49, 67, 55, 70, 52, 57, 52, 57, 52, 57, 52, 49, 55, 70, 48, 57, 48, 57, 48, 49, 48, 49, 51, 69, 52, 49, 68, 50, 13, 10, 58, 49, 48, 48, 49, 67, 48, 48, 48, 52, 49, 53, 49, 51, 50, 55, 70, 48, 56, 48, 56, 48, 56, 55, 70, 48, 48, 52, 49, 55, 70, 52, 49, 48, 48, 50, 48, 52, 48, 52, 49, 66, 51, 13, 10, 58, 49, 48, 48, 49, 68, 48, 48, 48, 51, 70, 48, 49, 55, 70, 48, 56, 49, 52, 50, 50, 52, 49, 55, 70, 52, 48, 52, 48, 52, 48, 52, 48, 55, 70, 48, 50, 48, 52, 48, 50, 68, 66, 13, 10, 58, 49, 48, 48, 49, 69, 48, 48, 48, 55, 70, 55, 70, 48, 52, 48, 56, 49, 48, 55, 70, 51, 69, 52, 49, 52, 49, 52, 49, 51, 69, 55, 70, 48, 57, 48, 57, 48, 57, 48, 54, 57, 55, 13, 10, 58, 49, 48, 48, 49, 70, 48, 48, 48, 51, 69, 52, 49, 53, 49, 50, 49, 53, 69, 55, 70, 48, 57, 49, 57, 50, 57, 52, 54, 52, 54, 52, 57, 52, 57, 52, 57, 51, 49, 48, 49, 52, 68, 13, 10, 58, 49, 48, 48, 50, 48, 48, 48, 48, 48, 49, 55, 70, 48, 49, 48, 49, 51, 70, 52, 48, 52, 48, 52, 48, 51, 70, 49, 70, 50, 48, 52, 48, 50, 48, 49, 70, 55, 70, 50, 48, 68, 49, 13, 10, 58, 49, 48, 48, 50, 49, 48, 48, 48, 49, 56, 50, 48, 55, 70, 54, 51, 49, 52, 48, 56, 49, 52, 54, 51, 48, 51, 48, 52, 55, 56, 48, 52, 48, 51, 54, 49, 53, 49, 52, 57, 66, 48, 13, 10, 58, 49, 48, 48, 50, 50, 48, 48, 48, 52, 53, 52, 51, 48, 48, 48, 48, 55, 70, 52, 49, 52, 49, 48, 50, 48, 52, 48, 56, 49, 48, 50, 48, 52, 49, 52, 49, 55, 70, 48, 48, 48, 54, 13, 10, 58, 49, 48, 48, 50, 51, 48, 48, 48, 48, 48, 48, 52, 48, 50, 48, 49, 48, 50, 48, 52, 52, 48, 52, 48, 52, 48, 52, 48, 52, 48, 48, 48, 48, 49, 48, 50, 48, 52, 48, 48, 54, 65, 13, 10, 58, 49, 48, 48, 50, 52, 48, 48, 48, 50, 48, 53, 52, 53, 52, 53, 52, 55, 56, 55, 70, 52, 56, 52, 52, 52, 52, 51, 56, 51, 56, 52, 52, 52, 52, 52, 52, 50, 48, 51, 56, 51, 55, 13, 10, 58, 49, 48, 48, 50, 53, 48, 48, 48, 52, 52, 52, 52, 52, 56, 55, 70, 51, 56, 53, 52, 53, 52, 53, 52, 49, 56, 48, 56, 55, 69, 48, 57, 48, 49, 48, 50, 48, 56, 49, 52, 53, 53, 13, 10, 58, 49, 48, 48, 50, 54, 48, 48, 48, 53, 52, 53, 52, 51, 67, 55, 70, 48, 56, 48, 52, 48, 52, 55, 56, 48, 48, 52, 52, 55, 68, 52, 48, 48, 48, 50, 48, 52, 48, 52, 52, 70, 69, 13, 10, 58, 49, 48, 48, 50, 55, 48, 48, 48, 51, 68, 48, 48, 48, 48, 55, 70, 49, 48, 50, 56, 52, 52, 48, 48, 52, 49, 55, 70, 52, 48, 48, 48, 55, 67, 48, 52, 49, 56, 48, 52, 65, 65, 13, 10, 58, 49, 48, 48, 50, 56, 48, 48, 48, 55, 56, 55, 67, 48, 56, 48, 52, 48, 52, 55, 56, 51, 56, 52, 52, 52, 52, 52, 52, 51, 56, 55, 67, 49, 52, 49, 52, 49, 52, 48, 56, 70, 54, 13, 10, 58, 49, 48, 48, 50, 57, 48, 48, 48, 48, 56, 49, 52, 49, 52, 49, 56, 55, 67, 55, 67, 48, 56, 48, 52, 48, 52, 48, 56, 52, 56, 53, 52, 53, 52, 53, 52, 50, 48, 48, 52, 57, 69, 13, 10, 58, 49, 48, 48, 50, 65, 48, 48, 48, 51, 70, 52, 52, 52, 48, 50, 48, 51, 67, 52, 48, 52, 48, 50, 48, 55, 67, 49, 67, 50, 48, 52, 48, 50, 48, 49, 67, 51, 67, 52, 48, 68, 70, 13, 10, 58, 49, 48, 48, 50, 66, 48, 48, 48, 51, 48, 52, 48, 51, 67, 52, 52, 50, 56, 49, 48, 50, 56, 52, 52, 48, 67, 53, 48, 53, 48, 53, 48, 51, 67, 52, 52, 54, 52, 53, 52, 55, 54, 13, 10, 58, 49, 48, 48, 50, 67, 48, 48, 48, 52, 67, 52, 52, 48, 48, 48, 56, 51, 54, 52, 49, 48, 48, 48, 48, 48, 48, 55, 70, 48, 48, 48, 48, 48, 48, 52, 49, 51, 54, 48, 56, 50, 49, 13, 10, 58, 49, 48, 48, 50, 68, 48, 48, 48, 48, 48, 48, 56, 48, 56, 50, 65, 49, 67, 48, 56, 48, 56, 49, 67, 50, 65, 48, 56, 48, 56, 48, 48, 49, 49, 50, 52, 49, 70, 66, 69, 53, 48, 13, 10, 58, 49, 48, 48, 50, 69, 48, 48, 48, 67, 70, 69, 70, 68, 49, 69, 50, 68, 69, 66, 70, 67, 68, 66, 70, 49, 55, 69, 48, 65, 48, 69, 48, 66, 50, 69, 48, 69, 65, 69, 55, 57, 65, 13, 10, 58, 49, 48, 48, 50, 70, 48, 48, 48, 70, 48, 69, 50, 48, 48, 69, 48, 48, 66, 66, 70, 48, 50, 67, 48, 48, 55, 57, 48, 48, 68, 57, 50, 65, 54, 51, 55, 66, 49, 48, 55, 70, 53, 13, 10, 58, 49, 48, 48, 51, 48, 48, 48, 48, 68, 57, 70, 55, 49, 55, 69, 48, 65, 54, 69, 55, 66, 55, 69, 48, 48, 49, 67, 48, 49, 68, 57, 50, 65, 70, 51, 57, 66, 49, 48, 55, 70, 50, 13, 10, 58, 49, 48, 48, 51, 49, 48, 48, 48, 69, 49, 70, 55, 48, 69, 57, 52, 69, 65, 48, 49, 48, 67, 57, 52, 51, 66, 49, 48, 48, 67, 57, 52, 50, 50, 48, 55, 52, 48, 69, 54, 57, 69, 13, 10, 58, 49, 48, 48, 51, 50, 48, 48, 48, 52, 48, 57, 51, 55, 67, 48, 48, 51, 55, 69, 56, 51, 48, 57, 51, 55, 65, 48, 48, 50, 49, 69, 48, 50, 48, 57, 51, 55, 69, 48, 48, 70, 48, 13, 10, 58, 49, 48, 48, 51, 51, 48, 48, 48, 56, 48, 57, 49, 55, 65, 48, 48, 56, 48, 54, 52, 56, 48, 57, 51, 55, 65, 48, 48, 53, 48, 57, 49, 55, 65, 48, 48, 53, 54, 70, 68, 49, 51, 13, 10, 58, 49, 48, 48, 51, 52, 48, 48, 48, 70, 67, 67, 70, 50, 52, 69, 48, 56, 48, 69, 48, 57, 48, 69, 48, 54, 48, 57, 49, 55, 65, 48, 48, 54, 48, 54, 52, 54, 48, 57, 51, 69, 67, 13, 10, 58, 49, 48, 48, 51, 53, 48, 48, 48, 55, 65, 48, 48, 55, 48, 57, 49, 55, 65, 48, 48, 55, 54, 70, 68, 70, 67, 67, 70, 51, 48, 57, 49, 55, 56, 48, 48, 65, 48, 57, 49, 48, 48, 13, 10, 58, 49, 48, 48, 51, 54, 48, 48, 48, 55, 57, 48, 48, 56, 65, 48, 70, 57, 49, 49, 68, 50, 49, 53, 48, 55, 57, 70, 55, 57, 54, 57, 53, 56, 55, 57, 53, 57, 54, 57, 53, 55, 65, 13, 10, 58, 49, 48, 48, 51, 55, 48, 48, 48, 56, 55, 57, 53, 48, 56, 57, 53, 67, 70, 57, 51, 68, 70, 57, 51, 69, 67, 48, 49, 56, 48, 57, 49, 55, 54, 48, 55, 56, 49, 51, 48, 67, 52, 13, 10, 58, 49, 48, 48, 51, 56, 48, 48, 48, 51, 49, 70, 53, 56, 48, 69, 48, 48, 69, 57, 52, 49, 51, 48, 68, 54, 48, 57, 49, 53, 52, 48, 55, 55, 48, 57, 49, 53, 53, 48, 55, 55, 67, 13, 10, 58, 49, 48, 48, 51, 57, 48, 48, 48, 56, 48, 57, 49, 53, 54, 48, 55, 57, 48, 57, 49, 53, 55, 48, 55, 52, 50, 69, 56, 53, 68, 69, 48, 48, 69, 57, 52, 65, 70, 48, 57, 65, 70, 13, 10, 58, 49, 48, 48, 51, 65, 48, 48, 48, 54, 48, 57, 49, 53, 65, 48, 55, 55, 48, 57, 49, 53, 66, 48, 55, 56, 48, 69, 48, 57, 50, 69, 48, 52, 69, 69, 54, 53, 55, 69, 48, 53, 66, 13, 10, 58, 49, 48, 48, 51, 66, 48, 48, 48, 50, 50, 69, 56, 51, 68, 69, 48, 48, 69, 57, 52, 65, 55, 48, 65, 54, 48, 57, 49, 53, 56, 48, 55, 55, 48, 57, 49, 53, 57, 48, 55, 49, 50, 13, 10, 58, 49, 48, 48, 51, 67, 48, 48, 48, 67, 69, 48, 49, 52, 69, 69, 54, 53, 55, 69, 48, 50, 50, 69, 56, 51, 68, 69, 48, 48, 69, 57, 52, 65, 55, 48, 65, 68, 70, 57, 49, 48, 57, 13, 10, 58, 49, 48, 48, 51, 68, 48, 48, 48, 67, 70, 57, 49, 48, 56, 57, 53, 50, 70, 57, 50, 51, 70, 57, 50, 52, 70, 57, 50, 53, 70, 57, 50, 54, 70, 57, 50, 55, 70, 57, 50, 65, 65, 13, 10, 58, 49, 48, 48, 51, 69, 48, 48, 48, 56, 70, 57, 50, 57, 70, 57, 50, 65, 70, 57, 50, 66, 70, 57, 50, 67, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 52, 53, 13, 10, 58, 49, 48, 48, 51, 70, 48, 48, 48, 48, 70, 57, 51, 49, 70, 57, 51, 68, 70, 57, 51, 67, 70, 57, 51, 67, 68, 66, 55, 68, 69, 66, 55, 54, 55, 57, 55, 48, 70, 66, 54, 70, 57, 13, 10, 58, 49, 48, 48, 52, 48, 48, 48, 48, 70, 56, 57, 52, 68, 69, 66, 70, 48, 70, 66, 69, 67, 68, 66, 70, 56, 49, 69, 48, 56, 48, 57, 51, 55, 54, 48, 55, 48, 69, 57, 52, 68, 55, 13, 10, 58, 49, 48, 48, 52, 49, 48, 48, 48, 69, 57, 48, 56, 48, 69, 57, 52, 68, 49, 48, 68, 56, 56, 50, 51, 49, 49, 70, 48, 49, 48, 57, 50, 55, 54, 48, 55, 56, 48, 57, 49, 56, 70, 13, 10, 58, 49, 48, 48, 52, 50, 48, 48, 48, 56, 48, 48, 48, 49, 48, 57, 50, 56, 48, 48, 48, 56, 48, 57, 49, 56, 49, 48, 48, 56, 56, 55, 50, 56, 48, 57, 51, 56, 49, 48, 48, 48, 65, 13, 10, 58, 49, 48, 48, 52, 51, 48, 48, 48, 56, 53, 69, 65, 57, 69, 69, 48, 57, 48, 57, 51, 56, 57, 48, 48, 56, 48, 57, 51, 56, 56, 48, 48, 56, 48, 57, 49, 54, 70, 48, 48, 48, 56, 13, 10, 58, 49, 48, 48, 52, 52, 48, 48, 48, 56, 50, 54, 48, 56, 48, 57, 51, 54, 70, 48, 48, 56, 48, 57, 49, 56, 49, 48, 48, 56, 66, 54, 48, 56, 48, 57, 51, 56, 49, 48, 48, 51, 55, 13, 10, 58, 49, 48, 48, 52, 53, 48, 48, 48, 55, 56, 57, 52, 48, 48, 68, 48, 48, 48, 68, 48, 48, 48, 68, 48, 69, 68, 66, 55, 70, 69, 66, 55, 51, 49, 57, 54, 56, 48, 57, 49, 69, 70, 13, 10, 58, 49, 48, 48, 52, 54, 48, 48, 48, 53, 68, 48, 55, 57, 48, 57, 49, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 49, 50, 57, 54, 57, 67, 57, 51, 56, 69, 57, 51, 68, 49, 13, 10, 58, 49, 48, 48, 52, 55, 48, 48, 48, 49, 49, 57, 55, 56, 65, 69, 48, 57, 50, 69, 48, 57, 51, 56, 51, 56, 50, 56, 51, 56, 69, 69, 49, 57, 50, 69, 48, 57, 53, 56, 51, 69, 52, 13, 10, 58, 49, 48, 48, 52, 56, 48, 48, 48, 56, 52, 56, 51, 48, 69, 57, 52, 55, 65, 48, 70, 56, 51, 66, 55, 56, 49, 55, 70, 56, 51, 66, 70, 56, 51, 66, 55, 56, 49, 54, 48, 65, 51, 13, 10, 58, 49, 48, 48, 52, 57, 48, 48, 48, 56, 51, 66, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 54, 57, 54, 48, 70, 66, 54, 70, 56, 57, 52, 70, 69, 66, 70, 48, 70, 66, 69, 49, 65, 13, 10, 58, 49, 48, 48, 52, 65, 48, 48, 48, 69, 68, 66, 70, 56, 52, 69, 50, 57, 50, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 56, 65, 66, 49, 56, 67, 55, 70, 56, 65, 66, 57, 69, 50, 13, 10, 58, 49, 48, 48, 52, 66, 48, 48, 48, 56, 66, 66, 49, 56, 67, 55, 70, 56, 66, 66, 57, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 66, 49, 13, 10, 58, 49, 48, 48, 52, 67, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 53, 69, 53, 67, 50, 13, 10, 58, 49, 48, 48, 52, 68, 48, 48, 48, 48, 49, 67, 48, 56, 48, 50, 70, 48, 57, 66, 49, 48, 51, 55, 48, 56, 48, 49, 55, 53, 49, 70, 49, 48, 49, 51, 48, 56, 49, 70, 48, 48, 52, 13, 10, 58, 49, 48, 48, 52, 69, 48, 48, 48, 48, 49, 51, 48, 49, 56, 70, 48, 48, 50, 51, 48, 50, 49, 70, 53, 49, 54, 67, 48, 56, 55, 69, 52, 57, 50, 69, 48, 48, 69, 57, 52, 51, 54, 13, 10, 58, 49, 48, 48, 52, 70, 48, 48, 48, 66, 65, 48, 49, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 56, 65, 69, 54, 57, 50, 69, 48, 49, 53, 67, 48, 67, 70, 13, 10, 58, 49, 48, 48, 53, 48, 48, 48, 48, 56, 50, 69, 56, 57, 50, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 70, 55, 13, 10, 58, 49, 48, 48, 53, 49, 48, 48, 48, 56, 54, 69, 57, 57, 50, 69, 48, 48, 65, 67, 48, 56, 66, 69, 65, 57, 50, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 70, 66, 13, 10, 58, 49, 48, 48, 53, 50, 48, 48, 48, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 56, 70, 69, 66, 57, 50, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 68, 49, 67, 70, 48, 68, 13, 10, 58, 49, 48, 48, 53, 51, 48, 48, 48, 48, 51, 51, 48, 55, 57, 70, 54, 56, 52, 69, 68, 57, 50, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 53, 68, 48, 55, 56, 52, 13, 10, 58, 49, 48, 48, 53, 52, 48, 48, 48, 55, 48, 57, 49, 53, 69, 48, 55, 56, 56, 69, 69, 57, 50, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 48, 69, 57, 52, 57, 52, 48, 55, 66, 56, 13, 10, 58, 49, 48, 48, 53, 53, 48, 48, 48, 48, 69, 57, 52, 70, 67, 48, 55, 56, 48, 69, 48, 48, 69, 57, 52, 48, 53, 48, 56, 56, 48, 57, 49, 57, 48, 48, 48, 49, 48, 57, 50, 65, 52, 13, 10, 58, 49, 48, 48, 53, 54, 48, 48, 48, 57, 48, 48, 48, 49, 48, 57, 49, 57, 49, 48, 48, 49, 56, 55, 50, 49, 48, 57, 51, 57, 49, 48, 48, 48, 48, 57, 49, 55, 49, 48, 48, 48, 57, 13, 10, 58, 49, 48, 48, 53, 55, 48, 48, 48, 48, 49, 54, 48, 48, 48, 57, 51, 55, 49, 48, 48, 56, 48, 57, 49, 57, 49, 48, 48, 56, 49, 54, 48, 56, 48, 57, 51, 57, 49, 48, 48, 69, 70, 13, 10, 58, 49, 48, 48, 53, 56, 48, 48, 48, 53, 51, 57, 56, 53, 66, 57, 65, 48, 57, 66, 49, 48, 56, 55, 48, 49, 48, 57, 50, 55, 56, 48, 55, 49, 48, 57, 50, 55, 55, 48, 55, 49, 56, 13, 10, 58, 49, 48, 48, 53, 57, 48, 48, 48, 56, 48, 57, 49, 55, 55, 48, 55, 57, 48, 57, 49, 55, 56, 48, 55, 70, 49, 69, 48, 56, 57, 51, 69, 57, 70, 48, 55, 70, 49, 70, 52, 48, 57, 13, 10, 58, 49, 48, 48, 53, 65, 48, 48, 48, 56, 67, 69, 70, 57, 50, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 52, 54, 13, 10, 58, 49, 48, 48, 53, 66, 48, 48, 48, 56, 56, 69, 50, 57, 51, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 52, 66, 57, 66, 70, 69, 67, 70, 52, 66, 57, 57, 70, 69, 67, 70, 57, 50, 13, 10, 58, 49, 48, 48, 53, 67, 48, 48, 48, 52, 66, 57, 66, 70, 69, 67, 70, 56, 49, 69, 52, 57, 51, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 53, 68, 48, 55, 69, 69, 13, 10, 58, 49, 48, 48, 53, 68, 48, 48, 48, 55, 48, 57, 49, 53, 69, 48, 55, 56, 67, 69, 53, 57, 51, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 50, 57, 66, 49, 50, 56, 55, 48, 70, 55, 13, 10, 58, 49, 48, 48, 53, 69, 48, 48, 48, 48, 50, 49, 55, 66, 49, 70, 50, 48, 69, 57, 52, 68, 68, 48, 56, 48, 48, 69, 48, 49, 48, 69, 48, 67, 67, 50, 52, 68, 68, 50, 52, 48, 55, 13, 10, 58, 49, 48, 48, 53, 70, 48, 48, 48, 55, 54, 48, 49, 56, 67, 69, 54, 54, 56, 50, 69, 56, 51, 69, 48, 55, 56, 50, 69, 66, 52, 69, 48, 50, 66, 50, 69, 51, 49, 50, 67, 50, 57, 13, 10, 58, 49, 48, 48, 54, 48, 48, 48, 48, 65, 68, 69, 55, 52, 65, 50, 69, 65, 51, 69, 48, 53, 65, 50, 69, 48, 70, 53, 70, 49, 70, 52, 70, 50, 68, 66, 55, 51, 69, 66, 55, 49, 69, 13, 10, 58, 49, 48, 48, 54, 49, 48, 48, 48, 50, 56, 53, 48, 51, 48, 52, 48, 48, 70, 66, 54, 70, 56, 57, 52, 51, 69, 66, 70, 48, 70, 66, 69, 50, 68, 66, 70, 69, 68, 66, 55, 52, 55, 13, 10, 58, 49, 48, 48, 54, 50, 48, 48, 48, 70, 69, 66, 55, 51, 49, 57, 54, 56, 48, 57, 48, 53, 68, 48, 55, 57, 48, 57, 48, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 55, 67, 13, 10, 58, 49, 48, 48, 54, 51, 48, 48, 48, 49, 50, 57, 54, 57, 67, 57, 50, 56, 69, 57, 50, 49, 49, 57, 55, 55, 51, 56, 50, 54, 50, 56, 50, 49, 53, 56, 51, 48, 52, 56, 51, 50, 52, 13, 10, 58, 49, 48, 48, 54, 52, 48, 48, 48, 51, 55, 56, 50, 50, 54, 56, 50, 48, 69, 57, 52, 55, 65, 48, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 56, 57, 54, 48, 70, 66, 54, 51, 50, 13, 10, 58, 49, 48, 48, 54, 53, 48, 48, 48, 70, 56, 57, 52, 70, 69, 66, 70, 48, 70, 66, 69, 69, 68, 66, 70, 52, 66, 57, 66, 70, 69, 67, 70, 52, 66, 57, 57, 70, 69, 67, 70, 55, 52, 13, 10, 58, 49, 48, 48, 54, 54, 48, 48, 48, 49, 48, 57, 50, 55, 56, 48, 55, 49, 48, 57, 50, 55, 55, 48, 55, 65, 48, 57, 48, 57, 52, 48, 48, 66, 48, 57, 48, 57, 53, 48, 48, 66, 48, 13, 10, 58, 49, 48, 48, 54, 55, 48, 48, 48, 52, 66, 57, 66, 70, 69, 67, 70, 52, 66, 57, 57, 70, 69, 67, 70, 56, 48, 57, 48, 57, 52, 48, 48, 57, 48, 57, 48, 57, 53, 48, 48, 66, 68, 13, 10, 58, 49, 48, 48, 54, 56, 48, 48, 48, 54, 48, 57, 49, 55, 55, 48, 55, 55, 48, 57, 49, 55, 56, 48, 55, 56, 48, 69, 48, 57, 48, 69, 48, 50, 70, 69, 70, 51, 70, 69, 70, 53, 70, 13, 10, 58, 49, 48, 48, 54, 57, 48, 48, 48, 52, 48, 69, 48, 53, 48, 69, 48, 48, 69, 57, 52, 52, 52, 48, 70, 57, 53, 48, 49, 52, 48, 69, 48, 53, 48, 69, 48, 54, 50, 49, 66, 66, 50, 13, 10, 58, 49, 48, 48, 54, 65, 48, 48, 48, 55, 51, 48, 66, 56, 52, 48, 66, 57, 53, 48, 66, 57, 52, 48, 49, 52, 48, 69, 48, 53, 48, 69, 48, 54, 50, 48, 70, 55, 51, 49, 70, 66, 53, 13, 10, 58, 49, 48, 48, 54, 66, 48, 48, 48, 56, 52, 49, 70, 57, 53, 49, 70, 67, 54, 48, 69, 68, 55, 49, 69, 69, 56, 49, 69, 70, 57, 49, 69, 50, 68, 66, 55, 51, 69, 66, 55, 50, 52, 13, 10, 58, 49, 48, 48, 54, 67, 48, 48, 48, 50, 56, 53, 48, 51, 48, 52, 48, 48, 70, 66, 54, 70, 56, 57, 52, 51, 69, 66, 70, 48, 70, 66, 69, 50, 68, 66, 70, 69, 68, 66, 55, 57, 55, 13, 10, 58, 49, 48, 48, 54, 68, 48, 48, 48, 70, 69, 66, 55, 51, 49, 57, 54, 50, 48, 57, 49, 53, 68, 48, 55, 51, 48, 57, 49, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 56, 65, 13, 10, 58, 49, 48, 48, 54, 69, 48, 48, 48, 49, 50, 57, 54, 51, 67, 57, 51, 50, 69, 57, 51, 49, 49, 57, 55, 53, 51, 56, 50, 52, 50, 56, 50, 54, 52, 56, 51, 55, 53, 56, 51, 66, 50, 13, 10, 58, 49, 48, 48, 54, 70, 48, 48, 48, 56, 54, 56, 51, 57, 55, 56, 51, 48, 69, 57, 52, 55, 65, 48, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 56, 57, 54, 48, 70, 66, 54, 67, 48, 13, 10, 58, 49, 48, 48, 55, 48, 48, 48, 48, 70, 56, 57, 52, 70, 69, 66, 70, 48, 70, 66, 69, 69, 68, 66, 70, 48, 52, 51, 48, 49, 49, 48, 53, 48, 57, 70, 48, 55, 67, 67, 70, 57, 57, 13, 10, 58, 49, 48, 48, 55, 49, 48, 48, 48, 56, 55, 48, 49, 55, 54, 48, 49, 70, 50, 69, 48, 49, 54, 57, 53, 48, 55, 57, 53, 70, 55, 57, 52, 69, 55, 57, 52, 70, 65, 57, 53, 50, 67, 13, 10, 58, 49, 48, 48, 55, 50, 48, 48, 48, 68, 49, 70, 55, 50, 68, 66, 55, 51, 69, 66, 55, 50, 56, 53, 48, 51, 48, 52, 48, 48, 70, 66, 54, 70, 56, 57, 52, 51, 69, 66, 70, 70, 50, 13, 10, 58, 49, 48, 48, 55, 51, 48, 48, 48, 48, 70, 66, 69, 50, 68, 66, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 49, 57, 54, 56, 48, 57, 49, 53, 68, 48, 55, 57, 48, 57, 49, 52, 65, 13, 10, 58, 49, 48, 48, 55, 52, 48, 48, 48, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 49, 50, 57, 54, 57, 67, 57, 51, 56, 69, 57, 51, 49, 49, 57, 55, 56, 53, 69, 56, 53, 69, 13, 10, 58, 49, 48, 48, 55, 53, 48, 48, 48, 57, 51, 69, 48, 57, 51, 56, 51, 56, 50, 56, 51, 69, 52, 56, 50, 70, 53, 56, 50, 48, 54, 56, 51, 49, 55, 56, 51, 48, 69, 57, 52, 54, 57, 13, 10, 58, 49, 48, 48, 55, 54, 48, 48, 48, 55, 65, 48, 70, 56, 52, 66, 49, 56, 53, 66, 49, 49, 52, 66, 56, 56, 70, 69, 70, 56, 53, 66, 57, 49, 48, 57, 50, 55, 56, 48, 55, 69, 67, 13, 10, 58, 49, 48, 48, 55, 55, 48, 48, 48, 49, 48, 57, 50, 55, 55, 48, 55, 69, 68, 66, 55, 70, 69, 66, 55, 51, 56, 57, 54, 48, 70, 66, 54, 70, 56, 57, 52, 70, 69, 66, 70, 50, 52, 13, 10, 58, 49, 48, 48, 55, 56, 48, 48, 48, 48, 70, 66, 69, 69, 68, 66, 70, 69, 55, 69, 67, 67, 69, 50, 69, 69, 51, 69, 48, 68, 69, 50, 69, 51, 53, 67, 48, 56, 48, 57, 49, 52, 67, 13, 10, 58, 49, 48, 48, 55, 57, 48, 48, 48, 55, 55, 48, 55, 57, 48, 57, 49, 55, 56, 48, 55, 70, 49, 69, 48, 56, 57, 51, 69, 57, 70, 48, 55, 54, 57, 70, 53, 56, 66, 69, 57, 50, 66, 13, 10, 58, 49, 48, 48, 55, 65, 48, 48, 48, 57, 51, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 50, 68, 66, 55, 51, 69, 66, 55, 50, 56, 53, 48, 51, 48, 52, 48, 48, 70, 66, 54, 70, 51, 13, 10, 58, 49, 48, 48, 55, 66, 48, 48, 48, 70, 56, 57, 52, 51, 69, 66, 70, 48, 70, 66, 69, 50, 68, 66, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 49, 57, 54, 56, 48, 57, 49, 67, 54, 13, 10, 58, 49, 48, 48, 55, 67, 48, 48, 48, 53, 68, 48, 55, 57, 48, 57, 49, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 49, 50, 57, 54, 57, 67, 57, 51, 56, 69, 57, 51, 54, 69, 13, 10, 58, 49, 48, 48, 55, 68, 48, 48, 48, 49, 49, 57, 55, 68, 51, 56, 50, 67, 50, 56, 50, 69, 52, 56, 50, 70, 53, 56, 50, 48, 54, 56, 51, 49, 55, 56, 51, 48, 69, 57, 52, 51, 54, 13, 10, 58, 49, 48, 48, 55, 69, 48, 48, 48, 55, 65, 48, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 56, 57, 54, 48, 70, 66, 54, 70, 56, 57, 52, 70, 69, 66, 70, 48, 70, 66, 69, 55, 69, 13, 10, 58, 49, 48, 48, 55, 70, 48, 48, 48, 69, 68, 66, 70, 51, 51, 66, 49, 51, 70, 51, 70, 69, 57, 70, 55, 52, 51, 66, 49, 52, 70, 51, 70, 52, 49, 70, 54, 50, 57, 66, 49, 55, 56, 13, 10, 58, 49, 48, 48, 56, 48, 48, 48, 48, 50, 56, 55, 48, 66, 50, 50, 69, 51, 49, 69, 48, 55, 66, 69, 70, 67, 55, 50, 69, 55, 51, 69, 48, 68, 55, 50, 69, 52, 55, 67, 48, 65, 49, 13, 10, 58, 49, 48, 48, 56, 49, 48, 48, 48, 51, 69, 55, 70, 49, 48, 57, 50, 55, 56, 48, 55, 49, 48, 57, 50, 55, 55, 48, 55, 50, 57, 66, 49, 50, 56, 55, 48, 51, 52, 67, 48, 55, 52, 13, 10, 58, 49, 48, 48, 56, 50, 48, 48, 48, 66, 57, 66, 48, 70, 56, 69, 48, 66, 70, 50, 50, 50, 66, 49, 53, 55, 57, 70, 49, 51, 49, 70, 68, 51, 55, 67, 48, 56, 50, 69, 69, 54, 55, 13, 10, 58, 49, 48, 48, 56, 51, 48, 48, 48, 57, 51, 69, 48, 50, 70, 56, 66, 48, 69, 57, 52, 66, 65, 48, 49, 56, 68, 66, 55, 57, 69, 66, 55, 48, 56, 57, 55, 48, 70, 66, 54, 51, 49, 13, 10, 58, 49, 48, 48, 56, 52, 48, 48, 48, 70, 56, 57, 52, 57, 69, 66, 70, 48, 70, 66, 69, 56, 68, 66, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 49, 57, 54, 56, 48, 57, 49, 55, 53, 13, 10, 58, 49, 48, 48, 56, 53, 48, 48, 48, 53, 68, 48, 55, 57, 48, 57, 49, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 49, 50, 57, 54, 57, 67, 57, 51, 56, 69, 57, 51, 68, 68, 13, 10, 58, 49, 48, 48, 56, 54, 48, 48, 48, 49, 49, 57, 55, 68, 51, 56, 50, 67, 50, 56, 50, 69, 52, 56, 50, 70, 53, 56, 50, 48, 54, 56, 51, 49, 55, 56, 51, 48, 69, 57, 52, 65, 53, 13, 10, 58, 49, 48, 48, 56, 55, 48, 48, 48, 55, 65, 48, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 56, 57, 54, 48, 70, 66, 54, 70, 56, 57, 52, 70, 69, 66, 70, 48, 70, 66, 69, 69, 68, 13, 10, 58, 49, 48, 48, 56, 56, 48, 48, 48, 69, 68, 66, 70, 51, 51, 69, 48, 50, 70, 56, 57, 48, 66, 67, 48, 56, 48, 57, 49, 55, 55, 48, 55, 57, 48, 57, 49, 55, 56, 48, 55, 70, 55, 13, 10, 58, 49, 48, 48, 56, 57, 48, 48, 48, 70, 49, 69, 48, 56, 57, 51, 69, 57, 70, 48, 55, 50, 48, 70, 50, 66, 50, 50, 69, 48, 49, 67, 48, 51, 51, 69, 48, 51, 48, 70, 68, 50, 55, 13, 10, 58, 49, 48, 48, 56, 65, 48, 48, 48, 66, 55, 67, 70, 56, 48, 57, 49, 57, 49, 48, 48, 56, 69, 55, 70, 56, 48, 57, 51, 57, 49, 48, 48, 56, 54, 69, 49, 57, 52, 69, 48, 57, 52, 13, 10, 58, 49, 48, 48, 56, 66, 48, 48, 48, 50, 70, 56, 66, 48, 69, 57, 52, 66, 65, 48, 49, 56, 68, 66, 55, 57, 69, 66, 55, 48, 56, 57, 55, 48, 70, 66, 54, 70, 56, 57, 52, 57, 56, 13, 10, 58, 49, 48, 48, 56, 67, 48, 48, 48, 57, 69, 66, 70, 48, 70, 66, 69, 56, 68, 66, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 49, 57, 54, 56, 48, 57, 49, 53, 68, 48, 55, 49, 68, 13, 10, 58, 49, 48, 48, 56, 68, 48, 48, 48, 57, 48, 57, 49, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 49, 50, 57, 54, 57, 67, 57, 51, 56, 69, 57, 51, 49, 49, 57, 55, 49, 57, 13, 10, 58, 49, 48, 48, 56, 69, 48, 48, 48, 56, 68, 69, 51, 57, 52, 69, 48, 57, 51, 56, 51, 56, 50, 56, 51, 69, 52, 56, 50, 70, 53, 56, 50, 48, 54, 56, 51, 49, 55, 56, 51, 48, 57, 13, 10, 58, 49, 48, 48, 56, 70, 48, 48, 48, 48, 69, 57, 52, 55, 65, 48, 70, 69, 68, 66, 55, 70, 69, 66, 55, 51, 56, 57, 54, 48, 70, 66, 54, 70, 56, 57, 52, 70, 69, 66, 70, 57, 56, 13, 10, 58, 49, 48, 48, 57, 48, 48, 48, 48, 48, 70, 66, 69, 69, 68, 66, 70, 50, 70, 56, 57, 53, 51, 66, 49, 53, 70, 51, 70, 69, 57, 70, 51, 50, 52, 66, 57, 66, 53, 66, 56, 69, 69, 13, 10, 58, 49, 48, 48, 57, 49, 48, 48, 48, 56, 57, 69, 53, 57, 52, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 70, 56, 57, 52, 54, 67, 69, 48, 54, 54, 50, 69, 55, 49, 50, 67, 56, 70, 13, 10, 58, 49, 48, 48, 57, 50, 48, 48, 48, 54, 67, 48, 69, 55, 68, 49, 69, 52, 69, 48, 49, 48, 56, 57, 52, 56, 49, 49, 67, 57, 49, 49, 67, 67, 52, 48, 49, 65, 51, 48, 49, 49, 52, 13, 10, 58, 49, 48, 48, 57, 51, 48, 48, 48, 69, 49, 69, 50, 70, 48, 69, 48, 50, 48, 69, 48, 50, 55, 51, 48, 49, 49, 70, 52, 69, 49, 69, 48, 70, 49, 69, 48, 51, 48, 56, 48, 56, 54, 13, 10, 58, 49, 48, 48, 57, 52, 48, 48, 48, 68, 65, 48, 49, 51, 68, 57, 50, 65, 68, 48, 49, 50, 49, 56, 48, 68, 67, 48, 49, 50, 68, 57, 50, 67, 68, 48, 49, 50, 70, 53, 70, 66, 54, 13, 10, 58, 49, 48, 48, 57, 53, 48, 48, 48, 50, 66, 51, 48, 55, 57, 70, 52, 53, 49, 69, 52, 67, 53, 50, 69, 68, 49, 50, 67, 48, 49, 69, 50, 49, 48, 69, 48, 66, 66, 50, 52, 70, 56, 13, 10, 58, 49, 48, 48, 57, 54, 48, 48, 48, 65, 65, 50, 52, 65, 65, 57, 52, 52, 65, 69, 65, 53, 52, 50, 69, 51, 69, 69, 65, 50, 51, 50, 69, 51, 52, 69, 48, 51, 51, 50, 69, 68, 55, 13, 10, 58, 49, 48, 48, 57, 55, 48, 48, 48, 48, 50, 67, 48, 51, 51, 57, 54, 69, 48, 67, 70, 66, 66, 50, 68, 66, 55, 51, 48, 53, 49, 70, 48, 66, 66, 50, 48, 50, 49, 70, 52, 51, 68, 13, 10, 58, 49, 48, 48, 57, 56, 48, 48, 48, 70, 56, 48, 49, 49, 48, 56, 50, 53, 49, 56, 50, 49, 68, 67, 48, 54, 66, 50, 68, 54, 50, 51, 48, 53, 57, 70, 48, 48, 50, 67, 48, 70, 55, 13, 10, 58, 49, 48, 48, 57, 57, 48, 48, 48, 48, 49, 69, 48, 49, 49, 69, 48, 68, 56, 48, 49, 49, 67, 57, 50, 49, 49, 57, 54, 65, 67, 57, 50, 66, 66, 50, 68, 66, 55, 51, 48, 52, 65, 13, 10, 58, 49, 48, 48, 57, 65, 48, 48, 48, 52, 56, 70, 52, 48, 70, 67, 48, 70, 56, 48, 49, 57, 48, 56, 49, 57, 69, 55, 70, 57, 48, 56, 51, 55, 49, 56, 49, 55, 49, 54, 48, 51, 70, 13, 10, 58, 49, 48, 48, 57, 66, 48, 48, 48, 55, 49, 56, 51, 48, 55, 67, 48, 68, 56, 48, 49, 49, 51, 57, 54, 49, 67, 57, 50, 49, 51, 57, 55, 49, 52, 57, 54, 65, 67, 57, 50, 66, 65, 13, 10, 58, 49, 48, 48, 57, 67, 48, 48, 48, 49, 52, 57, 55, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 67, 13, 10, 58, 49, 48, 48, 57, 68, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 56, 48, 49, 48, 56, 57, 52, 69, 49, 48, 56, 49, 57, 13, 10, 58, 49, 48, 48, 57, 69, 48, 48, 48, 70, 49, 48, 56, 56, 66, 50, 68, 56, 50, 51, 48, 50, 57, 70, 48, 70, 55, 48, 49, 52, 48, 56, 48, 52, 52, 50, 48, 51, 49, 70, 52, 52, 65, 13, 10, 58, 49, 48, 48, 57, 70, 48, 48, 48, 54, 68, 67, 48, 68, 55, 48, 49, 50, 67, 57, 49, 50, 48, 70, 68, 48, 67, 67, 48, 55, 68, 67, 48, 69, 66, 50, 68, 69, 51, 51, 48, 69, 52, 13, 10, 58, 49, 48, 48, 65, 48, 48, 48, 48, 50, 57, 70, 52, 70, 55, 48, 49, 51, 48, 56, 49, 51, 70, 51, 70, 69, 57, 70, 53, 48, 51, 67, 48, 52, 66, 50, 68, 52, 53, 51, 48, 49, 52, 13, 10, 58, 49, 48, 48, 65, 49, 48, 48, 48, 70, 56, 70, 52, 48, 48, 68, 48, 48, 48, 68, 48, 48, 48, 68, 48, 69, 68, 66, 55, 70, 69, 66, 55, 51, 49, 57, 54, 56, 48, 57, 49, 52, 57, 13, 10, 58, 49, 48, 48, 65, 50, 48, 48, 48, 53, 68, 48, 55, 57, 48, 57, 49, 53, 69, 48, 55, 65, 68, 66, 55, 66, 69, 66, 55, 49, 50, 57, 54, 57, 67, 57, 51, 56, 69, 57, 51, 48, 66, 13, 10, 58, 49, 48, 48, 65, 51, 48, 48, 48, 49, 49, 57, 55, 51, 51, 56, 50, 50, 50, 56, 50, 68, 53, 56, 50, 67, 52, 56, 50, 48, 69, 57, 52, 55, 65, 48, 70, 69, 68, 66, 55, 52, 57, 13, 10, 58, 49, 48, 48, 65, 52, 48, 48, 48, 70, 69, 66, 55, 51, 54, 57, 54, 48, 70, 66, 54, 70, 56, 57, 52, 70, 69, 66, 70, 48, 70, 66, 69, 69, 68, 66, 70, 49, 53, 67, 48, 67, 57, 13, 10, 58, 49, 48, 48, 65, 53, 48, 48, 48, 70, 66, 50, 68, 70, 55, 51, 48, 51, 56, 70, 52, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 56, 55, 69, 67, 69, 68, 13, 10, 58, 49, 48, 48, 65, 54, 48, 48, 48, 57, 52, 69, 48, 48, 57, 67, 48, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 53, 66, 50, 68, 53, 55, 51, 48, 55, 70, 13, 10, 58, 49, 48, 48, 65, 55, 48, 48, 48, 51, 49, 70, 52, 56, 49, 69, 69, 57, 52, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 52, 52, 50, 52, 49, 67, 67, 48, 56, 66, 69, 70, 52, 56, 13, 10, 58, 49, 48, 48, 65, 56, 48, 48, 48, 57, 52, 69, 48, 70, 57, 67, 70, 68, 55, 48, 49, 54, 67, 57, 49, 54, 49, 51, 48, 51, 57, 70, 52, 54, 48, 57, 49, 53, 68, 48, 55, 52, 50, 13, 10, 58, 49, 48, 48, 65, 57, 48, 48, 48, 55, 48, 57, 49, 53, 69, 48, 55, 56, 53, 69, 49, 57, 53, 69, 48, 69, 69, 67, 70, 70, 55, 48, 49, 65, 48, 56, 49, 54, 48, 57, 49, 52, 69, 13, 10, 58, 49, 48, 48, 65, 65, 48, 48, 48, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 65, 50, 51, 48, 49, 57, 70, 52, 56, 67, 69, 50, 57, 53, 69, 48, 69, 51, 67, 70, 48, 56, 13, 10, 58, 49, 48, 48, 65, 66, 48, 48, 48, 56, 51, 69, 52, 57, 53, 69, 48, 69, 48, 67, 70, 48, 69, 57, 52, 57, 53, 48, 56, 56, 48, 69, 52, 57, 70, 69, 49, 48, 49, 57, 55, 70, 48, 13, 10, 58, 49, 48, 48, 65, 67, 48, 48, 48, 70, 49, 70, 55, 52, 51, 57, 52, 66, 52, 50, 68, 66, 67, 51, 50, 66, 49, 70, 55, 56, 66, 67, 70, 66, 66, 50, 48, 51, 49, 70, 52, 57, 54, 13, 10, 58, 49, 48, 48, 65, 68, 48, 48, 48, 68, 56, 48, 49, 65, 67, 57, 50, 49, 49, 57, 54, 53, 67, 57, 50, 49, 49, 57, 55, 48, 68, 67, 48, 70, 56, 48, 49, 65, 48, 56, 50, 68, 65, 13, 10, 58, 49, 48, 48, 65, 69, 48, 48, 48, 65, 49, 56, 50, 70, 66, 50, 68, 70, 55, 51, 48, 51, 56, 70, 48, 68, 56, 48, 49, 49, 51, 57, 54, 65, 67, 57, 50, 49, 51, 57, 55, 48, 50, 13, 10, 58, 49, 48, 48, 65, 70, 48, 48, 48, 49, 52, 57, 54, 65, 67, 57, 50, 49, 52, 57, 55, 66, 51, 57, 52, 48, 56, 57, 52, 67, 49, 49, 67, 68, 49, 49, 67, 55, 66, 50, 68, 48, 69, 13, 10, 58, 49, 48, 48, 66, 48, 48, 48, 48, 55, 66, 51, 48, 49, 57, 70, 48, 48, 68, 53, 70, 49, 70, 52, 70, 51, 54, 67, 70, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 70, 67, 13, 10, 58, 49, 48, 48, 66, 49, 48, 48, 48, 53, 69, 48, 55, 56, 48, 69, 54, 57, 53, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 69, 69, 50, 52, 48, 48, 69, 52, 49, 70, 69, 49, 51, 55, 13, 10, 58, 49, 48, 48, 66, 50, 48, 48, 48, 48, 69, 57, 52, 57, 53, 48, 56, 70, 56, 48, 49, 51, 49, 57, 55, 70, 49, 70, 55, 69, 51, 57, 52, 57, 69, 50, 68, 57, 67, 51, 50, 67, 68, 13, 10, 58, 49, 48, 48, 66, 51, 48, 48, 48, 66, 57, 70, 55, 48, 70, 69, 70, 48, 55, 66, 57, 48, 56, 66, 57, 52, 52, 69, 49, 50, 48, 69, 57, 51, 49, 69, 48, 48, 65, 67, 48, 55, 68, 13, 10, 58, 49, 48, 48, 66, 52, 48, 48, 48, 68, 57, 48, 49, 49, 49, 57, 55, 70, 49, 70, 55, 48, 49, 57, 55, 68, 57, 70, 55, 53, 50, 66, 48, 53, 48, 57, 52, 53, 50, 66, 56, 69, 51, 13, 10, 58, 49, 48, 48, 66, 53, 48, 48, 48, 52, 49, 53, 48, 49, 57, 70, 48, 56, 52, 69, 67, 57, 57, 69, 48, 70, 51, 67, 70, 69, 49, 69, 50, 70, 48, 69, 48, 56, 48, 69, 48, 53, 68, 13, 10, 58, 49, 48, 48, 66, 54, 48, 48, 48, 56, 55, 51, 48, 49, 49, 70, 52, 69, 49, 69, 48, 70, 49, 69, 48, 68, 51, 48, 49, 66, 68, 57, 48, 51, 68, 48, 49, 66, 48, 56, 50, 65, 54, 13, 10, 58, 49, 48, 48, 66, 55, 48, 48, 48, 68, 52, 48, 49, 65, 68, 57, 48, 52, 68, 48, 49, 65, 49, 56, 50, 56, 70, 53, 70, 56, 66, 51, 48, 49, 49, 70, 48, 51, 51, 57, 54, 55, 70, 13, 10, 58, 49, 48, 48, 66, 56, 48, 48, 48, 69, 70, 67, 70, 55, 56, 57, 52, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 56, 48, 69, 55, 57, 53, 69, 48, 48, 52, 13, 10, 58, 49, 48, 48, 66, 57, 48, 48, 48, 48, 69, 57, 52, 66, 55, 48, 70, 49, 48, 66, 65, 50, 70, 69, 70, 50, 49, 66, 66, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50, 57, 13, 10, 58, 49, 48, 48, 66, 65, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 70, 66, 49, 49, 68, 55, 70, 54, 49, 70, 52, 56, 54, 69, 56, 57, 53, 69, 48, 65, 49, 13, 10, 58, 49, 48, 48, 66, 66, 48, 48, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 56, 69, 69, 57, 57, 53, 69, 48, 51, 49, 13, 10, 58, 49, 48, 48, 66, 67, 48, 48, 48, 48, 69, 57, 52, 66, 55, 48, 70, 51, 70, 66, 49, 51, 68, 55, 70, 69, 57, 70, 51, 49, 49, 66, 65, 56, 56, 69, 66, 57, 53, 69, 48, 56, 50, 13, 10, 58, 49, 48, 48, 66, 68, 48, 48, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 56, 67, 69, 70, 57, 53, 69, 48, 48, 68, 13, 10, 58, 49, 48, 48, 66, 69, 48, 48, 48, 48, 69, 57, 52, 66, 55, 48, 70, 52, 70, 69, 70, 52, 48, 57, 51, 48, 49, 48, 49, 48, 69, 57, 52, 56, 70, 48, 49, 56, 48, 57, 51, 52, 53, 13, 10, 58, 49, 48, 48, 66, 70, 48, 48, 48, 48, 50, 48, 49, 56, 53, 51, 70, 68, 48, 70, 51, 56, 67, 69, 49, 57, 54, 69, 48, 48, 69, 57, 52, 66, 65, 48, 49, 54, 48, 57, 49, 51, 65, 13, 10, 58, 49, 48, 48, 67, 48, 48, 48, 48, 53, 68, 48, 55, 55, 48, 57, 49, 53, 69, 48, 55, 56, 48, 69, 53, 57, 54, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 48, 69, 57, 52, 51, 53, 13, 10, 58, 49, 48, 48, 67, 49, 48, 48, 48, 56, 70, 48, 49, 56, 48, 57, 51, 48, 50, 48, 49, 56, 66, 51, 48, 68, 48, 70, 55, 54, 48, 57, 49, 53, 68, 48, 55, 55, 48, 57, 49, 53, 54, 13, 10, 58, 49, 48, 48, 67, 50, 48, 48, 48, 53, 69, 48, 55, 56, 48, 69, 55, 57, 54, 69, 48, 48, 69, 57, 52, 66, 55, 48, 70, 56, 55, 69, 56, 57, 54, 69, 48, 48, 69, 57, 52, 57, 51, 13, 10, 58, 49, 48, 48, 67, 51, 48, 48, 48, 66, 65, 48, 49, 56, 70, 69, 70, 56, 52, 66, 57, 49, 53, 66, 56, 56, 48, 57, 49, 48, 65, 48, 49, 56, 56, 54, 49, 56, 48, 57, 51, 53, 57, 13, 10, 58, 49, 48, 48, 67, 52, 48, 48, 48, 48, 65, 48, 49, 56, 48, 57, 49, 50, 48, 48, 49, 49, 48, 57, 50, 50, 48, 48, 49, 56, 48, 57, 49, 50, 49, 48, 49, 56, 56, 55, 51, 55, 54, 13, 10, 58, 49, 48, 48, 67, 53, 48, 48, 48, 56, 48, 57, 51, 50, 49, 48, 49, 56, 48, 57, 49, 50, 49, 48, 49, 56, 48, 54, 49, 56, 48, 57, 51, 50, 49, 48, 49, 56, 48, 57, 49, 48, 53, 13, 10, 58, 49, 48, 48, 67, 54, 48, 48, 48, 50, 48, 48, 49, 56, 48, 54, 65, 56, 48, 57, 51, 50, 48, 48, 49, 56, 48, 57, 49, 65, 48, 48, 48, 49, 48, 57, 50, 65, 48, 48, 48, 53, 50, 13, 10, 58, 49, 48, 48, 67, 55, 48, 48, 48, 56, 48, 57, 49, 65, 49, 48, 48, 56, 56, 55, 50, 56, 48, 57, 51, 65, 49, 48, 48, 56, 65, 69, 51, 57, 57, 69, 54, 57, 48, 57, 51, 48, 53, 13, 10, 58, 49, 48, 48, 67, 56, 48, 48, 48, 65, 57, 48, 48, 56, 48, 57, 51, 65, 56, 48, 48, 56, 48, 57, 49, 55, 50, 48, 48, 56, 50, 54, 48, 56, 48, 57, 51, 55, 50, 48, 48, 49, 54, 13, 10, 58, 49, 48, 48, 67, 57, 48, 48, 48, 56, 48, 57, 49, 65, 49, 48, 48, 56, 67, 54, 48, 56, 48, 57, 51, 65, 49, 48, 48, 56, 56, 57, 53, 70, 69, 67, 70, 49, 70, 57, 50, 54, 55, 13, 10, 58, 49, 48, 48, 67, 65, 48, 48, 48, 48, 70, 57, 50, 48, 70, 66, 54, 48, 70, 57, 50, 48, 66, 66, 54, 48, 70, 57, 50, 49, 49, 50, 52, 50, 70, 57, 51, 51, 70, 57, 51, 49, 50, 13, 10, 58, 49, 48, 48, 67, 66, 48, 48, 48, 52, 70, 57, 51, 53, 70, 57, 51, 54, 70, 57, 51, 55, 70, 57, 51, 56, 70, 57, 51, 57, 70, 57, 51, 65, 70, 57, 51, 66, 70, 57, 51, 54, 52, 13, 10, 58, 49, 48, 48, 67, 67, 48, 48, 48, 69, 70, 57, 51, 70, 70, 57, 51, 48, 69, 57, 52, 57, 53, 48, 56, 70, 70, 57, 49, 69, 70, 57, 49, 66, 70, 57, 49, 65, 70, 57, 49, 51, 49, 13, 10, 58, 49, 48, 48, 67, 68, 48, 48, 48, 57, 70, 57, 49, 56, 70, 57, 49, 55, 70, 57, 49, 54, 70, 57, 49, 53, 70, 57, 49, 52, 70, 57, 49, 51, 70, 57, 49, 50, 70, 57, 49, 53, 52, 13, 10, 58, 49, 48, 48, 67, 69, 48, 48, 48, 48, 70, 57, 48, 48, 66, 66, 69, 48, 70, 57, 48, 48, 70, 66, 69, 48, 70, 57, 48, 49, 70, 57, 48, 49, 56, 57, 53, 49, 70, 57, 50, 56, 52, 13, 10, 58, 49, 48, 48, 67, 70, 48, 48, 48, 48, 70, 57, 50, 48, 70, 66, 54, 48, 70, 57, 50, 49, 49, 50, 52, 56, 70, 57, 51, 57, 70, 57, 51, 56, 48, 57, 49, 55, 55, 48, 55, 68, 53, 13, 10, 58, 49, 48, 48, 68, 48, 48, 48, 48, 57, 48, 57, 49, 55, 56, 48, 55, 48, 49, 57, 54, 57, 48, 57, 51, 55, 56, 48, 55, 56, 48, 57, 51, 55, 55, 48, 55, 57, 70, 57, 49, 52, 57, 13, 10, 58, 49, 48, 48, 68, 49, 48, 48, 48, 56, 70, 57, 49, 48, 70, 57, 48, 48, 70, 66, 69, 48, 70, 57, 48, 49, 70, 57, 48, 49, 56, 57, 53, 49, 70, 57, 50, 48, 70, 57, 50, 70, 65, 13, 10, 58, 49, 48, 48, 68, 50, 48, 48, 48, 48, 70, 66, 54, 48, 70, 57, 50, 48, 66, 66, 54, 48, 70, 57, 50, 49, 49, 50, 52, 50, 70, 57, 51, 51, 70, 57, 51, 52, 70, 57, 51, 53, 48, 13, 10, 58, 49, 48, 48, 68, 51, 48, 48, 48, 53, 70, 57, 51, 54, 70, 57, 51, 55, 70, 57, 51, 56, 70, 57, 51, 57, 70, 57, 51, 65, 70, 57, 51, 66, 70, 57, 51, 67, 70, 57, 51, 54, 51, 13, 10, 58, 49, 48, 48, 68, 52, 48, 48, 48, 68, 70, 57, 51, 69, 70, 57, 51, 70, 70, 57, 51, 48, 69, 57, 52, 56, 70, 48, 49, 56, 50, 57, 53, 56, 54, 57, 53, 56, 55, 55, 48, 67, 50, 13, 10, 58, 49, 48, 48, 68, 53, 48, 48, 48, 56, 55, 51, 48, 48, 56, 70, 48, 56, 54, 69, 48, 57, 48, 57, 49, 53, 67, 48, 55, 57, 56, 49, 55, 48, 57, 70, 52, 53, 68, 67, 48, 51, 49, 13, 10, 58, 49, 48, 48, 68, 54, 48, 48, 48, 56, 48, 57, 51, 53, 67, 48, 55, 50, 49, 69, 48, 50, 53, 66, 57, 57, 56, 50, 70, 48, 55, 67, 48, 52, 53, 66, 49, 52, 52, 48, 70, 53, 55, 13, 10, 58, 49, 48, 48, 68, 55, 48, 48, 48, 52, 53, 66, 57, 51, 53, 66, 49, 51, 70, 53, 70, 51, 53, 66, 57, 57, 49, 53, 48, 57, 57, 50, 51, 66, 57, 70, 55, 57, 48, 57, 49, 57, 53, 13, 10, 58, 49, 48, 48, 68, 56, 48, 48, 48, 50, 49, 48, 49, 57, 56, 55, 70, 57, 48, 57, 51, 50, 49, 48, 49, 57, 48, 69, 48, 70, 67, 48, 49, 69, 69, 48, 70, 70, 70, 49, 70, 53, 68, 13, 10, 58, 49, 48, 48, 68, 57, 48, 48, 48, 69, 69, 48, 70, 70, 70, 49, 70, 69, 56, 48, 70, 70, 57, 49, 70, 69, 48, 53, 68, 70, 56, 52, 70, 56, 49, 56, 49, 57, 50, 56, 49, 57, 48, 13, 10, 58, 49, 48, 48, 68, 65, 48, 48, 48, 57, 48, 57, 51, 50, 55, 48, 49, 56, 48, 57, 51, 50, 54, 48, 49, 57, 67, 48, 49, 51, 54, 57, 53, 50, 55, 57, 53, 51, 48, 57, 51, 68, 55, 13, 10, 58, 49, 48, 48, 68, 66, 48, 48, 48, 50, 57, 48, 49, 50, 48, 57, 51, 50, 56, 48, 49, 57, 54, 57, 53, 56, 55, 57, 53, 57, 54, 57, 53, 56, 55, 57, 53, 57, 48, 57, 51, 55, 67, 13, 10, 58, 49, 48, 48, 68, 67, 48, 48, 48, 50, 66, 48, 49, 56, 48, 57, 51, 50, 65, 48, 49, 56, 48, 57, 49, 50, 49, 48, 49, 57, 48, 56, 49, 56, 57, 50, 66, 56, 48, 57, 51, 65, 69, 13, 10, 58, 49, 48, 48, 68, 68, 48, 48, 48, 50, 49, 48, 49, 48, 48, 68, 48, 48, 48, 68, 48, 48, 48, 68, 48, 65, 68, 66, 55, 66, 69, 66, 55, 49, 49, 57, 54, 56, 48, 57, 49, 70, 48, 13, 10, 58, 49, 48, 48, 68, 69, 48, 48, 48, 53, 68, 48, 55, 57, 48, 57, 49, 53, 69, 48, 55, 67, 68, 66, 55, 68, 69, 66, 55, 57, 65, 56, 51, 56, 57, 56, 51, 56, 48, 69, 68, 54, 65, 13, 10, 58, 49, 48, 48, 68, 70, 48, 48, 48, 57, 54, 69, 48, 49, 51, 57, 54, 57, 67, 57, 51, 56, 69, 57, 51, 49, 50, 57, 55, 56, 51, 56, 49, 57, 52, 56, 49, 49, 53, 57, 54, 49, 55, 13, 10, 58, 49, 48, 48, 69, 48, 48, 48, 48, 57, 67, 57, 51, 56, 69, 57, 51, 49, 52, 57, 55, 48, 69, 57, 52, 55, 65, 48, 70, 56, 68, 66, 55, 57, 69, 66, 55, 48, 54, 57, 54, 56, 55, 13, 10, 58, 49, 48, 48, 69, 49, 48, 48, 48, 48, 70, 66, 54, 70, 56, 57, 52, 57, 69, 66, 70, 48, 70, 66, 69, 56, 68, 66, 70, 70, 70, 57, 49, 69, 70, 57, 49, 68, 70, 57, 49, 56, 66, 13, 10, 58, 49, 48, 48, 69, 50, 48, 48, 48, 67, 70, 57, 49, 66, 70, 57, 49, 65, 70, 57, 49, 57, 70, 57, 49, 56, 70, 57, 49, 55, 70, 57, 49, 54, 70, 57, 49, 53, 70, 57, 49, 56, 50, 13, 10, 58, 49, 48, 48, 69, 51, 48, 48, 48, 52, 70, 57, 49, 51, 70, 57, 49, 50, 70, 57, 49, 48, 70, 57, 48]);
fileData0.push.apply(fileData0, [48, 66, 66, 69, 48, 70, 57, 48, 48, 70, 66, 69, 48, 70, 57, 48, 67, 70, 13, 10, 58, 49, 48, 48, 69, 52, 48, 48, 48, 49, 70, 57, 48, 49, 56, 57, 53, 49, 70, 57, 50, 48, 70, 57, 50, 48, 70, 66, 54, 48, 70, 57, 50, 48, 66, 66, 54, 48, 70, 57, 50, 50, 67, 13, 10, 58, 49, 48, 48, 69, 53, 48, 48, 48, 49, 49, 50, 52, 50, 70, 57, 51, 51, 70, 57, 51, 52, 70, 57, 51, 53, 70, 57, 51, 54, 70, 57, 51, 55, 70, 57, 51, 56, 70, 57, 51, 66, 70, 13, 10, 58, 49, 48, 48, 69, 54, 48, 48, 48, 57, 70, 57, 51, 65, 70, 57, 51, 66, 70, 57, 51, 69, 70, 57, 51, 70, 70, 57, 51, 56, 66, 69, 69, 57, 54, 69, 48, 48, 69, 57, 52, 49, 55, 13, 10, 58, 49, 48, 48, 69, 55, 48, 48, 48, 66, 65, 48, 49, 70, 56, 57, 52, 70, 70, 67, 70, 56, 48, 69, 65, 57, 70, 69, 48, 70, 67, 48, 49, 51, 49, 57, 55, 70, 49, 70, 55, 67, 55, 13, 10, 58, 49, 48, 48, 69, 56, 48, 48, 48, 53, 57, 57, 56, 48, 49, 57, 55, 70, 49, 70, 55, 53, 56, 57, 56, 48, 56, 57, 53, 53, 57, 57, 56, 56, 48, 69, 65, 57, 70, 69, 48, 56, 65, 13, 10, 58, 49, 48, 48, 69, 57, 48, 48, 48, 70, 67, 48, 49, 51, 49, 57, 55, 70, 49, 70, 55, 53, 56, 57, 65, 48, 49, 57, 55, 70, 49, 70, 55, 53, 57, 57, 65, 48, 56, 57, 53, 65, 51, 13, 10, 58, 49, 48, 48, 69, 65, 48, 48, 48, 53, 57, 57, 65, 56, 48, 69, 65, 57, 70, 69, 48, 70, 67, 48, 49, 51, 49, 57, 55, 70, 49, 70, 55, 53, 56, 57, 65, 48, 49, 57, 55, 50, 70, 13, 10, 58, 49, 48, 48, 69, 66, 48, 48, 48, 70, 49, 70, 55, 53, 56, 57, 56, 48, 56, 57, 53, 53, 57, 57, 65, 53, 49, 57, 56, 56, 48, 69, 65, 57, 70, 69, 48, 70, 67, 48, 49, 70, 66, 13, 10, 58, 49, 48, 48, 69, 67, 48, 48, 48, 51, 49, 57, 55, 70, 49, 70, 55, 53, 56, 57, 65, 48, 49, 57, 55, 70, 49, 70, 55, 57, 57, 66, 49, 53, 56, 57, 56, 53, 49, 57, 65, 68, 66, 13, 10, 58, 49, 48, 48, 69, 68, 48, 48, 48, 56, 49, 69, 48, 57, 49, 70, 70, 56, 48, 69, 48, 48, 56, 57, 53, 69, 70, 57, 50, 70, 70, 57, 50, 49, 70, 57, 51, 68, 70, 57, 51, 69, 69, 13, 10, 58, 49, 48, 48, 69, 69, 48, 48, 48, 67, 70, 57, 51, 48, 70, 57, 50, 67, 68, 66, 55, 68, 69, 66, 55, 49, 56, 69, 48, 57, 48, 69, 65, 69, 57, 50, 69, 57, 70, 69, 48, 68, 69, 13, 10, 58, 49, 48, 48, 69, 70, 48, 48, 48, 70, 57, 50, 69, 56, 55, 70, 68, 48, 65, 67, 48, 53, 57, 57, 56, 68, 55, 48, 49, 49, 49, 57, 55, 70, 49, 70, 55, 53, 56, 57, 65, 51, 50, 13, 10, 58, 49, 48, 48, 70, 48, 48, 48, 48, 70, 55, 48, 49, 51, 49, 57, 55, 70, 49, 70, 55, 53, 56, 57, 56, 48, 52, 67, 48, 56, 57, 56, 51, 48, 69, 57, 52, 53, 48, 48, 55, 56, 48, 13, 10, 58, 49, 48, 48, 70, 49, 48, 48, 48, 56, 57, 56, 49, 49, 49, 53, 48, 49, 49, 70, 48, 56, 56, 48, 70, 69, 67, 67, 70, 48, 70, 57, 48, 67, 70, 57, 49, 68, 70, 57, 49, 65, 52, 13, 10, 58, 49, 48, 48, 70, 50, 48, 48, 48, 49, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 48, 56, 57, 53, 50, 66, 66, 49, 50, 51, 54, 48, 50, 66, 66, 57, 56, 65, 66, 49, 69, 56, 13, 10, 58, 49, 48, 48, 70, 51, 48, 48, 48, 56, 51, 54, 48, 56, 65, 66, 57, 48, 56, 57, 53, 48, 70, 57, 51, 49, 70, 57, 51, 49, 56, 50, 70, 48, 54, 50, 70, 48, 69, 57, 52, 55, 67, 13, 10, 58, 49, 48, 48, 70, 52, 48, 48, 48, 51, 66, 48, 55, 56, 48, 69, 68, 48, 69, 57, 52, 54, 67, 48, 55, 48, 69, 57, 52, 53, 66, 48, 55, 56, 56, 50, 51, 57, 49, 70, 52, 65, 57, 13, 10, 58, 49, 48, 48, 70, 53, 48, 48, 48, 56, 49, 50, 70, 48, 69, 57, 52, 54, 67, 48, 55, 48, 69, 57, 52, 53, 66, 48, 55, 56, 56, 50, 51, 53, 57, 70, 52, 56, 48, 50, 70, 50, 49, 13, 10, 58, 49, 48, 48, 70, 54, 48, 48, 48, 48, 69, 57, 52, 54, 67, 48, 55, 48, 69, 57, 52, 53, 66, 48, 55, 56, 56, 50, 51, 50, 49, 70, 52, 48, 69, 57, 52, 52, 53, 48, 55, 66, 65, 13, 10, 58, 49, 48, 48, 70, 55, 48, 48, 48, 56, 49, 69, 48, 48, 51, 67, 48, 48, 69, 57, 52, 52, 53, 48, 55, 56, 48, 69, 48, 49, 70, 57, 49, 48, 70, 57, 49, 48, 56, 57, 53, 49, 50, 13, 10, 58, 49, 48, 48, 70, 56, 48, 48, 48, 48, 70, 57, 51, 49, 70, 57, 51, 49, 56, 50, 70, 48, 69, 57, 52, 51, 66, 48, 55, 56, 48, 69, 68, 48, 69, 57, 52, 54, 67, 48, 55, 54, 48, 13, 10, 58, 49, 48, 48, 70, 57, 48, 48, 48, 48, 69, 57, 52, 53, 66, 48, 55, 56, 56, 50, 51, 52, 57, 70, 53, 56, 49, 50, 70, 48, 69, 57, 52, 54, 67, 48, 55, 48, 69, 57, 52, 70, 68, 13, 10, 58, 49, 48, 48, 70, 65, 48, 48, 48, 53, 66, 48, 55, 56, 56, 50, 51, 49, 49, 70, 53, 53, 57, 57, 65, 56, 48, 69, 65, 57, 70, 69, 48, 68, 67, 48, 49, 49, 49, 57, 55, 67, 68, 13, 10, 58, 49, 48, 48, 70, 66, 48, 48, 48, 70, 49, 70, 55, 53, 56, 57, 65, 70, 67, 48, 49, 51, 49, 57, 55, 70, 49, 70, 55, 53, 57, 57, 56, 48, 49, 57, 55, 70, 49, 70, 55, 51, 57, 13, 10, 58, 49, 48, 48, 70, 67, 48, 48, 48, 53, 56, 57, 56, 56, 49, 69, 68, 48, 69, 57, 52, 54, 67, 48, 55, 48, 69, 57, 52, 53, 66, 48, 55, 56, 56, 50, 51, 54, 57, 70, 52, 65, 50, 13, 10, 58, 49, 48, 48, 70, 68, 48, 48, 48, 48, 56, 69, 48, 49, 48, 69, 48, 49, 49, 48, 70, 48, 69, 57, 52, 53, 66, 48, 55, 49, 56, 50, 66, 48, 49, 53, 48, 68, 49, 70, 55, 66, 57, 13, 10, 58, 49, 48, 48, 70, 69, 48, 48, 48, 48, 69, 57, 52, 53, 48, 48, 55, 48, 69, 57, 52, 52, 53, 48, 55, 48, 51, 67, 48, 48, 69, 57, 52, 52, 53, 48, 55, 49, 70, 69, 70, 53, 66, 13, 10, 58, 49, 48, 48, 70, 70, 48, 48, 48, 56, 49, 50, 70, 49, 70, 57, 49, 48, 70, 57, 49, 48, 56, 57, 53, 56, 48, 69, 48, 48, 69, 57, 52, 67, 48, 48, 55, 54, 56, 50, 70, 70, 52, 13, 10, 58, 49, 48, 49, 48, 48, 48, 48, 48, 54, 70, 55, 55, 56, 48, 69, 48, 48, 69, 57, 52, 57, 66, 48, 55, 48, 56, 57, 53, 54, 56, 50, 70, 54, 48, 54, 49, 56, 55, 69, 48, 70, 65, 13, 10, 58, 49, 48, 49, 48, 49, 48, 48, 48, 48, 69, 57, 52, 57, 66, 48, 55, 48, 56, 57, 53, 56, 48, 69, 48, 48, 69, 57, 52, 67, 48, 48, 55, 50, 56, 50, 70, 51, 48, 69, 48, 66, 70, 13, 10, 58, 49, 48, 49, 48, 50, 48, 48, 48, 50, 48, 55, 55, 51, 48, 55, 48, 52, 52, 69, 48, 51, 53, 57, 53, 50, 55, 57, 53, 52, 65, 57, 53, 69, 49, 70, 55, 50, 50, 48, 70, 70, 55, 13, 10, 58, 49, 48, 49, 48, 51, 48, 48, 48, 57, 50, 50, 70, 57, 57, 48, 70, 57, 57, 48, 70, 57, 50, 48, 70, 56, 70, 55, 48, 56, 57, 48, 70, 48, 56, 57, 53, 56, 48, 69, 48, 54, 65, 13, 10, 58, 49, 48, 49, 48, 52, 48, 48, 48, 48, 69, 57, 52, 67, 48, 48, 55, 56, 70, 55, 55, 48, 56, 57, 53, 56, 65, 51, 48, 69, 57, 70, 52, 56, 48, 57, 49, 55, 57, 48, 55, 54, 67, 13, 10, 58, 49, 48, 49, 48, 53, 48, 48, 48, 56, 48, 51, 49, 52, 48, 70, 48, 49, 52, 67, 48, 69, 56, 50, 70, 70, 48, 69, 48, 69, 54, 53, 56, 70, 56, 52, 70, 57, 48, 56, 51, 53, 67, 13, 10, 58, 49, 48, 49, 48, 54, 48, 48, 48, 56, 70, 53, 70, 48, 49, 67, 48, 57, 48, 69, 50, 56, 48, 51, 49, 66, 48, 70, 51, 56, 48, 57, 51, 55, 57, 48, 55, 49, 65, 67, 48, 57, 69, 13, 10, 58, 49, 48, 49, 48, 55, 48, 48, 48, 69, 56, 50, 70, 70, 48, 69, 48, 69, 54, 53, 56, 70, 56, 52, 70, 57, 48, 56, 51, 56, 70, 53, 70, 48, 49, 67, 48, 57, 48, 69, 50, 68, 48, 13, 10, 58, 49, 48, 49, 48, 56, 48, 48, 48, 56, 48, 51, 50, 66, 48, 70, 51, 48, 50, 67, 48, 56, 68, 51, 48, 49, 57, 70, 52, 49, 48, 57, 50, 55, 57, 48, 55, 48, 65, 67, 48, 57, 51, 13, 10, 58, 49, 48, 49, 48, 57, 48, 48, 48, 57, 48, 57, 49, 55, 57, 48, 55, 69, 57, 50, 70, 70, 48, 69, 48, 69, 54, 53, 56, 70, 56, 52, 70, 56, 48, 56, 51, 57, 70, 53, 70, 52, 49, 13, 10, 58, 49, 48, 49, 48, 65, 48, 48, 48, 57, 48, 57, 51, 55, 57, 48, 55, 56, 48, 69, 48, 57, 48, 69, 48, 48, 56, 57, 53, 52, 51, 57, 65, 48, 56, 57, 53, 52, 51, 57, 56, 68, 66, 13, 10, 58, 49, 48, 49, 48, 66, 48, 48, 48, 48, 56, 57, 53, 49, 70, 57, 51, 49, 56, 50, 70, 48, 69, 57, 52, 53, 53, 48, 56, 49, 55, 70, 70, 48, 50, 67, 48, 52, 55, 57, 65, 69, 50, 13, 10, 58, 49, 48, 49, 48, 67, 48, 48, 48, 48, 49, 67, 48, 52, 55, 57, 56, 49, 54, 70, 70, 48, 50, 67, 48, 52, 54, 57, 65, 48, 49, 67, 48, 52, 54, 57, 56, 49, 53, 70, 70, 49, 54, 13, 10, 58, 49, 48, 49, 48, 68, 48, 48, 48, 48, 50, 67, 48, 52, 53, 57, 65, 48, 49, 67, 48, 52, 53, 57, 56, 49, 52, 70, 70, 48, 50, 67, 48, 52, 52, 57, 65, 48, 49, 67, 48, 53, 68, 13, 10, 58, 49, 48, 49, 48, 69, 48, 48, 48, 52, 52, 57, 56, 48, 69, 57, 52, 53, 55, 48, 56, 48, 69, 57, 52, 53, 53, 48, 56, 49, 51, 70, 70, 48, 50, 67, 48, 52, 55, 57, 65, 54, 70, 13, 10, 58, 49, 48, 49, 48, 70, 48, 48, 48, 48, 49, 67, 48, 52, 55, 57, 56, 49, 50, 70, 70, 48, 50, 67, 48, 52, 54, 57, 65, 48, 49, 67, 48, 52, 54, 57, 56, 49, 49, 70, 70, 69, 69, 13, 10, 58, 49, 48, 49, 49, 48, 48, 48, 48, 48, 50, 67, 48, 52, 53, 57, 65, 48, 49, 67, 48, 52, 53, 57, 56, 49, 48, 70, 70, 48, 50, 67, 48, 52, 52, 57, 65, 48, 49, 67, 48, 51, 48, 13, 10, 58, 49, 48, 49, 49, 49, 48, 48, 48, 52, 52, 57, 56, 48, 69, 57, 52, 53, 55, 48, 56, 49, 70, 57, 49, 48, 56, 57, 53, 52, 50, 57, 56, 48, 69, 57, 52, 53, 57, 48, 56, 67, 56, 13, 10, 58, 49, 48, 49, 49, 50, 48, 48, 48, 48, 56, 57, 53, 52, 50, 57, 65, 48, 69, 57, 52, 53, 57, 48, 56, 48, 56, 57, 53, 49, 70, 57, 51, 56, 48, 57, 49, 53, 70, 48, 55, 55, 68, 13, 10, 58, 49, 48, 49, 49, 51, 48, 48, 48, 49, 48, 57, 49, 57, 65, 48, 55, 56, 56, 50, 51, 48, 57, 70, 49, 49, 70, 53, 70, 49, 48, 57, 51, 57, 65, 48, 55, 49, 51, 51, 48, 67, 51, 13, 10, 58, 49, 48, 49, 49, 52, 48, 48, 48, 55, 49, 70, 48, 49, 52, 51, 48, 50, 56, 70, 52, 49, 49, 51, 48, 52, 49, 70, 48, 49, 50, 51, 48, 56, 57, 70, 52, 48, 53, 67, 48, 69, 56, 13, 10, 58, 49, 48, 49, 49, 53, 48, 48, 48, 49, 52, 51, 48, 52, 57, 70, 48, 49, 53, 51, 48, 54, 49, 70, 52, 48, 56, 67, 48, 56, 56, 69, 50, 48, 49, 67, 48, 56, 67, 69, 48, 49, 57, 13, 10, 58, 49, 48, 49, 49, 54, 48, 48, 48, 48, 69, 57, 52, 56, 68, 48, 56, 50, 56, 67, 48, 56, 49, 69, 48, 70, 66, 67, 70, 56, 54, 69, 48, 48, 69, 57, 52, 56, 68, 48, 56, 57, 56, 13, 10, 58, 49, 48, 49, 49, 55, 48, 48, 48, 49, 48, 57, 50, 57, 65, 48, 55, 49, 48, 57, 50, 53, 70, 48, 55, 49, 69, 67, 48, 49, 49, 50, 51, 49, 49, 70, 52, 56, 48, 69, 56, 65, 53, 13, 10, 58, 49, 48, 49, 49, 56, 48, 48, 48, 48, 51, 67, 48, 49, 49, 51, 49, 50, 49, 70, 52, 56, 48, 69, 67, 48, 69, 57, 52, 56, 68, 48, 56, 48, 68, 67, 48, 56, 49, 50, 70, 50, 53, 13, 10, 58, 49, 48, 49, 49, 57, 48, 48, 48, 57, 48, 69, 48, 49, 49, 51, 49, 49, 56, 70, 52, 56, 55, 53, 56, 57, 56, 52, 70, 48, 50, 67, 48, 56, 56, 53, 56, 57, 56, 52, 70, 52, 50, 13, 10, 58, 49, 48, 49, 49, 65, 48, 48, 48, 70, 67, 48, 49, 56, 48, 56, 49, 48, 69, 57, 52, 57, 49, 48, 56, 49, 70, 53, 70, 49, 48, 57, 51, 57, 65, 48, 55, 49, 50, 51, 50, 48, 48, 13, 10, 58, 49, 48, 49, 49, 66, 48, 48, 48, 49, 48, 70, 48, 49, 48, 57, 50, 57, 65, 48, 55, 49, 70, 57, 49, 48, 56, 57, 53, 56, 48, 69, 48, 57, 48, 69, 48, 50, 48, 69, 50, 67, 68, 13, 10, 58, 49, 48, 49, 49, 67, 48, 48, 48, 70, 67, 48, 49, 69, 54, 53, 56, 70, 56, 52, 70, 50, 48, 56, 51, 48, 49, 57, 54, 56, 48, 51, 50, 57, 49, 48, 53, 67, 49, 70, 55, 54, 51, 13, 10, 58, 49, 48, 49, 49, 68, 48, 48, 48, 48, 56, 57, 53, 51, 56, 66, 49, 51, 70, 55, 48, 51, 56, 66, 57, 50, 55, 66, 49, 50, 67, 54, 70, 50, 55, 66, 57, 48, 69, 57, 52, 70, 52, 13, 10, 58, 49, 48, 49, 49, 69, 48, 48, 48, 68, 68, 48, 56, 56, 49, 69, 48, 56, 48, 57, 51, 53, 70, 48, 55, 48, 56, 57, 53, 52, 50, 57, 53, 52, 48, 55, 70, 52, 54, 48, 70, 66, 56, 13, 10, 58, 49, 48, 49, 49, 70, 48, 48, 48, 52, 48, 51, 50, 50, 56, 70, 52, 69, 52, 50, 70, 70, 48, 69, 48, 69, 54, 53, 56, 70, 56, 52, 70, 56, 48, 56, 51, 48, 56, 57, 53, 53, 57, 13, 10, 58, 49, 48, 49, 50, 48, 48, 48, 48, 69, 70, 57, 50, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 49, 54, 50, 70, 70, 52, 50, 69, 48, 65, 69, 48, 48, 67, 67, 48, 53, 66, 13, 10, 58, 49, 48, 49, 50, 49, 48, 48, 48, 54, 48, 50, 70, 48, 69, 57, 52, 54, 51, 48, 70, 69, 56, 50, 69, 56, 57, 50, 70, 56, 48, 53, 68, 54, 49, 50, 70, 52, 70, 50, 68, 55, 52, 13, 10, 58, 49, 48, 49, 50, 50, 48, 48, 48, 48, 69, 57, 52, 70, 53, 48, 56, 49, 49, 53, 48, 56, 69, 50, 68, 56, 56, 50, 51, 57, 49, 70, 55, 49, 70, 57, 49, 48, 70, 57, 49, 56, 48, 13, 10, 58, 49, 48, 49, 50, 51, 48, 48, 48, 70, 70, 57, 48, 69, 70, 57, 48, 48, 56, 57, 53, 69, 70, 57, 50, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 67, 70, 57, 51, 51, 66, 13, 10, 58, 49, 48, 49, 50, 52, 48, 48, 48, 68, 70, 57, 51, 49, 54, 50, 70, 48, 52, 50, 70, 69, 56, 50, 69, 69, 55, 48, 49, 55, 69, 48, 49, 70, 57, 50, 69, 69, 55, 48, 49, 50, 56, 13, 10, 58, 49, 48, 49, 50, 53, 48, 48, 48, 48, 53, 67, 48, 54, 49, 50, 70, 52, 48, 50, 70, 48, 69, 57, 52, 70, 53, 48, 56, 49, 70, 53, 70, 56, 57, 57, 49, 56, 56, 50, 51, 69, 56, 13, 10, 58, 49, 48, 49, 50, 54, 48, 48, 48, 67, 49, 70, 55, 68, 70, 57, 49, 67, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 48, 56, 57, 53, 70, 66, 13, 10, 58, 49, 48, 49, 50, 55, 48, 48, 48, 50, 70, 57, 50, 51, 70, 57, 50, 52, 70, 57, 50, 53, 70, 57, 50, 55, 70, 57, 50, 56, 70, 57, 50, 57, 70, 57, 50, 65, 70, 57, 50, 54, 54, 13, 10, 58, 49, 48, 49, 50, 56, 48, 48, 48, 66, 70, 57, 50, 67, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 68, 70, 57, 51, 54, 51, 13, 10, 58, 49, 48, 49, 50, 57, 48, 48, 48, 67, 70, 57, 51, 48, 48, 68, 48, 48, 70, 57, 50, 67, 68, 66, 55, 68, 69, 66, 55, 66, 54, 50, 69, 49, 65, 48, 49, 52, 54, 50, 70, 69, 69, 13, 10, 58, 49, 48, 49, 50, 65, 48, 48, 48, 53, 48, 69, 48, 48, 55, 50, 70, 49, 48, 69, 48, 48, 57, 49, 66, 49, 49, 48, 57, 52, 56, 49, 66, 53, 49, 48, 57, 53, 55, 70, 70, 57, 55, 13, 10, 58, 49, 48, 49, 50, 66, 48, 48, 48, 48, 51, 67, 48, 53, 48, 57, 53, 52, 49, 57, 53, 53, 70, 52, 70, 49, 55, 70, 70, 48, 51, 67, 48, 49, 48, 57, 53, 48, 49, 57, 53, 69, 69, 13, 10, 58, 49, 48, 49, 50, 67, 48, 48, 48, 49, 70, 52, 70, 56, 66, 49, 53, 50, 48, 70, 48, 67, 67, 50, 52, 67, 65, 57, 52, 68, 67, 50, 67, 48, 51, 67, 48, 51, 49, 69, 48, 68, 54, 13, 10, 58, 49, 48, 49, 50, 68, 48, 48, 48, 67, 51, 50, 69, 68, 49, 50, 67, 57, 55, 49, 55, 50, 48, 70, 48, 56, 56, 50, 52, 56, 65, 57, 52, 57, 56, 50, 67, 48, 51, 67, 48, 49, 49, 13, 10, 58, 49, 48, 49, 50, 69, 48, 48, 48, 50, 49, 69, 48, 56, 50, 50, 69, 57, 49, 50, 67, 55, 65, 48, 49, 69, 48, 49, 65, 70, 49, 48, 65, 55, 57, 50, 69, 65, 56, 50, 69, 65, 51, 13, 10, 58, 49, 48, 49, 50, 70, 48, 48, 48, 52, 52, 50, 52, 53, 53, 50, 52, 52, 48, 49, 65, 53, 49, 48, 65, 56, 65, 50, 68, 54, 55, 50, 68, 52, 57, 56, 51, 53, 65, 56, 51, 54, 52, 13, 10, 58, 49, 48, 49, 51, 48, 48, 48, 48, 55, 66, 56, 51, 70, 49, 48, 49, 48, 57, 57, 53, 52, 57, 56, 49, 53, 65, 56, 49, 55, 66, 56, 49, 65, 66, 49, 52, 49, 49, 70, 52, 69, 65, 13, 10, 58, 49, 48, 49, 51, 49, 48, 48, 48, 55, 55, 49, 54, 56, 49, 70, 48, 57, 55, 48, 49, 50, 50, 48, 70, 51, 51, 49, 70, 52, 50, 49, 54, 53, 51, 48, 54, 49, 67, 70, 52, 70, 51, 13, 10, 58, 49, 48, 49, 51, 50, 48, 48, 48, 69, 48, 49, 65, 70, 49, 48, 65, 65, 67, 48, 67, 50, 52, 49, 55, 51, 53, 48, 55, 51, 52, 70, 55, 69, 52, 48, 69, 70, 53, 49, 69, 54, 57, 13, 10, 58, 49, 48, 49, 51, 51, 48, 48, 48, 55, 56, 48, 67, 69, 50, 67, 70, 48, 70, 57, 48, 48, 70, 57, 48, 48, 70, 57, 48, 67, 70, 57, 49, 68, 70, 57, 49, 49, 70, 57, 49, 49, 66, 13, 10, 58, 49, 48, 49, 51, 52, 48, 48, 48, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 68, 70, 57, 48, 67, 70, 57, 48, 66, 70, 57, 48, 65, 70, 57, 48, 57, 70, 57, 48, 54, 52, 13, 10, 58, 49, 48, 49, 51, 53, 48, 48, 48, 56, 70, 57, 48, 55, 70, 57, 48, 53, 70, 57, 48, 52, 70, 57, 48, 51, 70, 57, 48, 50, 70, 57, 48, 48, 56, 57, 53, 65, 70, 57, 50, 50, 53, 13, 10, 58, 49, 48, 49, 51, 54, 48, 48, 48, 66, 70, 57, 50, 67, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 68, 70, 57, 51, 56, 50, 13, 10, 58, 49, 48, 49, 51, 55, 48, 48, 48, 67, 70, 57, 51, 48, 70, 57, 50, 67, 68, 66, 55, 68, 69, 66, 55, 49, 56, 50, 70, 48, 57, 50, 70, 70, 54, 50, 69, 69, 55, 50, 69, 57, 57, 13, 10, 58, 49, 48, 49, 51, 56, 48, 48, 48, 53, 65, 48, 49, 56, 54, 49, 55, 49, 56, 70, 52, 67, 67, 50, 52, 67, 51, 57, 52, 48, 50, 67, 48, 67, 67, 50, 52, 67, 65, 57, 52, 48, 50, 13, 10, 58, 49, 48, 49, 51, 57, 48, 48, 48, 48, 69, 49, 53, 49, 48, 70, 52, 57, 49, 69, 48, 48, 49, 67, 48, 57, 70, 69, 70, 68, 57, 50, 69, 68, 48, 48, 69, 48, 66, 67, 48, 66, 54, 13, 10, 58, 49, 48, 49, 51, 65, 48, 48, 48, 56, 49, 50, 70, 54, 68, 50, 68, 57, 57, 56, 51, 70, 53, 48, 49, 48, 57, 57, 53, 56, 70, 50, 68, 54, 68, 50, 68, 70, 53, 48, 49, 70, 55, 13, 10, 58, 49, 48, 49, 51, 66, 48, 48, 48, 48, 57, 57, 53, 57, 57, 56, 49, 68, 57, 48, 69, 68, 69, 49, 52, 57, 57, 70, 55, 56, 49, 50, 70, 54, 48, 50, 70, 70, 53, 48, 49, 68, 55, 13, 10, 58, 49, 48, 49, 51, 67, 48, 48, 48, 48, 57, 57, 53, 56, 49, 50, 70, 54, 69, 50, 68, 70, 53, 48, 49, 48, 57, 57, 53, 49, 70, 49, 53, 49, 49, 70, 48, 49, 67, 48, 68, 52, 50, 13, 10, 58, 49, 48, 49, 51, 68, 48, 48, 48, 70, 52, 67, 70, 48, 70, 57, 48, 67, 70, 57, 49, 68, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 55, 68, 13, 10, 58, 49, 48, 49, 51, 69, 48, 48, 48, 68, 70, 57, 48, 67, 70, 57, 48, 66, 70, 57, 48, 65, 70, 57, 48, 48, 56, 57, 53, 67, 70, 57, 50, 68, 70, 57, 50, 70, 70, 57, 50, 65, 49, 13, 10, 58, 49, 48, 49, 51, 70, 48, 48, 48, 48, 70, 57, 51, 49, 70, 57, 51, 68, 70, 57, 51, 67, 70, 57, 51, 48, 48, 68, 48, 48, 48, 68, 48, 67, 68, 66, 55, 68, 69, 66, 55, 48, 67, 13, 10, 58, 49, 48, 49, 52, 48, 48, 48, 48, 49, 54, 50, 70, 54, 65, 48, 49, 48, 56, 50, 70, 54, 56, 49, 55, 49, 48, 70, 52, 51, 70, 69, 70, 48, 49, 67, 48, 51, 49, 69, 48, 55, 50, 13, 10, 58, 49, 48, 49, 52, 49, 48, 48, 48, 55, 57, 49, 55, 49, 48, 70, 52, 50, 70, 69, 70, 48, 49, 67, 48, 50, 49, 69, 48, 70, 57, 50, 69, 56, 48, 50, 70, 54, 70, 50, 68, 69, 54, 13, 10, 58, 49, 48, 49, 52, 50, 48, 48, 48, 50, 65, 56, 51, 51, 57, 56, 51, 55, 67, 56, 51, 57, 66, 56, 51, 70, 54, 48, 49, 48, 57, 57, 53, 50, 65, 56, 49, 70, 50, 48, 69, 70, 54, 13, 10, 58, 49, 48, 49, 52, 51, 48, 48, 48, 56, 70, 50, 68, 56, 50, 49, 66, 55, 67, 56, 49, 51, 57, 56, 49, 57, 66, 56, 49, 56, 55, 49, 55, 55, 57, 70, 55, 48, 51, 48, 70, 54, 48, 13, 10, 58, 49, 48, 49, 52, 52, 48, 48, 48, 70, 48, 50, 69, 70, 51, 49, 65, 70, 49, 49, 54, 52, 57, 70, 55, 48, 70, 57, 48, 48, 70, 57, 48, 48, 70, 57, 48, 48, 70, 57, 48, 65, 69, 13, 10, 58, 49, 48, 49, 52, 53, 48, 48, 48, 67, 70, 57, 49, 68, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 68, 70, 57, 48, 67, 70, 57, 48, 48, 56, 57, 53, 55, 50, 13, 10, 58, 49, 48, 49, 52, 54, 48, 48, 48, 50, 56, 50, 70, 65, 66, 48, 49, 56, 48, 69, 48, 57, 50, 50, 70, 54, 70, 69, 55, 55, 50, 50, 70, 48, 69, 57, 52, 51, 56, 48, 57, 55, 69, 13, 10, 58, 49, 48, 49, 52, 55, 48, 48, 48, 48, 56, 57, 53, 50, 56, 50, 70, 65, 66, 48, 49, 57, 48, 69, 48, 54, 50, 50, 70, 55, 70, 69, 51, 48, 69, 57, 52, 51, 56, 48, 57, 56, 54, 13, 10, 58, 49, 48, 49, 52, 56, 48, 48, 48, 48, 56, 57, 53, 54, 70, 57, 50, 55, 70, 57, 50, 56, 70, 57, 50, 57, 70, 57, 50, 65, 70, 57, 50, 66, 70, 57, 50, 67, 70, 57, 50, 54, 56, 13, 10, 58, 49, 48, 49, 52, 57, 48, 48, 48, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 68, 70, 57, 51, 67, 70, 57, 51, 48, 70, 57, 50, 48, 48, 13, 10, 58, 49, 48, 49, 52, 65, 48, 48, 48, 67, 68, 66, 55, 68, 69, 66, 55, 68, 54, 50, 69, 51, 65, 48, 49, 53, 57, 48, 49, 68, 65, 48, 49, 49, 54, 57, 54, 50, 68, 57, 49, 52, 53, 13, 10, 58, 49, 48, 49, 52, 66, 48, 48, 48, 51, 67, 57, 49, 49, 55, 57, 55, 57, 57, 50, 55, 56, 55, 70, 68, 57, 48, 57, 53, 52, 67, 57, 49, 53, 48, 69, 48, 49, 50, 57, 54, 57, 51, 13, 10, 58, 49, 48, 49, 52, 67, 48, 48, 48, 54, 67, 57, 49, 49, 50, 57, 55, 56, 52, 49, 55, 57, 53, 48, 55, 57, 52, 70, 49, 49, 49, 57, 54, 69, 67, 57, 49, 49, 49, 57, 55, 69, 69, 13, 10, 58, 49, 48, 49, 52, 68, 48, 48, 48, 70, 48, 69, 48, 69, 56, 49, 55, 70, 57, 48, 55, 53, 67, 70, 49, 56, 52, 49, 66, 57, 53, 48, 66, 52, 54, 50, 70, 53, 48, 69, 48, 48, 67, 13, 10, 58, 49, 48, 49, 52, 69, 48, 48, 48, 56, 52, 57, 70, 55, 48, 48, 49, 56, 53, 57, 70, 70, 48, 48, 67, 57, 52, 57, 70, 70, 48, 48, 67, 49, 49, 50, 52, 69, 50, 48, 69, 70, 52, 13, 10, 58, 49, 48, 49, 52, 70, 48, 48, 48, 70, 51, 49, 69, 48, 48, 69, 48, 49, 48, 69, 48, 56, 68, 50, 67, 56, 48, 48, 69, 70, 51, 48, 49, 56, 51, 56, 49, 57, 55, 50, 69, 48, 55, 13, 10, 58, 49, 48, 49, 53, 48, 48, 48, 48, 57, 56, 49, 65, 70, 55, 48, 49, 69, 48, 48, 70, 70, 49, 49, 70, 67, 52, 57, 48, 48, 65, 67, 48, 67, 48, 70, 69, 48, 54, 67, 48, 57, 48, 13, 10, 58, 49, 48, 49, 53, 49, 48, 48, 48, 56, 56, 50, 68, 54, 57, 50, 68, 55, 57, 56, 51, 70, 53, 48, 49, 48, 57, 57, 53, 55, 57, 56, 49, 67, 54, 57, 52, 57, 51, 57, 52, 55, 53, 13, 10, 58, 49, 48, 49, 53, 50, 48, 48, 48, 67, 67, 50, 48, 65, 49, 70, 55, 48, 70, 53, 70, 49, 70, 52, 70, 48, 53, 51, 48, 49, 49, 48, 53, 50, 49, 70, 55, 48, 70, 57, 48, 53, 57, 13, 10, 58, 49, 48, 49, 53, 51, 48, 48, 48, 67, 70, 57, 49, 68, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 68, 70, 57, 48, 67, 70, 57, 48, 65, 70, 13, 10, 58, 49, 48, 49, 53, 52, 48, 48, 48, 66, 70, 57, 48, 65, 70, 57, 48, 57, 70, 57, 48, 56, 70, 57, 48, 55, 70, 57, 48, 54, 70, 57, 48, 48, 56, 57, 53, 65, 70, 57, 50, 68, 51, 13, 10, 58, 49, 48, 49, 53, 53, 48, 48, 48, 66, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 67, 70, 57, 51, 68, 70, 57, 51, 56, 70, 13, 10, 58, 49, 48, 49, 53, 54, 48, 48, 48, 68, 54, 50, 69, 69, 65, 48, 49, 53, 57, 48, 49, 48, 56, 50, 70, 49, 57, 50, 70, 69, 55, 50, 69, 48, 54, 67, 48, 56, 65, 51, 48, 49, 69, 13, 10, 58, 49, 48, 49, 53, 55, 48, 48, 48, 49, 49, 70, 48, 56, 68, 51, 48, 50, 49, 70, 52, 56, 68, 56, 49, 69, 56, 48, 69, 70, 68, 50, 67, 48, 68, 67, 48, 56, 57, 51, 48, 69, 53, 13, 10, 58, 49, 48, 49, 53, 56, 48, 48, 48, 49, 57, 70, 52, 56, 65, 56, 49, 56, 56, 48, 70, 48, 55, 67, 48, 54, 70, 50, 68, 55, 69, 50, 68, 65, 69, 48, 49, 57, 53, 48, 49, 53, 57, 13, 10, 58, 49, 48, 49, 53, 57, 48, 48, 48, 48, 69, 57, 52, 52, 49, 48, 65, 56, 67, 56, 49, 70, 56, 48, 69, 70, 56, 48, 49, 56, 49, 57, 49, 56, 70, 48, 49, 56, 56, 50, 51, 48, 53, 13, 10, 58, 49, 48, 49, 53, 65, 48, 48, 48, 51, 49, 70, 55, 68, 70, 57, 49, 67, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 68, 70, 57, 48, 55, 54, 13, 10, 58, 49, 48, 49, 53, 66, 48, 48, 48, 66, 70, 57, 48, 65, 70, 57, 48, 48, 56, 57, 53, 56, 48, 57, 49, 57, 69, 48, 55, 48, 56, 57, 53, 67, 70, 57, 50, 68, 70, 57, 50, 68, 66, 13, 10, 58, 49, 48, 49, 53, 67, 48, 48, 48, 69, 70, 57, 50, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 67, 70, 57, 51, 68, 70, 57, 51, 49, 56, 50, 70, 70, 57, 50, 69, 55, 51, 13, 10, 58, 49, 48, 49, 53, 68, 48, 48, 48, 48, 54, 50, 70, 69, 52, 50, 69, 69, 57, 48, 49, 68, 54, 50, 69, 68, 56, 48, 69, 67, 52, 50, 69, 67, 57, 48, 69, 56, 68, 50, 68, 54, 68, 13, 10, 58, 49, 48, 49, 53, 69, 48, 48, 48, 54, 67, 50, 68, 70, 57, 48, 49, 48, 57, 57, 53, 48, 48, 50, 51, 50, 57, 70, 48, 56, 49, 50, 70, 56, 48, 49, 66, 54, 67, 50, 68, 65, 65, 13, 10, 58, 49, 48, 49, 53, 70, 48, 48, 48, 70, 69, 48, 49, 48, 57, 57, 53, 69, 69, 50, 48, 50, 57, 70, 48, 54, 70, 50, 68, 54, 69, 49, 57, 56, 68, 50, 68, 70, 69, 48, 49, 52, 66, 13, 10, 58, 49, 48, 49, 54, 48, 48, 48, 48, 48, 57, 57, 53, 54, 70, 50, 68, 54, 69, 49, 57, 56, 49, 50, 70, 56, 48, 49, 66, 70, 69, 48, 49, 48, 57, 57, 53, 68, 70, 57, 49, 67, 49, 13, 10, 58, 49, 48, 49, 54, 49, 48, 48, 48, 67, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 68, 70, 57, 48, 67, 70, 57, 48, 48, 56, 57, 53, 65, 49, 13, 10, 58, 49, 48, 49, 54, 50, 48, 48, 48, 67, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 49, 70, 57, 51, 68, 70, 57, 51, 67, 70, 57, 51, 48, 70, 57, 50, 65, 70, 13, 10, 58, 49, 48, 49, 54, 51, 48, 48, 48, 67, 68, 66, 55, 68, 69, 66, 55, 55, 67, 48, 49, 49, 54, 50, 70, 54, 65, 48, 49, 52, 55, 50, 70, 57, 54, 48, 49, 55, 57, 56, 51, 53, 66, 13, 10, 58, 49, 48, 49, 54, 52, 48, 48, 48, 48, 69, 57, 52, 68, 69, 48, 65, 55, 57, 56, 49, 49, 55, 49, 55, 51, 49, 70, 48, 67, 55, 48, 49, 54, 55, 50, 70, 52, 49, 50, 70, 70, 57, 13, 10, 58, 49, 48, 49, 54, 53, 48, 48, 48, 57, 54, 48, 49, 48, 69, 57, 52, 68, 69, 48, 65, 48, 70, 57, 48, 67, 70, 57, 49, 68, 70, 57, 49, 49, 70, 57, 49, 70, 70, 57, 48, 66, 66, 13, 10, 58, 49, 48, 49, 54, 54, 48, 48, 48, 69, 70, 57, 48, 68, 70, 57, 48, 67, 70, 57, 48, 48, 56, 57, 53, 67, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 65, 67, 13, 10, 58, 49, 48, 49, 54, 55, 48, 48, 48, 48, 70, 57, 51, 49, 70, 57, 51, 67, 70, 57, 51, 68, 70, 57, 51, 56, 67, 48, 49, 55, 65, 48, 49, 67, 54, 50, 70, 68, 48, 69, 48, 57, 53, 13, 10, 58, 49, 48, 49, 54, 56, 48, 48, 48, 68, 48, 57, 53, 67, 49, 57, 53, 68, 70, 52, 70, 67, 54, 50, 69, 68, 68, 50, 52, 67, 56, 48, 49, 66, 54, 48, 49, 65, 55, 48, 49, 53, 52, 13, 10, 58, 49, 48, 49, 54, 57, 48, 48, 48, 48, 69, 57, 52, 49, 48, 48, 66, 67, 68, 48, 68, 68, 49, 49, 68, 68, 51, 57, 52, 67, 68, 48, 68, 68, 49, 49, 68, 68, 55, 70, 68, 67, 50, 13, 10, 58, 49, 48, 49, 54, 65, 48, 48, 48, 48, 55, 67, 48, 67, 65, 57, 52, 56, 67, 50, 68, 57, 48, 69, 48, 67, 56, 49, 66, 68, 57, 48, 66, 67, 56, 49, 66, 68, 57, 48, 66, 53, 69, 13, 10, 58, 49, 48, 49, 54, 66, 48, 48, 48, 67, 68, 49, 52, 53, 56, 70, 55, 68, 70, 57, 49, 67, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 67, 67, 13, 10, 58, 49, 48, 49, 54, 67, 48, 48, 48, 68, 70, 57, 48, 67, 70, 57, 48, 48, 56, 57, 53, 50, 70, 57, 50, 51, 70, 57, 50, 52, 70, 57, 50, 53, 70, 57, 50, 54, 70, 57, 50, 52, 65, 13, 10, 58, 49, 48, 49, 54, 68, 48, 48, 48, 55, 70, 57, 50, 56, 70, 57, 50, 57, 70, 57, 50, 65, 70, 57, 50, 66, 70, 57, 50, 67, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 67, 50, 13, 10, 58, 49, 48, 49, 54, 69, 48, 48, 48, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 68, 70, 57, 51, 67, 70, 57, 51, 67, 68, 66, 55, 68, 69, 66, 55, 50, 57, 57, 55, 54, 56, 13, 10, 58, 49, 48, 49, 54, 70, 48, 48, 48, 48, 70, 66, 54, 70, 56, 57, 52, 68, 69, 66, 70, 48, 70, 66, 69, 67, 68, 66, 70, 57, 67, 56, 51, 56, 66, 56, 51, 55, 52, 50, 70, 68, 51, 13, 10, 58, 49, 48, 49, 55, 48, 48, 48, 48, 51, 69, 56, 51, 50, 68, 56, 51, 56, 54, 50, 70, 57, 48, 69, 48, 56, 56, 57, 70, 57, 48, 48, 49, 56, 57, 57, 70, 51, 48, 48, 68, 50, 54, 13, 10, 58, 49, 48, 49, 55, 49, 48, 48, 48, 57, 56, 57, 70, 51, 48, 48, 68, 49, 49, 50, 52, 51, 65, 56, 51, 50, 57, 56, 51, 65, 52, 50, 69, 66, 66, 50, 52, 65, 65, 57, 67, 67, 48, 13, 10, 58, 49, 48, 49, 55, 50, 48, 48, 48, 65, 48, 48, 49, 65, 66, 57, 67, 53, 48, 48, 68, 66, 65, 57, 67, 53, 48, 48, 68, 49, 49, 50, 52, 51, 57, 48, 49, 54, 54, 48, 67, 69, 48, 13, 10, 58, 49, 48, 49, 55, 51, 48, 48, 48, 55, 55, 49, 67, 52, 65, 48, 49, 56, 56, 48, 67, 57, 57, 49, 67, 70, 67, 48, 49, 69, 69, 48, 70, 70, 70, 49, 70, 50, 49, 69, 48, 54, 57, 13, 10, 58, 49, 48, 49, 55, 52, 48, 48, 48, 51, 48, 69, 48, 50, 69, 49, 66, 51, 70, 48, 66, 50, 52, 57, 70, 55, 48, 48, 49, 50, 53, 57, 70, 70, 48, 48, 67, 51, 52, 57, 70, 50, 70, 13, 10, 58, 49, 48, 49, 55, 53, 48, 48, 48, 70, 48, 48, 67, 49, 49, 50, 52, 56, 56, 57, 69, 50, 48, 48, 49, 56, 57, 57, 69, 53, 48, 48, 67, 57, 56, 57, 69, 53, 48, 48, 67, 70, 67, 13, 10, 58, 49, 48, 49, 55, 54, 48, 48, 48, 49, 49, 50, 52, 51, 54, 50, 69, 50, 50, 50, 52, 48, 48, 69, 48, 49, 48, 69, 48, 67, 67, 50, 52, 68, 68, 50, 52, 50, 48, 67, 48, 70, 57, 13, 10, 58, 49, 48, 49, 55, 55, 48, 48, 48, 56, 66, 56, 49, 57, 67, 56, 49, 54, 51, 50, 68, 52, 50, 50, 68, 50, 68, 56, 49, 51, 69, 56, 49, 55, 70, 56, 51, 48, 69, 57, 52, 51, 48, 13, 10, 58, 49, 48, 49, 55, 56, 48, 48, 48, 68, 69, 48, 65, 50, 51, 57, 52, 67, 54, 48, 67, 68, 55, 49, 67, 56, 56, 56, 53, 57, 57, 56, 53, 48, 56, 48, 70, 49, 57, 49, 70, 55, 66, 13, 10, 58, 49, 48, 49, 55, 57, 48, 48, 48, 67, 56, 48, 49, 56, 56, 48, 70, 57, 57, 49, 70, 56, 69, 48, 68, 57, 70, 49, 68, 55, 70, 56, 49, 49, 56, 49, 54, 49, 57, 48, 54, 56, 68, 13, 10, 58, 49, 48, 49, 55, 65, 48, 48, 48, 51, 67, 70, 52, 51, 65, 57, 52, 52, 56, 49, 56, 53, 57, 48, 56, 48, 69, 48, 68, 49, 70, 49, 68, 69, 56, 48, 67, 70, 57, 49, 67, 49, 65, 13, 10, 58, 49, 48, 49, 55, 66, 48, 48, 48, 69, 57, 56, 49, 70, 65, 56, 49, 69, 67, 48, 68, 70, 68, 49, 68, 70, 57, 56, 55, 69, 56, 56, 55, 52, 67, 49, 52, 53, 68, 48, 52, 56, 49, 13, 10, 58, 49, 48, 49, 55, 67, 48, 48, 48, 66, 67, 70, 54, 49, 52, 48, 49, 51, 53, 57, 52, 50, 55, 57, 52, 50, 53, 48, 49, 52, 52, 48, 67, 53, 53, 49, 67, 56, 49, 69, 48, 56, 54, 13, 10, 58, 49, 48, 49, 55, 68, 48, 48, 48, 57, 48, 69, 48, 56, 52, 49, 57, 57, 53, 48, 57, 57, 51, 48, 49, 51, 53, 57, 53, 50, 55, 57, 53, 56, 50, 57, 70, 55, 48, 48, 49, 66, 50, 13, 10, 58, 49, 48, 49, 55, 69, 48, 48, 48, 56, 51, 57, 70, 70, 48, 48, 67, 57, 50, 57, 70, 70, 48, 48, 67, 49, 49, 50, 52, 54, 65, 57, 67, 50, 48, 48, 49, 54, 66, 57, 67, 52, 66, 13, 10, 58, 49, 48, 49, 55, 70, 48, 48, 48, 53, 48, 48, 67, 55, 65, 57, 67, 53, 48, 48, 67, 49, 49, 50, 52, 65, 55, 50, 69, 66, 66, 50, 52, 48, 48, 69, 48, 49, 48, 69, 48, 54, 50, 13, 10, 58, 49, 48, 49, 56, 48, 48, 48, 48, 67, 67, 50, 52, 68, 68, 50, 52, 49, 69, 67, 48, 56, 66, 56, 49, 57, 67, 56, 49, 54, 66, 50, 68, 52, 65, 50, 68, 50, 68, 56, 49, 50, 51, 13, 10, 58, 49, 48, 49, 56, 49, 48, 48, 48, 51, 69, 56, 49, 48, 69, 57, 52, 68, 69, 48, 65, 66, 51, 57, 52, 67, 56, 48, 67, 68, 57, 49, 67, 50, 57, 56, 49, 51, 65, 56, 49, 48, 65, 13, 10, 58, 49, 48, 49, 56, 50, 48, 48, 48, 48, 50, 48, 70, 49, 51, 49, 70, 67, 56, 48, 49, 56, 56, 48, 70, 57, 57, 49, 70, 56, 69, 48, 68, 57, 70, 49, 68, 49, 56, 49, 54, 68, 56, 13, 10, 58, 49, 48, 49, 56, 51, 48, 48, 48, 49, 57, 48, 54, 51, 67, 70, 52, 65, 65, 57, 52, 52, 54, 49, 56, 53, 55, 48, 56, 48, 69, 48, 68, 49, 70, 49, 68, 69, 54, 48, 67, 49, 53, 13, 10, 58, 49, 48, 49, 56, 52, 48, 48, 48, 70, 55, 49, 67, 67, 54, 48, 49, 56, 50, 48, 68, 57, 51, 49, 68, 57, 65, 56, 51, 56, 57, 56, 51, 52, 67, 49, 52, 53, 68, 48, 52, 57, 53, 13, 10, 58, 49, 48, 49, 56, 53, 48, 48, 48, 68, 52, 70, 54, 50, 57, 57, 54, 48, 70, 66, 54, 70, 56, 57, 52, 68, 69, 66, 70, 48, 70, 66, 69, 67, 68, 66, 70, 67, 70, 57, 49, 53, 56, 13, 10, 58, 49, 48, 49, 56, 54, 48, 48, 48, 68, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 68, 70, 57, 48, 67, 70, 57, 48, 66, 70, 57, 48, 56, 68, 13, 10, 58, 49, 48, 49, 56, 55, 48, 48, 48, 65, 70, 57, 48, 57, 70, 57, 48, 56, 70, 57, 48, 55, 70, 57, 48, 54, 70, 57, 48, 53, 70, 57, 48, 52, 70, 57, 48, 51, 70, 57, 48, 51, 48, 13, 10, 58, 49, 48, 49, 56, 56, 48, 48, 48, 50, 70, 57, 48, 48, 56, 57, 53, 55, 55, 57, 65, 48, 56, 57, 53, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 69, 13, 10, 58, 49, 48, 49, 56, 57, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 56, 13, 10, 58, 49, 48, 49, 56, 65, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 57, 53, 56, 56, 50, 51, 49, 57, 70, 48, 56, 49, 51, 48, 51, 54, 13, 10, 58, 49, 48, 49, 56, 66, 48, 48, 48, 53, 49, 70, 52, 48, 53, 67, 48, 56, 69, 66, 49, 56, 51, 55, 70, 56, 56, 54, 48, 56, 69, 66, 57, 48, 56, 57, 53, 50, 69, 66, 49, 51, 50, 13, 10, 58, 49, 48, 49, 56, 67, 48, 48, 48, 50, 51, 55, 70, 50, 52, 54, 48, 50, 69, 66, 57, 48, 56, 57, 53, 48, 69, 57, 52, 53, 53, 48, 67, 50, 70, 69, 70, 50, 50, 66, 57, 55, 50, 13, 10, 58, 49, 48, 49, 56, 68, 48, 48, 48, 49, 49, 66, 56, 56, 69, 66, 49, 56, 70, 55, 67, 56, 48, 54, 50, 56, 69, 66, 57, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 65, 66, 67, 13, 10, 58, 49, 48, 49, 56, 69, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 48, 69, 48, 57, 56, 13, 10, 58, 49, 48, 49, 56, 70, 48, 48, 48, 49, 51, 67, 48, 55, 54, 57, 56, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 13, 10, 58, 49, 48, 49, 57, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 65, 56, 70, 53, 70, 56, 70, 51, 70, 52, 57, 70, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 68, 50, 13, 10, 58, 49, 48, 49, 57, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 57, 57, 69, 66, 67, 70, 57, 69, 66, 49, 57, 70, 55, 57, 48, 54, 13, 10, 58, 49, 48, 49, 57, 50, 48, 48, 48, 57, 69, 66, 57, 56, 70, 51, 70, 48, 57, 70, 48, 56, 48, 69, 48, 48, 56, 57, 53, 56, 48, 57, 49, 57, 68, 48, 55, 48, 69, 57, 52, 52, 53, 13, 10, 58, 49, 48, 49, 57, 51, 48, 48, 48, 54, 52, 48, 67, 49, 49, 66, 56, 56, 69, 66, 49, 56, 48, 54, 51, 56, 69, 66, 57, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 65, 70, 53, 13, 10, 58, 49, 48, 49, 57, 52, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 48, 66, 49, 54, 54, 13, 10, 58, 49, 48, 49, 57, 53, 48, 48, 48, 57, 69, 66, 49, 57, 70, 55, 57, 57, 69, 66, 57, 48, 56, 57, 53, 49, 70, 57, 51, 49, 56, 50, 70, 56, 48, 57, 49, 57, 68, 48, 55, 55, 69, 13, 10, 58, 49, 48, 49, 57, 54, 48, 48, 48, 48, 69, 57, 52, 54, 52, 48, 67, 50, 70, 69, 70, 50, 49, 66, 57, 49, 50, 66, 57, 56, 69, 66, 49, 56, 70, 55, 67, 56, 48, 54, 49, 55, 55, 13, 10, 58, 49, 48, 49, 57, 55, 48, 48, 48, 56, 69, 66, 57, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 65, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 13, 10, 58, 49, 48, 49, 57, 56, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 56, 49, 70, 57, 49, 48, 56, 57, 53, 48, 69, 57, 52, 54, 52, 48, 67, 69, 65, 13, 10, 58, 49, 48, 49, 57, 57, 48, 48, 48, 49, 49, 66, 56, 55, 52, 57, 56, 55, 53, 57, 65, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 65, 48, 48, 48, 48, 48, 48, 48, 48, 53, 51, 13, 10, 58, 49, 48, 49, 57, 65, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 48, 66, 49, 57, 69, 66, 49, 57, 70, 55, 57, 57, 70, 13, 10, 58, 49, 48, 49, 57, 66, 48, 48, 48, 57, 69, 66, 57, 48, 56, 57, 53, 68, 70, 57, 51, 67, 70, 57, 51, 48, 70, 57, 50, 67, 68, 66, 55, 68, 69, 66, 55, 54, 57, 56, 51, 66, 57, 13, 10, 58, 49, 48, 49, 57, 67, 48, 48, 48, 48, 69, 57, 52, 54, 52, 48, 67, 56, 70, 69, 70, 56, 49, 66, 57, 54, 57, 56, 49, 54, 50, 66, 57, 56, 69, 66, 49, 56, 70, 55, 67, 70, 69, 13, 10, 58, 49, 48, 49, 57, 68, 48, 48, 48, 56, 69, 66, 57, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 65, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 66, 48, 13, 10, 58, 49, 48, 49, 57, 69, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 57, 56, 48, 70, 57, 48, 67, 70, 57, 49, 68, 70, 57, 49, 48, 56, 57, 53, 68, 68, 13, 10, 58, 49, 48, 49, 57, 70, 48, 48, 48, 49, 70, 57, 51, 49, 54, 50, 70, 56, 48, 57, 51, 57, 66, 48, 55, 54, 48, 57, 51, 57, 67, 48, 55, 57, 56, 50, 70, 57, 50, 57, 53, 66, 55, 13, 10, 58, 49, 48, 49, 65, 48, 48, 48, 48, 57, 54, 57, 53, 57, 54, 57, 53, 57, 51, 55, 48, 57, 48, 57, 51, 57, 68, 48, 55, 54, 56, 50, 70, 54, 70, 55, 51, 54, 48, 54, 52, 55, 57, 13, 10, 58, 49, 48, 49, 65, 49, 48, 48, 48, 56, 57, 50, 70, 48, 69, 57, 52, 68, 65, 48, 67, 54, 49, 50, 70, 54, 56, 54, 66, 56, 48, 57, 49, 57, 68, 48, 55, 48, 69, 57, 52, 67, 67, 13, 10, 58, 49, 48, 49, 65, 50, 48, 48, 48, 68, 65, 48, 67, 49, 70, 57, 49, 48, 56, 57, 53, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 48, 56, 50, 70, 49, 48, 69, 48, 55, 55, 13, 10, 58, 49, 48, 49, 65, 51, 48, 48, 48, 56, 48, 69, 52, 54, 49, 50, 70, 48, 69, 57, 52, 70, 56, 48, 67, 56, 48, 69, 48, 54, 49, 50, 70, 48, 69, 57, 52, 70, 56, 48, 67, 55, 54, 13, 10, 58, 49, 48, 49, 65, 52, 48, 48, 48, 70, 70, 50, 52, 50, 70, 50, 68, 50, 50, 57, 53, 50, 54, 57, 53, 50, 54, 57, 53, 50, 51, 55, 48, 50, 48, 57, 51, 57, 68, 48, 55, 48, 48, 13, 10, 58, 49, 48, 49, 65, 53, 48, 48, 48, 56, 48, 50, 70, 48, 69, 57, 52, 65, 67, 48, 67, 70, 51, 57, 52, 56, 70, 50, 68, 56, 48, 51, 56, 57, 49, 70, 55, 49, 70, 53, 70, 55, 67, 13, 10, 58, 49, 48, 49, 65, 54, 48, 48, 48, 49, 56, 51, 48, 51, 49, 70, 55, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 48, 56, 57, 53, 70, 70, 57, 50, 48, 70, 57, 51, 53, 55, 13, 10, 58, 49, 48, 49, 65, 55, 48, 48, 48, 49, 70, 57, 51, 48, 56, 50, 70, 70, 54, 50, 69, 49, 54, 50, 70, 49, 54, 57, 53, 49, 54, 57, 53, 49, 54, 57, 53, 54, 49, 50, 70, 56, 51, 13, 10, 58, 49, 48, 49, 65, 56, 48, 48, 48, 48, 69, 57, 52, 70, 56, 48, 67, 48, 69, 57, 52, 57, 53, 48, 67, 48, 69, 57, 52, 57, 53, 48, 67, 57, 70, 50, 68, 57, 55, 55, 48, 53, 55, 13, 10, 58, 49, 48, 49, 65, 57, 48, 48, 48, 50, 49, 69, 48, 51, 48, 69, 48, 48, 50, 67, 48, 50, 50, 48, 70, 51, 51, 49, 70, 57, 65, 57, 53, 69, 50, 70, 55, 70, 56, 50, 69, 67, 50, 13, 10, 58, 49, 48, 49, 65, 65, 48, 48, 48, 70, 50, 50, 54, 56, 48, 50, 70, 54, 49, 50, 70, 48, 69, 57, 52, 70, 56, 48, 67, 56, 70, 50, 68, 48, 69, 57, 52, 65, 67, 48, 67, 50, 51, 13, 10, 58, 49, 48, 49, 65, 66, 48, 48, 48, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 48, 56, 57, 53, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 70, 56, 50, 69, 57, 70, 13, 10, 58, 49, 48, 49, 65, 67, 48, 48, 48, 49, 54, 50, 70, 48, 54, 50, 70, 48, 54, 57, 53, 48, 54, 57, 53, 48, 54, 57, 53, 54, 48, 50, 70, 48, 69, 57, 52, 70, 56, 48, 67, 57, 54, 13, 10, 58, 49, 48, 49, 65, 68, 48, 48, 48, 48, 69, 57, 52, 57, 53, 48, 67, 48, 69, 57, 52, 57, 53, 48, 67, 49, 55, 55, 48, 50, 49, 69, 48, 51, 48, 69, 48, 48, 50, 67, 48, 50, 54, 13, 10, 58, 49, 48, 49, 65, 69, 48, 48, 48, 50, 50, 48, 70, 51, 51, 49, 70, 49, 65, 57, 53, 69, 50, 70, 55, 49, 50, 50, 70, 49, 48, 57, 53, 49, 56, 50, 51, 56, 70, 50, 68, 48, 69, 13, 10, 58, 49, 48, 49, 65, 70, 48, 48, 48, 54, 48, 50, 70, 48, 69, 57, 52, 70, 56, 48, 67, 56, 49, 50, 70, 48, 69, 57, 52, 65, 67, 48, 67, 49, 70, 57, 49, 48, 70, 57, 49, 53, 55, 13, 10, 58, 49, 48, 49, 66, 48, 48, 48, 48, 70, 70, 57, 48, 48, 56, 57, 53, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 48, 56, 50, 70, 70, 54, 50, 69, 49, 54, 50, 70, 50, 52, 13, 10, 58, 49, 48, 49, 66, 49, 48, 48, 48, 49, 54, 57, 53, 49, 54, 57, 53, 49, 54, 57, 53, 54, 49, 50, 70, 48, 69, 57, 52, 70, 56, 48, 67, 48, 69, 57, 52, 57, 53, 48, 67, 52, 66, 13, 10, 58, 49, 48, 49, 66, 50, 48, 48, 48, 48, 69, 57, 52, 57, 53, 48, 67, 57, 70, 50, 68, 57, 55, 55, 48, 50, 49, 69, 48, 51, 48, 69, 48, 48, 50, 67, 48, 50, 50, 48, 70, 57, 66, 13, 10, 58, 49, 48, 49, 66, 51, 48, 48, 48, 51, 51, 49, 70, 57, 65, 57, 53, 69, 50, 70, 55, 70, 56, 50, 69, 70, 50, 50, 65, 56, 48, 50, 70, 54, 49, 50, 70, 48, 69, 57, 52, 50, 56, 13, 10, 58, 49, 48, 49, 66, 52, 48, 48, 48, 70, 56, 48, 67, 56, 70, 50, 68, 48, 69, 57, 52, 65, 67, 48, 67, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 48, 56, 57, 53, 70, 70, 13, 10, 58, 49, 48, 49, 66, 53, 48, 48, 48, 48, 70, 57, 51, 49, 70, 57, 51, 49, 56, 50, 70, 48, 56, 50, 70, 48, 48, 54, 67, 56, 48, 69, 48, 54, 48, 50, 70, 48, 69, 57, 52, 66, 54, 13, 10, 58, 49, 48, 49, 66, 54, 48, 48, 48, 68, 65, 48, 67, 56, 49, 69, 48, 54, 48, 50, 70, 48, 69, 57, 52, 68, 65, 48, 67, 49, 48, 57, 51, 57, 69, 48, 55, 49, 70, 57, 49, 49, 70, 13, 10, 58, 49, 48, 49, 66, 55, 48, 48, 48, 48, 70, 57, 49, 48, 56, 57, 53, 67, 70, 57, 51, 68, 70, 57, 51, 50, 69, 66, 49, 50, 51, 55, 48, 50, 69, 66, 57, 56, 68, 66, 49, 66, 68, 13, 10, 58, 49, 48, 49, 66, 56, 48, 48, 48, 56, 67, 54, 70, 56, 68, 66, 57, 67, 52, 69, 49, 68, 48, 69, 48, 48, 69, 57, 52, 52, 52, 48, 67, 50, 49, 57, 55, 69, 49, 70, 55, 51, 68, 13, 10, 58, 49, 48, 49, 66, 57, 48, 48, 48, 49, 50, 66, 56, 51, 70, 69, 70, 51, 49, 66, 57, 56, 48, 69, 48, 48, 69, 57, 52, 54, 52, 48, 67, 68, 70, 57, 49, 67, 70, 57, 49, 50, 49, 13, 10, 58, 49, 48, 49, 66, 65, 48, 48, 48, 48, 56, 57, 53, 48, 69, 57, 52, 66, 65, 48, 68, 56, 56, 50, 51, 66, 57, 70, 52, 48, 69, 57, 52, 52, 50, 48, 67, 56, 48, 69, 48, 56, 55, 13, 10, 58, 49, 48, 49, 66, 66, 48, 48, 48, 54, 70, 69, 51, 48, 69, 57, 52, 68, 65, 48, 67, 56, 49, 69, 48, 54, 70, 69, 51, 48, 69, 57, 52, 68, 65, 48, 67, 56, 48, 69, 48, 66, 48, 13, 10, 58, 49, 48, 49, 66, 67, 48, 48, 48, 54, 48, 69, 67, 48, 69, 57, 52, 68, 65, 48, 67, 56, 49, 69, 48, 54, 48, 69, 67, 48, 69, 57, 52, 68, 65, 48, 67, 56, 48, 69, 48, 65, 67, 13, 10, 58, 49, 48, 49, 66, 68, 48, 48, 48, 48, 69, 57, 52, 49, 51, 48, 68, 56, 48, 69, 48, 48, 56, 57, 53, 56, 70, 69, 70, 48, 56, 57, 53, 54, 70, 57, 50, 55, 70, 57, 50, 49, 57, 13, 10, 58, 49, 48, 49, 66, 69, 48, 48, 48, 56, 70, 57, 50, 57, 70, 57, 50, 65, 70, 57, 50, 66, 70, 57, 50, 67, 70, 57, 50, 68, 70, 57, 50, 69, 70, 57, 50, 70, 70, 57, 50, 50, 68, 13, 10, 58, 49, 48, 49, 66, 70, 48, 48, 48, 48, 70, 57, 51, 49, 70, 57, 51, 68, 70, 57, 51, 67, 70, 57, 51, 67, 68, 66, 55, 68, 69, 66, 55, 50, 67, 57, 55, 48, 70, 66, 54, 49, 67, 13, 10, 58, 49, 48, 49, 67, 48, 48, 48, 48, 70, 56, 57, 52, 68, 69, 66, 70, 48, 70, 66, 69, 67, 68, 66, 70, 54, 67, 48, 49, 51, 66, 48, 49, 56, 65, 48, 49, 70, 67, 48, 49, 50, 49, 13, 10, 58, 49, 48, 49, 67, 49, 48, 48, 48, 49, 55, 56, 50, 49, 54, 56, 50, 56, 51, 56, 49, 56, 49, 70, 68, 48, 51, 67, 48, 49, 69, 67, 49, 56, 53, 48, 49, 48, 52, 67, 48, 50, 53, 13, 10, 58, 49, 48, 49, 67, 50, 48, 48, 48, 52, 69, 48, 49, 48, 56, 57, 52, 56, 49, 49, 67, 57, 49, 49, 67, 70, 54, 48, 49, 69, 51, 56, 48, 70, 51, 48, 49, 69, 51, 70, 67, 53, 50, 13, 10, 58, 49, 48, 49, 67, 51, 48, 48, 48, 56, 53, 57, 49, 69, 51, 70, 69, 56, 49, 57, 49, 51, 70, 48, 49, 56, 56, 50, 51, 48, 57, 70, 52, 48, 57, 67, 49, 56, 53, 51, 50, 51, 50, 13, 10, 58, 49, 48, 49, 67, 52, 48, 48, 48, 53, 49, 70, 52, 69, 51, 70, 67, 50, 53, 57, 49, 69, 51, 70, 69, 50, 49, 57, 49, 51, 70, 48, 49, 50, 53, 51, 50, 49, 49, 70, 48, 56, 70, 13, 10, 58, 49, 48, 49, 67, 53, 48, 48, 48, 70, 70, 50, 52, 50, 51, 67, 48, 56, 53, 69, 50, 57, 48, 69, 48, 66, 54, 48, 49, 48, 69, 57, 52, 56, 66, 48, 70, 53, 56, 48, 49, 53, 66, 13, 10, 58, 49, 48, 49, 67, 54, 48, 48, 48, 68, 68, 67, 70, 50, 50, 50, 51, 48, 57, 70, 52, 56, 57, 67, 48, 56, 66, 69, 69, 57, 48, 69, 48, 54, 50, 50, 70, 55, 48, 69, 48, 55, 51, 13, 10, 58, 49, 48, 49, 67]);
fileData0.push.apply(fileData0, [55, 48, 48, 48, 50, 67, 56, 55, 48, 69, 57, 52, 54, 70, 48, 70, 50, 67, 56, 53, 48, 48, 57, 55, 52, 57, 70, 52, 50, 51, 51, 50, 49, 57, 70, 52, 65, 65, 13, 10, 58, 49, 48, 49, 67, 56, 48, 48, 48, 70, 48, 69, 49, 70, 70, 50, 65, 48, 52, 67, 48, 50, 67, 51, 54, 54, 57, 70, 52, 50, 48, 69, 56, 70, 50, 50, 65, 70, 51, 48, 49, 66, 70, 13, 10, 58, 49, 48, 49, 67, 57, 48, 48, 48, 69, 51, 70, 67, 50, 53, 57, 49, 69, 51, 70, 69, 50, 49, 57, 49, 51, 70, 48, 49, 70, 55, 70, 69, 69, 50, 67, 70, 50, 50, 50, 51, 70, 49, 13, 10, 58, 49, 48, 49, 67, 65, 48, 48, 48, 48, 57, 70, 52, 51, 70, 67, 48, 56, 52, 69, 69, 57, 48, 69, 48, 54, 50, 50, 70, 55, 48, 69, 48, 50, 67, 56, 55, 48, 69, 57, 52, 50, 48, 13, 10, 58, 49, 48, 49, 67, 66, 48, 48, 48, 54, 70, 48, 70, 50, 67, 56, 53, 48, 48, 57, 55, 52, 49, 70, 48, 54, 52, 69, 48, 65, 54, 50, 69, 66, 49, 50, 67, 65, 48, 48, 69, 56, 65, 13, 10, 58, 49, 48, 49, 67, 67, 48, 48, 48, 66, 49, 49, 69, 56, 70, 69, 51, 57, 48, 69, 48, 48, 70, 67, 48, 50, 51, 51, 54, 50, 57, 70, 48, 50, 51, 51, 55, 56, 57, 70, 48, 52, 70, 13, 10, 58, 49, 48, 49, 67, 68, 48, 48, 48, 50, 51, 51, 53, 50, 57, 70, 53, 48, 67, 67, 48, 53, 50, 69, 48, 65, 53, 50, 69, 66, 49, 50, 67, 65, 48, 48, 69, 66, 49, 49, 69, 54, 51, 13, 10, 58, 49, 48, 49, 67, 69, 48, 48, 48, 70, 56, 48, 49, 56, 48, 56, 49, 57, 49, 56, 49, 66, 54, 48, 49, 48, 69, 57, 52, 56, 66, 48, 70, 57, 55, 67, 70, 70, 49, 69, 48, 66, 69, 13, 10, 58, 49, 48, 49, 67, 70, 48, 48, 48, 70, 70, 50, 65, 52, 50, 69, 48, 65, 52, 50, 69, 66, 49, 50, 67, 65, 48, 48, 69, 66, 49, 49, 69, 70, 56, 48, 49, 48, 48, 56, 49, 70, 51, 13, 10, 58, 49, 48, 49, 68, 48, 48, 48, 48, 49, 49, 56, 49, 48, 52, 67, 48, 57, 48, 69, 48, 66, 54, 48, 49, 48, 69, 57, 52, 56, 66, 48, 70, 70, 56, 48, 49, 70, 48, 70, 67, 51, 53, 13, 10, 58, 49, 48, 49, 68, 49, 48, 48, 48, 56, 53, 57, 49, 70, 48, 70, 69, 56, 49, 57, 49, 56, 70, 48, 49, 56, 56, 50, 51, 65, 49, 70, 55, 55, 70, 67, 70, 50, 52, 51, 54, 51, 50, 13, 10, 58, 49, 48, 49, 68, 50, 48, 48, 48, 49, 49, 70, 48, 50, 57, 51, 54, 53, 49, 70, 53, 70, 55, 70, 69, 48, 66, 67, 48, 51, 52, 69, 48, 65, 51, 50, 69, 66, 49, 50, 67, 56, 66, 13, 10, 58, 49, 48, 49, 68, 51, 48, 48, 48, 65, 48, 48, 69, 66, 49, 49, 69, 70, 56, 48, 49, 54, 48, 56, 49, 55, 49, 56, 49, 56, 50, 56, 49, 57, 51, 56, 49, 48, 67, 67, 48, 55, 55, 13, 10, 58, 49, 48, 49, 68, 52, 48, 48, 48, 50, 50, 69, 48, 65, 50, 50, 69, 66, 49, 50, 67, 65, 48, 48, 69, 66, 49, 49, 69, 70, 56, 48, 49, 54, 48, 56, 49, 55, 49, 56, 49, 57, 66, 13, 10, 58, 49, 48, 49, 68, 53, 48, 48, 48, 56, 56, 50, 55, 55, 55, 70, 68, 56, 48, 57, 53, 57, 56, 50, 70, 70, 70, 69, 69, 70, 70, 50, 50, 57, 55, 70, 70, 48, 57, 67, 48, 49, 55, 13, 10, 58, 49, 48, 49, 68, 54, 48, 48, 48, 57, 48, 57, 53, 56, 48, 57, 53, 55, 48, 57, 53, 54, 49, 57, 53, 55, 70, 52, 70, 56, 70, 52, 70, 57, 70, 52, 70, 50, 48, 69, 52, 65, 48, 13, 10, 58, 49, 48, 49, 68, 55, 48, 48, 48, 70, 50, 50, 65, 65, 52, 48, 49, 50, 65, 69, 48, 51, 48, 69, 48, 51, 66, 67, 48, 50, 48, 51, 55, 57, 57, 70, 48, 50, 49, 51, 55, 53, 53, 13, 10, 58, 49, 48, 49, 68, 56, 48, 48, 48, 51, 48, 70, 52, 50, 56, 51, 53, 66, 49, 70, 48, 50, 70, 51, 54, 48, 57, 70, 48, 54, 50, 67, 48, 49, 55, 67, 48, 50, 53, 51, 55, 55, 69, 13, 10, 58, 49, 48, 49, 68, 57, 48, 48, 48, 50, 49, 70, 48, 50, 56, 51, 55, 48, 57, 70, 48, 53, 67, 67, 48, 48, 55, 67, 48, 56, 70, 69, 69, 70, 56, 50, 50, 50, 65, 69, 48, 53, 54, 13, 10, 58, 49, 48, 49, 68, 65, 48, 48, 48, 51, 48, 69, 48, 48, 69, 67, 48, 69, 48, 69, 49, 70, 69, 50, 65, 70, 52, 69, 50, 70, 70, 50, 65, 50, 48, 69, 49, 51, 48, 69, 48, 53, 67, 13, 10, 58, 49, 48, 49, 68, 66, 48, 48, 48, 48, 55, 67, 48, 50, 52, 69, 48, 70, 50, 50, 65, 50, 48, 69, 49, 51, 50, 69, 48, 48, 50, 67, 48, 50, 56, 69, 48, 51, 48, 69, 48, 52, 70, 13, 10, 58, 49, 48, 49, 68, 67, 48, 48, 48, 70, 55, 70, 69, 48, 66, 67, 48, 57, 52, 69, 48, 65, 57, 50, 69, 66, 49, 50, 67, 65, 48, 48, 69, 66, 49, 49, 69, 70, 56, 48, 49, 66, 53, 13, 10, 58, 49, 48, 49, 68, 68, 48, 48, 48, 54, 48, 56, 49, 55, 49, 56, 49, 56, 50, 56, 49, 57, 51, 56, 49, 48, 65, 67, 48, 56, 50, 69, 48, 65, 56, 50, 69, 66, 49, 50, 67, 51, 65, 13, 10, 58, 49, 48, 49, 68, 69, 48, 48, 48, 65, 48, 48, 69, 66, 49, 49, 69, 70, 56, 48, 49, 54, 48, 56, 49, 55, 49, 56, 49, 56, 48, 69, 48, 57, 48, 69, 48, 65, 52, 48, 49, 51, 53, 13, 10, 58, 49, 48, 49, 68, 70, 48, 48, 48, 48, 69, 57, 52, 68, 68, 48, 70, 69, 56, 50, 69, 69, 56, 49, 56, 48, 70, 50, 68, 49, 48, 69, 48, 70, 54, 70, 69, 48, 53, 67, 48, 53, 65, 13, 10, 58, 49, 48, 49, 69, 48, 48, 48, 48, 56, 68, 69, 50, 57, 48, 69, 48, 66, 54, 48, 49, 48, 69, 57, 52, 56, 66, 48, 70, 48, 52, 70, 70, 49, 53, 67, 48, 70, 69, 48, 49, 50, 57, 13, 10, 58, 49, 48, 49, 69, 49, 48, 48, 48, 69, 69, 48, 68, 70, 49, 49, 68, 56, 48, 56, 49, 56, 48, 51, 51, 55, 57, 70, 48, 56, 48, 69, 51, 57, 48, 69, 48, 66, 54, 48, 49, 49, 50, 13, 10, 58, 49, 48, 49, 69, 50, 48, 48, 48, 48, 69, 57, 52, 56, 66, 48, 70, 48, 50, 70, 70, 48, 56, 67, 48, 67, 56, 48, 49, 56, 48, 55, 50, 57, 48, 55, 48, 56, 56, 53, 65, 49, 48, 13, 10, 58, 49, 48, 49, 69, 51, 48, 48, 48, 57, 70, 52, 70, 66, 54, 48, 49, 48, 69, 57, 52, 56, 66, 48, 70, 69, 65, 57, 52, 70, 52, 48, 49, 69, 69, 48, 68, 70, 49, 49, 68, 52, 53, 13, 10, 58, 49, 48, 49, 69, 52, 48, 48, 48, 56, 48, 56, 49, 57, 48, 69, 48, 66, 54, 48, 49, 48, 69, 57, 52, 56, 66, 48, 70, 69, 69, 50, 48, 65, 57, 70, 55, 69, 54, 67, 69, 67, 67, 13, 10, 58, 49, 48, 49, 69, 53, 48, 48, 48, 70, 54, 48, 49, 50, 54, 56, 49, 51, 55, 56, 49, 48, 50, 67, 48, 50, 70, 69, 70, 51, 70, 69, 70, 67, 57, 48, 49, 50, 67, 57, 54, 57, 50, 13, 10, 58, 49, 48, 49, 69, 54, 48, 48, 48, 48, 70, 66, 54, 70, 56, 57, 52, 68, 69, 66, 70, 48, 70, 66, 69, 67, 68, 66, 70, 67, 70, 57, 49, 68, 70, 57, 49, 49, 70, 57, 49, 65, 66, 13, 10, 58, 49, 48, 49, 69, 55, 48, 48, 48, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 68, 70, 57, 48, 67, 70, 57, 48, 66, 70, 57, 48, 65, 70, 57, 48, 57, 70, 57, 48, 50, 57, 13, 10, 58, 49, 48, 49, 69, 56, 48, 48, 48, 56, 70, 57, 48, 55, 70, 57, 48, 54, 70, 57, 48, 48, 56, 57, 53, 54, 50, 57, 70, 68, 48, 48, 49, 55, 51, 57, 70, 70, 48, 48, 49, 66, 51, 13, 10, 58, 49, 48, 49, 69, 57, 48, 48, 48, 56, 50, 57, 70, 69, 48, 48, 68, 70, 49, 49, 68, 54, 52, 57, 70, 69, 48, 48, 68, 70, 49, 49, 68, 57, 50, 57, 70, 70, 48, 48, 68, 70, 65, 13, 10, 58, 49, 48, 49, 69, 65, 48, 48, 48, 56, 51, 57, 70, 70, 48, 48, 68, 55, 52, 57, 70, 70, 48, 48, 68, 54, 53, 57, 70, 70, 48, 48, 68, 57, 57, 50, 55, 55, 50, 57, 70, 51, 49, 13, 10, 58, 49, 48, 49, 69, 66, 48, 48, 48, 66, 48, 48, 68, 69, 49, 49, 68, 70, 57, 49, 70, 54, 51, 57, 70, 66, 48, 48, 68, 69, 49, 49, 68, 70, 57, 49, 70, 66, 68, 48, 49, 66, 67, 13, 10, 58, 49, 48, 49, 69, 67, 48, 48, 48, 67, 70, 48, 49, 49, 49, 50, 52, 48, 56, 57, 53, 57, 57, 49, 66, 55, 57, 69, 48, 48, 52, 67, 48, 57, 57, 49, 70, 57, 54, 49, 55, 51, 65, 13, 10, 58, 49, 48, 49, 69, 68, 48, 48, 48, 48, 56, 70, 48, 57, 54, 49, 66, 56, 56, 49, 70, 55, 65, 57, 53, 67, 57, 70, 55, 56, 48, 57, 53, 48, 56, 57, 53, 70, 67, 48, 49, 51, 52, 13, 10, 58, 49, 48, 49, 69, 69, 48, 48, 48, 48, 53, 57, 48, 48, 54, 49, 54, 50, 49, 70, 48, 48, 48, 50, 48, 68, 57, 70, 55, 67, 48, 48, 49, 48, 56, 57, 53, 51, 49, 57, 55, 49, 65, 13, 10, 58, 49, 48, 49, 69, 70, 48, 48, 48, 67, 70, 48, 49, 48, 56, 57, 53, 68, 70, 57, 51, 67, 70, 57, 51, 67, 68, 66, 55, 68, 69, 66, 55, 57, 69, 48, 49, 50, 55, 53, 70, 54, 51, 13, 10, 58, 49, 48, 49, 70, 48, 48, 48, 48, 51, 70, 52, 70, 56, 68, 56, 49, 57, 69, 56, 49, 54, 70, 56, 49, 55, 56, 56, 53, 65, 57, 48, 49, 48, 69, 57, 52, 69, 69, 48, 68, 69, 50, 13, 10, 58, 49, 48, 49, 70, 49, 48, 48, 48, 67, 70, 57, 49, 68, 70, 57, 49, 48, 56, 57, 53, 48, 70, 57, 51, 49, 70, 57, 51, 67, 70, 57, 51, 68, 70, 57, 51, 56, 67, 48, 49, 57, 70, 13, 10, 58, 49, 48, 49, 70, 50, 48, 48, 48, 69, 66, 48, 49, 56, 66, 56, 49, 56, 49, 70, 70, 49, 66, 67, 48, 56, 50, 70, 70, 48, 68, 67, 48, 50, 69, 56, 49, 51, 70, 56, 49, 65, 49, 13, 10, 58, 49, 48, 49, 70, 51, 48, 48, 48, 56, 67, 56, 49, 57, 68, 56, 49, 50, 56, 49, 55, 51, 57, 48, 55, 54, 52, 70, 52, 69, 56, 56, 49, 70, 57, 56, 49, 48, 49, 57, 51, 50, 56, 13, 10, 58, 49, 48, 49, 70, 52, 48, 48, 48, 70, 57, 56, 51, 69, 56, 56, 51, 48, 54, 67, 48, 69, 56, 56, 53, 70, 57, 56, 53, 56, 48, 50, 70, 48, 57, 57, 53, 48, 48, 57, 55, 49, 53, 13, 10, 58, 49, 48, 49, 70, 53, 48, 48, 48, 51, 49, 70, 52, 56, 69, 56, 49, 57, 70, 56, 49, 48, 49, 57, 54, 57, 70, 56, 51, 56, 69, 56, 51, 48, 50, 67, 48, 48, 70, 69, 70, 65, 51, 13, 10, 58, 49, 48, 49, 70, 54, 48, 48, 48, 49, 70, 69, 70, 67, 56, 48, 49, 68, 70, 57, 49, 67, 70, 57, 49, 49, 70, 57, 49, 48, 70, 57, 49, 48, 56, 57, 53, 69, 70, 57, 50, 53, 67, 13, 10, 58, 49, 48, 49, 70, 55, 48, 48, 48, 70, 70, 57, 50, 48, 70, 57, 51, 49, 70, 57, 51, 67, 70, 57, 51, 68, 70, 57, 51, 55, 67, 48, 49, 69, 66, 48, 49, 56, 66, 56, 49, 51, 51, 13, 10, 58, 49, 48, 49, 70, 56, 48, 48, 48, 56, 49, 70, 70, 49, 49, 67, 48, 48, 48, 69, 48, 49, 48, 69, 48, 48, 56, 67, 48, 69, 56, 56, 53, 70, 57, 56, 53, 66, 69, 48, 49, 66, 69, 13, 10, 58, 49, 48, 49, 70, 57, 48, 48, 48, 48, 57, 57, 53, 48, 48, 57, 55, 49, 49, 70, 48, 48, 70, 69, 70, 49, 70, 69, 70, 70, 55, 48, 49, 56, 49, 57, 49, 55, 70, 48, 49, 55, 53, 13, 10, 58, 49, 48, 49, 70, 65, 48, 48, 48, 56, 56, 50, 51, 57, 57, 70, 55, 48, 50, 67, 48, 48, 70, 69, 70, 49, 70, 69, 70, 67, 56, 48, 49, 68, 70, 57, 49, 67, 70, 57, 49, 56, 70, 13, 10, 58, 49, 48, 49, 70, 66, 48, 48, 48, 49, 70, 57, 49, 48, 70, 57, 49, 70, 70, 57, 48, 69, 70, 57, 48, 48, 56, 57, 53, 70, 65, 48, 49, 65, 65, 50, 55, 50, 56, 51, 48, 48, 50, 13, 10, 58, 49, 48, 49, 70, 67, 48, 48, 48, 53, 49, 70, 49, 50, 48, 51, 49, 56, 49, 70, 49, 69, 56, 57, 52, 54, 70, 57, 51, 54, 69, 55, 70, 54, 69, 53, 70, 55, 70, 52, 70, 48, 54, 13, 10, 58, 49, 48, 49, 70, 68, 48, 48, 48, 56, 70, 52, 70, 57, 70, 52, 70, 65, 70, 52, 70, 66, 49, 69, 48, 51, 69, 68, 48, 66, 52, 69, 48, 51, 67, 68, 48, 54, 55, 48, 70, 56, 50, 13, 10, 58, 49, 48, 49, 70, 69, 48, 48, 48, 55, 56, 49, 70, 56, 57, 49, 70, 57, 65, 49, 70, 65, 49, 49, 68, 54, 56, 48, 70, 55, 57, 49, 70, 56, 65, 49, 70, 57, 49, 49, 68, 68, 53, 13, 10, 58, 49, 48, 49, 70, 70, 48, 48, 48, 65, 49, 49, 68, 54, 65, 48, 70, 55, 49, 49, 68, 56, 49, 49, 68, 57, 49, 49, 68, 65, 49, 49, 68, 50, 48, 68, 48, 48, 57, 70, 52, 50, 53, 13, 10, 58, 49, 48, 50, 48, 48, 48, 48, 48, 54, 56, 57, 52, 51, 70, 57, 49, 50, 65, 69, 48, 50, 54, 57, 70, 49, 49, 50, 52, 51, 48, 49, 57, 51, 48, 53, 68, 51, 49, 57, 51, 54, 54, 13, 10, 58, 49, 48, 50, 48, 49, 48, 48, 48, 68, 69, 70, 54, 67, 70, 48, 49, 48, 56, 57, 53, 52, 54, 50, 70, 52, 55, 55, 48, 52, 48, 53, 68, 52, 49, 57, 51, 66, 51, 69, 48, 52, 70, 13, 10, 58, 49, 48, 50, 48, 50, 48, 48, 48, 48, 70, 68, 48, 67, 57, 70, 55, 70, 54, 67, 70, 52, 54, 50, 70, 52, 70, 55, 48, 52, 48, 53, 68, 52, 65, 51, 51, 49, 56, 70, 48, 70, 54, 13, 10, 58, 49, 48, 50, 48, 51, 48, 48, 48, 52, 57, 53, 68, 51, 49, 70, 68, 52, 48, 53, 50, 52, 49, 57, 51, 48, 50, 68, 48, 65, 57, 70, 55, 69, 65, 67, 70, 66, 52, 69, 48, 65, 55, 13, 10, 58, 49, 48, 50, 48, 52, 48, 48, 48, 65, 54, 57, 53, 57, 55, 57, 53, 56, 55, 57, 53, 55, 55, 57, 53, 54, 55, 57, 53, 66, 65, 57, 53, 67, 57, 70, 55, 48, 48, 57, 55, 53, 70, 13, 10, 58, 49, 48, 50, 48, 53, 48, 48, 48, 54, 49, 48, 53, 55, 49, 48, 53, 48, 56, 57, 53, 57, 66, 48, 49, 65, 67, 48, 49, 48, 65, 50, 69, 48, 54, 57, 52, 53, 55, 57, 53, 48, 48, 13, 10, 58, 49, 48, 50, 48, 54, 48, 48, 48, 52, 55, 57, 53, 51, 55, 57, 53, 50, 55, 57, 53, 66, 65, 57, 53, 67, 57, 70, 55, 54, 50, 48, 70, 55, 51, 49, 70, 56, 52, 49, 70, 53, 55, 13, 10, 58, 48, 65, 50, 48, 55, 48, 48, 48, 57, 53, 49, 70, 65, 48, 49, 68, 48, 56, 57, 53, 70, 56, 57, 52, 70, 70, 67, 70, 70, 69, 13, 10, 58, 49, 48, 50, 48, 55, 65, 48, 48, 52, 50, 52, 70, 52, 49, 53, 50, 52, 52, 53, 52, 52, 53, 53, 51, 53, 52, 48, 48, 48, 68, 52, 50, 54, 70, 54, 49, 55, 50, 54, 52, 66, 57, 13, 10, 58, 49, 48, 50, 48, 56, 65, 48, 48, 55, 52, 54, 53, 55, 51, 55, 52, 48, 65, 53, 54, 54, 53, 55, 50, 50, 69, 50, 48, 50, 53, 55, 51, 48, 65, 48, 48, 51, 48, 50, 69, 48, 49, 13, 10, 58, 49, 48, 50, 48, 57, 65, 48, 48, 51, 57, 51, 57, 51, 53, 48, 48, 52, 57, 54, 69, 54, 57, 55, 52, 54, 57, 54, 49, 54, 67, 54, 57, 55, 65, 54, 57, 54, 69, 54, 55, 65, 52, 13, 10, 58, 49, 48, 50, 48, 65, 65, 48, 48, 48, 65, 54, 54, 55, 50, 54, 53, 55, 49, 55, 53, 54, 53, 54, 69, 54, 51, 55, 57, 48, 65, 54, 68, 54, 53, 54, 49, 55, 51, 55, 53, 50, 53, 13, 10, 58, 49, 48, 50, 48, 66, 65, 48, 48, 55, 50, 54, 53, 54, 68, 54, 53, 54, 69, 55, 52, 48, 48, 52, 51, 54, 70, 54, 69, 54, 69, 54, 53, 54, 51, 55, 52, 48, 65, 53, 48, 54, 55, 13, 10, 58, 49, 48, 50, 48, 67, 65, 48, 48, 52, 52, 51, 48, 50, 48, 55, 52, 54, 70, 50, 48, 53, 51, 52, 51, 52, 67, 50, 48, 54, 49, 54, 69, 54, 52, 48, 65, 53, 48, 52, 52, 57, 67, 13, 10, 58, 49, 48, 50, 48, 68, 65, 48, 48, 51, 49, 50, 48, 55, 52, 54, 70, 50, 48, 53, 51, 52, 52, 52, 49, 50, 49, 48, 48, 48, 68, 53, 48, 52, 52, 51, 48, 50, 48, 67, 56, 70, 48, 13, 10, 58, 49, 48, 50, 48, 69, 65, 48, 48, 67, 55, 50, 48, 53, 51, 52, 51, 52, 67, 48, 65, 53, 48, 52, 52, 51, 49, 50, 48, 67, 56, 67, 55, 50, 48, 53, 51, 52, 52, 52, 49, 65, 55, 13, 10, 58, 49, 48, 50, 48, 70, 65, 48, 48, 48, 65, 48, 48, 52, 51, 54, 70, 54, 69, 54, 69, 54, 53, 54, 51, 55, 52, 48, 65, 53, 48, 52, 52, 51, 49, 50, 48, 55, 52, 54, 70, 51, 48, 13, 10, 58, 49, 48, 50, 49, 48, 65, 48, 48, 50, 48, 53, 51, 52, 52, 52, 49, 50, 49, 48, 48, 48, 68, 52, 51, 54, 70, 54, 69, 54, 69, 54, 53, 54, 51, 55, 52, 48, 65, 53, 48, 55, 66, 13, 10, 58, 49, 48, 50, 49, 49, 65, 48, 48, 52, 52, 51, 49, 50, 48, 67, 56, 67, 55, 50, 48, 53, 51, 52, 52, 52, 49, 48, 65, 48, 48, 52, 51, 54, 70, 54, 69, 54, 69, 54, 53, 57, 67, 13, 10, 58, 49, 48, 50, 49, 50, 65, 48, 48, 54, 51, 55, 52, 48, 65, 53, 48, 52, 52, 51, 48, 50, 48, 55, 52, 54, 70, 50, 48, 53, 51, 52, 51, 52, 67, 50, 49, 48, 48, 48, 68, 67, 68, 13, 10, 58, 49, 48, 50, 49, 51, 65, 48, 48, 52, 51, 54, 70, 54, 69, 54, 69, 54, 53, 54, 51, 55, 52, 48, 65, 53, 48, 52, 52, 51, 48, 50, 48, 67, 56, 67, 55, 50, 48, 53, 51, 68, 66, 13, 10, 58, 49, 48, 50, 49, 52, 65, 48, 48, 52, 51, 52, 67, 48, 65, 48, 48, 52, 57, 54, 69, 54, 57, 55, 52, 54, 57, 54, 49, 54, 67, 54, 57, 55, 65, 54, 57, 54, 69, 54, 55, 48, 49, 13, 10, 58, 49, 48, 50, 49, 53, 65, 48, 48, 50, 48, 53, 50, 53, 52, 52, 51, 50, 69, 50, 69, 50, 69, 48, 48, 48, 68, 52, 57, 54, 69, 54, 57, 55, 52, 54, 57, 54, 49, 54, 67, 48, 66, 13, 10, 58, 49, 48, 50, 49, 54, 65, 48, 48, 54, 57, 55, 65, 54, 57, 54, 69, 54, 55, 50, 48, 53, 50, 53, 52, 52, 51, 48, 65, 48, 65, 48, 48, 52, 68, 54, 49, 54, 66, 54, 53, 65, 57, 13, 10, 58, 49, 48, 50, 49, 55, 65, 48, 48, 50, 48, 55, 51, 55, 53, 55, 50, 54, 53, 50, 48, 55, 52, 54, 56, 54, 49, 55, 52, 48, 65, 53, 50, 53, 52, 52, 51, 50, 68, 52, 70, 51, 54, 13, 10, 58, 49, 48, 50, 49, 56, 65, 48, 48, 53, 53, 53, 52, 50, 48, 54, 57, 55, 51, 48, 65, 54, 51, 54, 70, 54, 69, 54, 69, 54, 53, 54, 51, 55, 52, 54, 53, 54, 52, 50, 48, 67, 51, 13, 10, 58, 49, 48, 50, 49, 57, 65, 48, 48, 55, 52, 54, 70, 50, 48, 53, 48, 52, 52, 51, 51, 50, 49, 48, 48, 48, 68, 52, 51, 54, 70, 54, 69, 54, 69, 54, 53, 54, 51, 55, 52, 55, 51, 13, 10, 58, 49, 48, 50, 49, 65, 65, 48, 48, 48, 65, 53, 50, 53, 52, 52, 51, 50, 68, 52, 70, 53, 53, 53, 52, 50, 48, 67, 56, 67, 55, 50, 48, 53, 48, 52, 52, 51, 51, 48, 65, 54, 68, 13, 10, 58, 49, 48, 50, 49, 66, 65, 48, 48, 48, 48, 52, 68, 54, 53, 54, 49, 55, 51, 55, 53, 55, 50, 54, 57, 54, 69, 54, 55, 50, 48, 52, 51, 53, 48, 53, 53, 48, 65, 54, 54, 70, 50, 13, 10, 58, 49, 48, 50, 49, 67, 65, 48, 48, 55, 50, 54, 53, 55, 49, 55, 53, 54, 53, 54, 69, 54, 51, 55, 57, 50, 69, 50, 69, 50, 69, 48, 48, 48, 68, 52, 68, 54, 53, 54, 49, 69, 70, 13, 10, 58, 49, 48, 50, 49, 68, 65, 48, 48, 55, 51, 55, 53, 55, 50, 54, 57, 54, 69, 54, 55, 50, 69, 50, 69, 50, 69, 48, 65, 48, 65, 48, 48, 48, 68, 53, 51, 54, 49, 54, 68, 57, 49, 13, 10, 58, 49, 48, 50, 49, 69, 65, 48, 48, 55, 48, 54, 67, 54, 57, 54, 69, 54, 55, 50, 48, 50, 53, 54, 52, 50, 70, 50, 53, 54, 52, 48, 65, 48, 48, 50, 53, 54, 67, 55, 53, 53, 65, 13, 10, 58, 49, 48, 50, 49, 70, 65, 48, 48, 50, 48, 52, 56, 55, 65, 48, 65, 48, 48, 48, 68, 52, 54, 55, 50, 54, 53, 55, 49, 55, 53, 54, 53, 54, 69, 54, 51, 55, 57, 51, 65, 70, 48, 13, 10, 58, 49, 48, 50, 50, 48, 65, 48, 48, 48, 65, 50, 48, 50, 48, 50, 53, 54, 67, 55, 53, 50, 48, 52, 56, 55, 65, 48, 65, 48, 48, 52, 52, 54, 57, 55, 51, 54, 49, 54, 50, 65, 53, 13, 10, 58, 49, 48, 50, 50, 49, 65, 48, 48, 54, 67, 54, 53, 50, 48, 52, 67, 52, 53, 52, 52, 55, 51, 50, 48, 54, 54, 54, 70, 55, 50, 48, 65, 53, 48, 52, 70, 53, 50, 53, 52, 67, 53, 13, 10, 58, 49, 48, 50, 50, 50, 65, 48, 48, 52, 50, 50, 48, 54, 49, 54, 69, 54, 52, 50, 48, 55, 50, 54, 53, 54, 67, 54, 53, 54, 49, 55, 51, 54, 53, 48, 65, 54, 50, 55, 53, 50, 68, 13, 10, 58, 49, 48, 50, 50, 51, 65, 48, 48, 55, 52, 55, 52, 54, 70, 54, 69, 55, 51, 50, 49, 48, 48, 48, 68, 52, 54, 55, 49, 50, 48, 50, 53, 54, 67, 55, 53, 50, 48, 52, 56, 69, 57, 13, 10, 58, 49, 48, 50, 50, 52, 65, 48, 48, 55, 65, 48, 65, 52, 52, 54, 57, 55, 51, 54, 49, 54, 50, 54, 67, 54, 53, 50, 48, 52, 67, 52, 53, 52, 52, 55, 51, 50, 48, 52, 50, 56, 50, 13, 10, 58, 49, 48, 50, 50, 53, 65, 48, 48, 48, 65, 48, 48, 52, 52, 54, 53, 55, 52, 54, 49, 54, 51, 54, 56, 50, 48, 53, 50, 53, 52, 52, 51, 50, 68, 52, 70, 53, 53, 53, 52, 70, 51, 13, 10, 58, 49, 48, 50, 50, 54, 65, 48, 48, 48, 65, 54, 54, 55, 50, 54, 70, 54, 68, 50, 48, 53, 48, 52, 52, 51, 51, 50, 49, 48, 48, 48, 68, 52, 54, 55, 49, 50, 48, 50, 53, 57, 53, 13, 10, 58, 49, 48, 50, 50, 55, 65, 48, 48, 54, 67, 55, 53, 50, 48, 52, 56, 55, 65, 48, 65, 52, 52, 54, 53, 55, 52, 54, 49, 54, 51, 54, 56, 50, 48, 53, 50, 53, 52, 52, 51, 51, 53, 13, 10, 58, 49, 48, 50, 50, 56, 65, 48, 48, 50, 68, 52, 70, 53, 53, 53, 52, 48, 65, 48, 48, 53, 48, 55, 50, 54, 53, 55, 51, 55, 51, 50, 48, 54, 49, 54, 69, 55, 57, 50, 48, 56, 48, 13, 10, 58, 49, 48, 50, 50, 57, 65, 48, 48, 54, 50, 55, 53, 55, 52, 55, 52, 54, 70, 54, 69, 48, 65, 54, 70, 54, 69, 50, 48, 53, 48, 52, 70, 53, 50, 53, 52, 52, 50, 50, 48, 69, 65, 13, 10, 58, 49, 48, 50, 50, 65, 65, 48, 48, 55, 52, 54, 70, 48, 65, 54, 51, 54, 70, 54, 69, 55, 52, 54, 57, 54, 69, 55, 53, 54, 53, 50, 49, 48, 48, 48, 68, 52, 54, 55, 49, 69, 68, 13, 10, 58, 49, 48, 50, 50, 66, 65, 48, 48, 50, 48, 50, 53, 54, 67, 55, 53, 50, 48, 52, 56, 55, 65, 48, 65, 53, 48, 55, 50, 54, 53, 55, 51, 55, 51, 50, 48, 54, 50, 55, 52, 70, 70, 13, 10, 58, 49, 48, 50, 50, 67, 65, 48, 48, 54, 69, 50, 48, 53, 48, 52, 70, 53, 50, 53, 52, 52, 50, 48, 65, 48, 48, 52, 69, 54, 70, 55, 55, 50, 48, 54, 53, 54, 69, 54, 49, 53, 68, 13, 10, 58, 49, 48, 50, 50, 68, 65, 48, 48, 54, 50, 54, 67, 54, 53, 50, 48, 55, 52, 54, 56, 54, 53, 48, 65, 52, 67, 52, 53, 52, 52, 55, 51, 50, 48, 54, 54, 54, 70, 55, 50, 65, 55, 13, 10, 58, 49, 48, 50, 50, 69, 65, 48, 48, 50, 48, 54, 49, 54, 67, 54, 67, 50, 48, 55, 48, 54, 70, 55, 50, 55, 52, 55, 51, 48, 65, 52, 67, 52, 53, 52, 52, 55, 51, 50, 48, 67, 49, 13, 10, 58, 49, 48, 50, 50, 70, 65, 48, 48, 55, 51, 54, 56, 54, 70, 55, 53, 54, 67, 54, 52, 50, 48, 54, 50, 54, 53, 50, 48, 54, 67, 54, 57, 55, 52, 48, 65, 54, 54, 54, 70, 49, 54, 13, 10, 58, 49, 48, 50, 51, 48, 65, 48, 48, 55, 50, 50, 48, 54, 49, 54, 50, 54, 70, 55, 53, 55, 52, 50, 48, 51, 53, 55, 51, 54, 53, 54, 51, 48, 65, 50, 48, 54, 54, 54, 70, 56, 55, 13, 10, 58, 49, 48, 50, 51, 49, 65, 48, 48, 54, 67, 54, 67, 54, 70, 55, 55, 50, 48, 55, 52, 54, 53, 55, 56, 55, 52, 50, 48, 52, 67, 52, 51, 52, 52, 48, 48, 48, 68, 52, 53, 67, 66, 13, 10, 58, 49, 48, 50, 51, 50, 65, 48, 48, 54, 69, 54, 49, 54, 50, 54, 67, 54, 53, 50, 48, 52, 67, 52, 53, 52, 52, 55, 51, 48, 65, 54, 54, 54, 70, 55, 50, 50, 48, 53, 48, 55, 56, 13, 10, 58, 49, 48, 50, 51, 51, 65, 48, 48, 52, 70, 53, 50, 53, 52, 50, 53, 54, 51, 48, 65, 48, 48, 48, 68, 52, 53, 54, 69, 54, 49, 54, 50, 54, 67, 54, 53, 50, 48, 52, 67, 52, 67, 13, 10, 58, 49, 48, 50, 51, 52, 65, 48, 48, 52, 53, 52, 52, 55, 51, 48, 65, 54, 54, 54, 70, 55, 50, 50, 48, 53, 48, 52, 70, 53, 50, 53, 52, 52, 54, 50, 70, 52, 55, 48, 65, 48, 66, 13, 10, 58, 49, 48, 50, 51, 53, 65, 48, 48, 48, 48, 48, 68, 52, 53, 54, 69, 54, 49, 54, 50, 54, 67, 54, 53, 50, 48, 52, 67, 52, 53, 52, 52, 55, 51, 48, 65, 54, 54, 54, 70, 68, 56, 13, 10, 58, 49, 48, 50, 51, 54, 65, 48, 48, 55, 50, 50, 48, 53, 48, 52, 70, 53, 50, 53, 52, 52, 56, 50, 70, 52, 65, 48, 65, 48, 48, 48, 68, 52, 53, 54, 69, 54, 49, 54, 50, 51, 69, 13, 10, 58, 49, 48, 50, 51, 55, 65, 48, 48, 54, 67, 54, 53, 50, 48, 52, 67, 52, 53, 52, 52, 55, 51, 48, 65, 54, 54, 54, 70, 55, 50, 50, 48, 53, 48, 52, 70, 53, 50, 53, 52, 54, 52, 13, 10, 58, 49, 48, 50, 51, 56, 65, 48, 48, 52, 66, 50, 70, 52, 67, 48, 65, 48, 48, 48, 68, 52, 52, 54, 53, 55, 52, 54, 49, 54, 51, 54, 56, 50, 48, 52, 57, 51, 50, 52, 51, 51, 70, 13, 10, 58, 49, 48, 50, 51, 57, 65, 48, 48, 50, 48, 54, 54, 55, 50, 54, 70, 54, 68, 48, 65, 53, 48, 52, 52, 51, 48, 50, 49, 48, 65, 48, 48, 48, 68, 52, 52, 54, 53, 55, 52, 51, 67, 13, 10, 58, 49, 48, 50, 51, 65, 65, 48, 48, 54, 49, 54, 51, 54, 56, 50, 48, 52, 57, 51, 50, 52, 51, 50, 48, 54, 54, 55, 50, 54, 70, 54, 68, 48, 65, 53, 48, 52, 52, 51, 49, 55, 54, 13, 10, 58, 49, 48, 50, 51, 66, 65, 48, 48, 50, 49, 48, 65, 48, 48, 48, 68, 52, 52, 54, 53, 55, 52, 54, 49, 54, 51, 54, 56, 50, 48, 52, 57, 51, 50, 52, 51, 50, 48, 54, 54, 50, 69, 13, 10, 58, 49, 48, 50, 51, 67, 65, 48, 48, 55, 50, 54, 70, 54, 68, 48, 65, 53, 48, 52, 52, 51, 48, 50, 48, 50, 54, 50, 48, 53, 48, 52, 52, 51, 49, 50, 49, 48, 65, 48, 48, 57, 49, 13, 10, 58, 49, 48, 50, 51, 68, 65, 48, 48, 48, 68, 53, 55, 54, 49, 54, 57, 55, 52, 50, 48, 54, 54, 54, 70, 55, 50, 50, 48, 51, 53, 55, 51, 50, 49, 48, 65, 48, 65, 48, 48, 69, 68, 13, 10, 58, 49, 48, 50, 51, 69, 65, 48, 48, 48, 68, 52, 67, 52, 53, 52, 52, 50, 48, 55, 52, 54, 53, 55, 51, 55, 52, 48, 65, 50, 48, 54, 54, 54, 57, 54, 69, 54, 57, 55, 51, 68, 69, 13, 10, 58, 49, 48, 50, 51, 70, 65, 48, 48, 54, 56, 54, 53, 54, 52, 50, 49, 48, 65, 48, 48, 52, 52, 54, 57, 55, 51, 54, 49, 54, 50, 54, 67, 54, 53, 50, 48, 52, 67, 52, 53, 49, 50, 13, 10, 58, 49, 48, 50, 52, 48, 65, 48, 48, 52, 52, 55, 51, 48, 65, 54, 70, 54, 69, 50, 48, 53, 48, 52, 70, 53, 50, 53, 52, 52, 54, 50, 70, 52, 55, 48, 48, 48, 68, 52, 52, 66, 50, 13, 10, 58, 49, 48, 50, 52, 49, 65, 48, 48, 54, 57, 55, 51, 54, 49, 54, 50, 54, 67, 54, 53, 50, 48, 52, 67, 52, 53, 52, 52, 55, 51, 48, 65, 54, 70, 54, 69, 50, 48, 53, 48, 56, 51, 13, 10, 58, 49, 48, 50, 52, 50, 65, 48, 48, 52, 70, 53, 50, 53, 52, 52, 54, 50, 70, 52, 55, 48, 65, 48, 48, 53, 51, 54, 53, 55, 52, 50, 48, 52, 65, 51, 49, 51, 53, 50, 48, 67, 66, 13, 10, 58, 49, 48, 50, 52, 51, 65, 48, 48, 55, 52, 54, 70, 50, 48, 53, 48, 52, 54, 51, 48, 48, 65, 54, 49, 54, 69, 54, 52, 50, 48, 55, 52, 55, 53, 55, 50, 54, 69, 50, 48, 56, 51, 13, 10, 58, 49, 48, 50, 52, 52, 65, 48, 48, 55, 52, 54, 56, 54, 53, 48, 65, 55, 52, 55, 50, 54, 57, 54, 68, 54, 68, 54, 53, 55, 50, 50, 48, 55, 52, 54, 70, 50, 48, 54, 68, 65, 55, 13, 10, 58, 49, 48, 50, 52, 53, 65, 48, 48, 54, 49, 55, 56, 54, 57, 54, 68, 55, 53, 54, 68, 48, 65, 48, 65, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 55, 53, 13, 10, 58, 49, 48, 50, 52, 54, 65, 48, 48, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 48, 48, 48, 68, 53, 51, 54, 53, 55, 52, 53, 48, 13, 10, 58, 49, 48, 50, 52, 55, 65, 48, 48, 50, 48, 52, 65, 51, 49, 51, 53, 50, 48, 55, 52, 54, 70, 50, 48, 53, 48, 52, 54, 51, 48, 48, 65, 53, 52, 55, 50, 54, 57, 54, 68, 70, 51, 13, 10, 58, 49, 48, 50, 52, 56, 65, 48, 48, 54, 68, 54, 53, 55, 50, 50, 48, 55, 52, 54, 70, 50, 48, 54, 68, 54, 49, 55, 56, 48, 65, 48, 48, 52, 69, 54, 70, 55, 55, 50, 48, 51, 55, 13, 10, 58, 49, 48, 50, 52, 57, 65, 48, 48, 55, 52, 55, 53, 55, 50, 54, 69, 50, 48, 55, 52, 54, 56, 54, 53, 48, 65, 55, 52, 55, 50, 54, 57, 54, 68, 54, 68, 54, 53, 55, 50, 70, 69, 13, 10, 58, 49, 48, 50, 52, 65, 65, 48, 48, 50, 48, 55, 52, 54, 70, 50, 48, 54, 68, 54, 57, 54, 69, 54, 57, 54, 68, 55, 53, 54, 68, 48, 65, 50, 68, 50, 68, 50, 68, 50, 68, 52, 53, 13, 10, 58, 49, 48, 50, 52, 66, 65, 48, 48, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 50, 68, 48, 48, 54, 70, 13, 10, 58, 49, 48, 50, 52, 67, 65, 48, 48, 48, 68, 53, 51, 54, 53, 55, 52, 50, 48, 52, 65, 51, 49, 51, 53, 50, 48, 55, 52, 54, 70, 50, 48, 53, 48, 52, 54, 51, 48, 48, 65, 48, 54, 13, 10, 58, 49, 48, 50, 52, 68, 65, 48, 48, 53, 52, 55, 50, 54, 57, 54, 68, 54, 68, 54, 53, 55, 50, 50, 48, 55, 52, 54, 70, 50, 48, 54, 68, 54, 57, 54, 69, 48, 65, 48, 48, 65, 49, 13, 10, 58, 49, 48, 50, 52, 69, 65, 48, 48, 48, 68, 52, 54, 55, 50, 54, 53, 55, 49, 55, 53, 54, 53, 54, 69, 54, 51, 55, 57, 48, 65, 54, 55, 54, 53, 54, 69, 54, 53, 55, 50, 48, 56, 13, 10, 58, 49, 48, 50, 52, 70, 65, 48, 48, 54, 49, 55, 52, 54, 57, 54, 70, 54, 69, 48, 65, 48, 48, 52, 69, 54, 70, 55, 55, 50, 48, 55, 51, 54, 57, 54, 55, 54, 69, 54, 49, 52, 55, 13, 10, 58, 49, 48, 50, 53, 48, 65, 48, 48, 54, 67, 55, 51, 48, 65, 54, 49, 55, 50, 54, 53, 50, 48, 54, 55, 54, 53, 54, 69, 54, 53, 55, 50, 54, 49, 55, 52, 54, 53, 54, 52, 68, 49, 13, 10, 58, 49, 48, 50, 53, 49, 65, 48, 48, 48, 65, 54, 70, 54, 69, 50, 48, 53, 48, 52, 67, 51, 51, 50, 48, 54, 49, 54, 69, 54, 52, 50, 48, 53, 48, 52, 67, 51, 52, 48, 65, 56, 69, 13, 10, 58, 49, 48, 50, 53, 50, 65, 48, 48, 52, 51, 54, 56, 54, 49, 54, 69, 54, 55, 54, 53, 50, 48, 54, 54, 55, 50, 54, 53, 55, 49, 55, 53, 54, 53, 54, 69, 54, 51, 54, 57, 55, 57, 13, 10, 58, 49, 48, 50, 53, 51, 65, 48, 48, 54, 53, 55, 51, 48, 65, 55, 55, 54, 57, 55, 52, 54, 56, 50, 48, 55, 52, 55, 50, 54, 57, 54, 68, 54, 68, 54, 53, 55, 50, 48, 48, 68, 51, 13, 10, 58, 49, 48, 50, 53, 52, 65, 48, 48, 48, 68, 52, 54, 55, 50, 54, 53, 55, 49, 55, 53, 54, 53, 54, 69, 54, 51, 55, 57, 51, 65, 48, 65, 50, 48, 50, 48, 50, 48, 50, 48, 70, 69, 13, 10, 58, 49, 48, 50, 53, 53, 65, 48, 48, 50, 48, 50, 48, 50, 48, 50, 48, 50, 48, 50, 53, 55, 51, 52, 56, 55, 65, 48, 65, 48, 48, 52, 57, 54, 69, 55, 54, 54, 49, 54, 67, 55, 51, 13, 10, 58, 49, 48, 50, 53, 54, 65, 48, 48, 54, 57, 54, 52, 50, 48, 54, 57, 54, 69, 55, 52, 54, 53, 55, 50, 55, 50, 55, 53, 55, 48, 55, 52, 48, 65, 54, 70, 54, 51, 54, 51, 52, 56, 13, 10, 58, 49, 48, 50, 53, 55, 65, 48, 48, 55, 53, 55, 50, 54, 53, 54, 52, 50, 49, 48, 48, 50, 48, 50, 48, 51, 49, 50, 48, 50, 48, 48, 48, 50, 48, 51, 49, 51, 48, 50, 48, 50, 69, 13, 10, 58, 49, 48, 50, 53, 56, 65, 48, 48, 50, 48, 48, 48, 51, 49, 51, 48, 51, 48, 50, 48, 50, 48, 48, 48, 50, 48, 50, 48, 51, 49, 50, 48, 54, 66, 48, 48, 50, 48, 51, 49, 48, 51, 13, 10, 58, 49, 48, 50, 53, 57, 65, 48, 48, 51, 48, 50, 48, 54, 66, 48, 48, 51, 49, 51, 48, 51, 48, 50, 48, 54, 66, 48, 48, 50, 48, 50, 48, 51, 49, 50, 48, 52, 68, 48, 48, 55, 67, 13, 10, 58, 49, 48, 50, 53, 65, 65, 48, 48, 48, 52, 49, 50, 55, 65, 48, 54, 48, 55, 48, 51, 68, 52, 51, 48, 48, 67, 48, 55, 48, 50, 49, 48, 50, 55, 49, 50, 48, 55, 48, 49, 49, 55, 13, 10, 58, 49, 48, 50, 53, 66, 65, 48, 48, 52, 48, 49, 70, 49, 56, 48, 55, 48, 49, 50, 48, 48, 51, 49, 69, 48, 55, 48, 49, 53, 48, 48, 48, 50, 52, 48, 55, 48, 49, 48, 56, 67, 53, 13, 10, 58, 49, 48, 50, 53, 67, 65, 48, 48, 48, 48, 50, 65, 48, 55, 48, 55, 55, 56, 49, 52, 48, 53, 48, 53, 48, 53, 50, 48, 49, 69, 49, 48, 70, 70, 54, 48, 48, 55, 53, 53, 50, 53, 13, 10, 58, 49, 48, 50, 53, 68, 65, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 52, 48, 56, 48, 48, 48, 48, 48, 48, 48, 48, 50, 48, 55, 70, 50, 52, 13, 10, 58, 48, 54, 50, 53, 69, 65, 48, 48, 48, 53, 48, 55, 48, 54, 48, 56, 70, 66, 48, 48, 68, 54, 13, 10, 58, 48, 48, 48, 48, 48, 48, 48, 49, 70, 70, 13, 10]);
Module['FS_createDataFile']('/', 'test.hex', fileData0, true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;




// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 362960;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([86,104,5,0,255,33,0,0,255,255,1,0,255,15,0,0,4,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([16,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,30,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,40,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,12,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,0,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,1,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,28,0,0,105,30,0,0,4,0,0,0,61,22,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,106,16,0,0,106,18,0,0,5,0,0,0,61,24,0,0,60,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,4,0,0,0,106,20,0,0,106,22,0,0,6,0,0,0,61,26,0,0,60,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,5,0,0,0,106,24,0,0,106,26,0,0,7,0,0,0,61,28,0,0,60,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,6,0,0,0,106,28,0,0,106,30,0,0,8,0,0,0,61,30,0,0,60,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,9,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,46,0,45,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,49,0,48,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,52,0,51,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,2,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,5,1,4,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,8,1,7,1,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,11,1,10,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,25,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,101,16,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,0,0,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,36,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,101,18,0,0,214,0,208,0,209,0,210,0,209,24,0,0,209,22,0,0,0,0,0,0,0,0,0,0,210,50,0,0,209,20,0,0,212,0,213,0,51,0,0,0,209,30,0,0,208,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,209,28,0,0,208,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,209,26,0,0,208,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,101,20,0,0,54,1,48,1,49,1,50,1,49,25,0,0,49,23,0,0,0,0,0,0,0,0,0,0,50,51,0,0,49,21,0,0,52,1,53,1,54,0,0,0,49,31,0,0,48,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,49,29,0,0,48,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,49,27,0,0,48,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,123,22,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,2,0,64,0,2,0,72,0,2,0,80,0,2,0,88,0,2,0,96,0,2,0,104,0,2,0,112,0,2,0,120,0,83,64,64,0,83,64,72,0,67,70,64,0,67,70,72,0,83,80,80,0,83,80,88,0,67,86,80,0,67,86,88,0,11,72,64,0,11,72,72,0,11,72,80,0,11,72,88,0,11,72,96,0,11,72,104,0,11,72,112,0,11,72,120,0,11,80,64,0,11,80,72,0,11,80,80,0,11,80,88,0,11,80,96,0,11,80,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,30,0,0,0,0,0,0,0,0,0,0,22,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,52,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,24,0,0,129,28,0,0,17,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,26,0,0,0,0,0,0,0,0,0,0,18,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,28,0,0,0,0,0,0,0,0,0,0,19,0,0,0,111,22,0,0,54,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,141,0,128,52,0,0,37,30,0,0,0,0,0,0,0,0,0,0,20,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,148,0,150,0,149,0,151,0,144,16,0,0,144,18,0,0,145,22,0,0,145,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,16,0,0,145,18,0,0,145,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,30,0,0,145,28,0,0,32,0,0,0,113,18,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,153,0,144,60,0,0,46,22,0,0,0,0,0,0,0,0,0,0,33,0,0,0,113,20,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,155,0,144,56,0,0,46,24,0,0,0,0,0,0,0,0,0,0,34,0,0,0,113,22,0,0,56,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,144,52,0,0,46,26,0,0,0,0,0,0,0,0,0,0,35,0,0,0,113,16,0,0,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,113,26,0,0,56,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,101,24,0,0,164,0,166,0,165,0,167,0,160,16,0,0,160,18,0,0,161,22,0,0,161,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,16,0,0,161,18,0,0,161,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,17,0,0,161,28,0,0,42,0,0,0,114,18,0,0,57,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,0,169,0,160,60,0,0,2,23,0,0,0,0,0,0,0,0,0,0,43,0,0,0,114,20,0,0,57,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,171,0,160,56,0,0,2,25,0,0,0,0,0,0,0,0,0,0,44,0,0,0,114,22,0,0,57,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,160,52,0,0,2,27,0,0,0,0,0,0,0,0,0,0,45,0,0,0,114,16,0,0,57,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,114,26,0,0,57,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,101,26,0,0,36,1,38,1,37,1,39,1,32,17,0,0,32,19,0,0,33,23,0,0,33,25,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,17,0,0,33,19,0,0,33,21,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,19,0,0,33,29,0,0,47,0,0,0,115,18,0,0,58,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,1,41,1,32,61,0,0,11,23,0,0,0,0,0,0,0,0,0,0,48,0,0,0,115,20,0,0,58,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,1,43,1,32,57,0,0,11,25,0,0,0,0,0,0,0,0,0,0,49,0,0,0,115,22,0,0,58,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,1,45,1,32,53,0,0,11,27,0,0,0,0,0,0,0,0,0,0,50,0,0,0,115,16,0,0,58,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,115,26,0,0,58,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,24,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,39,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,97,104,5,0,255,33,0,0,255,255,1,0,255,15,0,0,4,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+8349);
/* memory initializer */ allocate([16,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,30,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,40,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,12,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,0,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,1,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,28,0,0,105,30,0,0,4,0,0,0,61,22,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,106,16,0,0,106,18,0,0,5,0,0,0,61,24,0,0,60,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,4,0,0,0,106,20,0,0,106,22,0,0,6,0,0,0,61,26,0,0,60,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,5,0,0,0,106,24,0,0,106,26,0,0,7,0,0,0,61,28,0,0,60,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,6,0,0,0,106,28,0,0,106,30,0,0,8,0,0,0,61,30,0,0,60,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,9,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,46,0,45,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,49,0,48,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,52,0,51,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,25,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,101,16,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,0,0,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,36,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,30,0,0,0,0,0,0,0,0,0,0,22,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,52,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,24,0,0,129,28,0,0,17,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,26,0,0,0,0,0,0,0,0,0,0,18,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,28,0,0,0,0,0,0,0,0,0,0,19,0,0,0,111,22,0,0,54,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,141,0,128,52,0,0,37,30,0,0,0,0,0,0,0,0,0,0,20,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,148,0,150,0,149,0,151,0,144,16,0,0,144,18,0,0,145,22,0,0,145,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,16,0,0,145,18,0,0,145,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,30,0,0,145,28,0,0,32,0,0,0,113,18,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,153,0,144,60,0,0,46,22,0,0,0,0,0,0,0,0,0,0,33,0,0,0,113,20,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,155,0,144,56,0,0,46,24,0,0,0,0,0,0,0,0,0,0,34,0,0,0,113,22,0,0,56,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,144,52,0,0,46,26,0,0,0,0,0,0,0,0,0,0,35,0,0,0,113,16,0,0,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,113,26,0,0,56,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,24,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,39,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,108,104,5,0,255,64,0,0,255,255,1,0,255,15,0,0,4,30,151,5,248,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+25093);
/* memory initializer */ allocate([16,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,25,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,27,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,8,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,4,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,5,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,6,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,7,0,0,0,104,22,0,0,59,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,192,18,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,20,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,100,24,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,200,18,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,28,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,17,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,8,5,0,0,9,5,0,0,10,5,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,28,0,0,129,28,0,0,13,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,43,26,0,0,0,0,0,0,0,0,0,0,14,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,43,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,43,30,0,0,0,0,0,0,0,0,0,0,10,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,101,16,0,0,148,0,150,0,149,0,151,0,144,16,0,0,144,18,0,0,145,22,0,0,145,24,0,0,0,0,16,1,0,0,8,5,0,0,9,5,0,0,10,5,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,16,0,0,145,18,0,0,145,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,26,0,0,145,28,0,0,32,0,0,0,113,18,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,153,0,144,60,0,0,37,28,0,0,0,0,0,0,0,0,0,0,33,0,0,0,113,20,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,155,0,144,56,0,0,37,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,0,113,16,0,0,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,113,26,0,0,56,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,19,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,26,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,131,104,5,0,255,16,0,0,255,255,1,0,255,15,0,0,4,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,12], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+39405);
/* memory initializer */ allocate([16,63,62,61,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,22,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,104,0,104,16,0,0,104,18,0,0,104,20,0,0,104,22,0,0,104,24,0,0,104,28,0,0,34,0,0,0,104,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,0,0,0,0,0,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,16,0,0,106,18,0,0,1,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,0,0,0,0,106,20,0,0,106,22,0,0,2,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,1,0,0,0,106,24,0,0,106,26,0,0,3,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,106,28,0,0,106,30,0,0,4,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,90,16,0,0,90,18,0,0,5,0,0,0,89,24,0,0,88,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,4,0,0,0,90,20,0,0,90,22,0,0,6,0,0,0,89,26,0,0,88,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,5,0,0,0,90,24,0,0,90,26,0,0,7,0,0,0,89,28,0,0,88,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,6,0,0,0,90,28,0,0,90,30,0,0,8,0,0,0,89,30,0,0,88,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,59,0,58,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,53,0,52,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,50,0,49,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,35,0,34,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,98,0,97,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,101,0,100,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,44,0,43,0,42,0,149,0,42,24,0,0,42,22,0,0,0,0,0,0,0,0,0,0,149,50,0,0,42,20,0,0,41,0,144,0,18,0,0,0,42,30,0,0,43,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,42,28,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,42,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,156,0,155,0,154,0,157,0,154,24,0,0,154,22,0,0,0,0,0,0,0,0,0,0,157,50,0,0,154,20,0,0,153,0,152,0,30,0,0,0,154,30,0,0,155,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,154,28,0,0,155,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,154,26,0,0,155,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,39,24,0,0,0,0,0,0,39,28,0,0,39,30,0,0,0,0,0,0,0,0,2,0,0,0,0,10,0,0,0,0,0,0,0,0,39,26,0,0,38,0,0,0,38,30,0,0,38,28,0,0,0,0,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,112,38,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,83,28,0,0,83,22,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,22,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,87,18,0,0,86,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,83,56,0,0,56,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,87,16,0,0,86,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,76,0,70,0,77,0,71,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,24,0,0,78,28,0,0,12,0,0,0,87,24,0,0,86,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,26,0,0,0,0,0,0,0,0,0,0,13,0,0,0,87,22,0,0,86,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,56,0,0,56,28,0,0,0,0,0,0,0,0,0,0,24,0,0,0,125,16,0,0,124,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,121,0,79,52,0,0,56,30,0,0,0,0,0,0,0,0,0,0,14,0,0,0,87,20,0,0,86,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,87,26,0,0,86,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,69,28,0,0,69,22,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,87,30,0,0,86,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,69,56,0,0,56,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,87,28,0,0,86,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,136,0,128,0,137,0,129,0,139,16,0,0,139,18,0,0,138,22,0,0,138,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,16,0,0,138,18,0,0,138,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,30,0,0,138,28,0,0,26,0,0,0,125,24,0,0,124,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,0,135,0,139,60,0,0,35,22,0,0,0,0,0,0,0,0,0,0,27,0,0,0,125,22,0,0,124,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,133,0,139,56,0,0,35,24,0,0,0,0,0,0,0,0,0,0,28,0,0,0,125,18,0,0,124,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,131,0,139,52,0,0,35,26,0,0,0,0,0,0,0,0,0,0,29,0,0,0,125,20,0,0,124,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,125,26,0,0,124,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,47,0,45,0,46,0,0,0,45,28,0,0,45,24,0,0,45,16,0,0,45,18,0,0,46,16,0,0,0,0,0,0,17,0,0,0,45,30,0,0,46,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,116,0,113,0,114,0,0,0,115,0,116,20,0,0,116,28,0,0,116,26,0,0,116,24,0,0,116,22,0,0,113,246,1,0,113,48,0,0,33,0,0,0,116,16,0,0,116,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,152,104,5,0,255,65,0,0,255,255,1,0,255,15,0,0,4,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+53365);
/* memory initializer */ allocate([16,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,30,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,40,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,12,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,0,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,1,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,28,0,0,105,30,0,0,4,0,0,0,61,22,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,106,16,0,0,106,18,0,0,5,0,0,0,61,24,0,0,60,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,4,0,0,0,106,20,0,0,106,22,0,0,6,0,0,0,61,26,0,0,60,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,5,0,0,0,106,24,0,0,106,26,0,0,7,0,0,0,61,28,0,0,60,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,6,0,0,0,106,28,0,0,106,30,0,0,8,0,0,0,61,30,0,0,60,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,9,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,46,0,45,0,44,0,10,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,49,0,48,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,52,0,51,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,25,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,101,16,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,0,0,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,36,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,30,0,0,0,0,0,0,0,0,0,0,22,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,52,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,24,0,0,129,28,0,0,17,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,26,0,0,0,0,0,0,0,0,0,0,18,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,28,0,0,0,0,0,0,0,0,0,0,19,0,0,0,111,22,0,0,54,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,141,0,128,52,0,0,37,30,0,0,0,0,0,0,0,0,0,0,20,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,148,0,150,0,149,0,151,0,144,16,0,0,144,18,0,0,145,22,0,0,145,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,16,0,0,145,18,0,0,145,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,30,0,0,145,28,0,0,32,0,0,0,113,18,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,153,0,144,60,0,0,46,22,0,0,0,0,0,0,0,0,0,0,33,0,0,0,113,20,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,155,0,144,56,0,0,46,24,0,0,0,0,0,0,0,0,0,0,34,0,0,0,113,22,0,0,56,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,144,52,0,0,46,26,0,0,0,0,0,0,0,0,0,0,35,0,0,0,113,16,0,0,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,113,26,0,0,56,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,24,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,39,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,166,104,5,0,255,65,0,0,255,255,1,0,255,15,0,0,4,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,18], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+67677);
/* memory initializer */ allocate([16,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,30,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,40,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,12,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,0,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,1,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,28,0,0,105,30,0,0,4,0,0,0,61,22,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,106,16,0,0,106,18,0,0,5,0,0,0,61,24,0,0,60,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,4,0,0,0,106,20,0,0,106,22,0,0,6,0,0,0,61,26,0,0,60,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,5,0,0,0,106,24,0,0,106,26,0,0,7,0,0,0,61,28,0,0,60,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,6,0,0,0,106,28,0,0,106,30,0,0,8,0,0,0,61,30,0,0,60,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,9,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,46,0,45,0,44,0,10,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,49,0,48,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,52,0,51,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,25,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,101,16,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,0,0,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,36,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,30,0,0,0,0,0,0,0,0,0,0,22,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,52,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,24,0,0,129,28,0,0,17,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,26,0,0,0,0,0,0,0,0,0,0,18,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,28,0,0,0,0,0,0,0,0,0,0,19,0,0,0,111,22,0,0,54,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,141,0,128,52,0,0,37,30,0,0,0,0,0,0,0,0,0,0,20,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,148,0,150,0,149,0,151,0,144,16,0,0,144,18,0,0,145,22,0,0,145,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,16,0,0,145,18,0,0,145,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,30,0,0,145,28,0,0,32,0,0,0,113,18,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,153,0,144,60,0,0,46,22,0,0,0,0,0,0,0,0,0,0,33,0,0,0,113,20,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,155,0,144,56,0,0,46,24,0,0,0,0,0,0,0,0,0,0,34,0,0,0,113,22,0,0,56,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,144,52,0,0,46,26,0,0,0,0,0,0,0,0,0,0,35,0,0,0,113,16,0,0,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,113,26,0,0,56,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,24,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,39,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,180,104,5,0,255,4,0,0,255,63,0,0,255,1,0,0,4,30,148,10,248,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81757);
/* memory initializer */ allocate([2,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,25,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,27,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,8,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,4,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,5,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,6,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,7,0,0,0,104,22,0,0,59,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,192,18,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,20,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,100,24,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,200,18,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,28,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,17,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,8,5,0,0,9,5,0,0,10,5,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,28,0,0,129,28,0,0,13,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,43,26,0,0,0,0,0,0,0,0,0,0,14,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,43,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,43,30,0,0,0,0,0,0,0,0,0,0,10,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,19,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,26,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,213,104,5,0,255,4,0,0,255,63,0,0,255,1,0,0,4,30,148,6,248,250,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,22], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+95837);
/* memory initializer */ allocate([2,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,22,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,6,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,25,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,3,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,4,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,5,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,194,22,0,0,194,50,0,0,193,20,0,0,196,0,197,0,18,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,0,0,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,0,0,76,4,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,43,28,0,0,0,0,0,0,0,0,0,0,15,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,16,0,0,129,28,0,0,11,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,18,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,8,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,17,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,24,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,246,104,5,0,95,4,0,0,255,63,0,0,255,1,0,0,4,30,148,3,248,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,25], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+109181);
/* memory initializer */ allocate([2,63,62,61,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,15,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,20,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,0,0,0,0,0,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,85,20,0,0,85,22,0,0,2,0,0,0,91,30,0,0,90,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,84,28,0,0,0,0,0,0,18,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,53,0,52,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,50,0,49,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,44,0,43,0,42,0,64,0,42,24,0,0,42,22,0,0,0,0,0,0,0,0,0,0,64,50,0,0,42,20,0,0,41,0,64,0,11,0,0,0,42,30,0,0,43,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,42,28,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,42,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,0,0,0,0,0,0,2,0,0,0,0,10,0,0,0,0,0,0,0,0,39,26,0,0,38,0,0,0,38,30,0,0,38,28,0,0,0,0,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,160,40,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,76,0,70,0,77,0,71,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,28,0,0,78,28,0,0,6,0,0,0,89,24,0,0,88,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,26,0,0,0,0,0,0,0,0,0,0,7,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,56,0,0,56,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,89,26,0,0,88,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,69,28,0,0,69,22,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,22,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,4,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,89,30,0,0,88,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,69,56,0,0,56,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,89,28,0,0,88,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,47,0,45,0,46,0,0,0,45,28,0,0,45,24,0,0,45,16,0,0,45,18,0,0,46,16,0,0,0,0,0,0,10,0,0,0,45,30,0,0,46,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,86,0,33,0,34,0,0,0,35,0,86,20,0,0,86,28,0,0,86,26,0,0,86,24,0,0,86,22,0,0,33,246,1,0,33,48,0,0,17,0,0,0,86,16,0,0,86,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,59,0,58,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,104,5,0,255,4,0,0,255,63,0,0,255,1,0,0,2,30,148,132,248,248,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,28], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122045);
/* memory initializer */ allocate([2,66,65,64,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,29,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,28,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,30,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,7,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,6,0,0,0,105,20,0,0,105,22,0,0,8,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,105,24,0,0,105,26,0,0,9,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,5,0,0,0,105,28,0,0,105,30,0,0,10,0,0,0,61,22,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,103,111,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,22,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,23,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,24,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,46,0,45,0,44,0,24,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,206,0,205,0,0,0,200,22,0,0,204,30,0,0,204,240,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,210,0,0,0,0,0,0,0,200,18,0,0,200,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,202,16,0,0,201,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,202,18,0,0,201,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,0,0,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,123,22,0,0,1,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,2,0,64,0,2,0,72,0,2,0,80,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,80,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,22,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,43,22,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,46,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,24,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,24,0,0,129,28,0,0,12,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,43,20,0,0,0,0,0,0,0,0,0,0,13,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,40,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,26,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,105,5,0,255,33,0,0,255,255,3,0,255,15,0,0,4,0,0,0,0,0,0,0,91,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,31], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+135029);
/* memory initializer */ allocate([16,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,30,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,40,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,12,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,0,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,1,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,28,0,0,105,30,0,0,4,0,0,0,61,22,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,106,16,0,0,106,18,0,0,5,0,0,0,61,24,0,0,60,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,4,0,0,0,106,20,0,0,106,22,0,0,6,0,0,0,61,26,0,0,60,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,5,0,0,0,106,24,0,0,106,26,0,0,7,0,0,0,61,28,0,0,60,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,6,0,0,0,106,28,0,0,106,30,0,0,8,0,0,0,61,30,0,0,60,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,103,111,105,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,9,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,46,0,45,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,49,0,48,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,52,0,51,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,2,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,5,1,4,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,8,1,7,1,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,11,1,10,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,25,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,101,16,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,0,0,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,36,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,101,18,0,0,214,0,208,0,209,0,210,0,209,24,0,0,209,22,0,0,0,0,0,0,0,0,0,0,210,50,0,0,209,20,0,0,212,0,213,0,51,0,0,0,209,30,0,0,208,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,209,28,0,0,208,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,209,26,0,0,208,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,101,20,0,0,54,1,48,1,49,1,50,1,49,25,0,0,49,23,0,0,0,0,0,0,0,0,0,0,50,51,0,0,49,21,0,0,52,1,53,1,54,0,0,0,49,31,0,0,48,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,49,29,0,0,48,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,49,27,0,0,48,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,123,22,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,2,0,64,0,2,0,72,0,2,0,80,0,2,0,88,0,2,0,96,0,2,0,104,0,2,0,112,0,2,0,120,0,83,64,64,0,83,64,72,0,67,70,64,0,67,70,72,0,83,80,80,0,83,80,88,0,67,86,80,0,67,86,88,0,11,72,64,0,11,72,72,0,11,72,80,0,11,72,88,0,11,72,96,0,11,72,104,0,11,72,112,0,11,72,120,0,11,80,64,0,11,80,72,0,11,80,80,0,11,80,88,0,11,80,96,0,11,80,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,30,0,0,0,0,0,0,0,0,0,0,22,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,52,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,24,0,0,129,28,0,0,17,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,26,0,0,0,0,0,0,0,0,0,0,18,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,28,0,0,0,0,0,0,0,0,0,0,19,0,0,0,111,22,0,0,54,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,141,0,128,52,0,0,37,30,0,0,0,0,0,0,0,0,0,0,20,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,24,0,0,0,0,0,0,0,0,0,0,14,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,2,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,148,0,150,0,149,0,151,0,144,16,0,0,144,18,0,0,145,22,0,0,145,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,16,0,0,145,18,0,0,145,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,30,0,0,145,28,0,0,32,0,0,0,113,18,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,153,0,144,60,0,0,46,22,0,0,0,0,0,0,0,0,0,0,33,0,0,0,113,20,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,155,0,144,56,0,0,46,24,0,0,0,0,0,0,0,0,0,0,34,0,0,0,113,22,0,0,56,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,144,52,0,0,46,26,0,0,0,0,0,0,0,0,0,0,35,0,0,0,113,16,0,0,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,113,26,0,0,56,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,101,24,0,0,164,0,166,0,165,0,167,0,160,16,0,0,160,18,0,0,161,22,0,0,161,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,16,0,0,161,18,0,0,161,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,17,0,0,161,28,0,0,42,0,0,0,114,18,0,0,57,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,0,169,0,160,60,0,0,2,23,0,0,0,0,0,0,0,0,0,0,43,0,0,0,114,20,0,0,57,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,0,171,0,160,56,0,0,2,25,0,0,0,0,0,0,0,0,0,0,44,0,0,0,114,22,0,0,57,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,160,52,0,0,2,27,0,0,0,0,0,0,0,0,0,0,45,0,0,0,114,16,0,0,57,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,114,26,0,0,57,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,101,26,0,0,36,1,38,1,37,1,39,1,32,17,0,0,32,19,0,0,33,23,0,0,33,25,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,17,0,0,33,19,0,0,33,21,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,19,0,0,33,29,0,0,47,0,0,0,115,18,0,0,58,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,1,41,1,32,61,0,0,11,23,0,0,0,0,0,0,0,0,0,0,48,0,0,0,115,20,0,0,58,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,1,43,1,32,57,0,0,11,25,0,0,0,0,0,0,0,0,0,0,49,0,0,0,115,22,0,0,58,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,1,45,1,32,53,0,0,11,27,0,0,0,0,0,0,0,0,0,0,50,0,0,0,115,16,0,0,58,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,115,26,0,0,58,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,24,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,39,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,21,105,5,0,255,8,0,0,255,127,0,0,255,3,0,0,4,30,149,17,248,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+147301);
/* memory initializer */ allocate([4,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,25,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,27,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,8,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,4,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,5,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,6,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,7,0,0,0,104,22,0,0,59,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,192,18,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,20,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,100,24,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,200,18,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,28,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,17,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,8,5,0,0,9,5,0,0,10,5,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,28,0,0,129,28,0,0,13,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,43,26,0,0,0,0,0,0,0,0,0,0,14,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,43,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,43,30,0,0,0,0,0,0,0,0,0,0,10,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,19,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,26,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,44,105,5,0,255,8,0,0,255,127,0,0,255,3,0,0,4,30,149,8,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+164045);
/* memory initializer */ allocate([4,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,25,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,27,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,8,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,4,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,5,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,6,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,7,0,0,0,104,22,0,0,59,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,192,18,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,20,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,100,24,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,200,18,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,28,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,17,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,8,5,0,0,9,5,0,0,10,5,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,28,0,0,129,28,0,0,13,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,43,26,0,0,0,0,0,0,0,0,0,0,14,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,43,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,43,30,0,0,0,0,0,0,0,0,0,0,10,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,19,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,26,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,105,5,0,255,8,0,0,255,127,0,0,255,3,0,0,4,30,149,15,248,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,22], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+177389);
/* memory initializer */ allocate([4,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,22,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,6,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,25,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,3,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,4,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,5,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,194,22,0,0,194,50,0,0,193,20,0,0,196,0,197,0,18,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,0,0,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,0,0,76,4,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,43,28,0,0,0,0,0,0,0,0,0,0,15,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,16,0,0,129,28,0,0,11,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,18,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,8,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,17,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,24,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,86,105,5,0,95,8,0,0,255,127,0,0,255,3,0,0,4,30,149,2,248,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,25], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+190733);
/* memory initializer */ allocate([4,63,62,61,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,17,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,20,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,0,0,0,0,0,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,85,20,0,0,85,22,0,0,2,0,0,0,91,30,0,0,90,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,84,28,0,0,0,0,0,0,3,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,53,0,52,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,50,0,49,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,44,0,43,0,42,0,64,0,42,24,0,0,42,22,0,0,0,0,0,0,0,0,0,0,64,50,0,0,42,20,0,0,41,0,64,0,13,0,0,0,42,30,0,0,43,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,42,28,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,42,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,0,0,0,0,0,0,2,0,0,0,0,10,0,0,0,0,0,0,0,0,39,26,0,0,38,0,0,0,38,30,0,0,38,28,0,0,0,0,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,160,40,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,76,0,70,0,77,0,71,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,28,0,0,78,28,0,0,7,0,0,0,89,24,0,0,88,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,26,0,0,0,0,0,0,0,0,0,0,8,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,56,0,0,56,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,89,26,0,0,88,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,69,28,0,0,69,22,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,22,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,4,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,89,30,0,0,88,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,69,56,0,0,56,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,89,28,0,0,88,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,47,0,45,0,46,0,0,0,45,28,0,0,45,24,0,0,45,16,0,0,45,18,0,0,46,16,0,0,0,0,0,0,12,0,0,0,45,30,0,0,46,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,86,0,33,0,34,0,0,0,35,0,86,20,0,0,86,28,0,0,86,26,0,0,86,24,0,0,86,22,0,0,33,246,1,0,33,48,0,0,19,0,0,0,86,16,0,0,86,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,59,0,58,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,105,5,0,255,2,0,0,255,15,0,0,255,0,0,0,2,30,146,5,248,250,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,22], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+203597);
/* memory initializer */ allocate([1,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,22,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,6,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,0,0,0,0,0,0,0,0,25,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,3,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,4,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,5,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,194,22,0,0,194,50,0,0,193,20,0,0,196,0,197,0,18,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,0,0,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,0,0,76,4,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,43,28,0,0,0,0,0,0,0,0,0,0,15,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,16,0,0,129,28,0,0,11,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,18,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,8,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,17,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,24,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,125,105,5,0,255,16,0,0,255,255,0,0,255,7,0,0,4,30,150,9,248,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+216581);
/* memory initializer */ allocate([8,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,25,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,27,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,8,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,105,24,0,0,105,26,0,0,3,0,0,0,61,20,0,0,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,34,0,33,0,32,0,4,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,5,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,6,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,7,0,0,0,104,22,0,0,59,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,192,18,0,0,0,0,0,0,194,50,0,0,193,20,0,0,196,0,197,0,20,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,100,24,0,0,206,0,200,0,201,0,202,0,201,24,0,0,201,22,0,0,200,18,0,0,0,0,0,0,202,50,0,0,201,20,0,0,204,0,205,0,28,0,0,0,201,30,0,0,200,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,201,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,201,26,0,0,200,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,124,24,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,76,4,0,10,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,83,0,0,0,83,0,8,0,67,6,0,0,67,6,8,0,83,16,16,0,83,16,24,0,67,22,16,0,67,22,24,0,11,8,0,0,11,8,8,0,11,8,16,0,11,8,24,0,11,8,32,0,11,8,40,0,11,8,48,0,11,8,56,0,11,16,0,0,11,16,8,0,11,16,16,0,11,16,24,0,11,16,32,0,11,16,40,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,17,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,37,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,8,5,0,0,9,5,0,0,10,5,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,28,0,0,129,28,0,0,13,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,43,26,0,0,0,0,0,0,0,0,0,0,14,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,43,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,43,30,0,0,0,0,0,0,0,0,0,0,10,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,19,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,26,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,146,105,5,0,255,4,0,0,255,31,0,0,255,1,0,0,2,30,147,10,248,250,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,22], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+229445);
/* memory initializer */ allocate([2,66,65,64,63,0,0,63,24,0,0,63,26,0,0,0,0,0,0,0,0,0,0,63,20,0,0,63,18,0,0,63,16,0,0,22,0,0,0,63,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,96,24,0,0,96,22,0,0,96,16,0,0,96,18,0,0,96,20,0,0,96,26,0,0,6,0,0,0,96,28,0,0,96,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,64,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,25,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,16,0,0,105,18,0,0,1,0,0,0,61,16,0,0,60,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,105,20,0,0,105,22,0,0,2,0,0,0,61,18,0,0,60,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,37,0,36,0,35,0,3,0,0,0,104,16,0,0,59,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,40,0,39,0,38,0,4,0,0,0,104,18,0,0,59,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,43,0,42,0,41,0,5,0,0,0,104,20,0,0,59,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,100,18,0,0,198,0,192,0,193,0,194,0,193,24,0,0,193,22,0,0,0,0,0,0,194,22,0,0,194,50,0,0,193,20,0,0,196,0,197,0,18,0,0,0,193,30,0,0,192,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,193,28,0,0,192,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,193,26,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,124,16,0,0,124,18,0,0,124,20,0,0,124,22,0,0,0,0,0,0,0,0,0,0,124,28,0,0,124,30,0,0,0,0,0,0,0,0,2,0,0,0,76,4,0,0,0,0,0,0,0,0,124,26,0,0,122,0,0,0,122,30,0,0,122,28,0,0,122,26,0,0,122,16,0,0,122,18,0,0,122,20,0,0,120,121,123,0,123,16,0,0,123,18,0,0,123,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,122,22,0,0,122,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,96,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,100,26,0,0,70,0,0,0,0,0,0,0,68,16,0,0,68,18,0,0,69,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,110,18,0,0,53,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,68,60,0,0,43,28,0,0,0,0,0,0,0,0,0,0,15,0,0,0,110,20,0,0,53,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,68,56,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,110,16,0,0,53,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,100,22,0,0,132,0,134,0,133,0,135,0,128,16,0,0,128,18,0,0,129,22,0,0,129,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,16,0,0,129,18,0,0,129,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,16,0,0,129,28,0,0,11,0,0,0,111,18,0,0,54,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,137,0,128,60,0,0,37,18,0,0,0,0,0,0,0,0,0,0,12,0,0,0,111,20,0,0,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,128,56,0,0,37,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,111,16,0,0,54,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,111,26,0,0,54,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,28,0,0,178,0,0,0,0,0,0,0,176,16,0,0,176,18,0,0,177,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,26,0,0,177,16,0,0,177,18,0,0,177,20,0,0,0,0,0,0,0,0,3,5,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,112,18,0,0,55,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,176,60,0,0,37,22,0,0,0,0,0,0,0,0,0,0,8,0,0,0,112,20,0,0,55,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,176,56,0,0,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,112,16,0,0,55,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,20,0,0,78,0,76,0,77,0,0,0,76,28,0,0,76,24,0,0,76,16,0,0,76,18,0,0,77,16,0,0,0,0,0,0,17,0,0,0,76,30,0,0,77,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,30,0,0,184,0,188,0,185,0,186,0,189,0,187,0,188,20,0,0,188,28,0,0,188,26,0,0,188,24,0,0,188,22,0,0,185,246,1,0,185,48,0,0,24,0,0,0,188,16,0,0,188,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,176,105,5,0,95,4,0,0,255,31,0,0,255,1,0,0,2,30,147,7,248,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,25], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+242789);
/* memory initializer */ allocate([2,63,62,61,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,15,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,64,0,87,0,87,16,0,0,87,18,0,0,87,20,0,0,87,22,0,0,87,24,0,0,87,28,0,0,18,0,0,0,87,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,0,0,0,0,0,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,85,20,0,0,85,22,0,0,2,0,0,0,91,30,0,0,90,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,53,0,52,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,50,0,49,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,44,0,43,0,42,0,64,0,42,24,0,0,42,22,0,0,0,0,0,0,0,0,0,0,64,50,0,0,42,20,0,0,41,0,64,0,11,0,0,0,42,30,0,0,43,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,42,28,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,42,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,0,0,0,0,0,0,2,0,0,0,0,10,0,0,0,0,0,0,0,0,39,26,0,0,38,0,0,0,38,30,0,0,38,28,0,0,0,0,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,2,0,32,0,2,0,40,0,2,0,48,0,2,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,160,40,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,76,0,70,0,77,0,71,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,0,0,78,28,0,0,6,0,0,0,89,24,0,0,88,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,26,0,0,0,0,0,0,0,0,0,0,7,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,56,0,0,56,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,89,26,0,0,88,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,69,28,0,0,69,22,0,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,22,0,0,69,16,0,0,69,18,0,0,69,20,0,0,0,0,0,0,0,0,3,4,6,7,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,89,30,0,0,88,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,69,56,0,0,56,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,89,28,0,0,88,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,47,0,45,0,46,0,0,0,45,28,0,0,45,24,0,0,45,16,0,0,45,18,0,0,46,16,0,0,0,0,0,0,10,0,0,0,45,30,0,0,46,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,86,0,33,0,34,0,0,0,35,0,86,20,0,0,86,28,0,0,86,26,0,0,86,24,0,0,86,22,0,0,33,246,1,0,33,48,0,0,17,0,0,0,86,16,0,0,86,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,105,5,0,159,0,0,0,255,3,0,0,63,0,0,0,2,30,144,7,248,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,43], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+255653);
/* memory initializer */ allocate([64,0,0,62,61,60,0,0,60,24,0,0,60,26,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,4,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,65,26,0,0,8,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,2,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,79,16,0,0,79,18,0,0,83,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,28,0,0,0,0,0,0,0,0,0,0,1,0,76,4,0,0,0,0,0,0,0,0,0,0,0,0,39,26,0,0,38,0,0,0,38,30,0,0,38,28,0,0,38,26,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,35,0,35,16,0,0,35,18,0,0,35,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,8,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,105,5,0,223,0,0,0,255,7,0,0,127,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,46], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+268636);
/* memory initializer */ allocate([128,0,0,62,61,60,0,0,60,24,0,0,60,26,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,17,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,65,26,0,0,18,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,2,0,0,0,85,20,0,0,85,22,0,0,2,0,0,0,91,30,0,0,90,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,103,111,105,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,59,0,58,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,11,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,50,0,49,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,44,0,43,0,42,0,35,0,42,24,0,0,42,22,0,0,0,0,0,0,0,0,0,0,35,50,0,0,42,20,0,0,41,0,34,0,7,0,0,0,42,30,0,0,43,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,42,28,0,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,42,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,80,16,0,0,80,18,0,0,83,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,80,60,0,0,56,20,0,0,0,0,0,0,0,0,0,0,14,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,80,56,0,0,50,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,76,0,68,0,77,0,69,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,28,0,0,78,28,0,0,4,0,0,0,89,28,0,0,88,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,22,0,0,0,0,0,0,0,0,0,0,12,0,0,0,89,26,0,0,88,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,60,0,0,56,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,89,30,0,0,88,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,105,5,0,223,0,0,0,255,7,0,0,127,0,0,0,2,30,145,11,248,250,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,48], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+279220);
/* memory initializer */ allocate([128,0,63,62,61,60,0,0,60,24,0,0,60,26,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,14,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,65,26,0,0,4,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,59,0,58,0,57,0,2,0,0,0,91,24,0,0,90,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,3,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,0,0,0,0,1,0,2,0,76,4,0,0,0,0,0,0,0,0,0,0,39,24,0,0,38,0,0,0,38,30,0,0,38,28,0,0,38,26,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,35,0,35,16,0,0,35,18,0,0,35,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,30,0,0,0,0,0,0,13,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,11,16,16,0,163,16,16,0,11,24,16,0,163,24,16,0,11,0,0,0,163,0,0,0,11,8,0,0,163,8,0,0,5,0,96,34,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,80,16,0,0,80,18,0,0,83,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,80,60,0,0,56,16,0,0,0,0,0,0,0,0,0,0,10,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,80,56,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,32,22,0,0,76,0,68,0,77,0,69,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,0,0,78,28,0,0,6,0,0,0,44,18,0,0,43,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,18,0,0,0,0,0,0,0,0,0,0,7,0,0,0,44,20,0,0,43,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,56,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,44,16,0,0,43,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,44,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,105,5,0,223,0,0,0,255,7,0,0,127,0,0,0,2,30,145,8,248,250,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,51], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+290452);
/* memory initializer */ allocate([128,0,63,62,61,60,0,0,60,24,0,0,60,26,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,6,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,65,26,0,0,12,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,2,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,39,24,0,0,1,0,2,0,76,4,0,0,0,0,0,10,0,10,0,0,39,26,0,0,38,0,0,0,38,30,0,0,38,28,0,0,38,26,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,35,0,35,16,0,0,35,18,0,0,35,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,8,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,30,0,0,38,26,0,0,8,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,11,16,16,0,163,16,16,0,11,24,16,0,163,24,16,0,11,0,0,0,163,0,0,0,11,8,0,0,163,8,0,0,5,0,96,34,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,74,16,0,0,74,18,0,0,83,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,89,24,0,0,88,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,74,60,0,0,56,16,0,0,0,0,0,0,0,0,0,0,11,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,74,56,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,16,0,0,80,18,0,0,80,20,0,0,80,22,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,89,28,0,0,88,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,80,56,0,0,56,18,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,26,0,0,88,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,76,56,0,0,56,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,105,5,0,95,1,0,0,255,15,0,0,255,0,0,0,2,30,146,7,248,250,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,48], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+301764);
/* memory initializer */ allocate([1,63,62,61,60,0,0,60,24,0,0,60,26,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,14,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,65,26,0,0,4,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,59,0,58,0,57,0,2,0,0,0,91,24,0,0,90,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,3,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,0,0,0,0,1,0,2,0,76,4,0,0,0,0,0,0,0,0,0,0,39,24,0,0,38,0,0,0,38,30,0,0,38,28,0,0,38,26,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,35,0,35,16,0,0,35,18,0,0,35,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,30,0,0,0,0,0,0,13,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,11,16,16,0,163,16,16,0,11,24,16,0,163,24,16,0,11,0,0,0,163,0,0,0,11,8,0,0,163,8,0,0,5,0,96,34,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,80,16,0,0,80,18,0,0,83,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,80,60,0,0,56,16,0,0,0,0,0,0,0,0,0,0,10,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,80,56,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,32,22,0,0,76,0,68,0,77,0,69,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,0,0,78,28,0,0,6,0,0,0,44,18,0,0,43,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,18,0,0,0,0,0,0,0,0,0,0,7,0,0,0,44,20,0,0,43,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,56,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,44,16,0,0,43,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,44,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,106,5,0,95,1,0,0,255,15,0,0,255,0,0,0,2,30,146,6,248,250,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,51], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+312957);
/* memory initializer */ allocate([1,63,62,61,60,0,0,60,24,0,0,60,26,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,6,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,65,26,0,0,12,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,2,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,39,24,0,0,1,0,2,0,76,4,0,0,0,0,0,10,0,10,0,0,39,26,0,0,38,0,0,0,38,30,0,0,38,28,0,0,38,26,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,35,0,35,16,0,0,35,18,0,0,35,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,8,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,30,0,0,38,26,0,0,8,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,11,16,16,0,163,16,16,0,11,24,16,0,163,24,16,0,11,0,0,0,163,0,0,0,11,8,0,0,163,8,0,0,5,0,96,34,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,74,16,0,0,74,18,0,0,83,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,89,24,0,0,88,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,74,60,0,0,56,16,0,0,0,0,0,0,0,0,0,0,11,0,0,0,89,22,0,0,88,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,74,56,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,16,0,0,80,18,0,0,80,20,0,0,80,22,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,89,28,0,0,88,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,80,56,0,0,56,18,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,26,0,0,88,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,76,56,0,0,56,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,106,5,0,95,2,0,0,255,31,0,0,255,1,0,0,2,30,147,12,248,250,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,48], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+324269);
/* memory initializer */ allocate([2,63,62,61,60,0,0,60,24,0,0,60,26,0,0,0,0,0,0,0,0,0,0,60,20,0,0,60,18,0,0,60,16,0,0,14,0,0,0,60,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,22,0,0,65,24,0,0,65,22,0,0,65,16,0,0,65,18,0,0,65,20,0,0,65,26,0,0,4,0,0,0,65,28,0,0,65,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,16,0,0,85,18,0,0,1,0,0,0,91,28,0,0,90,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,103,111,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,59,0,58,0,57,0,2,0,0,0,91,24,0,0,90,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,56,0,55,0,54,0,3,0,0,0,91,26,0,0,90,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,16,0,0,39,18,0,0,39,20,0,0,39,22,0,0,0,0,0,0,0,0,0,0,39,28,0,0,39,30,0,0,0,0,0,0,1,0,2,0,76,4,0,0,0,0,0,0,0,0,0,0,39,24,0,0,38,0,0,0,38,30,0,0,38,28,0,0,38,26,0,0,38,16,0,0,38,18,0,0,38,20,0,0,36,37,35,0,35,16,0,0,35,18,0,0,35,20,0,0,0,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,30,0,0,0,0,0,0,13,0,0,0,38,22,0,0,38,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,8,0,2,0,16,0,2,0,24,0,11,16,16,0,163,16,16,0,11,24,16,0,163,24,16,0,11,0,0,0,163,0,0,0,11,8,0,0,163,8,0,0,5,0,96,34,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,80,16,0,0,80,18,0,0,83,22,0,0,0,0,0,0,0,0,8,1,0,0,0,0,1,0,0,2,0,0,8,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,16,0,0,83,18,0,0,83,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,89,18,0,0,88,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,80,60,0,0,56,16,0,0,0,0,0,0,0,0,0,0,10,0,0,0,89,20,0,0,88,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,80,56,0,0,56,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,89,16,0,0,88,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,32,22,0,0,76,0,68,0,77,0,69,0,79,16,0,0,79,18,0,0,78,22,0,0,78,24,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,8,4,0,0,9,4,0,0,10,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,3,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,16,0,0,78,18,0,0,78,20,0,0,0,0,0,0,0,0,3,6,8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,0,0,78,28,0,0,6,0,0,0,44,18,0,0,43,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,75,0,79,60,0,0,56,18,0,0,0,0,0,0,0,0,0,0,7,0,0,0,44,20,0,0,43,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,73,0,79,56,0,0,56,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,44,16,0,0,43,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,44,26,0,0,43,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,106,5,0,95,2,0,0,255,31,0,0,255,1,0,0,2,30,147,11,248,250,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,51], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+335461);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+346773);
/* memory initializer */ allocate([95,99,111,109,112,97,114,97,116,111,114,95,48,0,97,110,97,108,111,103,95,99,111,109,112,97,114,97,116,111,114,95,49,0,97,110,97,108,111,103,95,99,111,109,112,97,114,97,116,111,114,95,50,0,97,110,97,108,111,103,95,99,111,109,112,97,114,97,116,111,114,95,51,0,101,120,116,101,114,110,97,108,95,105,110,116,101,114,114,117,112,116,95,48,0,116,105,109,101,114,95,48,95,99,111,109,112,97,114,101,95,109,97,116,99,104,95,97,0,116,105,109,101,114,95,48,95,99,111,109,112,97,114,101,95,109,97,116,99,104,95,98,0,116,105,109,101,114,95,48,95,111,118,101,114,102,108,111,119,0,116,105,109,101,114,95,49,95,99,111,109,112,97,114,101,95,109,97,116,99,104,95,98,0,116,105,109,101,114,95,49,95,111,118,101,114,102,108,111,119,0,116,105,109,101,114,95,49,95,99,97,112,116,117,114,101,95,101,118,101,110,116,0,112,105,110,95,99,104,97,110,103,101,95,105,110,116,101,114,114,117,112,116,0,112,115,99,95,109,111,100,117,108,101,95,48,95,115,121,110,99,95,115,105,103,110,97,108,0,112,115,99,95,109,111,100,117,108,101,95,49,95,115,121,110,99,95,115,105,103,110,97,108,0,112,115,99,95,109,111,100,117,108,101,95,50,95,115,121,110,99,95,115,105,103,110,97,108,0,65,68,67,58,32,117,110,105,109,112,108,101,109,101,110,116,101,100,32,97,117,116,111,32,116,114,105,103,103,101,114,32,109,111,100,101,58,32,37,115,10,0,65,68,67,58,32,97,117,116,111,32,116,114,105,103,103,101,114,32,99,111,110,102,105,103,117,114,101,100,58,32,37,115,10,0,65,68,67,58,32,83,116,97,114,116,32,65,82,69,70,32,37,100,32,65,86,67,67,32,37,100,10,0,65,68,67,58,32,115,116,97,114,116,105,110,103,32,97,116,32,37,117,75,72,122,10,0,65,68,67,58,32,109,105,115,115,105,110,103,32,86,67,67,32,97,110,97,108,111,103,32,118,111,108,116,97,103,101,10,0,65,68,67,58,32,109,105,115,115,105,110,103,32,65,82,69,70,32,97,110,97,108,111,103,32,118,111,108,116,97,103,101,10,0,65,68,67,58,32,109,105,115,115,105,110,103,32,65,86,67,67,32,97,110,97,108,111,103,32,118,111,108,116,97,103,101,10,0,65,68,67,58,32,99,104,97,110,110,101,108,32,37,100,32,99,108,105,112,112,101,100,32,37,117,47,37,117,32,86,82,69,70,32,37,100,10,0,115,112,105,0,56,60,111,117,116,0,115,107,105,112,112,105,110,103,32,80,79,82,84,37,99,32,102,111,114,32,99,111,114,101,32,37,115,10,0,112,111,114,116,0,61,112,105,110,48,0,61,112,105,110,49,0,61,112,105,110,50,0,61,112,105,110,51,0,61,112,105,110,52,0,61,112,105,110,53,0,61,112,105,110,54,0,61,112,105,110,55,0,56,61,97,108,108,0,56,62,100,100,114,0,56,62,112,111,114,116,0,56,62,112,105,110,0,117,97,114,116,0,56,60,105,110,0,56,62,111,117,116,0,62,120,111,110,0,62,120,111,102,102,0,27,91,51,50,109,37,115,10,27,91,48,109,0,85,65,82,84,58,32,37,99,32,99,111,110,102,105,103,117,114,101,100,32,116,111,32,37,48,52,120,32,61,32,37,100,32,98,112,115,32,40,120,37,100,41,44,32,37,100,32,100,97,116,97,32,37,100,32,115,116,111,112,10,0,85,65,82,84,58,32,82,111,117,103,104,108,121,32,37,100,32,117,115,101,99,32,112,101,114,32,98,121,116,101,115,10,0,101,120,116,105,110,116,0,60,105,110,116,48,0,60,105,110,116,49,0,60,105,110,116,50,0,60,105,110,116,51,0,60,105,110,116,52,0,60,105,110,116,53,0,60,105,110,116,54,0,60,105,110,116,55,0,101,101,112,114,111,109,0,69,69,80,82,79,77,58,32,37,115,58,32,65,86,82,95,73,79,67,84,76,95,69,69,80,82,79,77,95,83,69,84,32,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,10,0,97,118,114,95,101,101,112,114,111,109,95,105,111,99,116,108,0,69,69,80,82,79,77,58,32,37,115,58,32,65,86,82,95,73,79,67,84,76,95,69,69,80,82,79,77,95,83,69,84,32,76,111,97,100,101,100,32,37,100,32,97,116,32,111,102,102,115,101,116,32,37,100,10,0,69,69,80,82,79,77,58,32,37,115,58,32,65,86,82,95,73,79,67,84,76,95,69,69,80,82,79,77,95,71,69,84,32,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,10,0,116,105,109,101,114,0,56,62,112,119,109,48,0,56,62,112,119,109,49,0,62,99,111,109,112,97,0,62,99,111,109,112,98,0,62,99,111,109,112,99,0,84,73,77,69,82,58,32,37,115,45,37,99,32,99,108,111,99,107,32,116,117,114,110,101,100,32,111,102,102,10,0,97,118,114,95,116,105,109,101,114,95,119,114,105,116,101,0,84,73,77,69,82,58,32,37,115,45,37,99,32,84,79,80,32,37,46,50,102,72,122,32,61,32,37,100,32,99,121,99,108,101,115,32,61,32,37,100,117,115,101,99,10,0,97,118,114,95,116,105,109,101,114,95,99,111,110,102,105,103,117,114,101,0,37,115,45,37,99,32,99,108,111,99,107,32,37,100,32,116,111,112,32,37,100,32,79,67,82,37,99,32,37,100,10,0,84,73,77,69,82,58,32,37,115,45,37,99,32,37,99,32,37,46,50,102,72,122,32,61,32,37,100,32,99,121,99,108,101,115,10,0,84,73,77,69,82,58,32,37,115,45,37,99,32,117,110,115,117,112,112,111,114,116,101,100,32,116,105,109,101,114,32,109,111,100,101,32,119,103,109,61,37,100,32,40,37,100,41,10,0,97,118,114,95,116,105,109,101,114,95,114,101,99,111,110,102,105,103,117,114,101,0,84,73,77,69,82,58,32,37,115,45,37,99,32,109,111,100,101,32,37,100,32,85,78,83,85,80,80,79,82,84,69,68,10,0,97,118,114,95,116,105,109,101,114,95,119,114,105,116,101,95,111,99,114,0,119,97,116,99,104,100,111,103,0,114,101,115,101,116,0,101,110,97,98,108,101,100,0,101,110,97,98,108,101,100,32,97,110,100,32,115,101,116,0,87,65,84,67,72,68,79,71,58,32,37,115,32,116,111,32,37,100,32,99,121,99,108,101,115,32,64,32,49,50,56,107,122,32,40,42,32,37,100,41,32,61,32,37,100,32,67,80,85,32,99,121,99,108,101,115,46,10,0,87,65,84,67,72,68,79,71,58,32,116,105,109,101,114,32,102,105,114,101,100,46,10,0,87,65,84,67,72,68,79,71,58,32,116,105,109,101,114,32,102,105,114,101,100,32,119,105,116,104,111,117,116,32,105,110,116,101,114,114,117,112,116,46,32,82,101,115,101,116,116,105,110,103,10,0,87,65,84,67,72,68,79,71,58,32,100,105,115,97,98,108,101,100,10,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,105,110,102,105,110,105,116,121,0,110,97,110,0,46,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+357013);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }
  Module["_usleep"] = _usleep;

  var _llvm_fabs_f64=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  var _htons=undefined;
  Module["_htons"] = _htons;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  
  var _ntohs=undefined;
  Module["_ntohs"] = _ntohs;function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "__inet_pton4_raw": __inet_pton4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "___syscall102": ___syscall102, "__inet_ntop4_raw": __inet_ntop4_raw, "_llvm_fabs_f64": _llvm_fabs_f64, "___syscall5": ___syscall5, "__inet_pton6_raw": __inet_pton6_raw, "_llvm_stackrestore": _llvm_stackrestore, "_usleep": _usleep, "__read_sockaddr": __read_sockaddr, "_signal": _signal, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__exit": __exit, "___syscall6": ___syscall6, "_nanosleep": _nanosleep, "_pthread_self": _pthread_self, "_llvm_stacksave": _llvm_stacksave, "___syscall54": ___syscall54, "___unlock": ___unlock, "__write_sockaddr": __write_sockaddr, "_exit": _exit, "_sysconf": _sysconf, "___lock": ___lock, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "_time": _time, "___syscall140": ___syscall140, "___syscall142": ___syscall142, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var ___syscall102=env.___syscall102;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var ___syscall5=env.___syscall5;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _usleep=env._usleep;
  var __read_sockaddr=env.__read_sockaddr;
  var _signal=env._signal;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __exit=env.__exit;
  var ___syscall6=env.___syscall6;
  var _nanosleep=env._nanosleep;
  var _pthread_self=env._pthread_self;
  var _llvm_stacksave=env._llvm_stacksave;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var __write_sockaddr=env.__write_sockaddr;
  var _exit=env._exit;
  var _sysconf=env._sysconf;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _time=env._time;
  var ___syscall140=env.___syscall140;
  var ___syscall142=env.___syscall142;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _display_usage($app) {
 $app = $app|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $app;
 (_printf(351660,$vararg_buffer)|0);
 (_puts(351726)|0);
 $0 = HEAP32[87406]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _exit(1);
  // unreachable;
 } else {
  $3 = 349624;$i$02 = 0;
 }
 while(1) {
  (_printf(351987,$vararg_buffer1)|0);
  $2 = HEAP32[$3>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   HEAP32[$vararg_buffer3>>2] = $4;
   (_printf(351995,$vararg_buffer3)|0);
   $10 = HEAP32[$3>>2]|0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    HEAP32[$vararg_buffer6>>2] = $12;
    (_printf(351995,$vararg_buffer6)|0);
    $14 = HEAP32[$3>>2]|0;
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if (!($17)) {
     HEAP32[$vararg_buffer9>>2] = $16;
     (_printf(351995,$vararg_buffer9)|0);
     $18 = HEAP32[$3>>2]|0;
     $19 = ((($18)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     if (!($21)) {
      HEAP32[$vararg_buffer12>>2] = $20;
      (_printf(351995,$vararg_buffer12)|0);
     }
    }
   }
  }
  (_putchar(10)|0);
  $6 = (($i$02) + 1)|0;
  $7 = (349624 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   break;
  } else {
   $3 = $7;$i$02 = $6;
  }
 }
 _exit(1);
 // unreachable;
}
function _sig_int($sign) {
 $sign = $sign|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_puts(351999)|0);
 $0 = HEAP32[90336]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _avr_terminate($0);
 }
 _exit(0);
 // unreachable;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$lcssa143 = 0, $$lcssa151 = 0, $$pre = 0, $$pre83 = 0, $$pre84 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk = 0, $ci$050 = 0, $exitcond = 0, $exitcond80 = 0, $f = 0, $f_cpu$061 = 0, $f_cpu$1 = 0, $f_cpu$1$lcssa = 0, $gdb$0$lcssa8893 = 0, $gdb$059 = 0;
 var $gdb$1 = 0, $gdb$1$lcssa = 0, $loadBase$054 = 0, $loadBase$1 = 0, $log$0$lcssa8992 = 0, $log$058 = 0, $log$1 = 0, $log$1$lcssa = 0, $name = 0, $not$ = 0, $or$cond = 0, $or$cond5 = 0, $phitmp = 0, $pi$057 = 0, $pi$1 = 0, $strlenfirst$pre = 0, $ti$048 = 0, $trace$0$lcssa8794 = 0, $trace$060 = 0, $trace$1 = 0;
 var $trace$1$lcssa = 0, $trace_vectors = 0, $trace_vectors_count$0$lcssa9091 = 0, $trace_vectors_count$056 = 0, $trace_vectors_count$1 = 0, $trace_vectors_count$1$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr4 = 0, $vi$047 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $f = sp + 96|0;
 $name = sp + 2552|0;
 $trace_vectors = sp + 64|0;
 $chunk = sp + 60|0;
 _memset(($f|0),0,2456)|0;
 dest=$name; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$trace_vectors>>2]=0|0;HEAP32[$trace_vectors+4>>2]=0|0;HEAP32[$trace_vectors+8>>2]=0|0;HEAP32[$trace_vectors+12>>2]=0|0;HEAP32[$trace_vectors+16>>2]=0|0;HEAP32[$trace_vectors+20>>2]=0|0;HEAP32[$trace_vectors+24>>2]=0|0;HEAP32[$trace_vectors+28>>2]=0|0;
 $0 = ($argc|0)==(1);
 if ($0) {
  $8 = HEAP32[$argv>>2]|0;
  $9 = (_basename($8)|0);
  _display_usage($9);
  // unreachable;
 }
 $1 = ($argc|0)>(1);
 do {
  if ($1) {
   $2 = (($argc) + -1)|0;
   $3 = ((($f)) + 2424|0);
   $4 = ((($f)) + 2428|0);
   $5 = ((($f)) + 2420|0);
   $6 = ((($f)) + 2440|0);
   $7 = ((($f)) + 2444|0);
   $f_cpu$061 = 0;$gdb$059 = 0;$loadBase$054 = 0;$log$058 = 1;$pi$057 = 1;$trace$060 = 0;$trace_vectors_count$056 = 0;
   L6: while(1) {
    $10 = (($argv) + ($pi$057<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_strcmp($11,352033)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     label = 8;
     break;
    }
    $14 = (_strcmp($11,352036)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     label = 8;
     break;
    }
    $18 = (_strcmp($11,352042)|0);
    $19 = ($18|0)==(0);
    L10: do {
     if ($19) {
      label = 11;
     } else {
      $20 = (_strcmp($11,352045)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       label = 11;
      } else {
       $28 = (_strcmp($11,352050)|0);
       $29 = ($28|0)==(0);
       if (!($29)) {
        $30 = (_strcmp($11,352053)|0);
        $31 = ($30|0)==(0);
        if (!($31)) {
         $39 = (_strcmp($11,352059)|0);
         $40 = ($39|0)==(0);
         if (!($40)) {
          $41 = (_strcmp($11,352062)|0);
          $42 = ($41|0)==(0);
          if (!($42)) {
           $44 = (_strcmp($11,352069)|0);
           $45 = ($44|0)==(0);
           if ($45) {
            $46 = ($pi$057|0)<($2|0);
            if (!($46)) {
             $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
             break;
            }
            $47 = (($pi$057) + 1)|0;
            $48 = (($argv) + ($47<<2)|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = (_atoi($49)|0);
            $51 = (($trace_vectors_count$056) + 1)|0;
            $52 = (($trace_vectors) + ($trace_vectors_count$056<<2)|0);
            HEAP32[$52>>2] = $50;
            $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $47;$trace$1 = $trace$060;$trace_vectors_count$1 = $51;
            break;
           }
           $53 = (_strcmp($11,352073)|0);
           $54 = ($53|0)==(0);
           if (!($54)) {
            $55 = (_strcmp($11,352076)|0);
            $56 = ($55|0)==(0);
            if (!($56)) {
             $58 = (_strcmp($11,352081)|0);
             $59 = ($58|0)==(0);
             if ($59) {
              $60 = (($log$058) + 1)|0;
              $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $60;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
              break;
             }
             $61 = (_strcmp($11,352084)|0);
             $62 = ($61|0)==(0);
             if ($62) {
              $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = 8454144;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
              break;
             }
             $63 = (_strcmp($11,352088)|0);
             $64 = ($63|0)==(0);
             if ($64) {
              $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = 0;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
              break;
             }
             $65 = HEAP8[$11>>0]|0;
             $66 = ($65<<24>>24)==(45);
             if ($66) {
              $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
              break;
             }
             $67 = (_strrchr($11,46)|0);
             $68 = ($67|0)==(0|0);
             do {
              if (!($68)) {
               $69 = (_strcasecmp($67,352092)|0);
               $70 = ($69|0)==(0);
               if (!($70)) {
                break;
               }
               $71 = HEAP8[$name>>0]|0;
               $72 = ($71<<24>>24)!=(0);
               $73 = ($f_cpu$061|0)!=(0);
               $or$cond = $73 & $72;
               if (!($or$cond)) {
                label = 36;
                break L6;
               }
               HEAP32[$chunk>>2] = 0;
               $76 = (_read_ihex_chunks($11,$chunk)|0);
               $77 = ($76|0)<(1);
               if ($77) {
                $$lcssa143 = $10;
                label = 38;
                break L6;
               }
               HEAP32[$vararg_buffer5>>2] = $76;
               (_printf(352183,$vararg_buffer5)|0);
               $ci$050 = 0;
               while(1) {
                $81 = HEAP32[$chunk>>2]|0;
                $82 = (($81) + (($ci$050*12)|0)|0);
                $83 = HEAP32[$82>>2]|0;
                $84 = ($83>>>0)<(1048576);
                do {
                 if ($84) {
                  $85 = (((($81) + (($ci$050*12)|0)|0)) + 4|0);
                  $86 = HEAP32[$85>>2]|0;
                  HEAP32[$3>>2] = $86;
                  $87 = (((($81) + (($ci$050*12)|0)|0)) + 8|0);
                  $88 = HEAP32[$87>>2]|0;
                  HEAP32[$4>>2] = $88;
                  HEAP32[$5>>2] = $83;
                  HEAP32[$vararg_buffer8>>2] = $83;
                  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
                  HEAP32[$vararg_ptr11>>2] = $88;
                  (_printf(352210,$vararg_buffer8)|0);
                 } else {
                  $89 = ($83>>>0)>(8454143);
                  $90 = (($83) + ($loadBase$054))|0;
                  $91 = ($90>>>0)>(8454143);
                  $or$cond5 = $89 | $91;
                  if (!($or$cond5)) {
                   break;
                  }
                  $92 = (((($81) + (($ci$050*12)|0)|0)) + 4|0);
                  $93 = HEAP32[$92>>2]|0;
                  HEAP32[$6>>2] = $93;
                  $94 = (((($81) + (($ci$050*12)|0)|0)) + 8|0);
                  $95 = HEAP32[$94>>2]|0;
                  HEAP32[$7>>2] = $95;
                  HEAP32[$vararg_buffer12>>2] = $83;
                  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
                  HEAP32[$vararg_ptr15>>2] = $95;
                  (_printf(352235,$vararg_buffer12)|0);
                 }
                } while(0);
                $96 = (($ci$050) + 1)|0;
                $exitcond80 = ($96|0)==($76|0);
                if ($exitcond80) {
                 break;
                } else {
                 $ci$050 = $96;
                }
               }
               $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
               break L10;
              }
             } while(0);
             $97 = (_elf_read_firmware($11,$f)|0);
             $98 = ($97|0)==(-1);
             if ($98) {
              $$lcssa151 = $11;
              label = 47;
              break L6;
             } else {
              $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
              break;
             }
            }
           }
           $57 = (($gdb$059) + 1)|0;
           $f_cpu$1 = $f_cpu$061;$gdb$1 = $57;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
           break;
          }
         }
         $43 = (($trace$060) + 1)|0;
         $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $pi$057;$trace$1 = $43;$trace_vectors_count$1 = $trace_vectors_count$056;
         break;
        }
       }
       $32 = ($pi$057|0)<($2|0);
       if (!($32)) {
        label = 18;
        break L6;
       }
       $33 = (($pi$057) + 1)|0;
       $34 = (($argv) + ($33<<2)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (_atoi($35)|0);
       $f_cpu$1 = $36;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $33;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
      }
     }
    } while(0);
    if ((label|0) == 11) {
     label = 0;
     $22 = ($pi$057|0)<($2|0);
     if (!($22)) {
      label = 13;
      break;
     }
     $23 = (($pi$057) + 1)|0;
     $24 = (($argv) + ($23<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     (_strcpy($name,$25)|0);
     $f_cpu$1 = $f_cpu$061;$gdb$1 = $gdb$059;$loadBase$1 = $loadBase$054;$log$1 = $log$058;$pi$1 = $23;$trace$1 = $trace$060;$trace_vectors_count$1 = $trace_vectors_count$056;
    }
    $101 = (($pi$1) + 1)|0;
    $102 = ($101|0)<($argc|0);
    if ($102) {
     $f_cpu$061 = $f_cpu$1;$gdb$059 = $gdb$1;$loadBase$054 = $loadBase$1;$log$058 = $log$1;$pi$057 = $101;$trace$060 = $trace$1;$trace_vectors_count$056 = $trace_vectors_count$1;
    } else {
     $f_cpu$1$lcssa = $f_cpu$1;$gdb$1$lcssa = $gdb$1;$log$1$lcssa = $log$1;$trace$1$lcssa = $trace$1;$trace_vectors_count$1$lcssa = $trace_vectors_count$1;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $strlenfirst$pre = HEAP8[$name>>0]|0;
    $phitmp = ($strlenfirst$pre<<24>>24)==(0);
    if (!($phitmp)) {
     (_strcpy($f,$name)|0);
    }
    $103 = ($f_cpu$1$lcssa|0)==(0);
    if ($103) {
     $gdb$0$lcssa8893 = $gdb$1$lcssa;$log$0$lcssa8992 = $log$1$lcssa;$trace$0$lcssa8794 = $trace$1$lcssa;$trace_vectors_count$0$lcssa9091 = $trace_vectors_count$1$lcssa;
     break;
    }
    $104 = ((($f)) + 64|0);
    HEAP32[$104>>2] = $f_cpu$1$lcssa;
    $gdb$0$lcssa8893 = $gdb$1$lcssa;$log$0$lcssa8992 = $log$1$lcssa;$trace$0$lcssa8794 = $trace$1$lcssa;$trace_vectors_count$0$lcssa9091 = $trace_vectors_count$1$lcssa;
    break;
   }
   else if ((label|0) == 8) {
    $16 = HEAP32[$argv>>2]|0;
    $17 = (_basename($16)|0);
    _display_usage($17);
    // unreachable;
   }
   else if ((label|0) == 13) {
    $26 = HEAP32[$argv>>2]|0;
    $27 = (_basename($26)|0);
    _display_usage($27);
    // unreachable;
   }
   else if ((label|0) == 18) {
    $37 = HEAP32[$argv>>2]|0;
    $38 = (_basename($37)|0);
    _display_usage($38);
    // unreachable;
   }
   else if ((label|0) == 36) {
    $74 = HEAP32[87820]|0;
    $75 = HEAP32[$argv>>2]|0;
    HEAP32[$vararg_buffer>>2] = $75;
    (_fprintf($74,352097,$vararg_buffer)|0);
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 38) {
    $78 = HEAP32[87820]|0;
    $79 = HEAP32[$argv>>2]|0;
    $80 = HEAP32[$$lcssa143>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $79;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $80;
    (_fprintf($78,352150,$vararg_buffer1)|0);
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 47) {
    $99 = HEAP32[87820]|0;
    $100 = HEAP32[$argv>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $100;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $$lcssa151;
    (_fprintf($99,352261,$vararg_buffer16)|0);
    _exit(1);
    // unreachable;
   }
  } else {
   $gdb$0$lcssa8893 = 0;$log$0$lcssa8992 = 1;$trace$0$lcssa8794 = 0;$trace_vectors_count$0$lcssa9091 = 0;
  }
 } while(0);
 $105 = (_avr_make_mcu_by_name($f)|0);
 HEAP32[90336] = $105;
 $106 = ($105|0)==(0|0);
 if ($106) {
  $107 = HEAP32[87820]|0;
  $108 = HEAP32[$argv>>2]|0;
  HEAP32[$vararg_buffer20>>2] = $108;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = $f;
  (_fprintf($107,354128,$vararg_buffer20)|0);
  _exit(1);
  // unreachable;
 }
 (_avr_init($105)|0);
 $109 = HEAP32[90336]|0;
 _avr_load_firmware($109,$f);
 $110 = ((($f)) + 2420|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(0);
 if ($112) {
  $$pre = HEAP32[90336]|0;
  $120 = $$pre;
 } else {
  HEAP32[$vararg_buffer24>>2] = $111;
  (_printf(352303,$vararg_buffer24)|0);
  $113 = HEAP32[$110>>2]|0;
  $114 = HEAP32[90336]|0;
  $115 = ((($114)) + 132|0);
  HEAP32[$115>>2] = $113;
  $120 = $114;
 }
 $116 = ($log$0$lcssa8992|0)>(3);
 $117 = $116 ? 3 : $log$0$lcssa8992;
 $118 = $117&255;
 $119 = ((($120)) + 8280|0);
 $121 = HEAP8[$119>>0]|0;
 $122 = ($118 << 1)&255;
 $123 = $122 & 6;
 $124 = $121 & -7;
 $125 = $124 | $123;
 HEAP8[$119>>0] = $125;
 $126 = $trace$0$lcssa8794&255;
 $127 = HEAP32[90336]|0;
 $128 = ((($127)) + 8280|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = $126 & 1;
 $131 = $129 & -2;
 $132 = $131 | $130;
 HEAP8[$128>>0] = $132;
 $133 = ($trace_vectors_count$0$lcssa9091|0)>(0);
 $$pre83 = HEAP32[90336]|0;
 if ($133) {
  $135 = $$pre83;$ti$048 = 0;
  while(1) {
   $134 = ((($135)) + 7704|0);
   $136 = HEAP8[$134>>0]|0;
   $137 = ($136<<24>>24)==(0);
   if ($137) {
    $164 = $135;
   } else {
    $138 = (($trace_vectors) + ($ti$048<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $145 = $135;$vi$047 = 0;
    while(1) {
     $144 = (((($145)) + 7448|0) + ($vi$047<<2)|0);
     $146 = HEAP32[$144>>2]|0;
     $147 = HEAP8[$146>>0]|0;
     $148 = $147&255;
     $149 = ($148|0)==($139|0);
     if ($149) {
      $150 = ((($146)) + 60|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $151 | 2;
      HEAP8[$150>>0] = $152;
      $$pre84 = HEAP32[90336]|0;
      $155 = $$pre84;
     } else {
      $155 = $145;
     }
     $153 = (($vi$047) + 1)|0;
     $154 = ((($155)) + 7704|0);
     $156 = HEAP8[$154>>0]|0;
     $157 = $156&255;
     $158 = ($153|0)<($157|0);
     if ($158) {
      $145 = $155;$vi$047 = $153;
     } else {
      $164 = $155;
      break;
     }
    }
   }
   $143 = (($ti$048) + 1)|0;
   $exitcond = ($143|0)==($trace_vectors_count$0$lcssa9091|0);
   if ($exitcond) {
    $141 = $164;
    break;
   } else {
    $135 = $164;$ti$048 = $143;
   }
  }
 } else {
  $141 = $$pre83;
 }
 $140 = ((($141)) + 8296|0);
 HEAP32[$140>>2] = 1234;
 $142 = ($gdb$0$lcssa8893|0)==(0);
 if (!($142)) {
  $159 = ((($141)) + 36|0);
  HEAP32[$159>>2] = 1;
  (_avr_gdb_init($141)|0);
 }
 (_signal(2,(83|0))|0);
 (_signal(15,(83|0))|0);
 while(1) {
  $160 = HEAP32[90336]|0;
  $161 = (_avr_run($160)|0);
  $162 = $161 | 1;
  $not$ = ($162|0)==(7);
  if ($not$) {
   break;
  }
 }
 $163 = HEAP32[90336]|0;
 _avr_terminate($163);
 STACKTOP = sp;return 0;
}
function _avr_gdb_handle_watchpoints($avr,$addr,$type) {
 $avr = $avr|0;
 $addr = $addr|0;
 $type = $type|0;
 var $$01$i = 0, $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $check$0$lcssa$i = 0, $check$03$i = 0, $check$03$i$lcssa = 0, $cmd = 0, $dst$0$lcssa$i = 0, $dst$02$i = 0, $fold$i = 0, $i$02$i = 0, $i$02$i$lcssa13 = 0, $phitmp$i = 0, $reply$i = 0, $vararg_buffer = 0, $vararg_buffer9 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer = sp;
 $reply$i = sp + 128|0;
 $cmd = sp + 44|0;
 $0 = ((($avr)) + 8292|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $addr&65535;
 $3 = ((($1)) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 } else {
  $i$02$i = 0;
 }
 while(1) {
  $6 = (((($1)) + 404|0) + (($i$02$i*12)|0)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)>($2>>>0);
  if ($8) {
   label = 13;
   break;
  }
  $9 = (((((($1)) + 404|0) + (($i$02$i*12)|0)|0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7))|0;
  $12 = ($11>>>0)>($2>>>0);
  if ($12) {
   $i$02$i$lcssa13 = $i$02$i;
   label = 5;
   break;
  }
  $13 = (($i$02$i) + 1)|0;
  $14 = ($13>>>0)<($4>>>0);
  if ($14) {
   $i$02$i = $13;
  } else {
   label = 13;
   break;
  }
 }
 if ((label|0) == 5) {
  $15 = ($i$02$i$lcssa13|0)==(-1);
  if ($15) {
   STACKTOP = sp;return;
  }
  $16 = (((((($1)) + 404|0) + (($i$02$i$lcssa13*12)|0)|0)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & $type;
  $19 = ($18|0)==(0);
  if ($19) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($20)) + 5892|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 95|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ((($22)) + 93|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ((($22)) + 94|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ((($20)) + 132|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 & 255;
  $35 = $33 >>> 8;
  $36 = $35 & 255;
  $37 = $33 >>> 16;
  $38 = $37 & 255;
  $39 = $17 & 12;
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = $17 & 4;
   $42 = ($41|0)!=(0);
   $43 = $42 ? 352343 : 352349;
   $45 = $43;
  } else {
   $45 = 352356;
  }
  $44 = $2 | 8388608;
  HEAP32[$vararg_buffer>>2] = 5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $25;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $28;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $31;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $34;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $36;
  $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
  HEAP32[$vararg_ptr6>>2] = $38;
  $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
  HEAP32[$vararg_ptr7>>2] = $45;
  $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
  HEAP32[$vararg_ptr8>>2] = $44;
  (_sprintf($cmd,352363,$vararg_buffer)|0);
  $46 = ((($reply$i)) + 1|0);
  HEAP8[$reply$i>>0] = 36;
  $47 = HEAP8[$cmd>>0]|0;
  $48 = ($47<<24>>24)==(0);
  if ($48) {
   $check$0$lcssa$i = 0;$dst$0$lcssa$i = $46;
  } else {
   $$01$i = $cmd;$50 = $47;$check$03$i = 0;$dst$02$i = $46;
   while(1) {
    $49 = $50&255;
    $51 = $check$03$i & 255;
    $52 = (($51) + ($49))|0;
    $53 = ((($$01$i)) + 1|0);
    $54 = ((($dst$02$i)) + 1|0);
    HEAP8[$dst$02$i>>0] = $50;
    $55 = HEAP8[$53>>0]|0;
    $56 = ($55<<24>>24)==(0);
    if ($56) {
     $$lcssa = $49;$$lcssa12 = $54;$check$03$i$lcssa = $check$03$i;
     break;
    } else {
     $$01$i = $53;$50 = $55;$check$03$i = $52;$dst$02$i = $54;
    }
   }
   $fold$i = (($check$03$i$lcssa) + ($$lcssa))|0;
   $phitmp$i = $fold$i & 255;
   $check$0$lcssa$i = $phitmp$i;$dst$0$lcssa$i = $$lcssa12;
  }
  HEAP32[$vararg_buffer9>>2] = $check$0$lcssa$i;
  (_sprintf($dst$0$lcssa$i,352415,$vararg_buffer9)|0);
  $57 = ((($1)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $dst$0$lcssa$i;
  $60 = $reply$i;
  $61 = (3 - ($60))|0;
  $62 = (($61) + ($59))|0;
  (_send($58,$reply$i,$62,0)|0);
  $63 = ((($avr)) + 36|0);
  HEAP32[$63>>2] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function _avr_gdb_processor($avr,$sleep) {
 $avr = $avr|0;
 $sleep = $sleep|0;
 var $$0 = 0, $$01$i116$i$i = 0, $$01$i23$i$i = 0, $$01$i45$i$i = 0, $$01$i56$i$i = 0, $$1$i = 0, $$lcssa = 0, $$lcssa100 = 0, $$lcssa101 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $$phi$trans$insert$i$i = 0, $$pn$i = 0, $$pre$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$i$i = 0, $addr11$i$i = 0, $addr7$i$i = 0, $buffer$i = 0, $check$0$lcssa$i$i$i = 0, $check$0$lcssa$i121$i$i = 0;
 var $check$0$lcssa$i50$i$i = 0, $check$0$lcssa$i61$i$i = 0, $check$03$i114$i$i = 0, $check$03$i114$i$i$lcssa = 0, $check$03$i21$i$i = 0, $check$03$i21$i$i$lcssa = 0, $check$03$i43$i$i = 0, $check$03$i43$i$i$lcssa = 0, $check$03$i54$i$i = 0, $check$03$i54$i$i$lcssa = 0, $dst$0$lcssa$i$i$i = 0, $dst$0$lcssa$i122$i$i = 0, $dst$0$lcssa$i51$i$i = 0, $dst$0$lcssa$i62$i$i = 0, $dst$02$i115$i$i = 0, $dst$02$i22$i$i = 0, $dst$02$i44$i$i = 0, $dst$02$i55$i$i = 0, $dst$0298$i$i = 0, $dst5$0$lcssa$i$i = 0;
 var $dst5$0301$i$i = 0, $ee$i$i = 0, $ee9$i$i = 0, $end$0$i = 0, $end$0$i$lcssa = 0, $exitcond$i$i$i = 0, $exitcond$i65$i$i = 0, $exitcond351$i$i = 0, $exitcond352$i$i = 0, $fold$i118$i$i = 0, $fold$i25$i$i = 0, $fold$i47$i$i = 0, $fold$i58$i$i = 0, $i$01$i$i$i = 0, $i$01$i64$i$i = 0, $i$02$i = 0, $i$02$i$lcssa107 = 0, $i$0294$i$i = 0, $i$i = 0, $i1$0299$i$i = 0;
 var $kind$i$i = 0, $len$i$i = 0, $len12$i$i = 0, $len8$i$i = 0, $max$0$i = 0, $max$0$in$i = 0, $or$cond$i$i = 0, $phitmp$i119$i$i = 0, $phitmp$i26$i$i = 0, $phitmp$i48$i$i = 0, $phitmp$i59$i$i = 0, $read_set$i = 0, $regi$i$i = 0, $regi2$i$i = 0, $rep$i$i = 0, $reply$i$i$i = 0, $scevgep$i$i = 0, $scevgep344$i$i = 0, $scevgep345$i$i = 0, $scevgep348$i$i = 0;
 var $scevgep353$i$i = 0, $scevgep356$i$i = 0, $scevgep359$i$i = 0, $scevgep362$i$i = 0, $scevgep365$i$i = 0, $scevgep368$i$i = 0, $scevgep371$i$i = 0, $scevgep374$i$i = 0, $scevgep377$i$i = 0, $scevgep380$i$i = 0, $scevgep383$i$i = 0, $scevgep386$i$i = 0, $scevgep389$i$i = 0, $src$0$i = 0, $src$0$i$lcssa104 = 0, $src$0296$i$i = 0, $src$0296$i$i$lcssa = 0, $src$1$i = 0, $src3$2$ph$i$i = 0, $src3$2300$i$i = 0;
 var $timo$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer89 = 0, $vararg_buffer92 = 0, $vararg_buffer97 = 0, $vararg_ptr16 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0;
 var $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr72 = 0, $vararg_ptr88 = 0, $vararg_ptr95 = 0, $vararg_ptr96 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3584|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer112 = sp + 296|0;
 $vararg_buffer109 = sp + 288|0;
 $vararg_buffer106 = sp + 280|0;
 $vararg_buffer103 = sp + 272|0;
 $vararg_buffer100 = sp + 264|0;
 $vararg_buffer97 = sp + 256|0;
 $vararg_buffer92 = sp + 240|0;
 $vararg_buffer89 = sp + 232|0;
 $vararg_buffer85 = sp + 224|0;
 $vararg_buffer82 = sp + 216|0;
 $vararg_buffer79 = sp + 208|0;
 $vararg_buffer76 = sp + 200|0;
 $vararg_buffer73 = sp + 192|0;
 $vararg_buffer69 = sp + 184|0;
 $vararg_buffer66 = sp + 176|0;
 $vararg_buffer63 = sp + 168|0;
 $vararg_buffer60 = sp + 160|0;
 $vararg_buffer55 = sp + 144|0;
 $vararg_buffer52 = sp + 136|0;
 $vararg_buffer49 = sp + 128|0;
 $vararg_buffer45 = sp + 120|0;
 $vararg_buffer41 = sp + 112|0;
 $vararg_buffer38 = sp + 104|0;
 $vararg_buffer35 = sp + 96|0;
 $vararg_buffer32 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $reply$i$i$i = sp + 2552|0;
 $rep$i$i = sp + 1528|0;
 $regi$i$i = sp + 496|0;
 $regi2$i$i = sp + 492|0;
 $addr$i$i = sp + 488|0;
 $len$i$i = sp + 484|0;
 $ee$i$i = sp + 472|0;
 $addr7$i$i = sp + 468|0;
 $len8$i$i = sp + 464|0;
 $ee9$i$i = sp + 452|0;
 $kind$i$i = sp + 448|0;
 $addr11$i$i = sp + 444|0;
 $len12$i$i = sp + 440|0;
 $read_set$i = sp + 312|0;
 $timo$i = sp + 304|0;
 $i$i = sp + 300|0;
 $buffer$i = sp + 504|0;
 $0 = ($avr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($avr)) + 8292|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($avr)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 L7: do {
  switch ($5|0) {
  case 2:  {
   $6 = ((($avr)) + 132|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($2)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $i$02$i = 0;
    while(1) {
     $11 = (((($2)) + 16|0) + (($i$02$i*12)|0)|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12>>>0)>($7>>>0);
     if ($13) {
      break;
     }
     $14 = ($12|0)==($7|0);
     if ($14) {
      $i$02$i$lcssa107 = $i$02$i;
      label = 8;
      break;
     }
     $15 = (($i$02$i) + 1)|0;
     $16 = ($15>>>0)<($9>>>0);
     if ($16) {
      $i$02$i = $15;
     } else {
      break;
     }
    }
    if ((label|0) == 8) {
     $17 = ($i$02$i$lcssa107|0)==(-1);
     if (!($17)) {
      _gdb_send_quick_status($2);
      HEAP32[$4>>2] = 1;
      break L7;
     }
    }
    $18 = ($5|0)==(5);
    if ($18) {
     label = 11;
    }
   }
   break;
  }
  case 5:  {
   label = 11;
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 11) {
  _gdb_send_quick_status($2);
  HEAP32[$4>>2] = 1;
 }
 dest=$read_set$i; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $19 = ((($2)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(-1);
 if ($21) {
  $28 = ((($2)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & 31;
  $31 = 1 << $30;
  $32 = $29 >>> 5;
  $33 = (($read_set$i) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $31 | $34;
  HEAP32[$33>>2] = $35;
  $max$0$in$i = $29;
 } else {
  $22 = $20 & 31;
  $23 = 1 << $22;
  $24 = $20 >>> 5;
  $25 = (($read_set$i) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | $23;
  HEAP32[$25>>2] = $27;
  $max$0$in$i = $20;
 }
 $max$0$i = (($max$0$in$i) + 1)|0;
 $36 = (($sleep>>>0) / 1000000)&-1;
 HEAP32[$timo$i>>2] = $36;
 $37 = ((($timo$i)) + 4|0);
 $38 = (($sleep>>>0) % 1000000)&-1;
 HEAP32[$37>>2] = $38;
 $39 = (_select($max$0$i,$read_set$i,0,0,$timo$i)|0);
 $40 = ($39|0)==(0);
 L24: do {
  if ($40) {
   $$1$i = 0;
  } else {
   $41 = ((($2)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 >>> 5;
   $44 = (($read_set$i) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $42 & 31;
   $47 = 1 << $46;
   $48 = $47 & $45;
   $49 = ($48|0)==(0);
   do {
    if (!($49)) {
     $50 = (_accept($42,0,0)|0);
     HEAP32[$19>>2] = $50;
     $51 = ($50|0)==(-1);
     if ($51) {
      _perror(352465);
      (_sleep(5)|0);
      $$1$i = 1;
      break L24;
     } else {
      HEAP32[$i$i>>2] = 1;
      (_setsockopt($50,6,1,$i$i,4)|0);
      $52 = HEAP32[$2>>2]|0;
      $53 = ((($52)) + 36|0);
      HEAP32[$53>>2] = 1;
      HEAP32[$vararg_buffer>>2] = 352514;
      (_printf(352492,$vararg_buffer)|0);
      break;
     }
    }
   } while(0);
   $54 = HEAP32[$19>>2]|0;
   $55 = ($54|0)==(-1);
   if ($55) {
    $$1$i = 1;
   } else {
    $56 = $54 >>> 5;
    $57 = (($read_set$i) + ($56<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $54 & 31;
    $60 = 1 << $59;
    $61 = $58 & $60;
    $62 = ($61|0)==(0);
    if ($62) {
     $$1$i = 1;
    } else {
     $63 = (_recv($54,$buffer$i,1023,0)|0);
     switch ($63|0) {
     case 0:  {
      HEAP32[$vararg_buffer1>>2] = 352514;
      (_printf(352534,$vararg_buffer1)|0);
      $64 = HEAP32[$19>>2]|0;
      (_close($64)|0);
      $65 = ((($2)) + 12|0);
      HEAP32[$65>>2] = 0;
      $66 = ((($2)) + 400|0);
      HEAP32[$66>>2] = 0;
      $67 = HEAP32[$2>>2]|0;
      $68 = ((($67)) + 36|0);
      HEAP32[$68>>2] = 2;
      HEAP32[$19>>2] = -1;
      $$1$i = 1;
      break L24;
      break;
     }
     case -1:  {
      _perror(352556);
      (_sleep(1)|0);
      $$1$i = 1;
      break L24;
      break;
     }
     default: {
      $69 = (($buffer$i) + ($63)|0);
      HEAP8[$69>>0] = 0;
      $src$0$i = $buffer$i;
      L36: while(1) {
       $70 = HEAP8[$src$0$i>>0]|0;
       switch ($70<<24>>24) {
       case 3:  {
        $src$0$i$lcssa104 = $src$0$i;
        label = 28;
        break L36;
        break;
       }
       case 43: case 45:  {
        break;
       }
       default: {
        $75 = $70;$src$1$i = $src$0$i;
        break L36;
       }
       }
       $71 = ((($src$0$i)) + 1|0);
       $src$0$i = $71;
      }
      if ((label|0) == 28) {
       $72 = ((($src$0$i$lcssa104)) + 1|0);
       $73 = HEAP32[$2>>2]|0;
       $74 = ((($73)) + 36|0);
       HEAP32[$74>>2] = 5;
       (_puts(352581)|0);
       $$pre$i = HEAP8[$72>>0]|0;
       $75 = $$pre$i;$src$1$i = $72;
      }
      $76 = ($75<<24>>24)==(36);
      if ($76) {
       $$pn$i = $69;
       while(1) {
        $end$0$i = ((($$pn$i)) + -1|0);
        $77 = ($end$0$i>>>0)>($src$1$i>>>0);
        if (!($77)) {
         $end$0$i$lcssa = $end$0$i;
         label = 32;
         break;
        }
        $78 = HEAP8[$end$0$i>>0]|0;
        $79 = ($78<<24>>24)==(35);
        HEAP8[$end$0$i>>0] = 0;
        if ($79) {
         break;
        } else {
         $$pn$i = $end$0$i;
        }
       }
       if ((label|0) == 32) {
        HEAP8[$end$0$i$lcssa>>0] = 0;
       }
       $80 = ((($src$1$i)) + 1|0);
       $81 = HEAP32[$19>>2]|0;
       (_send($81,352599,1,0)|0);
       $82 = HEAP32[$2>>2]|0;
       $83 = ((($src$1$i)) + 2|0);
       $84 = HEAP8[$80>>0]|0;
       $85 = $84&255;
       L49: do {
        switch ($85|0) {
        case 113:  {
         $86 = (_strncmp($83,352601,9)|0);
         $87 = ($86|0)==(0);
         if ($87) {
          $88 = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $89 = ((($reply$i$i$i)) + 2|0);
          HEAP8[$88>>0] = 113;
          $90 = ((($reply$i$i$i)) + 3|0);
          HEAP8[$89>>0] = 88;
          $91 = ((($reply$i$i$i)) + 4|0);
          HEAP8[$90>>0] = 102;
          $92 = ((($reply$i$i$i)) + 5|0);
          HEAP8[$91>>0] = 101;
          $93 = ((($reply$i$i$i)) + 6|0);
          HEAP8[$92>>0] = 114;
          $94 = ((($reply$i$i$i)) + 7|0);
          HEAP8[$93>>0] = 58;
          $95 = ((($reply$i$i$i)) + 8|0);
          HEAP8[$94>>0] = 109;
          $96 = ((($reply$i$i$i)) + 9|0);
          HEAP8[$95>>0] = 101;
          $97 = ((($reply$i$i$i)) + 10|0);
          HEAP8[$96>>0] = 109;
          $98 = ((($reply$i$i$i)) + 11|0);
          HEAP8[$97>>0] = 111;
          $99 = ((($reply$i$i$i)) + 12|0);
          HEAP8[$98>>0] = 114;
          $100 = ((($reply$i$i$i)) + 13|0);
          HEAP8[$99>>0] = 121;
          $101 = ((($reply$i$i$i)) + 14|0);
          HEAP8[$100>>0] = 45;
          $102 = ((($reply$i$i$i)) + 15|0);
          HEAP8[$101>>0] = 109;
          $103 = ((($reply$i$i$i)) + 16|0);
          HEAP8[$102>>0] = 97;
          $104 = ((($reply$i$i$i)) + 17|0);
          HEAP8[$103>>0] = 112;
          $105 = ((($reply$i$i$i)) + 18|0);
          HEAP8[$104>>0] = 58;
          $106 = ((($reply$i$i$i)) + 19|0);
          HEAP8[$105>>0] = 114;
          $107 = ((($reply$i$i$i)) + 20|0);
          HEAP8[$106>>0] = 101;
          $108 = ((($reply$i$i$i)) + 21|0);
          HEAP8[$107>>0] = 97;
          $109 = ((($reply$i$i$i)) + 22|0);
          HEAP8[$108>>0] = 100;
          HEAP8[$109>>0] = 43;
          $scevgep$i$i = ((($reply$i$i$i)) + 23|0);
          HEAP32[$vararg_buffer4>>2] = 69;
          (_sprintf($scevgep$i$i,352415,$vararg_buffer4)|0);
          $110 = HEAP32[$19>>2]|0;
          $111 = $scevgep$i$i;
          $112 = $reply$i$i$i;
          $113 = (3 - ($112))|0;
          $114 = (($113) + ($111))|0;
          (_send($110,$reply$i$i$i,$114,0)|0);
          break L49;
         }
         $115 = (_strncmp($83,352611,8)|0);
         $116 = ($115|0)==(0);
         if ($116) {
          $117 = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          HEAP8[$117>>0] = 49;
          $scevgep344$i$i = ((($reply$i$i$i)) + 2|0);
          HEAP32[$vararg_buffer7>>2] = 49;
          (_sprintf($scevgep344$i$i,352415,$vararg_buffer7)|0);
          $118 = HEAP32[$19>>2]|0;
          $119 = $scevgep344$i$i;
          $120 = $reply$i$i$i;
          $121 = (3 - ($120))|0;
          $122 = (($121) + ($119))|0;
          (_send($118,$reply$i$i$i,$122,0)|0);
          break L49;
         }
         $123 = (_strncmp($83,352620,7)|0);
         $124 = ($123|0)==(0);
         if ($124) {
          $125 = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $126 = ((($reply$i$i$i)) + 2|0);
          HEAP8[$125>>0] = 84;
          $127 = ((($reply$i$i$i)) + 3|0);
          HEAP8[$126>>0] = 101;
          $128 = ((($reply$i$i$i)) + 4|0);
          HEAP8[$127>>0] = 120;
          $129 = ((($reply$i$i$i)) + 5|0);
          HEAP8[$128>>0] = 116;
          $130 = ((($reply$i$i$i)) + 6|0);
          HEAP8[$129>>0] = 61;
          $131 = ((($reply$i$i$i)) + 7|0);
          HEAP8[$130>>0] = 48;
          $132 = ((($reply$i$i$i)) + 8|0);
          HEAP8[$131>>0] = 59;
          $133 = ((($reply$i$i$i)) + 9|0);
          HEAP8[$132>>0] = 68;
          $134 = ((($reply$i$i$i)) + 10|0);
          HEAP8[$133>>0] = 97;
          $135 = ((($reply$i$i$i)) + 11|0);
          HEAP8[$134>>0] = 116;
          $136 = ((($reply$i$i$i)) + 12|0);
          HEAP8[$135>>0] = 97;
          $137 = ((($reply$i$i$i)) + 13|0);
          HEAP8[$136>>0] = 61;
          $138 = ((($reply$i$i$i)) + 14|0);
          HEAP8[$137>>0] = 56;
          $139 = ((($reply$i$i$i)) + 19|0);
          $140 = ((($reply$i$i$i)) + 20|0);
          ;HEAP8[$138>>0]=48|0;HEAP8[$138+1>>0]=48|0;HEAP8[$138+2>>0]=48|0;HEAP8[$138+3>>0]=48|0;HEAP8[$138+4>>0]=48|0;
          HEAP8[$139>>0] = 59;
          $141 = ((($reply$i$i$i)) + 21|0);
          HEAP8[$140>>0] = 66;
          $142 = ((($reply$i$i$i)) + 22|0);
          HEAP8[$141>>0] = 115;
          $143 = ((($reply$i$i$i)) + 23|0);
          HEAP8[$142>>0] = 115;
          $144 = ((($reply$i$i$i)) + 24|0);
          HEAP8[$143>>0] = 61;
          $145 = ((($reply$i$i$i)) + 25|0);
          HEAP8[$144>>0] = 56;
          $scevgep345$i$i = ((($reply$i$i$i)) + 30|0);
          ;HEAP8[$145>>0]=48|0;HEAP8[$145+1>>0]=48|0;HEAP8[$145+2>>0]=48|0;HEAP8[$145+3>>0]=48|0;HEAP8[$145+4>>0]=48|0;
          HEAP32[$vararg_buffer10>>2] = 244;
          (_sprintf($scevgep345$i$i,352415,$vararg_buffer10)|0);
          $146 = HEAP32[$19>>2]|0;
          $147 = $scevgep345$i$i;
          $148 = $reply$i$i$i;
          $149 = (3 - ($148))|0;
          $150 = (($149) + ($147))|0;
          (_send($146,$reply$i$i$i,$150,0)|0);
          break L49;
         }
         $151 = (_strncmp($83,352628,20)|0);
         $152 = ($151|0)==(0);
         if (!($152)) {
          $176 = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          HEAP32[$vararg_buffer20>>2] = 0;
          (_sprintf($176,352415,$vararg_buffer20)|0);
          $177 = HEAP32[$19>>2]|0;
          $178 = $176;
          $179 = $reply$i$i$i;
          $180 = (3 - ($179))|0;
          $181 = (($180) + ($178))|0;
          (_send($177,$reply$i$i$i,$181,0)|0);
          break L49;
         }
         $153 = ((($82)) + 4|0);
         $154 = HEAP16[$153>>1]|0;
         $155 = $154&65535;
         $156 = (($155) + 1)|0;
         $157 = ((($82)) + 8|0);
         $158 = HEAP32[$157>>2]|0;
         $159 = (($158) + 1)|0;
         HEAP32[$vararg_buffer13>>2] = $156;
         $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
         HEAP32[$vararg_ptr16>>2] = $159;
         (_snprintf($rep$i$i,1024,352649,$vararg_buffer13)|0);
         $160 = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $161 = HEAP8[$rep$i$i>>0]|0;
         $162 = ($161<<24>>24)==(0);
         if ($162) {
          $check$0$lcssa$i$i$i = 0;$dst$0$lcssa$i$i$i = $160;
         } else {
          $$01$i23$i$i = $rep$i$i;$164 = $161;$check$03$i21$i$i = 0;$dst$02$i22$i$i = $160;
          while(1) {
           $163 = $164&255;
           $165 = $check$03$i21$i$i & 255;
           $166 = (($165) + ($163))|0;
           $167 = ((($$01$i23$i$i)) + 1|0);
           $168 = ((($dst$02$i22$i$i)) + 1|0);
           HEAP8[$dst$02$i22$i$i>>0] = $164;
           $169 = HEAP8[$167>>0]|0;
           $170 = ($169<<24>>24)==(0);
           if ($170) {
            $$lcssa = $163;$$lcssa94 = $168;$check$03$i21$i$i$lcssa = $check$03$i21$i$i;
            break;
           } else {
            $$01$i23$i$i = $167;$164 = $169;$check$03$i21$i$i = $166;$dst$02$i22$i$i = $168;
           }
          }
          $fold$i25$i$i = (($check$03$i21$i$i$lcssa) + ($$lcssa))|0;
          $phitmp$i26$i$i = $fold$i25$i$i & 255;
          $check$0$lcssa$i$i$i = $phitmp$i26$i$i;$dst$0$lcssa$i$i$i = $$lcssa94;
         }
         HEAP32[$vararg_buffer17>>2] = $check$0$lcssa$i$i$i;
         (_sprintf($dst$0$lcssa$i$i$i,352415,$vararg_buffer17)|0);
         $171 = HEAP32[$19>>2]|0;
         $172 = $dst$0$lcssa$i$i$i;
         $173 = $reply$i$i$i;
         $174 = (3 - ($173))|0;
         $175 = (($174) + ($172))|0;
         (_send($171,$reply$i$i$i,$175,0)|0);
         break;
        }
        case 63:  {
         _gdb_send_quick_status($2);
         break;
        }
        case 71:  {
         $182 = (_strlen($83)|0);
         (_read_hex_string($83,$rep$i$i,$182)|0);
         $i$0294$i$i = 0;$src$0296$i$i = $rep$i$i;
         L71: while(1) {
          switch ($i$0294$i$i|0) {
          case 34:  {
           $src$0296$i$i$lcssa = $src$0296$i$i;
           label = 59;
           break L71;
           break;
          }
          case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
           $190 = HEAP8[$src$0296$i$i>>0]|0;
           $191 = HEAP32[$2>>2]|0;
           $192 = ((($191)) + 5892|0);
           $193 = HEAP32[$192>>2]|0;
           $194 = (($193) + ($i$0294$i$i)|0);
           HEAP8[$194>>0] = $190;
           break;
          }
          case 32:  {
           $195 = HEAP8[$src$0296$i$i>>0]|0;
           $196 = HEAP32[$2>>2]|0;
           $197 = ((($196)) + 5892|0);
           $198 = HEAP32[$197>>2]|0;
           $199 = ((($198)) + 95|0);
           HEAP8[$199>>0] = $195;
           $i$01$i$i$i = 0;
           while(1) {
            $200 = HEAP32[$2>>2]|0;
            $201 = $i$01$i$i$i&255;
            $202 = HEAP8[$src$0296$i$i>>0]|0;
            $203 = $202&255;
            $204 = 1 << $i$01$i$i$i;
            $205 = $203 & $204;
            $206 = ($205|0)!=(0);
            $207 = $206&1;
            $208 = ($201<<24>>24)==(7);
            do {
             if ($208) {
              if (!($206)) {
               $213 = ((($200)) + 128|0);
               HEAP8[$213>>0] = 0;
               break;
              }
              $209 = ((($200)) + 127|0);
              $210 = HEAP8[$209>>0]|0;
              $211 = ($210<<24>>24)==(0);
              if ($211) {
               $212 = ((($200)) + 128|0);
               HEAP8[$212>>0] = -2;
              }
             }
            } while(0);
            $214 = (((($200)) + 120|0) + ($i$01$i$i$i)|0);
            HEAP8[$214>>0] = $207;
            $215 = (($i$01$i$i$i) + 1)|0;
            $exitcond$i$i$i = ($215|0)==(8);
            if ($exitcond$i$i$i) {
             break;
            } else {
             $i$01$i$i$i = $215;
            }
           }
           break;
          }
          case 33:  {
           $216 = HEAP8[$src$0296$i$i>>0]|0;
           $217 = HEAP32[$2>>2]|0;
           $218 = ((($217)) + 5892|0);
           $219 = HEAP32[$218>>2]|0;
           $220 = ((($219)) + 93|0);
           HEAP8[$220>>0] = $216;
           $221 = ((($src$0296$i$i)) + 1|0);
           $222 = HEAP8[$221>>0]|0;
           $223 = HEAP32[$2>>2]|0;
           $224 = ((($223)) + 5892|0);
           $225 = HEAP32[$224>>2]|0;
           $226 = ((($225)) + 94|0);
           HEAP8[$226>>0] = $222;
           $227 = ((($src$0296$i$i)) + 2|0);
           $i$0294$i$i = 34;$src$0296$i$i = $227;
           continue L71;
           break;
          }
          default: {
          }
          }
          $247 = ((($src$0296$i$i)) + 1|0);
          $248 = (($i$0294$i$i) + 1)|0;
          $exitcond351$i$i = ($248|0)==(35);
          if ($exitcond351$i$i) {
           break;
          } else {
           $i$0294$i$i = $248;$src$0296$i$i = $247;
          }
         }
         if ((label|0) == 59) {
          $228 = HEAP8[$src$0296$i$i$lcssa>>0]|0;
          $229 = $228&255;
          $230 = ((($src$0296$i$i$lcssa)) + 1|0);
          $231 = HEAP8[$230>>0]|0;
          $232 = $231&255;
          $233 = $232 << 8;
          $234 = $233 | $229;
          $235 = ((($src$0296$i$i$lcssa)) + 2|0);
          $236 = HEAP8[$235>>0]|0;
          $237 = $236&255;
          $238 = $237 << 16;
          $239 = $234 | $238;
          $240 = ((($src$0296$i$i$lcssa)) + 3|0);
          $241 = HEAP8[$240>>0]|0;
          $242 = $241&255;
          $243 = $242 << 24;
          $244 = $239 | $243;
          $245 = HEAP32[$2>>2]|0;
          $246 = ((($245)) + 132|0);
          HEAP32[$246>>2] = $244;
         }
         $183 = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $184 = ((($reply$i$i$i)) + 2|0);
         HEAP8[$183>>0] = 79;
         HEAP8[$184>>0] = 75;
         $scevgep348$i$i = ((($reply$i$i$i)) + 3|0);
         HEAP32[$vararg_buffer23>>2] = 154;
         (_sprintf($scevgep348$i$i,352415,$vararg_buffer23)|0);
         $185 = HEAP32[$19>>2]|0;
         $186 = $scevgep348$i$i;
         $187 = $reply$i$i$i;
         $188 = (3 - ($187))|0;
         $189 = (($188) + ($186))|0;
         (_send($185,$reply$i$i$i,$189,0)|0);
         break;
        }
        case 103:  {
         $dst$0298$i$i = $rep$i$i;$i1$0299$i$i = 0;
         while(1) {
          $265 = (_gdb_read_register($2,$i1$0299$i$i,$dst$0298$i$i)|0);
          $266 = (($dst$0298$i$i) + ($265)|0);
          $267 = (($i1$0299$i$i) + 1)|0;
          $exitcond352$i$i = ($267|0)==(35);
          if ($exitcond352$i$i) {
           break;
          } else {
           $dst$0298$i$i = $266;$i1$0299$i$i = $267;
          }
         }
         $249 = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $250 = HEAP8[$rep$i$i>>0]|0;
         $251 = ($250<<24>>24)==(0);
         if ($251) {
          $check$0$lcssa$i50$i$i = 0;$dst$0$lcssa$i51$i$i = $249;
         } else {
          $$01$i45$i$i = $rep$i$i;$253 = $250;$check$03$i43$i$i = 0;$dst$02$i44$i$i = $249;
          while(1) {
           $252 = $253&255;
           $254 = $check$03$i43$i$i & 255;
           $255 = (($254) + ($252))|0;
           $256 = ((($$01$i45$i$i)) + 1|0);
           $257 = ((($dst$02$i44$i$i)) + 1|0);
           HEAP8[$dst$02$i44$i$i>>0] = $253;
           $258 = HEAP8[$256>>0]|0;
           $259 = ($258<<24>>24)==(0);
           if ($259) {
            $$lcssa96 = $252;$$lcssa97 = $257;$check$03$i43$i$i$lcssa = $check$03$i43$i$i;
            break;
           } else {
            $$01$i45$i$i = $256;$253 = $258;$check$03$i43$i$i = $255;$dst$02$i44$i$i = $257;
           }
          }
          $fold$i47$i$i = (($check$03$i43$i$i$lcssa) + ($$lcssa96))|0;
          $phitmp$i48$i$i = $fold$i47$i$i & 255;
          $check$0$lcssa$i50$i$i = $phitmp$i48$i$i;$dst$0$lcssa$i51$i$i = $$lcssa97;
         }
         HEAP32[$vararg_buffer26>>2] = $check$0$lcssa$i50$i$i;
         (_sprintf($dst$0$lcssa$i51$i$i,352415,$vararg_buffer26)|0);
         $260 = HEAP32[$19>>2]|0;
         $261 = $dst$0$lcssa$i51$i$i;
         $262 = $reply$i$i$i;
         $263 = (3 - ($262))|0;
         $264 = (($263) + ($261))|0;
         (_send($260,$reply$i$i$i,$264,0)|0);
         break;
        }
        case 112:  {
         HEAP32[$regi$i$i>>2] = 0;
         HEAP32[$vararg_buffer29>>2] = $regi$i$i;
         (_sscanf($83,352860,$vararg_buffer29)|0);
         $268 = HEAP32[$regi$i$i>>2]|0;
         (_gdb_read_register($2,$268,$rep$i$i)|0);
         $269 = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         $270 = HEAP8[$rep$i$i>>0]|0;
         $271 = ($270<<24>>24)==(0);
         if ($271) {
          $check$0$lcssa$i61$i$i = 0;$dst$0$lcssa$i62$i$i = $269;
         } else {
          $$01$i56$i$i = $rep$i$i;$273 = $270;$check$03$i54$i$i = 0;$dst$02$i55$i$i = $269;
          while(1) {
           $272 = $273&255;
           $274 = $check$03$i54$i$i & 255;
           $275 = (($274) + ($272))|0;
           $276 = ((($$01$i56$i$i)) + 1|0);
           $277 = ((($dst$02$i55$i$i)) + 1|0);
           HEAP8[$dst$02$i55$i$i>>0] = $273;
           $278 = HEAP8[$276>>0]|0;
           $279 = ($278<<24>>24)==(0);
           if ($279) {
            $$lcssa98 = $272;$$lcssa99 = $277;$check$03$i54$i$i$lcssa = $check$03$i54$i$i;
            break;
           } else {
            $$01$i56$i$i = $276;$273 = $278;$check$03$i54$i$i = $275;$dst$02$i55$i$i = $277;
           }
          }
          $fold$i58$i$i = (($check$03$i54$i$i$lcssa) + ($$lcssa98))|0;
          $phitmp$i59$i$i = $fold$i58$i$i & 255;
          $check$0$lcssa$i61$i$i = $phitmp$i59$i$i;$dst$0$lcssa$i62$i$i = $$lcssa99;
         }
         HEAP32[$vararg_buffer32>>2] = $check$0$lcssa$i61$i$i;
         (_sprintf($dst$0$lcssa$i62$i$i,352415,$vararg_buffer32)|0);
         $280 = HEAP32[$19>>2]|0;
         $281 = $dst$0$lcssa$i62$i$i;
         $282 = $reply$i$i$i;
         $283 = (3 - ($282))|0;
         $284 = (($283) + ($281))|0;
         (_send($280,$reply$i$i$i,$284,0)|0);
         break;
        }
        case 80:  {
         HEAP32[$regi2$i$i>>2] = 0;
         $285 = (_strchr($83,61)|0);
         $286 = ($285|0)==(0|0);
         if (!($286)) {
          $287 = ((($285)) + 1|0);
          HEAP8[$285>>0] = 0;
          HEAP32[$vararg_buffer35>>2] = $regi2$i$i;
          (_sscanf($83,352860,$vararg_buffer35)|0);
          $288 = (_strlen($287)|0);
          (_read_hex_string($287,$rep$i$i,$288)|0);
          $289 = HEAP32[$regi2$i$i>>2]|0;
          switch ($289|0) {
          case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
           $290 = HEAP8[$rep$i$i>>0]|0;
           $291 = HEAP32[$2>>2]|0;
           $292 = ((($291)) + 5892|0);
           $293 = HEAP32[$292>>2]|0;
           $294 = (($293) + ($289)|0);
           HEAP8[$294>>0] = $290;
           break;
          }
          case 32:  {
           $295 = HEAP8[$rep$i$i>>0]|0;
           $296 = HEAP32[$2>>2]|0;
           $297 = ((($296)) + 5892|0);
           $298 = HEAP32[$297>>2]|0;
           $299 = ((($298)) + 95|0);
           HEAP8[$299>>0] = $295;
           $i$01$i64$i$i = 0;
           while(1) {
            $300 = HEAP32[$2>>2]|0;
            $301 = $i$01$i64$i$i&255;
            $302 = HEAP8[$rep$i$i>>0]|0;
            $303 = $302&255;
            $304 = 1 << $i$01$i64$i$i;
            $305 = $303 & $304;
            $306 = ($305|0)!=(0);
            $307 = $306&1;
            $308 = ($301<<24>>24)==(7);
            do {
             if ($308) {
              if (!($306)) {
               $313 = ((($300)) + 128|0);
               HEAP8[$313>>0] = 0;
               break;
              }
              $309 = ((($300)) + 127|0);
              $310 = HEAP8[$309>>0]|0;
              $311 = ($310<<24>>24)==(0);
              if ($311) {
               $312 = ((($300)) + 128|0);
               HEAP8[$312>>0] = -2;
              }
             }
            } while(0);
            $314 = (((($300)) + 120|0) + ($i$01$i64$i$i)|0);
            HEAP8[$314>>0] = $307;
            $315 = (($i$01$i64$i$i) + 1)|0;
            $exitcond$i65$i$i = ($315|0)==(8);
            if ($exitcond$i65$i$i) {
             break;
            } else {
             $i$01$i64$i$i = $315;
            }
           }
           break;
          }
          case 33:  {
           $316 = HEAP8[$rep$i$i>>0]|0;
           $317 = HEAP32[$2>>2]|0;
           $318 = ((($317)) + 5892|0);
           $319 = HEAP32[$318>>2]|0;
           $320 = ((($319)) + 93|0);
           HEAP8[$320>>0] = $316;
           $321 = ((($rep$i$i)) + 1|0);
           $322 = HEAP8[$321>>0]|0;
           $323 = HEAP32[$2>>2]|0;
           $324 = ((($323)) + 5892|0);
           $325 = HEAP32[$324>>2]|0;
           $326 = ((($325)) + 94|0);
           HEAP8[$326>>0] = $322;
           break;
          }
          case 34:  {
           $327 = HEAP8[$rep$i$i>>0]|0;
           $328 = $327&255;
           $329 = ((($rep$i$i)) + 1|0);
           $330 = HEAP8[$329>>0]|0;
           $331 = $330&255;
           $332 = $331 << 8;
           $333 = $332 | $328;
           $334 = ((($rep$i$i)) + 2|0);
           $335 = HEAP8[$334>>0]|0;
           $336 = $335&255;
           $337 = $336 << 16;
           $338 = $333 | $337;
           $339 = ((($rep$i$i)) + 3|0);
           $340 = HEAP8[$339>>0]|0;
           $341 = $340&255;
           $342 = $341 << 24;
           $343 = $338 | $342;
           $344 = HEAP32[$2>>2]|0;
           $345 = ((($344)) + 132|0);
           HEAP32[$345>>2] = $343;
           break;
          }
          default: {
          }
          }
          $346 = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $347 = ((($reply$i$i$i)) + 2|0);
          HEAP8[$346>>0] = 79;
          HEAP8[$347>>0] = 75;
          $scevgep353$i$i = ((($reply$i$i$i)) + 3|0);
          HEAP32[$vararg_buffer38>>2] = 154;
          (_sprintf($scevgep353$i$i,352415,$vararg_buffer38)|0);
          $348 = HEAP32[$19>>2]|0;
          $349 = $scevgep353$i$i;
          $350 = $reply$i$i$i;
          $351 = (3 - ($350))|0;
          $352 = (($351) + ($349))|0;
          (_send($348,$reply$i$i$i,$352,0)|0);
         }
         break;
        }
        case 109:  {
         HEAP32[$vararg_buffer41>>2] = $addr$i$i;
         $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
         HEAP32[$vararg_ptr44>>2] = $len$i$i;
         (_sscanf($83,352863,$vararg_buffer41)|0);
         $353 = HEAP32[$addr$i$i>>2]|0;
         $354 = $353 & 16777215;
         HEAP32[$addr$i$i>>2] = $354;
         $355 = ((($82)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($354>>>0)<($356>>>0);
         do {
          if ($357) {
           $358 = ((($82)) + 5888|0);
           $359 = HEAP32[$358>>2]|0;
           $360 = (($359) + ($354)|0);
           $src3$2$ph$i$i = $360;
           label = 86;
          } else {
           $364 = ($354>>>0)>(8388607);
           if ($364) {
            $365 = (($354) + -8388608)|0;
            $366 = ((($82)) + 4|0);
            $367 = HEAP16[$366>>1]|0;
            $368 = $367&65535;
            $369 = ($365>>>0)>($368>>>0);
            if ($369) {
             $375 = $367;
            } else {
             $370 = ((($82)) + 5892|0);
             $371 = HEAP32[$370>>2]|0;
             $372 = (($371) + ($354)|0);
             $373 = ((($372)) + -8388608|0);
             $src3$2$ph$i$i = $373;
             label = 86;
             break;
            }
           } else {
            $$phi$trans$insert$i$i = ((($82)) + 4|0);
            $$pre$i$i = HEAP16[$$phi$trans$insert$i$i>>1]|0;
            $375 = $$pre$i$i;
           }
           $374 = $375&65535;
           $376 = $374 | 8388608;
           $377 = (($376) + 1)|0;
           $378 = ($354|0)==($377|0);
           $379 = HEAP32[$len$i$i>>2]|0;
           $380 = ($379|0)==(2);
           $or$cond$i$i = $380 & $378;
           if ($or$cond$i$i) {
            HEAP32[$vararg_buffer45>>2] = $354;
            $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
            HEAP32[$vararg_ptr48>>2] = 2;
            _avr_global_logger($82,3,352869,$vararg_buffer45);
            $381 = ((($reply$i$i$i)) + 1|0);
            HEAP8[$reply$i$i$i>>0] = 36;
            $scevgep356$i$i = ((($reply$i$i$i)) + 5|0);
            HEAP8[$381>>0]=808464432&255;HEAP8[$381+1>>0]=(808464432>>8)&255;HEAP8[$381+2>>0]=(808464432>>16)&255;HEAP8[$381+3>>0]=808464432>>24;
            HEAP32[$vararg_buffer49>>2] = 192;
            (_sprintf($scevgep356$i$i,352415,$vararg_buffer49)|0);
            $382 = HEAP32[$19>>2]|0;
            $383 = $scevgep356$i$i;
            $384 = $reply$i$i$i;
            $385 = (3 - ($384))|0;
            $386 = (($385) + ($383))|0;
            (_send($382,$reply$i$i$i,$386,0)|0);
            break;
           }
           $387 = ($354>>>0)>(8454143);
           if ($387) {
            $388 = (($354) + -8454144)|0;
            $389 = ((($82)) + 12|0);
            $390 = HEAP32[$389>>2]|0;
            $391 = ($388>>>0)>($390>>>0);
            if (!($391)) {
             HEAP32[$ee$i$i>>2] = 0;
             $392 = ((($ee$i$i)) + 4|0);
             $393 = $353&65535;
             HEAP16[$392>>1] = $393;
             $394 = ((($ee$i$i)) + 8|0);
             HEAP32[$394>>2] = 0;
             (_avr_ioctl($82,1701144432,$ee$i$i)|0);
             $395 = HEAP32[$ee$i$i>>2]|0;
             $396 = ($395|0)==(0|0);
             if ($396) {
              $397 = ((($reply$i$i$i)) + 1|0);
              HEAP8[$reply$i$i$i>>0] = 36;
              $398 = ((($reply$i$i$i)) + 2|0);
              HEAP8[$397>>0] = 69;
              $399 = ((($reply$i$i$i)) + 3|0);
              HEAP8[$398>>0] = 48;
              HEAP8[$399>>0] = 49;
              $scevgep362$i$i = ((($reply$i$i$i)) + 4|0);
              HEAP32[$vararg_buffer52>>2] = 166;
              (_sprintf($scevgep362$i$i,352415,$vararg_buffer52)|0);
              $400 = HEAP32[$19>>2]|0;
              $401 = $scevgep362$i$i;
              $402 = $reply$i$i$i;
              $403 = (3 - ($402))|0;
              $404 = (($403) + ($401))|0;
              (_send($400,$reply$i$i$i,$404,0)|0);
              break;
             } else {
              $src3$2$ph$i$i = $395;
              label = 86;
              break;
             }
            }
           }
           $405 = (($374) + 1)|0;
           HEAP32[$vararg_buffer55>>2] = $354;
           $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
           HEAP32[$vararg_ptr58>>2] = $379;
           $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
           HEAP32[$vararg_ptr59>>2] = $405;
           _avr_global_logger($82,1,352930,$vararg_buffer55);
           $406 = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $407 = ((($reply$i$i$i)) + 2|0);
           HEAP8[$406>>0] = 69;
           $408 = ((($reply$i$i$i)) + 3|0);
           HEAP8[$407>>0] = 48;
           HEAP8[$408>>0] = 49;
           $scevgep359$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer60>>2] = 166;
           (_sprintf($scevgep359$i$i,352415,$vararg_buffer60)|0);
           $409 = HEAP32[$19>>2]|0;
           $410 = $scevgep359$i$i;
           $411 = $reply$i$i$i;
           $412 = (3 - ($411))|0;
           $413 = (($412) + ($410))|0;
           (_send($409,$reply$i$i$i,$413,0)|0);
          }
         } while(0);
         if ((label|0) == 86) {
          $361 = HEAP32[$len$i$i>>2]|0;
          $362 = (($361) + -1)|0;
          HEAP32[$len$i$i>>2] = $362;
          $363 = ($361|0)==(0);
          if ($363) {
           $dst5$0$lcssa$i$i = $rep$i$i;
          } else {
           $dst5$0301$i$i = $rep$i$i;$src3$2300$i$i = $src3$2$ph$i$i;
           while(1) {
            $414 = ((($src3$2300$i$i)) + 1|0);
            $415 = HEAP8[$src3$2300$i$i>>0]|0;
            $416 = $415&255;
            HEAP32[$vararg_buffer63>>2] = $416;
            (_sprintf($dst5$0301$i$i,352831,$vararg_buffer63)|0);
            $417 = ((($dst5$0301$i$i)) + 2|0);
            $418 = HEAP32[$len$i$i>>2]|0;
            $419 = (($418) + -1)|0;
            HEAP32[$len$i$i>>2] = $419;
            $420 = ($418|0)==(0);
            if ($420) {
             $dst5$0$lcssa$i$i = $417;
             break;
            } else {
             $dst5$0301$i$i = $417;$src3$2300$i$i = $414;
            }
           }
          }
          HEAP8[$dst5$0$lcssa$i$i>>0] = 0;
          $421 = ((($reply$i$i$i)) + 1|0);
          HEAP8[$reply$i$i$i>>0] = 36;
          $422 = HEAP8[$rep$i$i>>0]|0;
          $423 = ($422<<24>>24)==(0);
          if ($423) {
           $check$0$lcssa$i121$i$i = 0;$dst$0$lcssa$i122$i$i = $421;
          } else {
           $$01$i116$i$i = $rep$i$i;$425 = $422;$check$03$i114$i$i = 0;$dst$02$i115$i$i = $421;
           while(1) {
            $424 = $425&255;
            $426 = $check$03$i114$i$i & 255;
            $427 = (($426) + ($424))|0;
            $428 = ((($$01$i116$i$i)) + 1|0);
            $429 = ((($dst$02$i115$i$i)) + 1|0);
            HEAP8[$dst$02$i115$i$i>>0] = $425;
            $430 = HEAP8[$428>>0]|0;
            $431 = ($430<<24>>24)==(0);
            if ($431) {
             $$lcssa100 = $424;$$lcssa101 = $429;$check$03$i114$i$i$lcssa = $check$03$i114$i$i;
             break;
            } else {
             $$01$i116$i$i = $428;$425 = $430;$check$03$i114$i$i = $427;$dst$02$i115$i$i = $429;
            }
           }
           $fold$i118$i$i = (($check$03$i114$i$i$lcssa) + ($$lcssa100))|0;
           $phitmp$i119$i$i = $fold$i118$i$i & 255;
           $check$0$lcssa$i121$i$i = $phitmp$i119$i$i;$dst$0$lcssa$i122$i$i = $$lcssa101;
          }
          HEAP32[$vararg_buffer66>>2] = $check$0$lcssa$i121$i$i;
          (_sprintf($dst$0$lcssa$i122$i$i,352415,$vararg_buffer66)|0);
          $432 = HEAP32[$19>>2]|0;
          $433 = $dst$0$lcssa$i122$i$i;
          $434 = $reply$i$i$i;
          $435 = (3 - ($434))|0;
          $436 = (($435) + ($433))|0;
          (_send($432,$reply$i$i$i,$436,0)|0);
         }
         break;
        }
        case 77:  {
         HEAP32[$vararg_buffer69>>2] = $addr7$i$i;
         $vararg_ptr72 = ((($vararg_buffer69)) + 4|0);
         HEAP32[$vararg_ptr72>>2] = $len8$i$i;
         (_sscanf($83,352863,$vararg_buffer69)|0);
         $437 = (_strchr($83,58)|0);
         $438 = ($437|0)==(0|0);
         do {
          if ($438) {
           $439 = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $440 = ((($reply$i$i$i)) + 2|0);
           HEAP8[$439>>0] = 69;
           $441 = ((($reply$i$i$i)) + 3|0);
           HEAP8[$440>>0] = 48;
           HEAP8[$441>>0] = 49;
           $scevgep365$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer73>>2] = 166;
           (_sprintf($scevgep365$i$i,352415,$vararg_buffer73)|0);
           $442 = HEAP32[$19>>2]|0;
           $443 = $scevgep365$i$i;
           $444 = $reply$i$i$i;
           $445 = (3 - ($444))|0;
           $446 = (($445) + ($443))|0;
           (_send($442,$reply$i$i$i,$446,0)|0);
          } else {
           $447 = HEAP32[$addr7$i$i>>2]|0;
           $448 = ($447>>>0)<(65535);
           if ($448) {
            $449 = ((($437)) + 1|0);
            $450 = ((($82)) + 5888|0);
            $451 = HEAP32[$450>>2]|0;
            $452 = (($451) + ($447)|0);
            $453 = (_strlen($449)|0);
            (_read_hex_string($449,$452,$453)|0);
            $454 = ((($reply$i$i$i)) + 1|0);
            HEAP8[$reply$i$i$i>>0] = 36;
            $455 = ((($reply$i$i$i)) + 2|0);
            HEAP8[$454>>0] = 79;
            HEAP8[$455>>0] = 75;
            $scevgep368$i$i = ((($reply$i$i$i)) + 3|0);
            HEAP32[$vararg_buffer76>>2] = 154;
            (_sprintf($scevgep368$i$i,352415,$vararg_buffer76)|0);
            $456 = HEAP32[$19>>2]|0;
            $457 = $scevgep368$i$i;
            $458 = $reply$i$i$i;
            $459 = (3 - ($458))|0;
            $460 = (($459) + ($457))|0;
            (_send($456,$reply$i$i$i,$460,0)|0);
            break;
           }
           $461 = ($447>>>0)>(8388607);
           if ($461) {
            $462 = (($447) + -8388608)|0;
            $463 = ((($82)) + 4|0);
            $464 = HEAP16[$463>>1]|0;
            $465 = $464&65535;
            $466 = ($462>>>0)>($465>>>0);
            if (!($466)) {
             $467 = ((($437)) + 1|0);
             $468 = ((($82)) + 5892|0);
             $469 = HEAP32[$468>>2]|0;
             $470 = (($469) + ($447)|0);
             $471 = ((($470)) + -8388608|0);
             $472 = (_strlen($467)|0);
             (_read_hex_string($467,$471,$472)|0);
             $473 = ((($reply$i$i$i)) + 1|0);
             HEAP8[$reply$i$i$i>>0] = 36;
             $474 = ((($reply$i$i$i)) + 2|0);
             HEAP8[$473>>0] = 79;
             HEAP8[$474>>0] = 75;
             $scevgep377$i$i = ((($reply$i$i$i)) + 3|0);
             HEAP32[$vararg_buffer79>>2] = 154;
             (_sprintf($scevgep377$i$i,352415,$vararg_buffer79)|0);
             $475 = HEAP32[$19>>2]|0;
             $476 = $scevgep377$i$i;
             $477 = $reply$i$i$i;
             $478 = (3 - ($477))|0;
             $479 = (($478) + ($476))|0;
             (_send($475,$reply$i$i$i,$479,0)|0);
             break;
            }
            $480 = ($447>>>0)>(8454143);
            if ($480) {
             $481 = (($447) + -8454144)|0;
             $482 = ((($82)) + 12|0);
             $483 = HEAP32[$482>>2]|0;
             $484 = ($481>>>0)>($483>>>0);
             if (!($484)) {
              $485 = ((($437)) + 1|0);
              $486 = (_strlen($485)|0);
              (_read_hex_string($485,$rep$i$i,$486)|0);
              HEAP32[$ee9$i$i>>2] = $rep$i$i;
              $487 = ((($ee9$i$i)) + 4|0);
              $488 = HEAP32[$addr7$i$i>>2]|0;
              $489 = $488&65535;
              HEAP16[$487>>1] = $489;
              $490 = ((($ee9$i$i)) + 8|0);
              $491 = HEAP32[$len8$i$i>>2]|0;
              HEAP32[$490>>2] = $491;
              (_avr_ioctl($82,1701147504,$ee9$i$i)|0);
              $492 = ((($reply$i$i$i)) + 1|0);
              HEAP8[$reply$i$i$i>>0] = 36;
              $493 = ((($reply$i$i$i)) + 2|0);
              HEAP8[$492>>0] = 79;
              HEAP8[$493>>0] = 75;
              $scevgep374$i$i = ((($reply$i$i$i)) + 3|0);
              HEAP32[$vararg_buffer82>>2] = 154;
              (_sprintf($scevgep374$i$i,352415,$vararg_buffer82)|0);
              $494 = HEAP32[$19>>2]|0;
              $495 = $scevgep374$i$i;
              $496 = $reply$i$i$i;
              $497 = (3 - ($496))|0;
              $498 = (($497) + ($495))|0;
              (_send($494,$reply$i$i$i,$498,0)|0);
              break;
             }
            }
           }
           $499 = HEAP32[$len8$i$i>>2]|0;
           HEAP32[$vararg_buffer85>>2] = $447;
           $vararg_ptr88 = ((($vararg_buffer85)) + 4|0);
           HEAP32[$vararg_ptr88>>2] = $499;
           _avr_global_logger($82,1,352979,$vararg_buffer85);
           $500 = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $501 = ((($reply$i$i$i)) + 2|0);
           HEAP8[$500>>0] = 69;
           $502 = ((($reply$i$i$i)) + 3|0);
           HEAP8[$501>>0] = 48;
           HEAP8[$502>>0] = 49;
           $scevgep371$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer89>>2] = 166;
           (_sprintf($scevgep371$i$i,352415,$vararg_buffer89)|0);
           $503 = HEAP32[$19>>2]|0;
           $504 = $scevgep371$i$i;
           $505 = $reply$i$i$i;
           $506 = (3 - ($505))|0;
           $507 = (($506) + ($504))|0;
           (_send($503,$reply$i$i$i,$507,0)|0);
          }
         } while(0);
         break;
        }
        case 99:  {
         $508 = ((($82)) + 36|0);
         HEAP32[$508>>2] = 2;
         break;
        }
        case 115:  {
         $509 = ((($82)) + 36|0);
         HEAP32[$509>>2] = 4;
         break;
        }
        case 114:  {
         $510 = ((($82)) + 36|0);
         HEAP32[$510>>2] = 5;
         _avr_reset($82);
         break;
        }
        case 122: case 90:  {
         $511 = ($84<<24>>24)==(90);
         $512 = $511&1;
         HEAP32[$vararg_buffer92>>2] = $kind$i$i;
         $vararg_ptr95 = ((($vararg_buffer92)) + 4|0);
         HEAP32[$vararg_ptr95>>2] = $addr11$i$i;
         $vararg_ptr96 = ((($vararg_buffer92)) + 8|0);
         HEAP32[$vararg_ptr96>>2] = $len12$i$i;
         (_sscanf($83,353015,$vararg_buffer92)|0);
         $513 = HEAP32[$kind$i$i>>2]|0;
         L174: do {
          switch ($513|0) {
          case 1: case 0:  {
           $514 = HEAP32[$addr11$i$i>>2]|0;
           $515 = ((($82)) + 8|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = ($514>>>0)>($516>>>0);
           if (!($517)) {
            $518 = ((($2)) + 12|0);
            $519 = 1 << $513;
            $520 = HEAP32[$len12$i$i>>2]|0;
            $521 = (_gdb_change_breakpoint($518,$512,$519,$514,$520)|0);
            $522 = ($521|0)==(-1);
            if (!($522)) {
             $531 = ((($reply$i$i$i)) + 1|0);
             HEAP8[$reply$i$i$i>>0] = 36;
             $532 = ((($reply$i$i$i)) + 2|0);
             HEAP8[$531>>0] = 79;
             HEAP8[$532>>0] = 75;
             $scevgep383$i$i = ((($reply$i$i$i)) + 3|0);
             HEAP32[$vararg_buffer100>>2] = 154;
             (_sprintf($scevgep383$i$i,352415,$vararg_buffer100)|0);
             $533 = HEAP32[$19>>2]|0;
             $534 = $scevgep383$i$i;
             $535 = $reply$i$i$i;
             $536 = (3 - ($535))|0;
             $537 = (($536) + ($534))|0;
             (_send($533,$reply$i$i$i,$537,0)|0);
             break L174;
            }
           }
           $523 = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $524 = ((($reply$i$i$i)) + 2|0);
           HEAP8[$523>>0] = 69;
           $525 = ((($reply$i$i$i)) + 3|0);
           HEAP8[$524>>0] = 48;
           HEAP8[$525>>0] = 49;
           $scevgep380$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer97>>2] = 166;
           (_sprintf($scevgep380$i$i,352415,$vararg_buffer97)|0);
           $526 = HEAP32[$19>>2]|0;
           $527 = $scevgep380$i$i;
           $528 = $reply$i$i$i;
           $529 = (3 - ($528))|0;
           $530 = (($529) + ($527))|0;
           (_send($526,$reply$i$i$i,$530,0)|0);
           break;
          }
          case 4: case 3: case 2:  {
           $538 = HEAP32[$addr11$i$i>>2]|0;
           $539 = $538 & -8388609;
           HEAP32[$addr11$i$i>>2] = $539;
           $540 = ((($82)) + 4|0);
           $541 = HEAP16[$540>>1]|0;
           $542 = $541&65535;
           $543 = ($539>>>0)>($542>>>0);
           if (!($543)) {
            $544 = ((($2)) + 400|0);
            $545 = 1 << $513;
            $546 = HEAP32[$len12$i$i>>2]|0;
            $547 = (_gdb_change_breakpoint($544,$512,$545,$539,$546)|0);
            $548 = ($547|0)==(-1);
            if (!($548)) {
             $557 = ((($reply$i$i$i)) + 1|0);
             HEAP8[$reply$i$i$i>>0] = 36;
             $558 = ((($reply$i$i$i)) + 2|0);
             HEAP8[$557>>0] = 79;
             HEAP8[$558>>0] = 75;
             $scevgep389$i$i = ((($reply$i$i$i)) + 3|0);
             HEAP32[$vararg_buffer106>>2] = 154;
             (_sprintf($scevgep389$i$i,352415,$vararg_buffer106)|0);
             $559 = HEAP32[$19>>2]|0;
             $560 = $scevgep389$i$i;
             $561 = $reply$i$i$i;
             $562 = (3 - ($561))|0;
             $563 = (($562) + ($560))|0;
             (_send($559,$reply$i$i$i,$563,0)|0);
             break L174;
            }
           }
           $549 = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           $550 = ((($reply$i$i$i)) + 2|0);
           HEAP8[$549>>0] = 69;
           $551 = ((($reply$i$i$i)) + 3|0);
           HEAP8[$550>>0] = 48;
           HEAP8[$551>>0] = 49;
           $scevgep386$i$i = ((($reply$i$i$i)) + 4|0);
           HEAP32[$vararg_buffer103>>2] = 166;
           (_sprintf($scevgep386$i$i,352415,$vararg_buffer103)|0);
           $552 = HEAP32[$19>>2]|0;
           $553 = $scevgep386$i$i;
           $554 = $reply$i$i$i;
           $555 = (3 - ($554))|0;
           $556 = (($555) + ($553))|0;
           (_send($552,$reply$i$i$i,$556,0)|0);
           break;
          }
          default: {
           $564 = ((($reply$i$i$i)) + 1|0);
           HEAP8[$reply$i$i$i>>0] = 36;
           HEAP32[$vararg_buffer109>>2] = 0;
           (_sprintf($564,352415,$vararg_buffer109)|0);
           $565 = HEAP32[$19>>2]|0;
           $566 = $564;
           $567 = $reply$i$i$i;
           $568 = (3 - ($567))|0;
           $569 = (($568) + ($566))|0;
           (_send($565,$reply$i$i$i,$569,0)|0);
          }
          }
         } while(0);
         break;
        }
        default: {
         $570 = ((($reply$i$i$i)) + 1|0);
         HEAP8[$reply$i$i$i>>0] = 36;
         HEAP32[$vararg_buffer112>>2] = 0;
         (_sprintf($570,352415,$vararg_buffer112)|0);
         $571 = HEAP32[$19>>2]|0;
         $572 = $570;
         $573 = $reply$i$i$i;
         $574 = (3 - ($573))|0;
         $575 = (($574) + ($572))|0;
         (_send($571,$reply$i$i$i,$575,0)|0);
        }
        }
       } while(0);
      }
      $$1$i = 1;
      break L24;
     }
     }
    }
   }
  }
 } while(0);
 $$0 = $$1$i;
 STACKTOP = sp;return ($$0|0);
}
function _gdb_send_quick_status($g) {
 $g = $g|0;
 var $$01$i = 0, $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $check$0$lcssa$i = 0;
 var $check$03$i = 0, $check$03$i$lcssa = 0, $cmd = 0, $dst$0$lcssa$i = 0, $dst$02$i = 0, $fold$i = 0, $phitmp$i = 0, $reply$i = 0, $vararg_buffer = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer = sp;
 $reply$i = sp + 104|0;
 $cmd = sp + 40|0;
 $0 = HEAP32[$g>>2]|0;
 $1 = ((($0)) + 5892|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 95|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($2)) + 93|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ((($2)) + 94|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ((($0)) + 132|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 255;
 $15 = $13 >>> 8;
 $16 = $15 & 255;
 $17 = $13 >>> 16;
 $18 = $17 & 255;
 HEAP32[$vararg_buffer>>2] = 5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $11;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $14;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $16;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $18;
 (_sprintf($cmd,352421,$vararg_buffer)|0);
 $19 = ((($reply$i)) + 1|0);
 HEAP8[$reply$i>>0] = 36;
 $20 = HEAP8[$cmd>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $check$0$lcssa$i = 0;$dst$0$lcssa$i = $19;
  HEAP32[$vararg_buffer7>>2] = $check$0$lcssa$i;
  (_sprintf($dst$0$lcssa$i,352415,$vararg_buffer7)|0);
  $30 = ((($g)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $dst$0$lcssa$i;
  $33 = $reply$i;
  $34 = (3 - ($33))|0;
  $35 = (($34) + ($32))|0;
  (_send($31,$reply$i,$35,0)|0);
  STACKTOP = sp;return;
 } else {
  $$01$i = $cmd;$23 = $20;$check$03$i = 0;$dst$02$i = $19;
 }
 while(1) {
  $22 = $23&255;
  $24 = $check$03$i & 255;
  $25 = (($24) + ($22))|0;
  $26 = ((($$01$i)) + 1|0);
  $27 = ((($dst$02$i)) + 1|0);
  HEAP8[$dst$02$i>>0] = $23;
  $28 = HEAP8[$26>>0]|0;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   $$lcssa = $22;$$lcssa6 = $27;$check$03$i$lcssa = $check$03$i;
   break;
  } else {
   $$01$i = $26;$23 = $28;$check$03$i = $25;$dst$02$i = $27;
  }
 }
 $fold$i = (($check$03$i$lcssa) + ($$lcssa))|0;
 $phitmp$i = $fold$i & 255;
 $check$0$lcssa$i = $phitmp$i;$dst$0$lcssa$i = $$lcssa6;
 HEAP32[$vararg_buffer7>>2] = $check$0$lcssa$i;
 (_sprintf($dst$0$lcssa$i,352415,$vararg_buffer7)|0);
 $30 = ((($g)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $dst$0$lcssa$i;
 $33 = $reply$i;
 $34 = (3 - ($33))|0;
 $35 = (($34) + ($32))|0;
 (_send($31,$reply$i,$35,0)|0);
 STACKTOP = sp;return;
}
function _gdb_read_register($g,$regi,$rep) {
 $g = $g|0;
 $regi = $regi|0;
 $rep = $rep|0;
 var $$ = 0, $$pre = 0, $$pre3 = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $not$ = 0, $sreg$1 = 0, $sreg$1$1 = 0, $sreg$1$2 = 0, $sreg$1$3 = 0, $sreg$1$4 = 0, $sreg$1$5 = 0;
 var $sreg$1$6 = 0, $sreg$1$7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 switch ($regi|0) {
 case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  $4 = HEAP32[$g>>2]|0;
  $5 = ((($4)) + 5892|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($regi)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  HEAP32[$vararg_buffer>>2] = $9;
  (_sprintf($rep,352831,$vararg_buffer)|0);
  $31 = (_strlen($rep)|0);
  STACKTOP = sp;return ($31|0);
  break;
 }
 case 32:  {
  $0 = HEAP32[$g>>2]|0;
  $1 = ((($0)) + 120|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2&255)>(1);
  if ($3) {
   (_puts(355637)|0);
   $$pre = HEAP32[$g>>2]|0;
   $11 = $$pre;$sreg$1 = 0;
  } else {
   $not$ = ($2<<24>>24)!=(0);
   $$ = $not$&1;
   $11 = $0;$sreg$1 = $$;
  }
  $10 = ((($11)) + 121|0);
  $12 = HEAP8[$10>>0]|0;
  $13 = ($12&255)>(1);
  if ($13) {
   (_puts(355637)|0);
   $$pre3 = HEAP32[$g>>2]|0;
   $37 = $$pre3;$sreg$1$1 = $sreg$1;
  } else {
   $32 = ($12<<24>>24)==(0);
   if ($32) {
    $37 = $11;$sreg$1$1 = $sreg$1;
   } else {
    $33 = $sreg$1&255;
    $34 = $33 | 2;
    $35 = $34&255;
    $37 = $11;$sreg$1$1 = $35;
   }
  }
  $36 = ((($37)) + 122|0);
  $38 = HEAP8[$36>>0]|0;
  $39 = ($38&255)>(1);
  if ($39) {
   (_puts(355637)|0);
   $$pre4 = HEAP32[$g>>2]|0;
   $45 = $$pre4;$sreg$1$2 = $sreg$1$1;
  } else {
   $40 = ($38<<24>>24)==(0);
   if ($40) {
    $45 = $37;$sreg$1$2 = $sreg$1$1;
   } else {
    $41 = $sreg$1$1&255;
    $42 = $41 | 4;
    $43 = $42&255;
    $45 = $37;$sreg$1$2 = $43;
   }
  }
  $44 = ((($45)) + 123|0);
  $46 = HEAP8[$44>>0]|0;
  $47 = ($46&255)>(1);
  if ($47) {
   (_puts(355637)|0);
   $$pre5 = HEAP32[$g>>2]|0;
   $53 = $$pre5;$sreg$1$3 = $sreg$1$2;
  } else {
   $48 = ($46<<24>>24)==(0);
   if ($48) {
    $53 = $45;$sreg$1$3 = $sreg$1$2;
   } else {
    $49 = $sreg$1$2&255;
    $50 = $49 | 8;
    $51 = $50&255;
    $53 = $45;$sreg$1$3 = $51;
   }
  }
  $52 = ((($53)) + 124|0);
  $54 = HEAP8[$52>>0]|0;
  $55 = ($54&255)>(1);
  if ($55) {
   (_puts(355637)|0);
   $$pre6 = HEAP32[$g>>2]|0;
   $61 = $$pre6;$sreg$1$4 = $sreg$1$3;
  } else {
   $56 = ($54<<24>>24)==(0);
   if ($56) {
    $61 = $53;$sreg$1$4 = $sreg$1$3;
   } else {
    $57 = $sreg$1$3&255;
    $58 = $57 | 16;
    $59 = $58&255;
    $61 = $53;$sreg$1$4 = $59;
   }
  }
  $60 = ((($61)) + 125|0);
  $62 = HEAP8[$60>>0]|0;
  $63 = ($62&255)>(1);
  if ($63) {
   (_puts(355637)|0);
   $$pre7 = HEAP32[$g>>2]|0;
   $69 = $$pre7;$sreg$1$5 = $sreg$1$4;
  } else {
   $64 = ($62<<24>>24)==(0);
   if ($64) {
    $69 = $61;$sreg$1$5 = $sreg$1$4;
   } else {
    $65 = $sreg$1$4&255;
    $66 = $65 | 32;
    $67 = $66&255;
    $69 = $61;$sreg$1$5 = $67;
   }
  }
  $68 = ((($69)) + 126|0);
  $70 = HEAP8[$68>>0]|0;
  $71 = ($70&255)>(1);
  if ($71) {
   (_puts(355637)|0);
   $$pre8 = HEAP32[$g>>2]|0;
   $77 = $$pre8;$sreg$1$6 = $sreg$1$5;
  } else {
   $72 = ($70<<24>>24)==(0);
   if ($72) {
    $77 = $69;$sreg$1$6 = $sreg$1$5;
   } else {
    $73 = $sreg$1$5&255;
    $74 = $73 | 64;
    $75 = $74&255;
    $77 = $69;$sreg$1$6 = $75;
   }
  }
  $76 = ((($77)) + 127|0);
  $78 = HEAP8[$76>>0]|0;
  $79 = ($78&255)>(1);
  if ($79) {
   (_puts(355637)|0);
   $sreg$1$7 = $sreg$1$6;
  } else {
   $80 = ($78<<24>>24)==(0);
   if ($80) {
    $sreg$1$7 = $sreg$1$6;
   } else {
    $81 = $sreg$1$6&255;
    $82 = $81 | 128;
    $83 = $82&255;
    $sreg$1$7 = $83;
   }
  }
  $84 = $sreg$1$7&255;
  HEAP32[$vararg_buffer10>>2] = $84;
  (_sprintf($rep,352831,$vararg_buffer10)|0);
  $31 = (_strlen($rep)|0);
  STACKTOP = sp;return ($31|0);
  break;
 }
 case 33:  {
  $14 = HEAP32[$g>>2]|0;
  $15 = ((($14)) + 5892|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 93|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ((($16)) + 94|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  HEAP32[$vararg_buffer1>>2] = $19;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $22;
  (_sprintf($rep,352836,$vararg_buffer1)|0);
  $31 = (_strlen($rep)|0);
  STACKTOP = sp;return ($31|0);
  break;
 }
 case 34:  {
  $23 = HEAP32[$g>>2]|0;
  $24 = ((($23)) + 132|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 255;
  $27 = $25 >>> 8;
  $28 = $27 & 255;
  $29 = $25 >>> 16;
  $30 = $29 & 255;
  HEAP32[$vararg_buffer5>>2] = $26;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $28;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $30;
  (_sprintf($rep,352845,$vararg_buffer5)|0);
  $31 = (_strlen($rep)|0);
  STACKTOP = sp;return ($31|0);
  break;
 }
 default: {
  $31 = (_strlen($rep)|0);
  STACKTOP = sp;return ($31|0);
 }
 }
 return (0)|0;
}
function _gdb_change_breakpoint($w,$set,$kind,$addr,$size) {
 $w = $w|0;
 $set = $set|0;
 $kind = $kind|0;
 $addr = $addr|0;
 $size = $size|0;
 var $$0 = 0, $$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$i = 0, $i$0$in3$i = 0, $i$0$in3$i$phi = 0, $i$0$lcssa$i = 0, $i$02$i = 0, $i$02$i$i = 0, $i$02$i$i$lcssa19 = 0, $i$02$i$i1 = 0, $i$02$i$i1$lcssa18 = 0, $i$03$i = 0;
 var $i$04$i = 0, $j$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0);
 $1 = HEAP32[$w>>2]|0;
 $2 = ($1|0)==(0);
 if ($0) {
  if ($2) {
   $$0 = -1;
   return ($$0|0);
  } else {
   $i$02$i$i1 = 0;
  }
  while(1) {
   $29 = (((($w)) + 4|0) + (($i$02$i$i1*12)|0)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30>>>0)>($addr>>>0);
   if ($31) {
    $$0 = -1;
    label = 23;
    break;
   }
   $32 = ($30|0)==($addr|0);
   if ($32) {
    $i$02$i$i1$lcssa18 = $i$02$i$i1;
    label = 18;
    break;
   }
   $33 = (($i$02$i$i1) + 1)|0;
   $34 = ($33>>>0)<($1>>>0);
   if ($34) {
    $i$02$i$i1 = $33;
   } else {
    $$0 = -1;
    label = 23;
    break;
   }
  }
  if ((label|0) == 18) {
   $35 = ($i$02$i$i1$lcssa18|0)==(-1);
   if ($35) {
    $$0 = -1;
    return ($$0|0);
   }
   $36 = $kind ^ -1;
   $37 = (((((($w)) + 4|0) + (($i$02$i$i1$lcssa18*12)|0)|0)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 & $36;
   HEAP32[$37>>2] = $39;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $$0 = 0;
    return ($$0|0);
   }
   $i$02$i = (($i$02$i$i1$lcssa18) + 1)|0;
   $41 = HEAP32[$w>>2]|0;
   $42 = ($i$02$i>>>0)<($41>>>0);
   if ($42) {
    $i$0$in3$i = $i$02$i$i1$lcssa18;$i$04$i = $i$02$i;
    while(1) {
     $43 = (((($w)) + 4|0) + (($i$0$in3$i*12)|0)|0);
     $44 = (((($w)) + 4|0) + (($i$04$i*12)|0)|0);
     ;HEAP32[$43>>2]=HEAP32[$44>>2]|0;HEAP32[$43+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$44+8>>2]|0;
     $i$0$i = (($i$04$i) + 1)|0;
     $45 = HEAP32[$w>>2]|0;
     $46 = ($i$0$i>>>0)<($45>>>0);
     if ($46) {
      $i$0$in3$i$phi = $i$04$i;$i$04$i = $i$0$i;$i$0$in3$i = $i$0$in3$i$phi;
     } else {
      $$lcssa$i = $45;
      break;
     }
    }
   } else {
    $$lcssa$i = $41;
   }
   $47 = (($$lcssa$i) + -1)|0;
   HEAP32[$w>>2] = $47;
   $$0 = 0;
   return ($$0|0);
  }
  else if ((label|0) == 23) {
   return ($$0|0);
  }
 } else {
  L25: do {
   if ($2) {
    $i$0$lcssa$i = 0;
   } else {
    $i$02$i$i = 0;
    while(1) {
     $3 = (((($w)) + 4|0) + (($i$02$i$i*12)|0)|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ($4>>>0)>($addr>>>0);
     if ($5) {
      break;
     }
     $6 = ($4|0)==($addr|0);
     if ($6) {
      $i$02$i$i$lcssa19 = $i$02$i$i;
      label = 6;
      break;
     }
     $7 = (($i$02$i$i) + 1)|0;
     $8 = ($7>>>0)<($1>>>0);
     if ($8) {
      $i$02$i$i = $7;
     } else {
      break;
     }
    }
    if ((label|0) == 6) {
     $9 = ($i$02$i$i$lcssa19|0)==(-1);
     if (!($9)) {
      $10 = (((((($w)) + 4|0) + (($i$02$i$i$lcssa19*12)|0)|0)) + 4|0);
      HEAP32[$10>>2] = $size;
      $11 = (((((($w)) + 4|0) + (($i$02$i$i$lcssa19*12)|0)|0)) + 8|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = $12 | $kind;
      HEAP32[$11>>2] = $13;
      $$0 = 0;
      return ($$0|0);
     }
    }
    $14 = ($1|0)==(32);
    if ($14) {
     $$0 = -1;
     return ($$0|0);
    } else {
     $i$03$i = 0;
    }
    while(1) {
     $15 = (((($w)) + 4|0) + (($i$03$i*12)|0)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16>>>0)>($addr>>>0);
     if ($17) {
      $i$0$lcssa$i = $i$03$i;
      break L25;
     }
     $18 = (($i$03$i) + 1)|0;
     $19 = ($18>>>0)<($1>>>0);
     if ($19) {
      $i$03$i = $18;
     } else {
      $i$0$lcssa$i = $18;
      break;
     }
    }
   }
  } while(0);
  $20 = (($1) + 1)|0;
  HEAP32[$w>>2] = $20;
  $21 = ($20|0)>($i$0$lcssa$i|0);
  if ($21) {
   $j$02$i = $20;
   while(1) {
    $25 = (((($w)) + 4|0) + (($j$02$i*12)|0)|0);
    $26 = (($j$02$i) + -1)|0;
    $27 = (((($w)) + 4|0) + (($26*12)|0)|0);
    ;HEAP32[$25>>2]=HEAP32[$27>>2]|0;HEAP32[$25+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$27+8>>2]|0;
    $28 = ($26|0)>($i$0$lcssa$i|0);
    if ($28) {
     $j$02$i = $26;
    } else {
     break;
    }
   }
  }
  $22 = (((((($w)) + 4|0) + (($i$0$lcssa$i*12)|0)|0)) + 8|0);
  HEAP32[$22>>2] = $kind;
  $23 = (((($w)) + 4|0) + (($i$0$lcssa$i*12)|0)|0);
  HEAP32[$23>>2] = $addr;
  $24 = (((((($w)) + 4|0) + (($i$0$lcssa$i*12)|0)|0)) + 4|0);
  HEAP32[$24>>2] = $size;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _avr_gdb_init($avr) {
 $avr = $avr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $address = 0, $optval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $optval = sp + 40|0;
 $address = sp + 24|0;
 $0 = (_malloc(788)|0);
 _memset(($0|0),0,788)|0;
 $1 = ((($avr)) + 8292|0);
 HEAP32[$1>>2] = 0;
 $2 = (_socket(2,1,0)|0);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)<(0);
 if ($4) {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_strerror($6)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  _avr_global_logger($avr,1,353024,$vararg_buffer);
  $$1 = -1;
  STACKTOP = sp;return ($$1|0);
 }
 HEAP32[$optval>>2] = 1;
 (_setsockopt($2,1,2,$optval,4)|0);
 ;HEAP32[$address>>2]=0|0;HEAP32[$address+4>>2]=0|0;HEAP32[$address+8>>2]=0|0;HEAP32[$address+12>>2]=0|0;
 HEAP16[$address>>1] = 2;
 $8 = ((($avr)) + 8296|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&65535;
 $11 = (_htons($10)|0);
 $12 = ((($address)) + 2|0);
 HEAP16[$12>>1] = $11;
 $13 = (_bind($2,$address,16)|0);
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $18 = (_listen($2,1)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = HEAP32[$8>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $20;
    (_printf(353089,$vararg_buffer4)|0);
    HEAP32[$0>>2] = $avr;
    $21 = ((($0)) + 8|0);
    HEAP32[$21>>2] = -1;
    HEAP32[$1>>2] = $0;
    $22 = ((($avr)) + 104|0);
    HEAP32[$22>>2] = 84;
    $23 = ((($avr)) + 108|0);
    HEAP32[$23>>2] = 85;
    $$0 = 0;
    break;
   } else {
    _perror(353082);
    $$0 = -1;
    break;
   }
  } else {
   $15 = (___errno_location()|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_strerror($16)|0);
   HEAP32[$vararg_buffer1>>2] = $17;
   _avr_global_logger($avr,1,353053,$vararg_buffer1);
   $$0 = -1;
  }
 } while(0);
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _avr_deinit_gdb($avr) {
 $avr = $avr|0;
 var $$in = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8292|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1);
 if ($4) {
  $$in = $1;
 } else {
  (_close($3)|0);
  $$pre = HEAP32[$0>>2]|0;
  $$in = $$pre;
 }
 $5 = ((($$in)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $$in;
  _free($8);
  return;
 } else {
  (_close($6)|0);
  $$pre1 = HEAP32[$0>>2]|0;
  $8 = $$pre1;
  _free($8);
  return;
 }
}
function _avr_load_firmware($avr,$firmware) {
 $avr = $avr|0;
 $firmware = $firmware|0;
 var $$ = 0, $$lobit = 0, $$lobit26 = 0, $$lobit27 = 0, $$lobit28 = 0, $$lobit29 = 0, $$lobit30 = 0, $$lobit31 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bi1$011 = 0, $bi1$011$us$lcssa = 0;
 var $comp = 0, $count$0$$1 = 0, $count$0$$2 = 0, $count$0$$3 = 0, $count$0$$4 = 0, $count$0$$5 = 0, $count$0$$6 = 0, $count$0$$7 = 0, $d = 0, $e = 0, $i$014 = 0, $ti$012 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $d = sp + 36|0;
 $e = sp + 32|0;
 $comp = sp + 48|0;
 $0 = ((($firmware)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($avr)) + 40|0);
  HEAP32[$3>>2] = $1;
 }
 $4 = ((($firmware)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($avr)) + 44|0);
  HEAP32[$7>>2] = $5;
 }
 $8 = ((($firmware)) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = ((($avr)) + 48|0);
  HEAP32[$11>>2] = $9;
 }
 $12 = ((($firmware)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = ((($avr)) + 52|0);
  HEAP32[$15>>2] = $13;
 }
 $16 = ((($firmware)) + 2424|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($firmware)) + 2428|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($firmware)) + 2420|0);
 $21 = HEAP32[$20>>2]|0;
 _avr_loadcode($avr,$17,$19,$21);
 $22 = HEAP32[$18>>2]|0;
 $23 = HEAP32[$20>>2]|0;
 $24 = (($23) + ($22))|0;
 $25 = ((($firmware)) + 2432|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) - ($26))|0;
 $28 = ((($avr)) + 32|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($firmware)) + 2440|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 $32 = $30;
 if (!($31)) {
  $33 = ((($firmware)) + 2444|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if (!($35)) {
   HEAP32[$d>>2] = $32;
   $36 = ((($d)) + 4|0);
   HEAP16[$36>>1] = 0;
   $37 = ((($d)) + 8|0);
   HEAP32[$37>>2] = $34;
   (_avr_ioctl($avr,1701147504,$d)|0);
  }
 }
 $i$014 = 0;
 while(1) {
  $38 = (((($firmware)) + 2392|0) + (($i$014*3)|0)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   break;
  }
  $41 = $39&255;
  $42 = $41 & 127;
  $43 = (((((($firmware)) + 2392|0) + (($i$014*3)|0)|0)) + 1|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 7;
  $47 = $46 | $42;
  $48 = (((((($firmware)) + 2392|0) + (($i$014*3)|0)|0)) + 2|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $50 << 15;
  $52 = $47 | $51;
  HEAP32[$e>>2] = $52;
  $53 = $42 | 1768910848;
  (_avr_ioctl($avr,$53,$e)|0);
  $54 = (($i$014) + 1)|0;
  $55 = ($54|0)<(8);
  if ($55) {
   $i$014 = $54;
  } else {
   break;
  }
 }
 $56 = ((($firmware)) + 2416|0);
 $57 = HEAP16[$56>>1]|0;
 _avr_set_command_register($avr,$57);
 $58 = ((($firmware)) + 2418|0);
 $59 = HEAP16[$58>>1]|0;
 _avr_set_console_register($avr,$59);
 $60 = ((($firmware)) + 212|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0);
 if ($62) {
  STACKTOP = sp;return;
 }
 $63 = (_malloc(4216)|0);
 $64 = ((($avr)) + 8288|0);
 HEAP32[$64>>2] = $63;
 _memset(($63|0),0,4216)|0;
 $65 = ((($firmware)) + 80|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = ($66<<24>>24)!=(0);
 $68 = $67 ? $65 : 353124;
 $69 = ((($firmware)) + 208|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70>>>0)<(1000);
 $$ = $71 ? 1000 : $70;
 (_avr_vcd_init($avr,$68,$63,$$)|0);
 $72 = HEAP32[$64>>2]|0;
 $73 = ((($72)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $73;
 _avr_global_logger($avr,3,353142,$vararg_buffer);
 $74 = HEAP32[$60>>2]|0;
 $75 = ($74|0)>(0);
 L24: do {
  if ($75) {
   $ti$012 = 0;
   while(1) {
    $78 = (((($firmware)) + 216|0) + (($ti$012*68)|0)|0);
    $79 = HEAP8[$78>>0]|0;
    L28: do {
     switch ($79<<24>>24) {
     case 0: case -1:  {
      $92 = (((((($firmware)) + 216|0) + (($ti$012*68)|0)|0)) + 2|0);
      $93 = HEAP16[$92>>1]|0;
      $94 = (((((($firmware)) + 216|0) + (($ti$012*68)|0)|0)) + 4|0);
      $95 = (_avr_iomem_getirq($avr,$93,$94,8)|0);
      $96 = ($95|0)==(0|0);
      if ($96) {
       $97 = HEAP16[$92>>1]|0;
       $98 = $97&65535;
       HEAP32[$vararg_buffer1>>2] = 353221;
       $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
       HEAP32[$vararg_ptr4>>2] = $98;
       _avr_global_logger($avr,1,353172,$vararg_buffer1);
       break L28;
      } else {
       $99 = HEAP32[$64>>2]|0;
       (_avr_vcd_add_signal($99,$95,8,$94)|0);
       break L28;
      }
      break;
     }
     default: {
      $80 = $79&255;
      $81 = $80 & 1;
      $82 = $80 & 2;
      $$lobit = $82 >>> 1;
      $count$0$$1 = (($$lobit) + ($81))|0;
      $83 = $80 & 4;
      $$lobit26 = $83 >>> 2;
      $count$0$$2 = (($$lobit26) + ($count$0$$1))|0;
      $84 = $80 & 8;
      $$lobit27 = $84 >>> 3;
      $count$0$$3 = (($$lobit27) + ($count$0$$2))|0;
      $85 = $80 & 16;
      $$lobit28 = $85 >>> 4;
      $count$0$$4 = (($$lobit28) + ($count$0$$3))|0;
      $86 = $80 & 32;
      $$lobit29 = $86 >>> 5;
      $count$0$$5 = (($$lobit29) + ($count$0$$4))|0;
      $87 = $80 & 64;
      $$lobit30 = $87 >>> 6;
      $count$0$$6 = (($$lobit30) + ($count$0$$5))|0;
      $88 = $80 & 128;
      $$lobit31 = $80 >>> 7;
      $count$0$$7 = (($$lobit31) + ($count$0$$6))|0;
      $89 = (((((($firmware)) + 216|0) + (($ti$012*68)|0)|0)) + 2|0);
      $90 = (((((($firmware)) + 216|0) + (($ti$012*68)|0)|0)) + 4|0);
      $91 = ($count$0$$7|0)==(1);
      L30: do {
       if ($91) {
        $100 = ($81|0)==(0);
        if ($100) {
         $104 = ($82|0)==(0);
         if ($104) {
          $123 = ($83|0)==(0);
          if ($123) {
           $124 = ($84|0)==(0);
           if ($124) {
            $125 = ($85|0)==(0);
            if ($125) {
             $126 = ($86|0)==(0);
             if ($126) {
              $127 = ($87|0)==(0);
              if ($127) {
               $128 = ($88|0)==(0);
               if ($128) {
                break L28;
               } else {
                $bi1$011$us$lcssa = 7;
               }
              } else {
               $bi1$011$us$lcssa = 6;
              }
             } else {
              $bi1$011$us$lcssa = 5;
             }
            } else {
             $bi1$011$us$lcssa = 4;
            }
           } else {
            $bi1$011$us$lcssa = 3;
           }
          } else {
           $bi1$011$us$lcssa = 2;
          }
         } else {
          $bi1$011$us$lcssa = 1;
         }
        } else {
         $bi1$011$us$lcssa = 0;
        }
        $101 = HEAP16[$89>>1]|0;
        $102 = (_avr_iomem_getirq($avr,$101,$90,$bi1$011$us$lcssa)|0);
        $103 = ($102|0)==(0|0);
        if (!($103)) {
         $115 = HEAP32[$64>>2]|0;
         (_avr_vcd_add_signal($115,$102,1,$90)|0);
         break L28;
        }
       } else {
        $106 = $79;$bi1$011 = 0;
        while(1) {
         $105 = $106&255;
         $107 = 1 << $bi1$011;
         $108 = $105 & $107;
         $109 = ($108|0)==(0);
         if (!($109)) {
          $110 = HEAP16[$89>>1]|0;
          $111 = (_avr_iomem_getirq($avr,$110,$90,$bi1$011)|0);
          $112 = ($111|0)==(0|0);
          if ($112) {
           break L30;
          }
          HEAP32[$vararg_buffer9>>2] = $90;
          $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
          HEAP32[$vararg_ptr12>>2] = $bi1$011;
          (_sprintf($comp,353239,$vararg_buffer9)|0);
          $116 = HEAP32[$64>>2]|0;
          (_avr_vcd_add_signal($116,$111,1,$90)|0);
         }
         $117 = (($bi1$011) + 1)|0;
         $118 = ($117|0)<(8);
         if (!($118)) {
          break L28;
         }
         $$pre = HEAP8[$78>>0]|0;
         $106 = $$pre;$bi1$011 = $117;
        }
       }
      } while(0);
      $113 = HEAP16[$89>>1]|0;
      $114 = $113&65535;
      HEAP32[$vararg_buffer5>>2] = 353221;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $114;
      _avr_global_logger($avr,1,353172,$vararg_buffer5);
     }
     }
    } while(0);
    $119 = (($ti$012) + 1)|0;
    $120 = HEAP32[$60>>2]|0;
    $121 = ($119|0)<($120|0);
    if ($121) {
     $ti$012 = $119;
    } else {
     break L24;
    }
   }
  }
 } while(0);
 $76 = HEAP16[$56>>1]|0;
 $77 = ($76<<16>>16)==(0);
 if (!($77)) {
  STACKTOP = sp;return;
 }
 $122 = HEAP32[$64>>2]|0;
 (_avr_vcd_start($122)|0);
 STACKTOP = sp;return;
}
function _elf_read_firmware($file,$firmware) {
 $file = $file|0;
 $firmware = $firmware|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _avr_vcd_init($avr,$filename,$vcd,$period) {
 $avr = $avr|0;
 $filename = $filename|0;
 $vcd = $vcd|0;
 $period = $period|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($vcd|0),0,4216)|0;
 HEAP32[$vcd>>2] = $avr;
 $0 = ((($vcd)) + 4|0);
 (_strncpy($0,$filename,74)|0);
 $1 = HEAP32[$vcd>>2]|0;
 $$idx = ((($1)) + 40|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $2 = (___muldi3(($$idx$val|0),0,($period|0),0)|0);
 $3 = tempRet0;
 $4 = (___udivdi3(($2|0),($3|0),1000000,0)|0);
 $5 = tempRet0;
 $6 = ((($vcd)) + 4184|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 return 0;
}
function _avr_vcd_close($vcd) {
 $vcd = $vcd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vcd>>2]|0;
 _avr_cycle_timer_cancel($0,86,$vcd);
 _avr_vcd_flush_log($vcd);
 $1 = ((($vcd)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  return;
 }
 (_fclose($2)|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __avr_vcd_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_vcd_flush_log($param);
 $2 = ((($param)) + 4184|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_i64Add(($5|0),($8|0),($0|0),($1|0))|0);
 $10 = tempRet0;
 tempRet0 = ($10);
 return ($9|0);
}
function _avr_vcd_flush_log($vcd) {
 $vcd = $vcd|0;
 var $$idx = 0, $$idx$val = 0, $$lcssa = 0, $$pre$i = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dst$0$i = 0, $dst$11$i = 0, $dst$11$i$lcssa = 0, $dst$2$i = 0, $i$02$i = 0, $li$03 = 0, $or$cond = 0, $out = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $out = sp + 16|0;
 $0 = ((($vcd)) + 4204|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($vcd)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($vcd)) + 4208|0);
 $7 = ((($vcd)) + 4192|0);
 $8 = ((($out)) + 1|0);
 $32 = 0;$34 = 0;$44 = 0;$46 = 0;$li$03 = 0;
 while(1) {
  $9 = HEAP32[$6>>2]|0;
  $10 = HEAP32[$vcd>>2]|0;
  $11 = (($9) + ($li$03<<4)|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = $7;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (_i64Subtract(($14|0),($17|0),($20|0),($23|0))|0);
  $25 = tempRet0;
  $$idx = ((($10)) + 40|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $26 = (___muldi3(($24|0),($25|0),1000000,0)|0);
  $27 = tempRet0;
  $28 = (($$idx$val>>>0) / 1000)&-1;
  $29 = (___udivdi3(($26|0),($27|0),($28|0),0)|0);
  $30 = tempRet0;
  $31 = ($29|0)==($32|0);
  $33 = ($30|0)==($34|0);
  $35 = $31 & $33;
  if ($35) {
   $36 = (((($9) + ($li$03<<4)|0)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = 1 << $39;
   $41 = ($40|0)<(0);
   $42 = $41 << 31 >> 31;
   $43 = $40 & $44;
   $45 = $42 & $46;
   $47 = ($43|0)!=(0);
   $48 = ($45|0)!=(0);
   $49 = $47 | $48;
   $50 = $49&1;
   $51 = (_i64Add(($50|0),0,($32|0),($34|0))|0);
   $52 = tempRet0;
   $53 = $52;$55 = $51;
  } else {
   $53 = $30;$55 = $29;
  }
  $54 = ($53>>>0)>($34>>>0);
  $56 = ($55>>>0)>($32>>>0);
  $57 = ($53|0)==($34|0);
  $58 = $57 & $56;
  $59 = $54 | $58;
  $60 = ($li$03|0)==(0);
  $or$cond = $60 | $59;
  if ($or$cond) {
   $61 = HEAP32[$3>>2]|0;
   $62 = $vararg_buffer;
   $63 = $62;
   HEAP32[$63>>2] = $55;
   $64 = (($62) + 4)|0;
   $65 = $64;
   HEAP32[$65>>2] = $53;
   (_fprintf($61,353245,$vararg_buffer)|0);
   $100 = $55;$101 = $53;$74 = 0;$76 = 0;
  } else {
   $100 = $32;$101 = $34;$74 = $44;$76 = $46;
  }
  $66 = (((($9) + ($li$03<<4)|0)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = 1 << $69;
  $71 = ($70|0)<(0);
  $72 = $71 << 31 >> 31;
  $73 = $70 | $74;
  $75 = $72 | $76;
  $77 = HEAP32[$3>>2]|0;
  $78 = (((($9) + ($li$03<<4)|0)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($67)) + 28|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)>(1);
  if ($82) {
   HEAP8[$out>>0] = 98;
   $$pre$i = HEAP32[$80>>2]|0;
   $83 = $$pre$i;$dst$0$i = $8;
  } else {
   $83 = $81;$dst$0$i = $out;
  }
  $84 = ($83|0)>(0);
  if ($84) {
   $dst$11$i = $dst$0$i;$i$02$i = $83;
   while(1) {
    $86 = (($i$02$i) + -1)|0;
    $87 = 1 << $86;
    $88 = $87 & $79;
    $89 = ($88|0)!=(0);
    $90 = $89 ? 49 : 48;
    $91 = ((($dst$11$i)) + 1|0);
    HEAP8[$dst$11$i>>0] = $90;
    $92 = ($i$02$i|0)>(1);
    if ($92) {
     $dst$11$i = $91;$i$02$i = $86;
    } else {
     $$lcssa = $91;$dst$11$i$lcssa = $dst$11$i;
     break;
    }
   }
   $$pre3$i = HEAP32[$80>>2]|0;
   $85 = ($$pre3$i|0)>(1);
   if ($85) {
    $93 = ((($dst$11$i$lcssa)) + 2|0);
    HEAP8[$$lcssa>>0] = 32;
    $dst$2$i = $93;
   } else {
    $dst$2$i = $$lcssa;
   }
  } else {
   $dst$2$i = $dst$0$i;
  }
  $94 = ((($67)) + 24|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = ((($dst$2$i)) + 1|0);
  HEAP8[$dst$2$i>>0] = $95;
  HEAP8[$96>>0] = 0;
  HEAP32[$vararg_buffer1>>2] = $out;
  (_fprintf($77,353951,$vararg_buffer1)|0);
  $97 = (($li$03) + 1)|0;
  $98 = HEAP32[$0>>2]|0;
  $99 = ($97>>>0)<($98>>>0);
  if ($99) {
   $32 = $100;$34 = $101;$44 = $73;$46 = $75;$li$03 = $97;
  } else {
   break;
  }
 }
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _avr_vcd_stop($vcd) {
 $vcd = $vcd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vcd>>2]|0;
 _avr_cycle_timer_cancel($0,86,$vcd);
 _avr_vcd_flush_log($vcd);
 $1 = ((($vcd)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  return 0;
 }
 (_fclose($2)|0);
 HEAP32[$1>>2] = 0;
 return 0;
}
function __avr_vcd_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$mask = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($param)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($param)) + 4204|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($param)) + 4200|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<($6>>>0);
 do {
  if ($7) {
   $$phi$trans$insert = ((($param)) + 4208|0);
   $$pre3 = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre$phi6Z2D = $param;$23 = $4;$25 = $$pre3;
  } else {
   $8 = (($6) + 64)|0;
   HEAP32[$5>>2] = $8;
   $9 = ((($param)) + 4208|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $8 << 4;
   $12 = (_realloc($10,$11)|0);
   HEAP32[$9>>2] = $12;
   $13 = HEAP32[$param>>2]|0;
   $14 = HEAP32[$5>>2]|0;
   HEAP32[$vararg_buffer>>2] = 353283;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $14;
   _avr_global_logger($13,3,353252,$vararg_buffer);
   $15 = HEAP32[$5>>2]|0;
   $$mask = $15 & -64;
   $16 = ($$mask|0)==(320);
   if ($16) {
    $17 = HEAP32[$param>>2]|0;
    HEAP32[$vararg_buffer2>>2] = 353283;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $15;
    _avr_global_logger($17,2,353299,$vararg_buffer2);
   }
   $18 = HEAP32[$9>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    $$pre = HEAP32[$3>>2]|0;
    $$pre$phi6Z2D = $param;$23 = $$pre;$25 = $18;
    break;
   }
   $20 = HEAP32[$param>>2]|0;
   $21 = HEAP32[$5>>2]|0;
   HEAP32[$vararg_buffer6>>2] = 353283;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $21;
   _avr_global_logger($20,1,353341,$vararg_buffer6);
   HEAP32[$5>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = (($23) + 1)|0;
 HEAP32[$3>>2] = $22;
 $24 = (((($25) + ($23<<4)|0)) + 8|0);
 HEAP32[$24>>2] = $irq;
 $26 = HEAP32[$$pre$phi6Z2D>>2]|0;
 $27 = ((($26)) + 56|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($25) + ($23<<4)|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = $30;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $33;
 $39 = (((($25) + ($23<<4)|0)) + 12|0);
 HEAP32[$39>>2] = $value;
 STACKTOP = sp;return;
}
function _avr_vcd_add_signal($vcd,$signal_irq,$signal_bit_size,$name) {
 $vcd = $vcd|0;
 $signal_irq = $signal_irq|0;
 $signal_bit_size = $signal_bit_size|0;
 $name = $name|0;
 var $$0 = 0, $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $names = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $names = sp + 12|0;
 $0 = ((($vcd)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(64);
 if ($2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($1) + 1)|0;
 HEAP32[$0>>2] = $3;
 $4 = (((((($vcd)) + 88|0) + ($1<<6)|0)) + 32|0);
 (_strncpy($4,$name,32)|0);
 $5 = (((((($vcd)) + 88|0) + ($1<<6)|0)) + 28|0);
 HEAP32[$5>>2] = $signal_bit_size;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 32)|0;
 $8 = $7&255;
 $9 = (((((($vcd)) + 88|0) + ($1<<6)|0)) + 24|0);
 HEAP8[$9>>0] = $8;
 $10 = (_strlen($name)|0);
 $11 = (($10) + 11)|0;
 $12 = (_llvm_stacksave()|0);
 $$alloca_mul = $11;
 $13 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $14 = ($signal_bit_size|0)>(1);
 if ($14) {
  HEAP32[$vararg_buffer>>2] = $signal_bit_size;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $name;
  (_sprintf($13,353379,$vararg_buffer)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = $name;
  (_sprintf($13,353389,$vararg_buffer2)|0);
 }
 HEAP32[$names>>2] = $13;
 $15 = HEAP32[$vcd>>2]|0;
 $16 = ((($15)) + 112|0);
 $17 = (((($vcd)) + 88|0) + ($1<<6)|0);
 _avr_init_irq($16,$17,$1,1,$names);
 _avr_irq_register_notify($17,87,$vcd);
 _avr_connect_irq($signal_irq,$17);
 _llvm_stackrestore(($12|0));
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _avr_vcd_start($vcd) {
 $vcd = $vcd|0;
 var $$0 = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $dst$0$i13 = 0, $dst$2$i = 0, $i$04 = 0, $i1$03 = 0, $out = 0, $scevgep = 0, $scevgep10 = 0, $scevgep11 = 0, $scevgep12 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $out = sp + 24|0;
 $0 = ((($vcd)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$vcd>>2]|0;
  _avr_cycle_timer_cancel($3,86,$vcd);
  _avr_vcd_flush_log($vcd);
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   (_fclose($4)|0);
  }
  HEAP32[$0>>2] = 0;
 }
 $6 = ((($vcd)) + 4|0);
 $7 = (_fopen($6,353397)|0);
 HEAP32[$0>>2] = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _perror($6);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_fwrite(353399,20,1,$7)|0);
 $9 = HEAP32[$0>>2]|0;
 (_fwrite(353420,25,1,$9)|0);
 $10 = ((($vcd)) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>(0);
 $13 = HEAP32[$0>>2]|0;
 if ($12) {
  $25 = $13;$i$04 = 0;
  while(1) {
   $19 = (((((($vcd)) + 88|0) + ($i$04<<6)|0)) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (((((($vcd)) + 88|0) + ($i$04<<6)|0)) + 24|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = (((((($vcd)) + 88|0) + ($i$04<<6)|0)) + 32|0);
   HEAP32[$vararg_buffer>>2] = $20;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $23;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $24;
   (_fprintf($25,353494,$vararg_buffer)|0);
   $26 = (($i$04) + 1)|0;
   $27 = HEAP32[$10>>2]|0;
   $28 = ($26|0)<($27|0);
   $29 = HEAP32[$0>>2]|0;
   if ($28) {
    $25 = $29;$i$04 = $26;
   } else {
    $$lcssa2 = $29;
    break;
   }
  }
 } else {
  $$lcssa2 = $13;
 }
 (_fwrite(353446,14,1,$$lcssa2)|0);
 $14 = HEAP32[$0>>2]|0;
 (_fwrite(353461,21,1,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 (_fwrite(353483,10,1,$15)|0);
 $16 = HEAP32[$10>>2]|0;
 $17 = ($16|0)>(0);
 if ($17) {
  $18 = ((($out)) + 1|0);
  $i1$03 = 0;
  while(1) {
   $52 = HEAP32[$0>>2]|0;
   $53 = (((((($vcd)) + 88|0) + ($i1$03<<6)|0)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)>(1);
   if ($55) {
    HEAP8[$out>>0] = 98;
    $dst$0$i13 = $18;
    label = 15;
   } else {
    $56 = ($54|0)>(0);
    if ($56) {
     $dst$0$i13 = $out;
     label = 15;
    } else {
     $dst$2$i = $out;
    }
   }
   if ((label|0) == 15) {
    label = 0;
    _memset(($dst$0$i13|0),120,($54|0))|0;
    $57 = (($54) + -2)|0;
    $scevgep = ((($dst$0$i13)) + 2|0);
    $scevgep10 = (($scevgep) + ($57)|0);
    if ($55) {
     $scevgep11 = ((($dst$0$i13)) + 1|0);
     $scevgep12 = (($scevgep11) + ($57)|0);
     $58 = ((($scevgep12)) + 2|0);
     HEAP8[$scevgep10>>0] = 32;
     $dst$2$i = $58;
    } else {
     $dst$2$i = $scevgep10;
    }
   }
   $59 = (((((($vcd)) + 88|0) + ($i1$03<<6)|0)) + 24|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = ((($dst$2$i)) + 1|0);
   HEAP8[$dst$2$i>>0] = $60;
   HEAP8[$61>>0] = 0;
   HEAP32[$vararg_buffer3>>2] = $out;
   (_fprintf($52,353951,$vararg_buffer3)|0);
   $62 = (($i1$03) + 1)|0;
   $63 = HEAP32[$10>>2]|0;
   $64 = ($62|0)<($63|0);
   if ($64) {
    $i1$03 = $62;
   } else {
    break;
   }
  }
 }
 $30 = HEAP32[$0>>2]|0;
 (_fwrite(353519,5,1,$30)|0);
 $31 = ((($vcd)) + 4204|0);
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$vcd>>2]|0;
 $33 = ((($32)) + 56|0);
 $34 = $33;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($vcd)) + 4192|0);
 $41 = $40;
 $42 = $41;
 HEAP32[$42>>2] = $36;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $39;
 $45 = ((($vcd)) + 4184|0);
 $46 = $45;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 _avr_cycle_timer_register($32,$48,$51,86,$vcd);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _avr_ioctl($avr,$ctl,$io_param) {
 $avr = $avr|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $port$0 = 0, $port$01 = 0, $port$03 = 0, $res$0$lcssa = 0, $res$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 5896|0);
 $port$01 = HEAP32[$0>>2]|0;
 $1 = ($port$01|0)==(0|0);
 if ($1) {
  $res$0$lcssa = -1;
  return ($res$0$lcssa|0);
 } else {
  $port$03 = $port$01;
 }
 while(1) {
  $2 = ((($port$03)) + 32|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $res$1 = -1;
  } else {
   $5 = (FUNCTION_TABLE_iiii[$3 & 255]($port$03,$ctl,$io_param)|0);
   $res$1 = $5;
  }
  $port$0 = HEAP32[$port$03>>2]|0;
  $6 = ($port$0|0)!=(0|0);
  $7 = ($res$1|0)==(-1);
  $8 = $7 & $6;
  if ($8) {
   $port$03 = $port$0;
  } else {
   $res$0$lcssa = $res$1;
   break;
  }
 }
 return ($res$0$lcssa|0);
}
function _avr_register_io($avr,$io) {
 $avr = $avr|0;
 $io = $io|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 5896|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$io>>2] = $1;
 $2 = ((($io)) + 4|0);
 HEAP32[$2>>2] = $avr;
 HEAP32[$0>>2] = $io;
 return;
}
function _avr_register_io_read($avr,$addr,$readp,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $readp = $readp|0;
 $param = $param|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $addr&65535;
 $1 = (($0) + 65504)|0;
 $2 = $1 & 65535;
 $3 = (((((($avr)) + 140|0) + (($2*20)|0)|0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (((((($avr)) + 140|0) + (($2*20)|0)|0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$pre$phiZ2D = $6;
   HEAP32[$3>>2] = $param;
   HEAP32[$$pre$phiZ2D>>2] = $readp;
   STACKTOP = sp;return;
  }
 }
 $9 = ($4|0)==($param|0);
 $10 = (((((($avr)) + 140|0) + (($2*20)|0)|0)) + 8|0);
 if ($9) {
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==($readp|0);
  if ($12) {
   $$pre$phiZ2D = $10;
   HEAP32[$3>>2] = $param;
   HEAP32[$$pre$phiZ2D>>2] = $readp;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$vararg_buffer>>2] = 353578;
 _avr_global_logger($avr,1,353525,$vararg_buffer);
 $13 = HEAP32[$10>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer1>>2] = 353578;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $13;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $14;
 $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $readp;
 $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
 HEAP32[$vararg_ptr8>>2] = $param;
 _avr_global_logger($avr,1,353599,$vararg_buffer1);
 _abort();
 // unreachable;
}
function _avr_register_io_write($avr,$addr,$writep,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $writep = $writep|0;
 $param = $param|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $addr&65535;
 $1 = (($0) + 65504)|0;
 $2 = $1 & 65535;
 $3 = ($2>>>0)>(279);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = 353684;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 280;
  _avr_global_logger($avr,1,353628,$vararg_buffer);
  _abort();
  // unreachable;
 }
 $4 = (((((($avr)) + 140|0) + (($2*20)|0)|0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $5;
 if ($6) {
  $8 = (((((($avr)) + 140|0) + (($2*20)|0)|0)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$pre$phiZ2D = $8;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $11 = ($5|0)==($param|0);
  $12 = (((((($avr)) + 140|0) + (($2*20)|0)|0)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==($writep|0);
  $or$cond = $11 & $14;
  if ($or$cond) {
   $$pre$phiZ2D = $12;
  } else {
   $15 = ($13|0)==(88|0);
   do {
    if ($15) {
     $27 = $7;
    } else {
     $16 = ((($avr)) + 5740|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (($17) + 1)|0;
     HEAP32[$16>>2] = $18;
     $19 = ($18>>>0)>(4);
     if ($19) {
      HEAP32[$vararg_buffer3>>2] = 353684;
      _avr_global_logger($avr,1,353706,$vararg_buffer3);
      _abort();
      // unreachable;
     } else {
      HEAP32[$vararg_buffer6>>2] = 353684;
      $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
      HEAP32[$vararg_ptr9>>2] = $0;
      _avr_global_logger($avr,3,353747,$vararg_buffer6);
      $20 = (((($avr)) + 5744|0) + (($17*36)|0)|0);
      HEAP32[$20>>2] = 1;
      $21 = HEAP32[$4>>2]|0;
      $22 = (((((($avr)) + 5744|0) + (($17*36)|0)|0)) + 4|0);
      HEAP32[$22>>2] = $21;
      $23 = HEAP32[$12>>2]|0;
      $24 = (((((($avr)) + 5744|0) + (($17*36)|0)|0)) + 8|0);
      HEAP32[$24>>2] = $23;
      $25 = $17;
      HEAP32[$4>>2] = $25;
      HEAP32[$12>>2] = 88;
      $27 = $17;
      break;
     }
    }
   } while(0);
   $26 = (((($avr)) + 5744|0) + (($27*36)|0)|0);
   $28 = HEAP32[$26>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[$26>>2] = $29;
   $30 = ($29>>>0)>(4);
   if ($30) {
    HEAP32[$vararg_buffer10>>2] = 353684;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $0;
    _avr_global_logger($avr,1,353792,$vararg_buffer10);
    _abort();
    // unreachable;
   }
   $31 = ((((((($avr)) + 5744|0) + (($27*36)|0)|0)) + 4|0) + ($28<<3)|0);
   HEAP32[$31>>2] = $param;
   $32 = ((((((((($avr)) + 5744|0) + (($27*36)|0)|0)) + 4|0) + ($28<<3)|0)) + 4|0);
   HEAP32[$32>>2] = $writep;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$4>>2] = $param;
 HEAP32[$$pre$phiZ2D>>2] = $writep;
 STACKTOP = sp;return;
}
function __avr_io_mux_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $param;
 $1 = (((($avr)) + 5744|0) + (($0*36)|0)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $12 = $2;$i$01 = 0;
 } else {
  return;
 }
 while(1) {
  $4 = ((((((((($avr)) + 5744|0) + (($0*36)|0)|0)) + 4|0) + ($i$01<<3)|0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $11 = $12;
  } else {
   $7 = ((((((($avr)) + 5744|0) + (($0*36)|0)|0)) + 4|0) + ($i$01<<3)|0);
   $8 = HEAP32[$7>>2]|0;
   FUNCTION_TABLE_viiii[$5 & 255]($avr,$addr,$v,$8);
   $$pre = HEAP32[$1>>2]|0;
   $11 = $$pre;
  }
  $9 = (($i$01) + 1)|0;
  $10 = ($9|0)<($11|0);
  if ($10) {
   $12 = $11;$i$01 = $9;
  } else {
   break;
  }
 }
 return;
}
function _avr_io_getirq($avr,$ctl,$index) {
 $avr = $avr|0;
 $ctl = $ctl|0;
 $index = $index|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $port$0 = 0, $port$01 = 0, $port$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 5896|0);
 $port$01 = HEAP32[$0>>2]|0;
 $1 = ($port$01|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $port$02 = $port$01;
 }
 while(1) {
  $2 = ((($port$02)) + 24|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($port$02)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==($ctl|0);
   if ($7) {
    $8 = ((($port$02)) + 20|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)>($index|0);
    if ($10) {
     $$lcssa = $3;
     break;
    }
   }
  }
  $port$0 = HEAP32[$port$02>>2]|0;
  $12 = ($port$0|0)==(0|0);
  if ($12) {
   $$0 = 0;
   label = 7;
   break;
  } else {
   $port$02 = $port$0;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $11 = (($$lcssa) + (($index*24)|0)|0);
 $$0 = $11;
 return ($$0|0);
}
function _avr_iomem_getirq($avr,$addr,$name,$index) {
 $avr = $avr|0;
 $addr = $addr|0;
 $name = $name|0;
 $index = $index|0;
 var $$0 = 0, $$alloca_mul = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $d$03 = 0, $exitcond4 = 0, $namep = 0, $names = 0, $ni$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $names = sp + 56|0;
 $namep = sp + 20|0;
 $0 = ($index|0)>(8);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = $addr&65535;
 $2 = (($1) + 65504)|0;
 $3 = $2 & 65535;
 $4 = (((($avr)) + 140|0) + (($3*20)|0)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $d$03 = $names;$ni$02 = 0;
  while(1) {
   $49 = ($ni$02|0)<(8);
   if ($49) {
    HEAP32[$vararg_buffer>>2] = $1;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $ni$02;
    (_sprintf($d$03,353831,$vararg_buffer)|0);
   } else {
    HEAP32[$vararg_buffer2>>2] = $1;
    (_sprintf($d$03,353846,$vararg_buffer2)|0);
   }
   $50 = (($namep) + ($ni$02<<2)|0);
   HEAP32[$50>>2] = $d$03;
   $51 = (_strlen($d$03)|0);
   $52 = (($51) + 1)|0;
   $53 = (($d$03) + ($52)|0);
   $54 = (($ni$02) + 1)|0;
   $exitcond4 = ($54|0)==(9);
   if ($exitcond4) {
    break;
   } else {
    $d$03 = $53;$ni$02 = $54;
   }
  }
  $7 = ((($avr)) + 112|0);
  $8 = (_avr_alloc_irq($7,0,9,$namep)|0);
  HEAP32[$4>>2] = $8;
  $9 = ((($8)) + 16|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 | 2;
  $13 = $12&255;
  HEAP8[$9>>0] = $13;
  $14 = ((($8)) + 40|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 | 2;
  $18 = $17&255;
  HEAP8[$14>>0] = $18;
  $19 = ((($8)) + 64|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 | 2;
  $23 = $22&255;
  HEAP8[$19>>0] = $23;
  $24 = ((($8)) + 88|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 | 2;
  $28 = $27&255;
  HEAP8[$24>>0] = $28;
  $29 = ((($8)) + 112|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 | 2;
  $33 = $32&255;
  HEAP8[$29>>0] = $33;
  $34 = ((($8)) + 136|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 | 2;
  $38 = $37&255;
  HEAP8[$34>>0] = $38;
  $39 = ((($8)) + 160|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41 | 2;
  $43 = $42&255;
  HEAP8[$39>>0] = $43;
  $44 = ((($8)) + 184|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $46 | 2;
  $48 = $47&255;
  HEAP8[$44>>0] = $48;
  $68 = $8;
 } else {
  $68 = $5;
 }
 $55 = ($name|0)==(0|0);
 if ($55) {
  $67 = $68;
 } else {
  $56 = (_strlen($name)|0);
  $57 = (($56) + 10)|0;
  $58 = (_llvm_stacksave()|0);
  $$alloca_mul = $57;
  $59 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  HEAP32[$vararg_buffer5>>2] = $name;
  (_sprintf($59,353863,$vararg_buffer5)|0);
  $60 = HEAP32[$4>>2]|0;
  $61 = (((($60) + (($index*24)|0)|0)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  _free($62);
  $63 = (___strdup($59)|0);
  $64 = HEAP32[$4>>2]|0;
  $65 = (((($64) + (($index*24)|0)|0)) + 4|0);
  HEAP32[$65>>2] = $63;
  _llvm_stackrestore(($58|0));
  $$pre = HEAP32[$4>>2]|0;
  $67 = $$pre;
 }
 $66 = (($67) + (($index*24)|0)|0);
 $$0 = $66;
 STACKTOP = sp;return ($$0|0);
}
function _avr_io_setirqs($io,$ctl,$count,$irqs) {
 $io = $io|0;
 $ctl = $ctl|0;
 $count = $count|0;
 $irqs = $irqs|0;
 var $$0 = 0, $$pre = 0, $$pre30 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $buf = 0, $dst$0$lcssa = 0, $dst$0$lcssa$us = 0, $dst$05 = 0, $dst$05$us = 0, $dst$1$lcssa = 0;
 var $dst$1$lcssa$us = 0, $dst$110 = 0, $dst$110$us = 0, $exitcond = 0, $exitcond28 = 0, $exitcond29 = 0, $i$016 = 0, $i$016$us = 0, $i1$02 = 0, $irq_names$0 = 0, $isdigit = 0, $isdigit$us = 0, $isdigit4 = 0, $isdigit4$us = 0, $isdigittmp = 0, $isdigittmp$us = 0, $isdigittmp3 = 0, $isdigittmp3$us = 0, $kind$0$lcssa = 0, $kind$0$lcssa$us = 0;
 var $kind$06 = 0, $kind$06$us = 0, $kind$1$lcssa = 0, $kind$1$lcssa$us = 0, $kind$111 = 0, $kind$111$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ((($io)) + 20|0);
 HEAP32[$0>>2] = $count;
 $1 = ($irqs|0)==(0|0);
 if (!($1)) {
  $$0 = $irqs;
  $89 = ((($io)) + 24|0);
  HEAP32[$89>>2] = $$0;
  $90 = ((($io)) + 16|0);
  HEAP32[$90>>2] = $ctl;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($io)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $irq_names$0 = 0;
 } else {
  $5 = $count << 2;
  $6 = (_malloc($5)|0);
  _memset(($6|0),0,($5|0))|0;
  $7 = ($count|0)>(0);
  L6: do {
   if ($7) {
    $8 = ((($io)) + 8|0);
    $9 = $ctl & 255;
    $10 = ($9>>>0)>(32);
    if ($10) {
     $12 = $3;$i$016$us = 0;
     while(1) {
      $11 = (($12) + ($i$016$us<<2)|0);
      $13 = HEAP32[$11>>2]|0;
      $14 = HEAP8[$13>>0]|0;
      $15 = $14 << 24 >> 24;
      $isdigittmp3$us = (($15) + -48)|0;
      $isdigit4$us = ($isdigittmp3$us>>>0)<(10);
      if ($isdigit4$us) {
       $40 = $14;$dst$05$us = $buf;$kind$06$us = $13;
       while(1) {
        $38 = ((($kind$06$us)) + 1|0);
        $39 = ((($dst$05$us)) + 1|0);
        HEAP8[$dst$05$us>>0] = $40;
        $41 = HEAP8[$38>>0]|0;
        $42 = $41 << 24 >> 24;
        $isdigittmp$us = (($42) + -48)|0;
        $isdigit$us = ($isdigittmp$us>>>0)<(10);
        if ($isdigit$us) {
         $40 = $41;$dst$05$us = $39;$kind$06$us = $38;
        } else {
         $44 = $41;$dst$0$lcssa$us = $39;$kind$0$lcssa$us = $38;
         break;
        }
       }
      } else {
       $44 = $14;$dst$0$lcssa$us = $buf;$kind$0$lcssa$us = $13;
      }
      $43 = $44 << 24 >> 24;
      $45 = (_isalpha($43)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       $dst$110$us = $dst$0$lcssa$us;$kind$111$us = $kind$0$lcssa$us;
       while(1) {
        $31 = ((($kind$111$us)) + 1|0);
        $32 = HEAP8[$kind$111$us>>0]|0;
        $33 = ((($dst$110$us)) + 1|0);
        HEAP8[$dst$110$us>>0] = $32;
        $34 = HEAP8[$31>>0]|0;
        $35 = $34 << 24 >> 24;
        $36 = (_isalpha($35)|0);
        $37 = ($36|0)==(0);
        if ($37) {
         $dst$110$us = $33;$kind$111$us = $31;
        } else {
         $dst$1$lcssa$us = $33;$kind$1$lcssa$us = $31;
         break;
        }
       }
      } else {
       $dst$1$lcssa$us = $dst$0$lcssa$us;$kind$1$lcssa$us = $kind$0$lcssa$us;
      }
      HEAP8[$dst$1$lcssa$us>>0]=7501409&255;HEAP8[$dst$1$lcssa$us+1>>0]=(7501409>>8)&255;HEAP8[$dst$1$lcssa$us+2>>0]=(7501409>>16)&255;HEAP8[$dst$1$lcssa$us+3>>0]=7501409>>24;
      $16 = (_strlen($dst$1$lcssa$us)|0);
      $17 = (($dst$1$lcssa$us) + ($16)|0);
      $18 = ((($17)) + 1|0);
      HEAP8[$17>>0] = 46;
      $19 = HEAP32[$8>>2]|0;
      (_strcpy($18,$19)|0);
      $20 = (_strlen($18)|0);
      $21 = (($18) + ($20)|0);
      $22 = (_tolower($9)|0);
      $23 = $22&255;
      $24 = ((($21)) + 1|0);
      HEAP8[$21>>0] = $23;
      $25 = ((($24)) + 1|0);
      HEAP8[$24>>0] = 46;
      (_strcpy($25,$kind$1$lcssa$us)|0);
      $26 = (_strlen($25)|0);
      $27 = (($25) + ($26)|0);
      HEAP8[$27>>0] = 0;
      $28 = (___strdup($buf)|0);
      $29 = (($6) + ($i$016$us<<2)|0);
      HEAP32[$29>>2] = $28;
      $30 = (($i$016$us) + 1)|0;
      $exitcond28 = ($30|0)==($count|0);
      if ($exitcond28) {
       break L6;
      }
      $$pre30 = HEAP32[$2>>2]|0;
      $12 = $$pre30;$i$016$us = $30;
     }
    } else {
     $48 = $3;$i$016 = 0;
     while(1) {
      $47 = (($48) + ($i$016<<2)|0);
      $49 = HEAP32[$47>>2]|0;
      $50 = HEAP8[$49>>0]|0;
      $51 = $50 << 24 >> 24;
      $isdigittmp3 = (($51) + -48)|0;
      $isdigit4 = ($isdigittmp3>>>0)<(10);
      if ($isdigit4) {
       $58 = $50;$dst$05 = $buf;$kind$06 = $49;
       while(1) {
        $56 = ((($kind$06)) + 1|0);
        $57 = ((($dst$05)) + 1|0);
        HEAP8[$dst$05>>0] = $58;
        $59 = HEAP8[$56>>0]|0;
        $60 = $59 << 24 >> 24;
        $isdigittmp = (($60) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $58 = $59;$dst$05 = $57;$kind$06 = $56;
        } else {
         $53 = $59;$dst$0$lcssa = $57;$kind$0$lcssa = $56;
         break;
        }
       }
      } else {
       $53 = $50;$dst$0$lcssa = $buf;$kind$0$lcssa = $49;
      }
      $52 = $53 << 24 >> 24;
      $54 = (_isalpha($52)|0);
      $55 = ($54|0)==(0);
      if ($55) {
       $dst$110 = $dst$0$lcssa;$kind$111 = $kind$0$lcssa;
       while(1) {
        $61 = ((($kind$111)) + 1|0);
        $62 = HEAP8[$kind$111>>0]|0;
        $63 = ((($dst$110)) + 1|0);
        HEAP8[$dst$110>>0] = $62;
        $64 = HEAP8[$61>>0]|0;
        $65 = $64 << 24 >> 24;
        $66 = (_isalpha($65)|0);
        $67 = ($66|0)==(0);
        if ($67) {
         $dst$110 = $63;$kind$111 = $61;
        } else {
         $dst$1$lcssa = $63;$kind$1$lcssa = $61;
         break;
        }
       }
      } else {
       $dst$1$lcssa = $dst$0$lcssa;$kind$1$lcssa = $kind$0$lcssa;
      }
      HEAP8[$dst$1$lcssa>>0]=7501409&255;HEAP8[$dst$1$lcssa+1>>0]=(7501409>>8)&255;HEAP8[$dst$1$lcssa+2>>0]=(7501409>>16)&255;HEAP8[$dst$1$lcssa+3>>0]=7501409>>24;
      $68 = (_strlen($dst$1$lcssa)|0);
      $69 = (($dst$1$lcssa) + ($68)|0);
      $70 = ((($69)) + 1|0);
      HEAP8[$69>>0] = 46;
      $71 = HEAP32[$8>>2]|0;
      (_strcpy($70,$71)|0);
      $72 = (_strlen($70)|0);
      $73 = (($70) + ($72)|0);
      $74 = ((($73)) + 1|0);
      HEAP8[$73>>0] = 46;
      (_strcpy($74,$kind$1$lcssa)|0);
      $75 = (_strlen($74)|0);
      $76 = (($74) + ($75)|0);
      HEAP8[$76>>0] = 0;
      $77 = (___strdup($buf)|0);
      $78 = (($6) + ($i$016<<2)|0);
      HEAP32[$78>>2] = $77;
      $79 = (($i$016) + 1)|0;
      $exitcond29 = ($79|0)==($count|0);
      if ($exitcond29) {
       break L6;
      }
      $$pre = HEAP32[$2>>2]|0;
      $48 = $$pre;$i$016 = $79;
     }
    }
   }
  } while(0);
  $irq_names$0 = $6;
 }
 $80 = ((($io)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 112|0);
 $83 = (_avr_alloc_irq($82,0,$count,$irq_names$0)|0);
 $84 = ($irq_names$0|0)==(0|0);
 if ($84) {
  $$0 = $83;
  $89 = ((($io)) + 24|0);
  HEAP32[$89>>2] = $$0;
  $90 = ((($io)) + 16|0);
  HEAP32[$90>>2] = $ctl;
  STACKTOP = sp;return ($$0|0);
 }
 $85 = ($count|0)>(0);
 if ($85) {
  $i1$02 = 0;
  while(1) {
   $86 = (($irq_names$0) + ($i1$02<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   _free($87);
   $88 = (($i1$02) + 1)|0;
   $exitcond = ($88|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $i1$02 = $88;
   }
  }
 }
 _free($irq_names$0);
 $$0 = $83;
 $89 = ((($io)) + 24|0);
 HEAP32[$89>>2] = $$0;
 $90 = ((($io)) + 16|0);
 HEAP32[$90>>2] = $ctl;
 STACKTOP = sp;return ($$0|0);
}
function _avr_deallocate_ios($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $port$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 5896|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  return;
 } else {
  $port$01 = $1;
 }
 while(1) {
  $3 = HEAP32[$port$01>>2]|0;
  $4 = ((($port$01)) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   FUNCTION_TABLE_vi[$5 & 255]($port$01);
  }
  $7 = ((($port$01)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($port$01)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  _avr_free_irq($8,$10);
  HEAP32[$9>>2] = 0;
  $11 = ((($port$01)) + 16|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($port$01)) + 4|0);
  HEAP32[$12>>2] = 0;
  HEAP32[$port$01>>2] = 0;
  $13 = ($3|0)==(0|0);
  if ($13) {
   break;
  } else {
   $port$01 = $3;
  }
 }
 HEAP32[$0>>2] = 0;
 return;
}
function _avr_global_logger($avr,$level,$format,$varargs) {
 $avr = $avr|0;
 $level = $level|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 HEAP32[$args>>2] = $varargs;
 $0 = HEAP32[87434]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 FUNCTION_TABLE_viiii[$0 & 255]($avr,$level,$format,$args);
 STACKTOP = sp;return;
}
function _std_logger($avr,$level,$format,$ap) {
 $avr = $avr|0;
 $level = $level|0;
 $format = $format|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($avr|0)==(0|0);
 if (!($0)) {
  $1 = ((($avr)) + 8280|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2&255) >>> 1;
  $4 = $3 & 3;
  $5 = $4&255;
  $6 = ($5|0)<($level|0);
  if ($6) {
   return;
  }
 }
 $7 = ($level|0)>(1);
 $8 = HEAP32[87849]|0;
 $9 = HEAP32[87820]|0;
 $10 = $7 ? $8 : $9;
 (_vfprintf($10,$format,$ap)|0);
 return;
}
function _avr_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($avr)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ((($avr)) + 5888|0);
 HEAP32[$4>>2] = $3;
 _memset(($3|0),-1,($2|0))|0;
 $5 = ((($avr)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($avr)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) + 1)|0;
 $10 = (_malloc($9)|0);
 $11 = ((($avr)) + 5892|0);
 HEAP32[$11>>2] = $10;
 _memset(($10|0),0,($9|0))|0;
 $12 = HEAP32[$avr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $12;
 _avr_global_logger($avr,3,353873,$vararg_buffer);
 $13 = ((($avr)) + 36|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($avr)) + 40|0);
 HEAP32[$14>>2] = 1000000;
 _avr_interrupt_init($avr);
 $15 = ((($avr)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $18 = ((($avr)) + 100|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$16 & 0]($avr,$19);
 }
 $20 = ((($avr)) + 84|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  FUNCTION_TABLE_vi[$21 & 255]($avr);
 }
 $23 = ((($avr)) + 104|0);
 HEAP32[$23>>2] = 89;
 $24 = ((($avr)) + 108|0);
 HEAP32[$24>>2] = 90;
 $25 = ((($avr)) + 26|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ($26<<16>>16)!=(0);
 $28 = $27 ? 3 : 2;
 $29 = ((($avr)) + 28|0);
 HEAP8[$29>>0] = $28;
 $30 = ((($avr)) + 8280|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 & -7;
 $33 = $32 | 2;
 HEAP8[$30>>0] = $33;
 _avr_reset($avr);
 STACKTOP = sp;return 0;
}
function _avr_callback_run_raw($avr) {
 $avr = $avr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $new_pc$0 = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($avr)) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($avr)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = (_avr_run_one($avr)|0);
  $new_pc$0 = $5;
 } else {
  $new_pc$0 = $1;
 }
 $6 = (_avr_cycle_timer_process($avr)|0);
 $7 = tempRet0;
 HEAP32[$0>>2] = $new_pc$0;
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)==(3);
 do {
  if ($9) {
   $10 = ((($avr)) + 127|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if (!($12)) {
    $17 = ((($avr)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    FUNCTION_TABLE_viii[$18 & 255]($avr,$6,$7);
    $19 = (_i64Add(($6|0),($7|0),1,0)|0);
    $20 = tempRet0;
    $21 = ((($avr)) + 56|0);
    $22 = $21;
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (_i64Add(($19|0),($20|0),($24|0),($27|0))|0);
    $29 = tempRet0;
    $30 = $21;
    $31 = $30;
    HEAP32[$31>>2] = $28;
    $32 = (($30) + 4)|0;
    $33 = $32;
    HEAP32[$33>>2] = $29;
    $$pre = HEAP32[$2>>2]|0;
    $35 = $$pre;
    break;
   }
   $13 = ((($avr)) + 8280|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 6;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    _avr_global_logger($avr,3,353882,$vararg_buffer);
   }
   HEAP32[$2>>2] = 6;
   STACKTOP = sp;return;
  } else {
   $35 = $8;
  }
 } while(0);
 $34 = $35 & -2;
 $switch = ($34|0)==(2);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $36 = ((($avr)) + 128|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  STACKTOP = sp;return;
 }
 _avr_service_interrupts($avr);
 STACKTOP = sp;return;
}
function _avr_callback_sleep_raw($avr,$0,$1) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avr$idx$i = 0, $avr$idx$val$i = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr$idx$i = ((($avr)) + 40|0);
 $avr$idx$val$i = HEAP32[$avr$idx$i>>2]|0;
 $2 = (___muldi3(($0|0),($1|0),1000000,0)|0);
 $3 = tempRet0;
 $4 = (___udivdi3(($2|0),($3|0),($avr$idx$val$i|0),0)|0);
 $5 = tempRet0;
 $6 = ((($avr)) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 $9 = ($8>>>0)>(200);
 $$$i = $9 ? 0 : $8;
 HEAP32[$6>>2] = $$$i;
 $10 = ($8|0)==(0);
 $not$ = $9 ^ 1;
 $11 = $10 | $not$;
 if ($11) {
  return;
 }
 (_usleep(($8|0))|0);
 return;
}
function _avr_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond8 = 0, $i$04 = 0, $port$0 = 0, $port$01 = 0, $port$02 = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($avr)) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = HEAP32[$avr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 _avr_global_logger($avr,3,353941,$vararg_buffer);
 $3 = ((($avr)) + 36|0);
 HEAP32[$3>>2] = 2;
 $4 = ($1&65535)>(32);
 if ($4) {
  $5 = ((($avr)) + 5892|0);
  $6 = $1&65535;
  $i$04 = 32;
  while(1) {
   $18 = HEAP32[$5>>2]|0;
   $19 = (($18) + ($i$04)|0);
   HEAP8[$19>>0] = 0;
   $20 = (($i$04) + 1)|0;
   $exitcond8 = ($20|0)==($6|0);
   if ($exitcond8) {
    break;
   } else {
    $i$04 = $20;
   }
  }
 }
 $7 = HEAP16[$0>>1]|0;
 __avr_sp_set($avr,$7);
 $8 = ((($avr)) + 136|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($avr)) + 132|0);
 HEAP32[$10>>2] = $9;
 $scevgep = ((($avr)) + 120|0);
 $11 = $scevgep;
 $12 = $11;
 HEAP8[$12>>0]=0&255;HEAP8[$12+1>>0]=(0>>8)&255;HEAP8[$12+2>>0]=(0>>16)&255;HEAP8[$12+3>>0]=0>>24;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP8[$14>>0]=0&255;HEAP8[$14+1>>0]=(0>>8)&255;HEAP8[$14+2>>0]=(0>>16)&255;HEAP8[$14+3>>0]=0>>24;
 _avr_interrupt_reset($avr);
 _avr_cycle_timer_reset($avr);
 $15 = ((($avr)) + 88|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  FUNCTION_TABLE_vi[$16 & 255]($avr);
 }
 $21 = ((($avr)) + 5896|0);
 $port$01 = HEAP32[$21>>2]|0;
 $22 = ($port$01|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 } else {
  $port$02 = $port$01;
 }
 while(1) {
  $23 = ((($port$02)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   FUNCTION_TABLE_vi[$24 & 255]($port$02);
  }
  $port$0 = HEAP32[$port$02>>2]|0;
  $26 = ($port$0|0)==(0|0);
  if ($26) {
   break;
  } else {
   $port$02 = $port$0;
  }
 }
 STACKTOP = sp;return;
}
function _avr_terminate($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($avr)) + 100|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vii[$1 & 0]($avr,$4);
 }
 $5 = ((($avr)) + 8292|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _avr_deinit_gdb($avr);
  HEAP32[$5>>2] = 0;
 }
 $8 = ((($avr)) + 8288|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _avr_vcd_close($9);
  HEAP32[$8>>2] = 0;
 }
 _avr_deallocate_ios($avr);
 $11 = ((($avr)) + 5888|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _free($12);
 }
 $14 = ((($avr)) + 5892|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$14>>2] = 0;
  HEAP32[$11>>2] = 0;
  return;
 }
 _free($15);
 HEAP32[$14>>2] = 0;
 HEAP32[$11>>2] = 0;
 return;
}
function _avr_sadly_crashed($avr,$signal) {
 $avr = $avr|0;
 $signal = $signal|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 353955;
 _avr_global_logger($avr,1,353951,$vararg_buffer);
 $0 = ((($avr)) + 36|0);
 HEAP32[$0>>2] = 1;
 $1 = ((($avr)) + 8296|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $$pre = ((($avr)) + 8292|0);
 if (!($3)) {
  $4 = HEAP32[$$pre>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   (_avr_gdb_init($avr)|0);
  }
 }
 $6 = HEAP32[$$pre>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 HEAP32[$0>>2] = 7;
 STACKTOP = sp;return;
}
function _avr_set_command_register($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($addr<<16>>16)==(0);
 if ($0) {
  return;
 }
 _avr_register_io_write($avr,$addr,91,0);
 return;
}
function __avr_io_command_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $v&255;
 HEAP32[$vararg_buffer>>2] = 353973;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 _avr_global_logger($avr,3,356372,$vararg_buffer);
 switch ($0|0) {
 case 1:  {
  $1 = ((($avr)) + 8288|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   STACKTOP = sp;return;
  }
  (_avr_vcd_start($2)|0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $4 = ((($avr)) + 8288|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   STACKTOP = sp;return;
  }
  (_avr_vcd_stop($5)|0);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $7 = (_avr_io_getirq($avr,1969320496,1)|0);
  $8 = (_avr_io_getirq($avr,1969320496,0)|0);
  $9 = ($7|0)!=(0|0);
  $10 = ($8|0)!=(0|0);
  $or$cond = $9 & $10;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  HEAP32[$vararg_buffer2>>2] = 353973;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $7;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $8;
  _avr_global_logger($avr,3,353995,$vararg_buffer2);
  _avr_connect_irq($7,$8);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _avr_set_console_register($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($addr<<16>>16)==(0);
 if ($0) {
  return;
 }
 _avr_register_io_write($avr,$addr,92,0);
 return;
}
function __avr_io_console_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($v<<24>>24)==(13);
 $1 = HEAP32[90337]|0;
 $2 = ($1|0)!=(0|0);
 $or$cond = $0 & $2;
 $3 = HEAP32[90338]|0;
 if ($or$cond) {
  $4 = (($1) + ($3)|0);
  HEAP8[$4>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $1;
  _avr_global_logger($avr,0,354044,$vararg_buffer);
  HEAP32[90338] = 0;
  STACKTOP = sp;return;
 }
 $5 = (($3) + 1)|0;
 $6 = HEAP32[90339]|0;
 $7 = ($5|0)<($6|0);
 if ($7) {
  $14 = $1;
 } else {
  $8 = (($6) + 128)|0;
  HEAP32[90339] = $8;
  $9 = (_realloc($1,$8)|0);
  HEAP32[90337] = $9;
  $14 = $9;
 }
 $10 = ($v&255)>(31);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[90338]|0;
 $12 = (($11) + 1)|0;
 HEAP32[90338] = $12;
 $13 = (($14) + ($11)|0);
 HEAP8[$13>>0] = $v;
 STACKTOP = sp;return;
}
function _avr_loadcode($avr,$code,$size,$address) {
 $avr = $avr|0;
 $code = $code|0;
 $size = $size|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($address) + ($size))|0;
 $1 = ((($avr)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ($0>>>0)>($3>>>0);
 if ($4) {
  HEAP32[$vararg_buffer>>2] = $size;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  _avr_global_logger($avr,1,354050,$vararg_buffer);
  _abort();
  // unreachable;
 } else {
  $5 = ((($avr)) + 5888|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($address)|0);
  _memcpy(($7|0),($code|0),($size|0))|0;
  STACKTOP = sp;return;
 }
}
function _avr_callback_sleep_gdb($avr,$0,$1) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avr$idx$i = 0, $avr$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr$idx$i = ((($avr)) + 40|0);
 $avr$idx$val$i = HEAP32[$avr$idx$i>>2]|0;
 $2 = (___muldi3(($0|0),($1|0),1000000,0)|0);
 $3 = tempRet0;
 $4 = (___udivdi3(($2|0),($3|0),($avr$idx$val$i|0),0)|0);
 $5 = tempRet0;
 $6 = ((($avr)) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 $9 = ($8>>>0)>(200);
 $$$i = $9 ? 0 : $8;
 HEAP32[$6>>2] = $$$i;
 $$1$i = $9 ? $8 : 0;
 while(1) {
  $10 = (_avr_gdb_processor($avr,$$1$i)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 return;
}
function _avr_callback_run_gdb($avr) {
 $avr = $avr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_pc$0 = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($avr)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 $3 = $2&1;
 (_avr_gdb_processor($avr,$3)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ($4|0)==(4);
 if ($6) {
  HEAP32[$0>>2] = 2;
  $7 = ((($avr)) + 132|0);
  $43 = $7;
  label = 5;
 } else {
  $8 = ((($avr)) + 132|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($4|0)==(2);
  if ($10) {
   $43 = $8;
   label = 5;
  } else {
   $14 = $8;$new_pc$0 = $9;
  }
 }
 if ((label|0) == 5) {
  $11 = (_avr_run_one($avr)|0);
  $14 = $43;$new_pc$0 = $11;
 }
 $12 = (_avr_cycle_timer_process($avr)|0);
 $13 = tempRet0;
 HEAP32[$14>>2] = $new_pc$0;
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15|0)==(3);
 do {
  if ($16) {
   $17 = ((($avr)) + 127|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(0);
   if (!($19)) {
    $24 = ((($avr)) + 108|0);
    $25 = HEAP32[$24>>2]|0;
    FUNCTION_TABLE_viii[$25 & 255]($avr,$12,$13);
    $26 = (_i64Add(($12|0),($13|0),1,0)|0);
    $27 = tempRet0;
    $28 = ((($avr)) + 56|0);
    $29 = $28;
    $30 = $29;
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 4)|0;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (_i64Add(($26|0),($27|0),($31|0),($34|0))|0);
    $36 = tempRet0;
    $37 = $28;
    $38 = $37;
    HEAP32[$38>>2] = $35;
    $39 = (($37) + 4)|0;
    $40 = $39;
    HEAP32[$40>>2] = $36;
    $$pre = HEAP32[$0>>2]|0;
    $42 = $$pre;
    break;
   }
   $20 = ((($avr)) + 8280|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 & 6;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    _avr_global_logger($avr,3,353882,$vararg_buffer);
   }
   HEAP32[$0>>2] = 6;
   STACKTOP = sp;return;
  } else {
   $42 = $15;
  }
 } while(0);
 $41 = $42 & -2;
 $switch = ($41|0)==(2);
 if ($switch) {
  _avr_service_interrupts($avr);
 }
 if (!($6)) {
  STACKTOP = sp;return;
 }
 HEAP32[$0>>2] = 5;
 STACKTOP = sp;return;
}
function _avr_run($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vi[$1 & 255]($avr);
 $2 = ((($avr)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _avr_core_allocate($core,$coreLen) {
 $core = $core|0;
 $coreLen = $coreLen|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($coreLen)|0);
 _memcpy(($0|0),($core|0),($coreLen|0))|0;
 return ($0|0);
}
function _avr_make_mcu_by_name($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $j$01 = 0, $maker$1 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[87406]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $3 = $0;$i$05 = 0;
  while(1) {
   $2 = HEAP32[$3>>2]|0;
   $4 = ($2|0)==(0|0);
   L4: do {
    if ($4) {
     $maker$1 = 0;
    } else {
     $9 = $2;$j$01 = 0;
     while(1) {
      $10 = (_strcmp($9,$name)|0);
      $11 = ($10|0)==(0);
      $6 = (($j$01) + 1)|0;
      if ($11) {
       $maker$1 = $3;
       break L4;
      }
      $5 = (($3) + ($6<<2)|0);
      $7 = HEAP32[$5>>2]|0;
      $8 = ($7|0)==(0|0);
      if ($8) {
       $maker$1 = 0;
       break;
      } else {
       $9 = $7;$j$01 = $6;
      }
     }
    }
   } while(0);
   $12 = (($i$05) + 1)|0;
   $13 = (349624 + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0|0);
   $16 = ($maker$1|0)==(0|0);
   $or$cond = $16 & $15;
   if ($or$cond) {
    $3 = $14;$i$05 = $12;
   } else {
    break;
   }
  }
  if (!($16)) {
   $17 = ((($maker$1)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_i[$18 & 63]()|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($19)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($19)) + 4|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = ((($19)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $20;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $22;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $25;
   $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
   HEAP32[$vararg_ptr7>>2] = $27;
   _avr_global_logger($19,3,354173,$vararg_buffer2);
   $$0 = $19;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$vararg_buffer>>2] = 354152;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $name;
 _avr_global_logger(0,1,354128,$vararg_buffer);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _read_hex_string($src,$buffer,$maxlen) {
 $src = $src|0;
 $buffer = $buffer|0;
 $maxlen = $maxlen|0;
 var $$02$ph51 = 0, $$05$ph50 = 0, $$05$us = 0, $$13 = 0, $$2 = 0, $$lcssa = 0, $$lcssa65 = 0, $$lcssa66 = 0, $$lcssa67 = 0, $$lcssa68 = 0, $$lcssa69 = 0, $$lcssa70 = 0, $$lcssa71 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b$0$ph54 = 0, $b$1 = 0, $b$1$in = 0, $b$2 = 0, $dst$0$ph49 = 0, $dst$0$ph52 = 0, $dst$1 = 0, $ls$0$ph53 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($maxlen|0)==(0);
 L1: do {
  if ($0) {
   $dst$0$ph49 = $buffer;
  } else {
   $$02$ph51 = $maxlen;$$05$ph50 = $src;$b$0$ph54 = 0;$dst$0$ph52 = $buffer;$ls$0$ph53 = 0;
   L2: while(1) {
    $$05$us = $$05$ph50;
    L4: while(1) {
     $1 = HEAP8[$$05$us>>0]|0;
     $2 = $1 << 24 >> 24;
     $3 = ($1<<24>>24)==(0);
     if ($3) {
      $dst$0$ph49 = $dst$0$ph52;
      break L1;
     }
     $4 = ((($$05$us)) + 1|0);
     switch ($2|0) {
     case 102: case 101: case 100: case 99: case 98: case 97:  {
      $$lcssa = $4;$$lcssa65 = $2;
      label = 6;
      break L4;
      break;
     }
     case 70: case 69: case 68: case 67: case 66: case 65:  {
      $$lcssa66 = $2;$$lcssa69 = $4;
      label = 7;
      break L4;
      break;
     }
     case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $$lcssa67 = $2;$$lcssa70 = $4;
      label = 8;
      break L4;
      break;
     }
     default: {
     }
     }
     $5 = ($1<<24>>24)>(32);
     if ($5) {
      $$lcssa68 = $2;$$lcssa71 = $4;
      break L2;
     } else {
      $$05$us = $4;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $6 = $b$0$ph54&255;
     $7 = $6 << 4;
     $8 = (($$lcssa65) + -87)|0;
     $9 = $8 | $7;
     $28 = $$lcssa;$b$1$in = $9;
    }
    else if ((label|0) == 7) {
     label = 0;
     $10 = $b$0$ph54&255;
     $11 = $10 << 4;
     $12 = (($$lcssa66) + -55)|0;
     $13 = $12 | $11;
     $28 = $$lcssa69;$b$1$in = $13;
    }
    else if ((label|0) == 8) {
     label = 0;
     $14 = $b$0$ph54&255;
     $15 = $14 << 4;
     $16 = (($$lcssa67) + 208)|0;
     $17 = $16 | $15;
     $28 = $$lcssa70;$b$1$in = $17;
    }
    $b$1 = $b$1$in&255;
    $18 = $ls$0$ph53 & 1;
    $19 = ($18|0)==(0);
    if ($19) {
     $$13 = $$02$ph51;$b$2 = $b$1;$dst$1 = $dst$0$ph52;
    } else {
     $20 = ((($dst$0$ph52)) + 1|0);
     HEAP8[$dst$0$ph52>>0] = $b$1;
     $21 = (($$02$ph51) + -1)|0;
     $$13 = $21;$b$2 = 0;$dst$1 = $20;
    }
    $22 = (($ls$0$ph53) + 1)|0;
    $23 = ($$13|0)==(0);
    if ($23) {
     $dst$0$ph49 = $dst$1;
     break L1;
    } else {
     $$02$ph51 = $$13;$$05$ph50 = $28;$b$0$ph54 = $b$2;$dst$0$ph52 = $dst$1;$ls$0$ph53 = $22;
    }
   }
   $24 = HEAP32[87820]|0;
   HEAP32[$vararg_buffer>>2] = 354244;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$lcssa68;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$lcssa71;
   (_fprintf($24,354225,$vararg_buffer)|0);
   $$2 = -1;
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 $25 = $dst$0$ph49;
 $26 = $buffer;
 $27 = (($25) - ($26))|0;
 $$2 = $27;
 STACKTOP = sp;return ($$2|0);
}
function _read_ihex_chunks($fname,$chunks) {
 $fname = $fname|0;
 $chunks = $chunks|0;
 var $$02$ph$i32 = 0, $$05$ph$i31 = 0, $$05$us$i = 0, $$1 = 0, $$13$i = 0, $$lcssa = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa128 = 0, $$lcssa129 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$0$ph$i35 = 0, $b$1$i = 0, $b$1$in$i = 0, $b$2$i = 0, $bline = 0, $chk$0$lcssa = 0, $chk$036 = 0, $chunk$0$ = 0, $chunk$0$ph43 = 0, $chunk$1 = 0;
 var $chunk$4$ph = 0, $dst$0$ph$i23 = 0, $dst$0$ph$i33 = 0, $dst$1$i = 0, $line = 0, $ls$0$ph$i34 = 0, $max_chunks$0$ph26 = 0, $max_chunks$0$ph44 = 0, $max_chunks$0$ph44$lcssa = 0, $max_chunks$0$ph44$lcssa125 = 0, $max_chunks$1 = 0, $max_chunks$4$ph = 0, $or$cond = 0, $or$cond4 = 0, $segment$0$ph41 = 0, $segment$3$ph = 0, $src$037 = 0, $tlen$038 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $line = sp + 120|0;
 $bline = sp + 56|0;
 $0 = ($fname|0)!=(0|0);
 $1 = ($chunks|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$1 = -1;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (_fopen($fname,354260)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _perror($fname);
  $$1 = -1;
  STACKTOP = sp;return ($$1|0);
 }
 HEAP32[$chunks>>2] = 0;
 $4 = (_feof($2)|0);
 $5 = ($4|0)==(0);
 L8: do {
  if ($5) {
   $6 = ((($line)) + 1|0);
   $7 = HEAP32[87820]|0;
   $8 = $bline;
   $9 = ((($bline)) + 3|0);
   $10 = ((($bline)) + 1|0);
   $11 = ((($bline)) + 2|0);
   $12 = ((($bline)) + 4|0);
   $13 = ((($bline)) + 5|0);
   $chunk$0$ph43 = 0;$max_chunks$0$ph44 = 0;$segment$0$ph41 = 0;
   L10: while(1) {
    while(1) {
     $14 = (_fgets($line,127,$2)|0);
     $15 = ($14|0)==(0|0);
     if (!($15)) {
      break;
     }
     $16 = (_feof($2)|0);
     $17 = ($16|0)==(0);
     if (!($17)) {
      $max_chunks$0$ph26 = $max_chunks$0$ph44;
      break L8;
     }
    }
    $18 = HEAP8[$line>>0]|0;
    $19 = ($18<<24>>24)==(58);
    if (!($19)) {
     $max_chunks$0$ph44$lcssa = $max_chunks$0$ph44;
     label = 10;
     break;
    }
    $$02$ph$i32 = 64;$$05$ph$i31 = $6;$b$0$ph$i35 = 0;$dst$0$ph$i33 = $bline;$ls$0$ph$i34 = 0;
    L17: while(1) {
     $$05$us$i = $$05$ph$i31;
     L19: while(1) {
      $20 = HEAP8[$$05$us$i>>0]|0;
      $21 = $20 << 24 >> 24;
      $22 = ($20<<24>>24)==(0);
      if ($22) {
       $dst$0$ph$i23 = $dst$0$ph$i33;
       label = 23;
       break L17;
      }
      $23 = ((($$05$us$i)) + 1|0);
      switch ($21|0) {
      case 102: case 101: case 100: case 99: case 98: case 97:  {
       $$lcssa = $23;$$lcssa115 = $21;
       label = 16;
       break L19;
       break;
      }
      case 70: case 69: case 68: case 67: case 66: case 65:  {
       $$lcssa116 = $21;$$lcssa119 = $23;
       label = 17;
       break L19;
       break;
      }
      case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
       $$lcssa117 = $21;$$lcssa120 = $23;
       label = 18;
       break L19;
       break;
      }
      default: {
      }
      }
      $24 = ($20<<24>>24)>(32);
      if ($24) {
       $$lcssa118 = $21;$$lcssa121 = $23;
       label = 22;
       break L17;
      } else {
       $$05$us$i = $23;
      }
     }
     if ((label|0) == 16) {
      label = 0;
      $25 = $b$0$ph$i35&255;
      $26 = $25 << 4;
      $27 = (($$lcssa115) + -87)|0;
      $28 = $27 | $26;
      $133 = $$lcssa;$b$1$in$i = $28;
     }
     else if ((label|0) == 17) {
      label = 0;
      $29 = $b$0$ph$i35&255;
      $30 = $29 << 4;
      $31 = (($$lcssa116) + -55)|0;
      $32 = $31 | $30;
      $133 = $$lcssa119;$b$1$in$i = $32;
     }
     else if ((label|0) == 18) {
      label = 0;
      $33 = $b$0$ph$i35&255;
      $34 = $33 << 4;
      $35 = (($$lcssa117) + 208)|0;
      $36 = $35 | $34;
      $133 = $$lcssa120;$b$1$in$i = $36;
     }
     $b$1$i = $b$1$in$i&255;
     $37 = $ls$0$ph$i34 & 1;
     $38 = ($37|0)==(0);
     if ($38) {
      $$13$i = $$02$ph$i32;$b$2$i = $b$1$i;$dst$1$i = $dst$0$ph$i33;
     } else {
      $39 = ((($dst$0$ph$i33)) + 1|0);
      HEAP8[$dst$0$ph$i33>>0] = $b$1$i;
      $40 = (($$02$ph$i32) + -1)|0;
      $$13$i = $40;$b$2$i = 0;$dst$1$i = $39;
     }
     $41 = (($ls$0$ph$i34) + 1)|0;
     $42 = ($$13$i|0)==(0);
     if ($42) {
      $dst$0$ph$i23 = $dst$1$i;
      label = 23;
      break;
     } else {
      $$02$ph$i32 = $$13$i;$$05$ph$i31 = $133;$b$0$ph$i35 = $b$2$i;$dst$0$ph$i33 = $dst$1$i;$ls$0$ph$i34 = $41;
     }
    }
    L31: do {
     if ((label|0) == 22) {
      label = 0;
      HEAP32[$vararg_buffer2>>2] = 354244;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $$lcssa118;
      $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = $$lcssa121;
      (_fprintf($7,354225,$vararg_buffer2)|0);
      $chunk$4$ph = $chunk$0$ph43;$max_chunks$4$ph = $max_chunks$0$ph44;$segment$3$ph = $segment$0$ph41;
     }
     else if ((label|0) == 23) {
      label = 0;
      $43 = $dst$0$ph$i23;
      $44 = (($43) - ($8))|0;
      $45 = ($44|0)<(1);
      if ($45) {
       $chunk$4$ph = $chunk$0$ph43;$max_chunks$4$ph = $max_chunks$0$ph44;$segment$3$ph = $segment$0$ph41;
      } else {
       $46 = (($44) + -1)|0;
       $47 = ($46|0)==(0);
       if ($47) {
        $chk$0$lcssa = 0;
       } else {
        $chk$036 = 0;$src$037 = $bline;$tlen$038 = $46;
        while(1) {
         $48 = (($tlen$038) + -1)|0;
         $49 = ((($src$037)) + 1|0);
         $50 = HEAP8[$src$037>>0]|0;
         $51 = $50&255;
         $52 = $chk$036 & 255;
         $53 = (($51) + ($52))|0;
         $54 = ($48|0)==(0);
         if ($54) {
          $chk$0$lcssa = $53;
          break;
         } else {
          $chk$036 = $53;$src$037 = $49;$tlen$038 = $48;
         }
        }
       }
       $55 = (0 - ($chk$0$lcssa))|0;
       $56 = $55 & 255;
       $57 = (($bline) + ($46)|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = $58&255;
       $60 = ($56|0)==($59|0);
       if (!($60)) {
        $$lcssa128 = $56;$$lcssa129 = $59;$max_chunks$0$ph44$lcssa125 = $max_chunks$0$ph44;
        label = 38;
        break L10;
       }
       $61 = HEAP8[$9>>0]|0;
       $62 = $61&255;
       switch ($62|0) {
       case 1:  {
        $chunk$4$ph = $chunk$0$ph43;$max_chunks$4$ph = $max_chunks$0$ph44;$segment$3$ph = $segment$0$ph41;
        break L31;
        break;
       }
       case 0:  {
        $63 = HEAP8[$10>>0]|0;
        $64 = $63&255;
        $65 = $64 << 8;
        $66 = $65 | $segment$0$ph41;
        $67 = HEAP8[$11>>0]|0;
        $68 = $67&255;
        $69 = $66 | $68;
        $70 = ($chunk$0$ph43|0)<($max_chunks$0$ph44|0);
        if ($70) {
         $85 = HEAP32[$chunks>>2]|0;
         $86 = (($85) + (($chunk$0$ph43*12)|0)|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = (((($85) + (($chunk$0$ph43*12)|0)|0)) + 8|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = (($89) + ($87))|0;
         $91 = ($69|0)==($90|0);
         $92 = ($89|0)==(0);
         $or$cond4 = $92 | $91;
         $93 = $or$cond4&1;
         $94 = $93 ^ 1;
         $chunk$0$ = (($94) + ($chunk$0$ph43))|0;
         $chunk$1 = $chunk$0$;
        } else {
         $chunk$1 = $chunk$0$ph43;
        }
        $95 = ($chunk$1|0)<($max_chunks$0$ph44|0);
        if ($95) {
         $$pre = HEAP32[$chunks>>2]|0;
         $107 = $$pre;$max_chunks$1 = $max_chunks$0$ph44;
        } else {
         $96 = (($max_chunks$0$ph44) + 1)|0;
         $97 = HEAP32[$chunks>>2]|0;
         $98 = ($max_chunks$0$ph44*12)|0;
         $99 = (($98) + 24)|0;
         $100 = (_realloc($97,$99)|0);
         HEAP32[$chunks>>2] = $100;
         $101 = (($100) + (($chunk$1*12)|0)|0);
         $102 = (($96) - ($chunk$1))|0;
         $103 = ($102*12)|0;
         $104 = (($103) + 12)|0;
         _memset(($101|0),0,($104|0))|0;
         $105 = (($100) + (($chunk$1*12)|0)|0);
         HEAP32[$105>>2] = $69;
         $107 = $100;$max_chunks$1 = $96;
        }
        $106 = (((($107) + (($chunk$1*12)|0)|0)) + 4|0);
        $108 = HEAP32[$106>>2]|0;
        $109 = (((($107) + (($chunk$1*12)|0)|0)) + 8|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = HEAP8[$bline>>0]|0;
        $112 = $111&255;
        $113 = (($112) + ($110))|0;
        $114 = (_realloc($108,$113)|0);
        $115 = HEAP32[$chunks>>2]|0;
        $116 = (((($115) + (($chunk$1*12)|0)|0)) + 4|0);
        HEAP32[$116>>2] = $114;
        $117 = HEAP32[$chunks>>2]|0;
        $118 = (((($117) + (($chunk$1*12)|0)|0)) + 4|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = (((($117) + (($chunk$1*12)|0)|0)) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($119) + ($121)|0);
        $123 = HEAP8[$bline>>0]|0;
        $124 = $123&255;
        _memcpy(($122|0),($12|0),($124|0))|0;
        $125 = HEAP8[$bline>>0]|0;
        $126 = $125&255;
        $127 = HEAP32[$chunks>>2]|0;
        $128 = (((($127) + (($chunk$1*12)|0)|0)) + 8|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = (($129) + ($126))|0;
        HEAP32[$128>>2] = $130;
        $chunk$4$ph = $chunk$1;$max_chunks$4$ph = $max_chunks$1;$segment$3$ph = $segment$0$ph41;
        break L31;
        break;
       }
       case 2:  {
        $71 = HEAP8[$12>>0]|0;
        $72 = $71&255;
        $73 = $72 << 8;
        $74 = HEAP8[$13>>0]|0;
        $75 = $74&255;
        $76 = $73 | $75;
        $77 = $76 << 4;
        $chunk$4$ph = $chunk$0$ph43;$max_chunks$4$ph = $max_chunks$0$ph44;$segment$3$ph = $77;
        break L31;
        break;
       }
       case 4:  {
        $78 = HEAP8[$12>>0]|0;
        $79 = $78&255;
        $80 = $79 << 8;
        $81 = HEAP8[$13>>0]|0;
        $82 = $81&255;
        $83 = $80 | $82;
        $84 = $83 << 16;
        $chunk$4$ph = $chunk$0$ph43;$max_chunks$4$ph = $max_chunks$0$ph44;$segment$3$ph = $84;
        break L31;
        break;
       }
       default: {
        HEAP32[$vararg_buffer7>>2] = 354337;
        $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
        HEAP32[$vararg_ptr10>>2] = $fname;
        $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
        HEAP32[$vararg_ptr11>>2] = $62;
        (_fprintf($7,354300,$vararg_buffer7)|0);
        $chunk$4$ph = $chunk$0$ph43;$max_chunks$4$ph = $max_chunks$0$ph44;$segment$3$ph = $segment$0$ph41;
        break L31;
       }
       }
      }
     }
    } while(0);
    $131 = (_feof($2)|0);
    $132 = ($131|0)==(0);
    if ($132) {
     $chunk$0$ph43 = $chunk$4$ph;$max_chunks$0$ph44 = $max_chunks$4$ph;$segment$0$ph41 = $segment$3$ph;
    } else {
     $max_chunks$0$ph26 = $max_chunks$4$ph;
     break L8;
    }
   }
   if ((label|0) == 10) {
    HEAP32[$vararg_buffer>>2] = $fname;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $line;
    (_fprintf($7,354262,$vararg_buffer)|0);
    $max_chunks$0$ph26 = $max_chunks$0$ph44$lcssa;
    break;
   }
   else if ((label|0) == 38) {
    HEAP32[$vararg_buffer12>>2] = 354337;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = $fname;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $$lcssa128;
    $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
    HEAP32[$vararg_ptr17>>2] = $$lcssa129;
    (_fprintf($7,354354,$vararg_buffer12)|0);
    $max_chunks$0$ph26 = $max_chunks$0$ph44$lcssa125;
    break;
   }
  } else {
   $max_chunks$0$ph26 = 0;
  }
 } while(0);
 (_fclose($2)|0);
 $$1 = $max_chunks$0$ph26;
 STACKTOP = sp;return ($$1|0);
}
function _m1280_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$8);
 $9 = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$9);
 $10 = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$10);
 $11 = ((($avr)) + 10236|0);
 _avr_ioport_init($avr,$11);
 $12 = ((($avr)) + 10352|0);
 _avr_ioport_init($avr,$12);
 $13 = ((($avr)) + 10468|0);
 _avr_ioport_init($avr,$13);
 $14 = ((($avr)) + 10584|0);
 _avr_ioport_init($avr,$14);
 $15 = ((($avr)) + 10704|0);
 _avr_uart_init($avr,$15);
 $16 = ((($avr)) + 11072|0);
 _avr_uart_init($avr,$16);
 $17 = ((($avr)) + 11440|0);
 _avr_uart_init($avr,$17);
 $18 = ((($avr)) + 11808|0);
 _avr_uart_init($avr,$18);
 $19 = ((($avr)) + 12176|0);
 _avr_adc_init($avr,$19);
 $20 = ((($avr)) + 12744|0);
 _avr_timer_init($avr,$20);
 $21 = ((($avr)) + 13360|0);
 _avr_timer_init($avr,$21);
 $22 = ((($avr)) + 13976|0);
 _avr_timer_init($avr,$22);
 $23 = ((($avr)) + 14592|0);
 _avr_timer_init($avr,$23);
 $24 = ((($avr)) + 15208|0);
 _avr_timer_init($avr,$24);
 $25 = ((($avr)) + 15824|0);
 _avr_timer_init($avr,$25);
 $26 = ((($avr)) + 16440|0);
 _avr_spi_init($avr,$26);
 $27 = ((($avr)) + 16588|0);
 _avr_twi_init($avr,$27);
 return;
}
function _m1280_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(8,16744)|0);
 return ($0|0);
}
function _m1281_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$8);
 $9 = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$9);
 $10 = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$10);
 $11 = ((($avr)) + 10240|0);
 _avr_uart_init($avr,$11);
 $12 = ((($avr)) + 10608|0);
 _avr_uart_init($avr,$12);
 $13 = ((($avr)) + 10976|0);
 _avr_adc_init($avr,$13);
 $14 = ((($avr)) + 11544|0);
 _avr_timer_init($avr,$14);
 $15 = ((($avr)) + 12160|0);
 _avr_timer_init($avr,$15);
 $16 = ((($avr)) + 12776|0);
 _avr_timer_init($avr,$16);
 $17 = ((($avr)) + 13392|0);
 _avr_timer_init($avr,$17);
 $18 = ((($avr)) + 14008|0);
 _avr_spi_init($avr,$18);
 $19 = ((($avr)) + 14156|0);
 _avr_twi_init($avr,$19);
 return;
}
function _m1281_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_124() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(16752,14312)|0);
 return ($0|0);
}
function _make_129() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(31064,13960)|0);
 return ($0|0);
}
function _m128_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$8);
 $9 = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$9);
 $10 = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$10);
 $11 = ((($avr)) + 10240|0);
 _avr_uart_init($avr,$11);
 $12 = ((($avr)) + 10608|0);
 _avr_uart_init($avr,$12);
 $13 = ((($avr)) + 10976|0);
 _avr_adc_init($avr,$13);
 $14 = ((($avr)) + 11544|0);
 _avr_timer_init($avr,$14);
 $15 = ((($avr)) + 12160|0);
 _avr_timer_init($avr,$15);
 $16 = ((($avr)) + 12776|0);
 _avr_timer_init($avr,$16);
 $17 = ((($avr)) + 13392|0);
 _avr_timer_init($avr,$17);
 $18 = ((($avr)) + 14008|0);
 _avr_spi_init($avr,$18);
 $19 = ((($avr)) + 14156|0);
 _avr_twi_init($avr,$19);
 return;
}
function _m128_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_134() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(45024,14312)|0);
 return ($0|0);
}
function _m128rfa1_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$8);
 $9 = ((($avr)) + 10008|0);
 _avr_uart_init($avr,$9);
 $10 = ((($avr)) + 10376|0);
 _avr_uart_init($avr,$10);
 $11 = ((($avr)) + 10744|0);
 _avr_adc_init($avr,$11);
 $12 = ((($avr)) + 11312|0);
 _avr_timer_init($avr,$12);
 $13 = ((($avr)) + 11928|0);
 _avr_timer_init($avr,$13);
 $14 = ((($avr)) + 12544|0);
 _avr_timer_init($avr,$14);
 $15 = ((($avr)) + 13160|0);
 _avr_timer_init($avr,$15);
 $16 = ((($avr)) + 13776|0);
 _avr_spi_init($avr,$16);
 $17 = ((($avr)) + 13924|0);
 _avr_twi_init($avr,$17);
 return;
}
function _m128rfa1_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_138() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(59336,14080)|0);
 return ($0|0);
}
function _m128rfr2_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$8);
 $9 = ((($avr)) + 10008|0);
 _avr_uart_init($avr,$9);
 $10 = ((($avr)) + 10376|0);
 _avr_uart_init($avr,$10);
 $11 = ((($avr)) + 10744|0);
 _avr_adc_init($avr,$11);
 $12 = ((($avr)) + 11312|0);
 _avr_timer_init($avr,$12);
 $13 = ((($avr)) + 11928|0);
 _avr_timer_init($avr,$13);
 $14 = ((($avr)) + 12544|0);
 _avr_timer_init($avr,$14);
 $15 = ((($avr)) + 13160|0);
 _avr_timer_init($avr,$15);
 $16 = ((($avr)) + 13776|0);
 _avr_spi_init($avr,$16);
 $17 = ((($avr)) + 13924|0);
 _avr_twi_init($avr,$17);
 return;
}
function _m128rfr2_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_142() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(73416,14080)|0);
 return ($0|0);
}
function _make_148() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(87496,13344)|0);
 return ($0|0);
}
function _make_154() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(100840,12864)|0);
 return ($0|0);
}
function _make_158() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(113704,12984)|0);
 return ($0|0);
}
function _make_162() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(126688,12272)|0);
 return ($0|0);
}
function _m2560_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_ioport_init($avr,$8);
 $9 = ((($avr)) + 10004|0);
 _avr_ioport_init($avr,$9);
 $10 = ((($avr)) + 10120|0);
 _avr_ioport_init($avr,$10);
 $11 = ((($avr)) + 10236|0);
 _avr_ioport_init($avr,$11);
 $12 = ((($avr)) + 10352|0);
 _avr_ioport_init($avr,$12);
 $13 = ((($avr)) + 10468|0);
 _avr_ioport_init($avr,$13);
 $14 = ((($avr)) + 10584|0);
 _avr_ioport_init($avr,$14);
 $15 = ((($avr)) + 10704|0);
 _avr_uart_init($avr,$15);
 $16 = ((($avr)) + 11072|0);
 _avr_uart_init($avr,$16);
 $17 = ((($avr)) + 11440|0);
 _avr_uart_init($avr,$17);
 $18 = ((($avr)) + 11808|0);
 _avr_uart_init($avr,$18);
 $19 = ((($avr)) + 12176|0);
 _avr_adc_init($avr,$19);
 $20 = ((($avr)) + 12744|0);
 _avr_timer_init($avr,$20);
 $21 = ((($avr)) + 13360|0);
 _avr_timer_init($avr,$21);
 $22 = ((($avr)) + 13976|0);
 _avr_timer_init($avr,$22);
 $23 = ((($avr)) + 14592|0);
 _avr_timer_init($avr,$23);
 $24 = ((($avr)) + 15208|0);
 _avr_timer_init($avr,$24);
 $25 = ((($avr)) + 15824|0);
 _avr_timer_init($avr,$25);
 $26 = ((($avr)) + 16440|0);
 _avr_spi_init($avr,$26);
 $27 = ((($avr)) + 16588|0);
 _avr_twi_init($avr,$27);
 return;
}
function _m2560_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_166() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(138960,16744)|0);
 return ($0|0);
}
function _make_171() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(155704,13344)|0);
 return ($0|0);
}
function _make_176() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(169048,13344)|0);
 return ($0|0);
}
function _make_181() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(182392,12864)|0);
 return ($0|0);
}
function _make_185() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(195256,12984)|0);
 return ($0|0);
}
function _make_191() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(208240,12864)|0);
 return ($0|0);
}
function _make_196() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(221104,13344)|0);
 return ($0|0);
}
function _make_202() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(234448,12864)|0);
 return ($0|0);
}
function _make_207() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(247312,12984)|0);
 return ($0|0);
}
function _mx4_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_uart_init($avr,$8);
 $9 = ((($avr)) + 10256|0);
 _avr_uart_init($avr,$9);
 $10 = ((($avr)) + 10624|0);
 _avr_adc_init($avr,$10);
 $11 = ((($avr)) + 11192|0);
 _avr_timer_init($avr,$11);
 $12 = ((($avr)) + 11808|0);
 _avr_timer_init($avr,$12);
 $13 = ((($avr)) + 12424|0);
 _avr_timer_init($avr,$13);
 $14 = ((($avr)) + 13040|0);
 _avr_spi_init($avr,$14);
 $15 = ((($avr)) + 13188|0);
 _avr_twi_init($avr,$15);
 return;
}
function _mx4_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mx8_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8600|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$2);
 $3 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9776|0);
 _avr_uart_init($avr,$7);
 $8 = ((($avr)) + 10144|0);
 _avr_adc_init($avr,$8);
 $9 = ((($avr)) + 10712|0);
 _avr_timer_init($avr,$9);
 $10 = ((($avr)) + 11328|0);
 _avr_timer_init($avr,$10);
 $11 = ((($avr)) + 11944|0);
 _avr_timer_init($avr,$11);
 $12 = ((($avr)) + 12560|0);
 _avr_spi_init($avr,$12);
 $13 = ((($avr)) + 12708|0);
 _avr_twi_init($avr,$13);
 return;
}
function _mx8_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mx_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8592|0);
 _avr_watchdog_init($avr,$2);
 $3 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$3);
 $4 = ((($avr)) + 12864|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9776|0);
 _avr_uart_init($avr,$8);
 $9 = ((($avr)) + 10144|0);
 _avr_adc_init($avr,$9);
 $10 = ((($avr)) + 10712|0);
 _avr_timer_init($avr,$10);
 $11 = ((($avr)) + 11328|0);
 _avr_timer_init($avr,$11);
 $12 = ((($avr)) + 11944|0);
 _avr_timer_init($avr,$12);
 $13 = ((($avr)) + 12560|0);
 _avr_spi_init($avr,$13);
 $14 = ((($avr)) + 12708|0);
 _avr_twi_init($avr,$14);
 return;
}
function _mx_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _mxm1_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8600|0);
 _avr_flash_init($avr,$1);
 $2 = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$2);
 $3 = ((($avr)) + 8744|0);
 _avr_extint_init($avr,$3);
 $4 = ((($avr)) + 9424|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9540|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9656|0);
 _avr_ioport_init($avr,$6);
 $7 = ((($avr)) + 9772|0);
 _avr_ioport_init($avr,$7);
 $8 = ((($avr)) + 9888|0);
 _avr_lin_init($avr,$8);
 $9 = ((($avr)) + 10320|0);
 _avr_adc_init($avr,$9);
 $10 = ((($avr)) + 10888|0);
 _avr_timer_init($avr,$10);
 $11 = ((($avr)) + 11504|0);
 _avr_timer_init($avr,$11);
 $12 = ((($avr)) + 12120|0);
 _avr_spi_init($avr,$12);
 return;
}
function _mxm1_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 9888|0);
 $1 = ((($0)) + 40|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($avr)) + 5892|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3)|0);
 HEAP8[$6>>0] = 32;
 return;
}
function _make_228() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(260296,10584)|0);
 return ($0|0);
}
function _init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$1);
 $2 = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$3);
 $4 = ((($avr)) + 9400|0);
 _avr_timer_init($avr,$4);
 $5 = ((($avr)) + 10016|0);
 _avr_adc_init($avr,$5);
 return;
}
function _reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_233() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(270880,11232)|0);
 return ($0|0);
}
function _init_235($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$1);
 $2 = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$3);
 $4 = ((($avr)) + 9396|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9512|0);
 _avr_ioport_init($avr,$5);
 $6 = ((($avr)) + 9632|0);
 _avr_uart_init($avr,$6);
 $7 = ((($avr)) + 10000|0);
 _avr_timer_init($avr,$7);
 $8 = ((($avr)) + 10616|0);
 _avr_timer_init($avr,$8);
 return;
}
function _reset_236($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _make_240() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(282112,11312)|0);
 return ($0|0);
}
function _make_244() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(293424,11192)|0);
 return ($0|0);
}
function _make_248() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(304616,11312)|0);
 return ($0|0);
}
function _make_252() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(315928,11192)|0);
 return ($0|0);
}
function _make_256() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(327120,11312)|0);
 return ($0|0);
}
function _make_260() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_allocate(338432,11192)|0);
 return ($0|0);
}
function _tx4_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$1);
 $2 = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$3);
 $4 = ((($avr)) + 9396|0);
 _avr_ioport_init($avr,$4);
 $5 = ((($avr)) + 9512|0);
 _avr_adc_init($avr,$5);
 $6 = ((($avr)) + 10080|0);
 _avr_timer_init($avr,$6);
 $7 = ((($avr)) + 10696|0);
 _avr_timer_init($avr,$7);
 return;
}
function _tx4_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _tx5_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8304|0);
 _avr_eeprom_init($avr,$0);
 $1 = ((($avr)) + 8448|0);
 _avr_watchdog_init($avr,$1);
 $2 = ((($avr)) + 8600|0);
 _avr_extint_init($avr,$2);
 $3 = ((($avr)) + 9280|0);
 _avr_ioport_init($avr,$3);
 $4 = ((($avr)) + 9396|0);
 _avr_adc_init($avr,$4);
 $5 = ((($avr)) + 9960|0);
 _avr_timer_init($avr,$5);
 $6 = ((($avr)) + 10576|0);
 _avr_timer_init($avr,$6);
 return;
}
function _tx5_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _avr_interrupt_init($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 7448|0);
 _memset(($0|0),0,832)|0;
 $1 = ((($avr)) + 112|0);
 $2 = ((($avr)) + 8232|0);
 _avr_init_irq($1,$2,0,2,350280);
 return;
}
function _avr_interrupt_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 7972|0);
 HEAP8[$0>>0] = 0;
 /* fence */;
 $1 = ((($avr)) + 7968|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($avr)) + 7966|0);
 HEAP16[$2>>1] = 0;
 $3 = ((($avr)) + 7964|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($avr)) + 128|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($avr)) + 7704|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $8 = (((($avr)) + 7448|0) + ($i$01<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 60|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & -2;
  HEAP8[$10>>0] = $12;
  $13 = (($i$01) + 1)|0;
  $14 = HEAP8[$5>>0]|0;
  $15 = $14&255;
  $16 = ($13|0)<($15|0);
  if ($16) {
   $i$01 = $13;
  } else {
   break;
  }
 }
 return;
}
function _avr_register_vector($avr,$vector) {
 $avr = $avr|0;
 $vector = $vector|0;
 var $$pre = 0, $$pre$phi2Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$vector>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($avr)) + 112|0);
 $3 = ((($vector)) + 12|0);
 $4 = $0&255;
 $5 = $4 << 8;
 _avr_init_irq($2,$3,$5,2,350288);
 $6 = ((($avr)) + 7704|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($7) + 1)<<24>>24;
 HEAP8[$6>>0] = $8;
 $9 = $7&255;
 $10 = (((($avr)) + 7448|0) + ($9<<2)|0);
 HEAP32[$10>>2] = $vector;
 $11 = ((($vector)) + 60|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 & 2;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $$pre = ((($vector)) + 4|0);
  $$pre$phi2Z2D = $$pre;
 } else {
  $15 = HEAP8[$vector>>0]|0;
  $16 = $15&255;
  $17 = ((($vector)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 511;
  $20 = $18 >>> 9;
  $21 = $20 & 7;
  HEAP32[$vararg_buffer>>2] = 354956;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $19;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $21;
  (_printf(354915,$vararg_buffer)|0);
  $$pre$phi2Z2D = $17;
 }
 $22 = HEAP32[$$pre$phi2Z2D>>2]|0;
 $23 = $22 & 511;
 $24 = ($23|0)==(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP8[$vector>>0]|0;
 $26 = $25&255;
 HEAP32[$vararg_buffer4>>2] = $26;
 _avr_global_logger($avr,2,354976,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _avr_has_pending_interrupts($avr) {
 $avr = $avr|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($avr)) + 7964|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $0 = $$idx$val&65535;
 $1 = $$idx$val >>> 16;
 $2 = $1&65535;
 $3 = ($0<<16>>16)!=($2<<16>>16);
 $4 = $3&1;
 return ($4|0);
}
function _avr_raise_interrupt($avr,$vector) {
 $avr = $avr|0;
 $vector = $vector|0;
 var $$0 = 0, $$0$i = 0, $$0$i3 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ($vector|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$vector>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($vector)) + 60|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 2;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $23 = $4;
 } else {
  $7 = $1&255;
  $8 = ((($vector)) + 4|0);
  $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
  $10 = $9 & 511;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0$i = 0;
  } else {
   $12 = ((($avr)) + 5892|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($10)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $9 >>> 9;
   $18 = $17 & 7;
   $19 = $16 >>> $18;
   $20 = $9 >>> 12;
   $21 = $19 & $20;
   $$0$i = $21;
  }
  HEAP32[$vararg_buffer>>2] = 355062;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $$0$i;
  (_printf(355034,$vararg_buffer)|0);
  $$pre = HEAP8[$3>>0]|0;
  $23 = $$pre;
 }
 $22 = $23 & 1;
 $24 = ($22<<24>>24)==(0);
 if (!($24)) {
  $25 = $23 & 2;
  $26 = ($25<<24>>24)==(0);
  if ($26) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $27 = HEAP8[$vector>>0]|0;
  $28 = $27&255;
  $29 = ((($vector)) + 4|0);
  $30 = HEAPU8[$29>>0]|(HEAPU8[$29+1>>0]<<8)|(HEAPU8[$29+2>>0]<<16)|(HEAPU8[$29+3>>0]<<24);
  $31 = $30 & 511;
  $32 = ($31|0)==(0);
  if ($32) {
   $$0$i3 = 0;
  } else {
   $33 = ((($avr)) + 5892|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $30 >>> 9;
   $39 = $38 & 7;
   $40 = $37 >>> $39;
   $41 = $30 >>> 12;
   $42 = $40 & $41;
   $$0$i3 = $42;
  }
  HEAP32[$vararg_buffer3>>2] = 355062;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $28;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $$0$i3;
  (_printf(355082,$vararg_buffer3)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = ((($vector)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 & 511;
 $46 = ($45|0)==(0);
 if (!($46)) {
  $47 = $45&65535;
  $48 = ($47<<16>>16)==(0);
  if (!($48)) {
   $49 = $44 >>> 12;
   $50 = $49 & 255;
   $51 = $44 >>> 9;
   $52 = $51 & 7;
   $53 = $50 << $52;
   $54 = ((($avr)) + 5892|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($45)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 | $53;
   $60 = $59&255;
   _avr_core_watch_write($avr,$47,$60);
  }
 }
 $61 = ((($vector)) + 12|0);
 _avr_raise_irq($61,1);
 $62 = ((($avr)) + 8232|0);
 _avr_raise_irq($62,1);
 $63 = ((($vector)) + 4|0);
 $64 = HEAPU8[$63>>0]|(HEAPU8[$63+1>>0]<<8)|(HEAPU8[$63+2>>0]<<16)|(HEAPU8[$63+3>>0]<<24);
 $65 = $64 & 511;
 $66 = ($65|0)==(0);
 if ($66) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $67 = ((($avr)) + 5892|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + ($65)|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $64 >>> 9;
 $73 = $72 & 7;
 $74 = $71 >>> $73;
 $75 = $64 >>> 12;
 $76 = $74 & $75;
 $77 = ($76|0)==(0);
 if ($77) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $78 = HEAP8[$3>>0]|0;
 $79 = $78 | 1;
 HEAP8[$3>>0] = $79;
 $80 = ((($avr)) + 7966|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = $81&65535;
 $83 = (($82) + 1)|0;
 $84 = $83 & 63;
 $85 = ((($avr)) + 7964|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = ($87|0)==($84|0);
 if (!($88)) {
  $89 = $84&65535;
  $90 = (((($avr)) + 7708|0) + ($82<<2)|0);
  HEAP32[$90>>2] = $vector;
  /* fence */;
  HEAP16[$80>>1] = $89;
 }
 $91 = ((($avr)) + 127|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = ($92<<24>>24)==(0);
 if (!($93)) {
  $94 = ((($avr)) + 128|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = ($95<<24>>24)==(0);
  if ($96) {
   HEAP8[$94>>0] = 1;
  }
 }
 $97 = ((($avr)) + 36|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(3);
 if (!($99)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $100 = HEAP8[$3>>0]|0;
 $101 = $100 & 2;
 $102 = ($101<<24>>24)==(0);
 if (!($102)) {
  (_puts(355125)|0);
 }
 HEAP32[$97>>2] = 2;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _avr_clear_interrupt($avr,$vector) {
 $avr = $avr|0;
 $vector = $vector|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($vector|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ((($vector)) + 60|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 2;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $8 = $2;
 } else {
  $5 = HEAP8[$vector>>0]|0;
  $6 = $5&255;
  HEAP32[$vararg_buffer>>2] = 355168;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  (_printf(355153,$vararg_buffer)|0);
  $$pre = HEAP8[$1>>0]|0;
  $8 = $$pre;
 }
 $7 = $8 & -2;
 HEAP8[$1>>0] = $7;
 $9 = ((($vector)) + 12|0);
 _avr_raise_irq($9,0);
 $10 = ((($avr)) + 8232|0);
 $$idx$i = ((($avr)) + 7964|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $11 = $$idx$val$i&65535;
 $12 = $$idx$val$i >>> 16;
 $13 = $12&65535;
 $14 = ($11<<16>>16)!=($13<<16>>16);
 $15 = $14&1;
 _avr_raise_irq($10,$15);
 $16 = ((($vector)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 511;
 $19 = ($18|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP8[$1>>0]|0;
 $21 = $20 & 4;
 $22 = ($21<<24>>24)==(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $18&65535;
 $24 = $17 >>> 12;
 $25 = $24 & 255;
 $26 = $17 >>> 9;
 $27 = $26 & 7;
 $28 = $25 << $27;
 $29 = ((($avr)) + 5892|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($18)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $28 ^ 255;
 $35 = $33 & $34;
 $36 = $35&255;
 _avr_core_watch_write($avr,$23,$36);
 STACKTOP = sp;return;
}
function _avr_clear_interrupt_if($avr,$vector,$old) {
 $avr = $avr|0;
 $vector = $vector|0;
 $old = $old|0;
 var $$0 = 0, $$idx$i = 0, $$idx$val$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 8232|0);
 $$idx$i = ((($avr)) + 7964|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $1 = $$idx$val$i&65535;
 $2 = $$idx$val$i >>> 16;
 $3 = $2&65535;
 $4 = ($1<<16>>16)!=($3<<16>>16);
 $5 = $4&1;
 _avr_raise_irq($0,$5);
 $6 = ((($vector)) + 8|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 511;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($avr)) + 5892|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $7 >>> 9;
  $16 = $15 & 7;
  $17 = $14 >>> $16;
  $18 = $7 >>> 12;
  $19 = $17 & $18;
  $20 = ($19|0)==(0);
  if (!($20)) {
   _avr_clear_interrupt($avr,$vector);
   $$0 = 1;
   return ($$0|0);
  }
 }
 $21 = $8&65535;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  $$0 = 0;
  return ($$0|0);
 }
 $23 = $7 >>> 12;
 $24 = $23 & 255;
 $25 = $7 >>> 9;
 $26 = $25 & 7;
 $27 = $24 << $26;
 $28 = ((($avr)) + 5892|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($8)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $27 ^ 255;
 $34 = $32 & $33;
 $35 = $old&255;
 $36 = $35 << $26;
 $37 = $36 & $27;
 $38 = $34 | $37;
 $39 = $38&255;
 _avr_core_watch_write($avr,$21,$39);
 $$0 = 0;
 return ($$0|0);
}
function _avr_interrupt_reti($avr) {
 $avr = $avr|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 7972|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ((($avr)) + 8232|0);
  $4 = ((($avr)) + 8256|0);
  $19 = $4;$20 = 0;$26 = $3;
 } else {
  $5 = (($1) + -1)<<24>>24;
  HEAP8[$0>>0] = $5;
  $6 = $5&255;
  $7 = (((($avr)) + 7976|0) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 36|0);
  _avr_raise_irq($9,0);
  $$pr = HEAP8[$0>>0]|0;
  $10 = ((($avr)) + 8232|0);
  $11 = ((($avr)) + 8256|0);
  $12 = ($$pr<<24>>24)==(0);
  if ($12) {
   $19 = $11;$20 = 0;$26 = $10;
  } else {
   $13 = $$pr&255;
   $14 = (($13) + -1)|0;
   $15 = (((($avr)) + 7976|0) + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $11;$20 = $18;$26 = $10;
  }
 }
 _avr_raise_irq($19,$20);
 $$idx$i = ((($avr)) + 7964|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $21 = $$idx$val$i&65535;
 $22 = $$idx$val$i >>> 16;
 $23 = $22&65535;
 $24 = ($21<<16>>16)!=($23<<16>>16);
 $25 = $24&1;
 _avr_raise_irq($26,$25);
 return;
}
function _avr_service_interrupts($avr) {
 $avr = $avr|0;
 var $$0$i7 = 0, $$idx = 0, $$idx$i = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i4 = 0, $$idx$val$i6 = 0, $$min$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $ii$0$mini$0 = 0, $ii$09 = 0, $min$011 = 0, $mini$0$lcssa = 0, $mini$010 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($avr)) + 127|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($avr)) + 128|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ($4<<24>>24)<(0);
 if ($6) {
  $7 = (($4) + 1)<<24>>24;
  HEAP8[$3>>0] = $7;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   STACKTOP = sp;return;
  }
  $$idx$i = ((($avr)) + 7964|0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $9 = $$idx$val$i&65535;
  $10 = $$idx$val$i >>> 16;
  $11 = $10&65535;
  $12 = ($9<<16>>16)!=($11<<16>>16);
  $13 = $12&1;
  HEAP8[$3>>0] = $13;
  STACKTOP = sp;return;
 }
 $$idx = ((($avr)) + 7964|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $14 = $$idx$val&65535;
 $15 = $$idx$val >>> 16;
 $16 = $15&65535;
 $17 = (($15) - ($$idx$val))|0;
 $18 = $17 & 63;
 $19 = ($18|0)==(0);
 if ($19) {
  $mini$0$lcssa = 0;
 } else {
  $20 = (($15) - ($$idx$val))|0;
  $21 = $20 & 63;
  $ii$09 = 0;$min$011 = 255;$mini$010 = 0;
  while(1) {
   $59 = (($$idx$val) + ($ii$09))|0;
   $60 = $59 & 63;
   $61 = (((($avr)) + 7708|0) + ($60<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = ($64|0)<($min$011|0);
   $ii$0$mini$0 = $65 ? $ii$09 : $mini$010;
   $$min$0 = $65 ? $64 : $min$011;
   $66 = (($ii$09) + 1)|0;
   $exitcond = ($66|0)==($21|0);
   if ($exitcond) {
    $mini$0$lcssa = $ii$0$mini$0;
    break;
   } else {
    $ii$09 = $66;$min$011 = $$min$0;$mini$010 = $ii$0$mini$0;
   }
  }
 }
 $22 = (($$idx$val) + ($mini$0$lcssa))|0;
 $23 = $22 & 63;
 $24 = (((($avr)) + 7708|0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($14<<16>>16)==($16<<16>>16);
 if ($26) {
  $$0$i7 = 0;$34 = $$idx$val;
 } else {
  $27 = $$idx$val & 65535;
  $28 = (((($avr)) + 7708|0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  /* fence */;
  $30 = (($$idx$val) + 1)|0;
  $31 = $30 & 63;
  $32 = $31&65535;
  HEAP16[$$idx>>1] = $32;
  $$0$i7 = $29;$34 = $31;
 }
 $33 = $34 & 65535;
 $35 = (($33) + ($mini$0$lcssa))|0;
 $36 = (($35|0) % 64)&-1;
 $37 = (((($avr)) + 7708|0) + ($36<<2)|0);
 HEAP32[$37>>2] = $$0$i7;
 $38 = ((($avr)) + 8232|0);
 $$idx$val$i6 = HEAP32[$$idx>>2]|0;
 $39 = $$idx$val$i6&65535;
 $40 = $$idx$val$i6 >>> 16;
 $41 = $40&65535;
 $42 = ($39<<16>>16)!=($41<<16>>16);
 $43 = $42&1;
 _avr_raise_irq($38,$43);
 $44 = ((($25)) + 4|0);
 $45 = HEAPU8[$44>>0]|(HEAPU8[$44+1>>0]<<8)|(HEAPU8[$44+2>>0]<<16)|(HEAPU8[$44+3>>0]<<24);
 $46 = $45 & 511;
 $47 = ($46|0)==(0);
 if (!($47)) {
  $48 = ((($avr)) + 5892|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $45 >>> 9;
  $54 = $53 & 7;
  $55 = $52 >>> $54;
  $56 = $45 >>> 12;
  $57 = $55 & $56;
  $58 = ($57|0)==(0);
  if (!($58)) {
   $67 = ((($25)) + 60|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 & 1;
   $70 = ($69<<24>>24)==(0);
   if (!($70)) {
    $79 = $68 & 2;
    $80 = ($79<<24>>24)==(0);
    if (!($80)) {
     $81 = HEAP8[$25>>0]|0;
     $82 = $81&255;
     HEAP32[$vararg_buffer>>2] = 355203;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $82;
     (_printf(355188,$vararg_buffer)|0);
    }
    $83 = ((($avr)) + 132|0);
    $84 = HEAP32[$83>>2]|0;
    (__avr_push_addr($avr,$84)|0);
    HEAP8[$3>>0] = 0;
    HEAP8[$0>>0] = 0;
    $85 = HEAP8[$25>>0]|0;
    $86 = $85&255;
    $87 = ((($avr)) + 16|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = Math_imul($89, $86)|0;
    HEAP32[$83>>2] = $90;
    $91 = ((($25)) + 36|0);
    _avr_raise_irq($91,1);
    $92 = ((($avr)) + 8256|0);
    $93 = HEAP8[$25>>0]|0;
    $94 = $93&255;
    _avr_raise_irq($92,$94);
    $95 = ((($avr)) + 7972|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(64);
    if ($97) {
     HEAP32[$vararg_buffer2>>2] = 355203;
     _avr_global_logger($avr,1,355226,$vararg_buffer2);
    } else {
     $98 = $96&255;
     $99 = (($96) + 1)<<24>>24;
     HEAP8[$95>>0] = $99;
     $100 = (((($avr)) + 7976|0) + ($98<<2)|0);
     HEAP32[$100>>2] = $25;
    }
    _avr_clear_interrupt($avr,$25);
    STACKTOP = sp;return;
   }
  }
 }
 $71 = ((($25)) + 60|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72 & -2;
 HEAP8[$71>>0] = $73;
 $$idx$val$i4 = HEAP32[$$idx>>2]|0;
 $74 = $$idx$val$i4&65535;
 $75 = $$idx$val$i4 >>> 16;
 $76 = $75&65535;
 $77 = ($74<<16>>16)!=($76<<16>>16);
 $78 = $77&1;
 HEAP8[$3>>0] = $78;
 STACKTOP = sp;return;
}
function _avr_cycle_timer_reset($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 5904|0);
 _memset(($0|0),0,1544)|0;
 $1 = ((($avr)) + 7440|0);
 $13 = 0;$i$01 = 0;
 while(1) {
  $12 = (((($avr)) + 5904|0) + (($i$01*24)|0)|0);
  HEAP32[$12>>2] = $13;
  HEAP32[$1>>2] = $12;
  $14 = (($i$01) + 1)|0;
  $exitcond = ($14|0)==(64);
  $15 = $12;
  if ($exitcond) {
   break;
  } else {
   $13 = $15;$i$01 = $14;
  }
 }
 $2 = ((($avr)) + 64|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 1;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ((($avr)) + 72|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = 1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 return;
}
function _avr_cycle_timer_register($avr,$0,$1,$timer,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $timer = $timer|0;
 $param = $param|0;
 var $$phi$trans$insert = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $last$0$lcssa7$i = 0, $last$02$i = 0, $last$02$i$lcssa = 0;
 var $last$02$i$phi = 0, $last$04$i = 0, $last$04$i$lcssa = 0, $last$04$i$phi = 0, $loop$0$i = 0, $loop$01$i = 0, $loop$03$i = 0, $t$0$i = 0, $t$03$i = 0, $t$05$i = 0, $t$05$i$lcssa = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = ((($avr)) + 7444|0);
 $t$03$i = HEAP32[$2>>2]|0;
 $3 = ($t$03$i|0)==(0|0);
 if ($3) {
  $49 = 0;$51 = 1000;
 } else {
  $last$04$i = 0;$t$05$i = $t$03$i;
  while(1) {
   $4 = ((($t$05$i)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==($timer|0);
   if ($6) {
    $7 = ((($t$05$i)) + 20|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($param|0);
    if ($9) {
     $last$04$i$lcssa = $last$04$i;$t$05$i$lcssa = $t$05$i;
     label = 4;
     break;
    }
   }
   $t$0$i = HEAP32[$t$05$i>>2]|0;
   $15 = ($t$0$i|0)==(0|0);
   if ($15) {
    $16 = $t$03$i;
    break;
   } else {
    $last$04$i$phi = $t$05$i;$t$05$i = $t$0$i;$last$04$i = $last$04$i$phi;
   }
  }
  if ((label|0) == 4) {
   $10 = ($last$04$i$lcssa|0)==(0|0);
   $11 = HEAP32[$t$05$i$lcssa>>2]|0;
   if ($10) {
    HEAP32[$2>>2] = $11;
    $12 = $11;
    $137 = $12;
   } else {
    HEAP32[$last$04$i$lcssa>>2] = $11;
    $137 = $t$03$i;
   }
   $13 = ((($avr)) + 7440|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$t$05$i$lcssa>>2] = $14;
   HEAP32[$13>>2] = $t$05$i$lcssa;
   $16 = $137;
  }
  $17 = ($16|0)==(0|0);
  if ($17) {
   $49 = 0;$51 = 1000;
  } else {
   $18 = ((($16)) + 8|0);
   $19 = $18;
   $20 = $19;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($avr)) + 56|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($24>>>0)>($31>>>0);
   $33 = ($21>>>0)>($28>>>0);
   $34 = ($24|0)==($31|0);
   $35 = $34 & $33;
   $36 = $32 | $35;
   $37 = (_i64Subtract(($21|0),($24|0),($28|0),($31|0))|0);
   $38 = tempRet0;
   $39 = $36 ? $37 : 0;
   $40 = $36 ? $38 : 0;
   $49 = $40;$51 = $39;
  }
 }
 $41 = ((($avr)) + 72|0);
 $42 = $41;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47>>>0)<($49>>>0);
 $50 = ($44>>>0)<($51>>>0);
 $52 = ($47|0)==($49|0);
 $53 = $52 & $50;
 $54 = $48 | $53;
 $55 = $54 ? $44 : $51;
 $56 = $54 ? $47 : $49;
 $57 = ($55|0)!=(0);
 $58 = ($56|0)!=(0);
 $59 = $57 | $58;
 $60 = $59 ? $55 : 1;
 $61 = $59 ? $56 : 0;
 $62 = ((($avr)) + 64|0);
 $63 = $62;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = (($63) + 4)|0;
 $66 = $65;
 HEAP32[$66>>2] = $61;
 $67 = ((($avr)) + 7440|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  HEAP32[$vararg_buffer>>2] = 355285;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 64;
  _avr_global_logger($avr,1,355254,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $70 = ((($avr)) + 56|0);
 $71 = $70;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_i64Add(($73|0),($76|0),($0|0),($1|0))|0);
 $78 = tempRet0;
 $79 = HEAP32[$68>>2]|0;
 HEAP32[$67>>2] = $79;
 HEAP32[$68>>2] = 0;
 $80 = ((($68)) + 16|0);
 HEAP32[$80>>2] = $timer;
 $81 = ((($68)) + 20|0);
 HEAP32[$81>>2] = $param;
 $82 = ((($68)) + 8|0);
 $83 = $82;
 $84 = $83;
 HEAP32[$84>>2] = $77;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $78;
 $loop$01$i = HEAP32[$2>>2]|0;
 $87 = ($loop$01$i|0)==(0|0);
 $88 = $loop$01$i;
 do {
  if ($87) {
   label = 17;
  } else {
   $last$02$i = 0;$loop$03$i = $loop$01$i;
   while(1) {
    $90 = ((($loop$03$i)) + 8|0);
    $91 = $90;
    $92 = $91;
    $93 = HEAP32[$92>>2]|0;
    $94 = (($91) + 4)|0;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96>>>0)>($78>>>0);
    $98 = ($93>>>0)>($77>>>0);
    $99 = ($96|0)==($78|0);
    $100 = $99 & $98;
    $101 = $97 | $100;
    if ($101) {
     $last$02$i$lcssa = $last$02$i;
     label = 16;
     break;
    }
    $loop$0$i = HEAP32[$loop$03$i>>2]|0;
    $89 = ($loop$0$i|0)==(0|0);
    if ($89) {
     $last$0$lcssa7$i = $loop$03$i;
     break;
    } else {
     $last$02$i$phi = $loop$03$i;$loop$03$i = $loop$0$i;$last$02$i = $last$02$i$phi;
    }
   }
   if ((label|0) == 16) {
    $102 = ($last$02$i$lcssa|0)==(0|0);
    if ($102) {
     label = 17;
     break;
    } else {
     $last$0$lcssa7$i = $last$02$i$lcssa;
    }
   }
   $103 = HEAP32[$last$0$lcssa7$i>>2]|0;
   HEAP32[$68>>2] = $103;
   HEAP32[$last$0$lcssa7$i>>2] = $68;
   $$phi$trans$insert = ((($loop$01$i)) + 8|0);
   $104 = $$phi$trans$insert;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = (($104) + 4)|0;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = $109;$112 = $106;
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$68>>2] = $88;
  HEAP32[$2>>2] = $68;
  $110 = $78;$112 = $77;
 }
 $111 = ($110>>>0)>($76>>>0);
 $113 = ($112>>>0)>($73>>>0);
 $114 = ($110|0)==($76|0);
 $115 = $114 & $113;
 $116 = $111 | $115;
 $117 = (_i64Subtract(($112|0),($110|0),($73|0),($76|0))|0);
 $118 = tempRet0;
 $119 = $116 ? $117 : 0;
 $120 = $116 ? $118 : 0;
 $121 = ($47>>>0)<($120>>>0);
 $122 = ($44>>>0)<($119>>>0);
 $123 = ($47|0)==($120|0);
 $124 = $123 & $122;
 $125 = $121 | $124;
 $126 = $125 ? $44 : $119;
 $127 = $125 ? $47 : $120;
 $128 = ($126|0)!=(0);
 $129 = ($127|0)!=(0);
 $130 = $128 | $129;
 $131 = $130 ? $126 : 1;
 $132 = $130 ? $127 : 0;
 $133 = $62;
 $134 = $133;
 HEAP32[$134>>2] = $131;
 $135 = (($133) + 4)|0;
 $136 = $135;
 HEAP32[$136>>2] = $132;
 STACKTOP = sp;return;
}
function _avr_cycle_timer_cancel($avr,$timer,$param) {
 $avr = $avr|0;
 $timer = $timer|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $last$04 = 0, $last$04$lcssa = 0, $last$04$phi = 0, $t$0 = 0, $t$03 = 0, $t$05 = 0, $t$05$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 7444|0);
 $t$03 = HEAP32[$0>>2]|0;
 $1 = ($t$03|0)==(0|0);
 if ($1) {
  $47 = 0;$49 = 1000;
 } else {
  $last$04 = 0;$t$05 = $t$03;
  while(1) {
   $2 = ((($t$05)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($timer|0);
   if ($4) {
    $5 = ((($t$05)) + 20|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($param|0);
    if ($7) {
     $last$04$lcssa = $last$04;$t$05$lcssa = $t$05;
     label = 4;
     break;
    }
   }
   $t$0 = HEAP32[$t$05>>2]|0;
   $13 = ($t$0|0)==(0|0);
   if ($13) {
    $14 = $t$03;
    break;
   } else {
    $last$04$phi = $t$05;$t$05 = $t$0;$last$04 = $last$04$phi;
   }
  }
  if ((label|0) == 4) {
   $8 = ($last$04$lcssa|0)==(0|0);
   $9 = HEAP32[$t$05$lcssa>>2]|0;
   if ($8) {
    HEAP32[$0>>2] = $9;
    $10 = $9;
    $65 = $10;
   } else {
    HEAP32[$last$04$lcssa>>2] = $9;
    $65 = $t$03;
   }
   $11 = ((($avr)) + 7440|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$t$05$lcssa>>2] = $12;
   HEAP32[$11>>2] = $t$05$lcssa;
   $14 = $65;
  }
  $15 = ($14|0)==(0|0);
  if ($15) {
   $47 = 0;$49 = 1000;
  } else {
   $16 = ((($14)) + 8|0);
   $17 = $16;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($avr)) + 56|0);
   $24 = $23;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($22>>>0)>($29>>>0);
   $31 = ($19>>>0)>($26>>>0);
   $32 = ($22|0)==($29|0);
   $33 = $32 & $31;
   $34 = $30 | $33;
   $35 = (_i64Subtract(($19|0),($22|0),($26|0),($29|0))|0);
   $36 = tempRet0;
   $37 = $34 ? $35 : 0;
   $38 = $34 ? $36 : 0;
   $47 = $38;$49 = $37;
  }
 }
 $39 = ((($avr)) + 72|0);
 $40 = $39;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45>>>0)<($47>>>0);
 $48 = ($42>>>0)<($49>>>0);
 $50 = ($45|0)==($47|0);
 $51 = $50 & $48;
 $52 = $46 | $51;
 $53 = $52 ? $42 : $49;
 $54 = $52 ? $45 : $47;
 $55 = ($53|0)!=(0);
 $56 = ($54|0)!=(0);
 $57 = $55 | $56;
 $58 = $57 ? $53 : 1;
 $59 = $57 ? $54 : 0;
 $60 = ((($avr)) + 64|0);
 $61 = $60;
 $62 = $61;
 HEAP32[$62>>2] = $58;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $59;
 return;
}
function _avr_cycle_timer_register_usec($avr,$when,$timer,$param) {
 $avr = $avr|0;
 $when = $when|0;
 $timer = $timer|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $avr$idx = 0, $avr$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $avr$idx = ((($avr)) + 40|0);
 $avr$idx$val = HEAP32[$avr$idx>>2]|0;
 $0 = (___muldi3(($avr$idx$val|0),0,($when|0),0)|0);
 $1 = tempRet0;
 $2 = (___udivdi3(($0|0),($1|0),1000000,0)|0);
 $3 = tempRet0;
 _avr_cycle_timer_register($avr,$2,$3,$timer,$param);
 return;
}
function _avr_cycle_timer_status($avr,$timer,$param) {
 $avr = $avr|0;
 $timer = $timer|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$0 = 0, $t$02 = 0, $t$03 = 0, $t$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 7444|0);
 $t$02 = HEAP32[$0>>2]|0;
 $1 = ($t$02|0)==(0|0);
 if ($1) {
  $27 = 0;$28 = 0;
  tempRet0 = ($27);
  return ($28|0);
 } else {
  $t$03 = $t$02;
 }
 while(1) {
  $2 = ((($t$03)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($timer|0);
  if ($4) {
   $5 = ((($t$03)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==($param|0);
   if ($7) {
    $t$03$lcssa = $t$03;
    break;
   }
  }
  $t$0 = HEAP32[$t$03>>2]|0;
  $26 = ($t$0|0)==(0|0);
  if ($26) {
   $27 = 0;$28 = 0;
   label = 6;
   break;
  } else {
   $t$03 = $t$0;
  }
 }
 if ((label|0) == 6) {
  tempRet0 = ($27);
  return ($28|0);
 }
 $8 = ((($t$03$lcssa)) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($avr)) + 56|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_i64Add(($11|0),($14|0),1,0)|0);
 $23 = tempRet0;
 $24 = (_i64Subtract(($22|0),($23|0),($18|0),($21|0))|0);
 $25 = tempRet0;
 $27 = $25;$28 = $24;
 tempRet0 = ($27);
 return ($28|0);
}
function _avr_cycle_timer_process($avr) {
 $avr = $avr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $last$0$lcssa7$i = 0, $last$02$i = 0, $last$02$i$lcssa = 0, $last$02$i$phi = 0, $loop$0$i = 0, $loop$01$i = 0, $loop$03$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($avr)) + 7444|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if (!($2)) {
   $3 = ((($avr)) + 56|0);
   $4 = ((($avr)) + 7440|0);
   $6 = $1;
   while(1) {
    $5 = ((($6)) + 8|0);
    $7 = $5;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = $3;
    $14 = $13;
    $15 = HEAP32[$14>>2]|0;
    $16 = (($13) + 4)|0;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = ($12>>>0)>($18>>>0);
    $20 = ($9>>>0)>($15>>>0);
    $21 = ($12|0)==($18|0);
    $22 = $21 & $20;
    $23 = $19 | $22;
    if ($23) {
     $84 = $9;$85 = $12;$86 = $15;$87 = $18;
     break;
    }
    $24 = HEAP32[$6>>2]|0;
    HEAP32[$0>>2] = $24;
    HEAP32[$6>>2] = 0;
    $25 = ((($6)) + 16|0);
    $26 = ((($6)) + 20|0);
    $29 = $9;$30 = $12;
    while(1) {
     $27 = HEAP32[$25>>2]|0;
     $28 = HEAP32[$26>>2]|0;
     $31 = (FUNCTION_TABLE_iiiii[$27 & 255]($avr,$29,$30,$28)|0);
     $32 = tempRet0;
     $33 = ($31|0)==(0);
     $34 = ($32|0)==(0);
     $35 = $33 & $34;
     $36 = ($32>>>0)<($30>>>0);
     $37 = ($31>>>0)<=($29>>>0);
     $38 = ($32|0)==($30|0);
     $39 = $38 & $37;
     $40 = $36 | $39;
     $41 = $35 | $40;
     if ($41) {
      break;
     }
     $42 = $3;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($42) + 4)|0;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = ($32>>>0)>($47>>>0);
     $49 = ($31>>>0)>($44>>>0);
     $50 = ($32|0)==($47|0);
     $51 = $50 & $49;
     $52 = $48 | $51;
     if ($52) {
      $63 = $31;$66 = $32;
      label = 7;
      break;
     } else {
      $29 = $31;$30 = $32;
     }
    }
    L9: do {
     if ((label|0) == 7) {
      label = 0;
      $53 = HEAP32[$4>>2]|0;
      $54 = ($53|0)==(0|0);
      if ($54) {
       HEAP32[$vararg_buffer>>2] = 355346;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = 64;
       _avr_global_logger($avr,1,355310,$vararg_buffer);
       break;
      }
      $55 = HEAP32[$26>>2]|0;
      $56 = HEAP32[$25>>2]|0;
      $57 = HEAP32[$53>>2]|0;
      HEAP32[$4>>2] = $57;
      HEAP32[$53>>2] = 0;
      $58 = ((($53)) + 16|0);
      HEAP32[$58>>2] = $56;
      $59 = ((($53)) + 20|0);
      HEAP32[$59>>2] = $55;
      $60 = ((($53)) + 8|0);
      $61 = $60;
      $62 = $61;
      HEAP32[$62>>2] = $63;
      $64 = (($61) + 4)|0;
      $65 = $64;
      HEAP32[$65>>2] = $66;
      $loop$01$i = HEAP32[$0>>2]|0;
      $67 = ($loop$01$i|0)==(0|0);
      $68 = $loop$01$i;
      do {
       if (!($67)) {
        $last$02$i = 0;$loop$03$i = $loop$01$i;
        while(1) {
         $70 = ((($loop$03$i)) + 8|0);
         $71 = $70;
         $72 = $71;
         $73 = HEAP32[$72>>2]|0;
         $74 = (($71) + 4)|0;
         $75 = $74;
         $76 = HEAP32[$75>>2]|0;
         $77 = ($76>>>0)>($66>>>0);
         $78 = ($73>>>0)>($63>>>0);
         $79 = ($76|0)==($66|0);
         $80 = $79 & $78;
         $81 = $77 | $80;
         if ($81) {
          $last$02$i$lcssa = $last$02$i;
          label = 12;
          break;
         }
         $loop$0$i = HEAP32[$loop$03$i>>2]|0;
         $69 = ($loop$0$i|0)==(0|0);
         if ($69) {
          $last$0$lcssa7$i = $loop$03$i;
          break;
         } else {
          $last$02$i$phi = $loop$03$i;$loop$03$i = $loop$0$i;$last$02$i = $last$02$i$phi;
         }
        }
        if ((label|0) == 12) {
         label = 0;
         $82 = ($last$02$i$lcssa|0)==(0|0);
         if ($82) {
          break;
         } else {
          $last$0$lcssa7$i = $last$02$i$lcssa;
         }
        }
        $83 = HEAP32[$last$0$lcssa7$i>>2]|0;
        HEAP32[$53>>2] = $83;
        HEAP32[$last$0$lcssa7$i>>2] = $53;
        break L9;
       }
      } while(0);
      HEAP32[$53>>2] = $68;
      HEAP32[$0>>2] = $53;
     }
    } while(0);
    $114 = HEAP32[$4>>2]|0;
    HEAP32[$6>>2] = $114;
    HEAP32[$4>>2] = $6;
    $115 = HEAP32[$0>>2]|0;
    $116 = ($115|0)==(0|0);
    if ($116) {
     break L1;
    } else {
     $6 = $115;
    }
   }
   $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
   $89 = tempRet0;
   $90 = ((($avr)) + 72|0);
   $91 = $90;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + 4)|0;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96>>>0)<($89>>>0);
   $98 = ($93>>>0)<($88>>>0);
   $99 = ($96|0)==($89|0);
   $100 = $99 & $98;
   $101 = $97 | $100;
   $102 = $101 ? $93 : $88;
   $103 = $101 ? $96 : $89;
   $104 = ($102|0)!=(0);
   $105 = ($103|0)!=(0);
   $106 = $104 | $105;
   $107 = $106 ? $102 : 1;
   $108 = $106 ? $103 : 0;
   $109 = ((($avr)) + 64|0);
   $110 = $109;
   $111 = $110;
   HEAP32[$111>>2] = $107;
   $112 = (($110) + 4)|0;
   $113 = $112;
   HEAP32[$113>>2] = $108;
   $141 = $89;$142 = $88;
   tempRet0 = ($141);
   STACKTOP = sp;return ($142|0);
  }
 } while(0);
 $117 = ((($avr)) + 72|0);
 $118 = $117;
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + 4)|0;
 $122 = $121;
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123>>>0)<(0);
 $125 = ($120>>>0)<(1000);
 $126 = ($123|0)==(0);
 $127 = $126 & $125;
 $128 = $124 | $127;
 $129 = $128 ? $120 : 1000;
 $130 = $128 ? $123 : 0;
 $131 = ($129|0)!=(0);
 $132 = ($130|0)!=(0);
 $133 = $131 | $132;
 $134 = $133 ? $129 : 1;
 $135 = $133 ? $130 : 0;
 $136 = ((($avr)) + 64|0);
 $137 = $136;
 $138 = $137;
 HEAP32[$138>>2] = $134;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = $135;
 $141 = 0;$142 = 1000;
 tempRet0 = ($141);
 STACKTOP = sp;return ($142|0);
}
function _avr_core_watch_write($avr,$addr,$v) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avr$idx = 0, $avr$idx$val = 0, $avr$idx1 = 0, $avr$idx1$val = 0, $vararg_buffer = 0;
 var $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = $addr&65535;
 $1 = ((($avr)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2&65535)<($addr&65535);
 if ($3) {
  $4 = ((($avr)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($avr)) + 5892|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 93|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ((($7)) + 94|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 << 8;
  $15 = $14 | $10;
  $avr$idx1 = ((($avr)) + 5888|0);
  $avr$idx1$val = HEAP32[$avr$idx1>>2]|0;
  $16 = (($avr$idx1$val) + ($5)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($5) + 1)|0;
  $20 = (($avr$idx1$val) + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 << 8;
  $24 = $23 | $18;
  $25 = $v&255;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $24;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $0;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  _avr_global_logger($avr,1,355369,$vararg_buffer);
  _avr_sadly_crashed($avr,0);
 }
 $26 = ($addr&65535)<(32);
 if ($26) {
  $27 = ((($avr)) + 132|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($avr)) + 5892|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 93|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ((($30)) + 94|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 << 8;
  $38 = $37 | $33;
  $avr$idx = ((($avr)) + 5888|0);
  $avr$idx$val = HEAP32[$avr$idx>>2]|0;
  $39 = (($avr$idx$val) + ($28)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = (($28) + 1)|0;
  $43 = (($avr$idx$val) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = $46 | $41;
  $48 = $v&255;
  HEAP32[$vararg_buffer5>>2] = $28;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $38;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $47;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $0;
  $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $48;
  _avr_global_logger($avr,1,355454,$vararg_buffer5);
  _avr_sadly_crashed($avr,0);
 }
 $49 = ((($avr)) + 8292|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if ($51) {
  $52 = ((($avr)) + 5892|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($0)|0);
  HEAP8[$54>>0] = $v;
  STACKTOP = sp;return;
 }
 _avr_gdb_handle_watchpoints($avr,$addr,4);
 $52 = ((($avr)) + 5892|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + ($0)|0);
 HEAP8[$54>>0] = $v;
 STACKTOP = sp;return;
}
function _avr_core_watch_read($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avr$idx = 0, $avr$idx$val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $addr&65535;
 $1 = ((($avr)) + 4|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2&65535)<($addr&65535);
 if ($3) {
  $4 = ((($avr)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($avr)) + 5892|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 93|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ((($7)) + 94|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 << 8;
  $15 = $14 | $10;
  $avr$idx = ((($avr)) + 5888|0);
  $avr$idx$val = HEAP32[$avr$idx>>2]|0;
  $16 = (($avr$idx$val) + ($5)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($5) + 1)|0;
  $20 = (($avr$idx$val) + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 << 8;
  $24 = $23 | $18;
  $25 = $2&65535;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $24;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $0;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  _avr_global_logger($avr,1,355542,$vararg_buffer);
  _avr_sadly_crashed($avr,0);
 }
 $26 = ((($avr)) + 8292|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = ((($avr)) + 5892|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($0)|0);
  $32 = HEAP8[$31>>0]|0;
  STACKTOP = sp;return ($32|0);
 }
 _avr_gdb_handle_watchpoints($avr,$addr,8);
 $29 = ((($avr)) + 5892|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($0)|0);
 $32 = HEAP8[$31>>0]|0;
 STACKTOP = sp;return ($32|0);
}
function __avr_sp_set($avr,$sp) {
 $avr = $avr|0;
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $sp&255;
 __avr_set_r($avr,93,$0);
 $1 = ($sp&65535) >>> 8;
 $2 = $1&255;
 __avr_set_r($avr,94,$2);
 return;
}
function __avr_set_r($avr,$r,$v) {
 $avr = $avr|0;
 $r = $r|0;
 $v = $v|0;
 var $$lobit = 0, $$lobit10 = 0, $$lobit11 = 0, $$lobit6 = 0, $$lobit7 = 0, $$lobit8 = 0, $$lobit9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $r&65535;
 $1 = ($r<<16>>16)==(95);
 if ($1) {
  $50 = ((($avr)) + 5892|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 95|0);
  HEAP8[$52>>0] = $v;
  $53 = $v&255;
  $54 = ((($avr)) + 127|0);
  $55 = ((($avr)) + 128|0);
  $56 = $53 & 1;
  $57 = $56&255;
  $58 = ((($avr)) + 120|0);
  HEAP8[$58>>0] = $57;
  $59 = $53 >>> 1;
  $$lobit = $59 & 1;
  $60 = $$lobit&255;
  $61 = ((($avr)) + 121|0);
  HEAP8[$61>>0] = $60;
  $62 = $53 >>> 2;
  $$lobit6 = $62 & 1;
  $63 = $$lobit6&255;
  $64 = ((($avr)) + 122|0);
  HEAP8[$64>>0] = $63;
  $65 = $53 >>> 3;
  $$lobit7 = $65 & 1;
  $66 = $$lobit7&255;
  $67 = ((($avr)) + 123|0);
  HEAP8[$67>>0] = $66;
  $68 = $53 >>> 4;
  $$lobit8 = $68 & 1;
  $69 = $$lobit8&255;
  $70 = ((($avr)) + 124|0);
  HEAP8[$70>>0] = $69;
  $71 = $53 >>> 5;
  $$lobit9 = $71 & 1;
  $72 = $$lobit9&255;
  $73 = ((($avr)) + 125|0);
  HEAP8[$73>>0] = $72;
  $74 = $53 >>> 6;
  $$lobit10 = $74 & 1;
  $75 = $$lobit10&255;
  $76 = ((($avr)) + 126|0);
  HEAP8[$76>>0] = $75;
  $$lobit11 = ($v&255) >>> 7;
  $77 = $53 & 128;
  $78 = ($77|0)==(0);
  if ($78) {
   HEAP8[$55>>0] = 0;
  } else {
   $79 = HEAP8[$54>>0]|0;
   $80 = ($79<<24>>24)==(0);
   if ($80) {
    HEAP8[$55>>0] = -2;
   }
  }
  HEAP8[$54>>0] = $$lobit11;
 } else {
  $2 = ($r&65535)>(31);
  if (!($2)) {
   $47 = ((($avr)) + 5892|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($0)|0);
   HEAP8[$49>>0] = $v;
   return;
  }
 }
 $3 = (($0) + 65504)|0;
 $4 = $3 & 65535;
 $5 = (((((($avr)) + 140|0) + (($4*20)|0)|0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $10 = ((($avr)) + 5892|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($0)|0);
  HEAP8[$12>>0] = $v;
 } else {
  $8 = (((((($avr)) + 140|0) + (($4*20)|0)|0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_viiii[$6 & 255]($avr,$r,$v,$9);
 }
 $13 = (((($avr)) + 140|0) + (($4*20)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  return;
 }
 $16 = ((($14)) + 192|0);
 $17 = $v&255;
 _avr_raise_irq($16,$17);
 $18 = HEAP32[$13>>2]|0;
 $19 = $17 & 1;
 _avr_raise_irq($18,$19);
 $20 = HEAP32[$13>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = $17 >>> 1;
 $23 = $22 & 1;
 _avr_raise_irq($21,$23);
 $24 = HEAP32[$13>>2]|0;
 $25 = ((($24)) + 48|0);
 $26 = $17 >>> 2;
 $27 = $26 & 1;
 _avr_raise_irq($25,$27);
 $28 = HEAP32[$13>>2]|0;
 $29 = ((($28)) + 72|0);
 $30 = $17 >>> 3;
 $31 = $30 & 1;
 _avr_raise_irq($29,$31);
 $32 = HEAP32[$13>>2]|0;
 $33 = ((($32)) + 96|0);
 $34 = $17 >>> 4;
 $35 = $34 & 1;
 _avr_raise_irq($33,$35);
 $36 = HEAP32[$13>>2]|0;
 $37 = ((($36)) + 120|0);
 $38 = $17 >>> 5;
 $39 = $38 & 1;
 _avr_raise_irq($37,$39);
 $40 = HEAP32[$13>>2]|0;
 $41 = ((($40)) + 144|0);
 $42 = $17 >>> 6;
 $43 = $42 & 1;
 _avr_raise_irq($41,$43);
 $44 = HEAP32[$13>>2]|0;
 $45 = ((($44)) + 168|0);
 $46 = $17 >>> 7;
 _avr_raise_irq($45,$46);
 return;
}
function __avr_push_addr($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extract = 0, $extract$t5 = 0, $extract$t6 = 0, $extract$t8 = 0, $extract7 = 0, $i$03 = 0, $sp$0$lcssa$off0 = 0, $sp$0$lcssa$off8 = 0, $sp$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($avr)) + 5892|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 93|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((($1)) + 94|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 8;
 $9 = $8 | $4;
 $10 = $9&65535;
 $11 = ((($avr)) + 28|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 $extract = ($10&65535) >>> 8;
 $extract$t6 = $extract&255;
 if ($13) {
  $sp$0$lcssa$off0 = $3;$sp$0$lcssa$off8 = $extract$t6;
  __avr_set_r($avr,93,$sp$0$lcssa$off0);
  __avr_set_r($avr,94,$sp$0$lcssa$off8);
  $15 = HEAP8[$11>>0]|0;
  $16 = $15&255;
  return ($16|0);
 }
 $14 = $addr >>> 1;
 $$01 = $14;$i$03 = 0;$sp$02 = $10;
 while(1) {
  $17 = $$01&255;
  $18 = ($sp$02&65535)<(311);
  if ($18) {
   __avr_set_r($avr,$sp$02,$17);
  } else {
   _avr_core_watch_write($avr,$sp$02,$17);
  }
  $19 = (($i$03) + 1)|0;
  $20 = $$01 >>> 8;
  $21 = (($sp$02) + -1)<<16>>16;
  $22 = HEAP8[$11>>0]|0;
  $23 = $22&255;
  $24 = ($19|0)<($23|0);
  if ($24) {
   $$01 = $20;$i$03 = $19;$sp$02 = $21;
  } else {
   $$lcssa = $21;
   break;
  }
 }
 $extract7 = ($$lcssa&65535) >>> 8;
 $extract$t8 = $extract7&255;
 $extract$t5 = $$lcssa&255;
 $sp$0$lcssa$off0 = $extract$t5;$sp$0$lcssa$off8 = $extract$t8;
 __avr_set_r($avr,93,$sp$0$lcssa$off0);
 __avr_set_r($avr,94,$sp$0$lcssa$off8);
 $15 = HEAP8[$11>>0]|0;
 $16 = $15&255;
 return ($16|0);
}
function __avr_get_ram($avr,$addr) {
 $avr = $avr|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $addr&65535;
 $1 = ($addr<<16>>16)==(95);
 if (!($1)) {
  $addr$off = (($addr) + -32)<<16>>16;
  $18 = ($addr$off&65535)<(279);
  if (!($18)) {
   $68 = (_avr_core_watch_read($avr,$addr)|0);
   return ($68|0);
  }
  $19 = (($0) + 65504)|0;
  $20 = $19 & 65535;
  $21 = (((((($avr)) + 140|0) + (($20*20)|0)|0)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $24 = (((((($avr)) + 140|0) + (($20*20)|0)|0)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (FUNCTION_TABLE_iiii[$22 & 255]($avr,$addr,$25)|0);
   $27 = ((($avr)) + 5892|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($0)|0);
   HEAP8[$29>>0] = $26;
  }
  $30 = (((($avr)) + 140|0) + (($20*20)|0)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $68 = (_avr_core_watch_read($avr,$addr)|0);
   return ($68|0);
  }
  $33 = ((($avr)) + 5892|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($0)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ((($31)) + 192|0);
  $38 = $36&255;
  _avr_raise_irq($37,$38);
  $39 = HEAP32[$30>>2]|0;
  $40 = $38 & 1;
  _avr_raise_irq($39,$40);
  $41 = HEAP32[$30>>2]|0;
  $42 = ((($41)) + 24|0);
  $43 = $38 >>> 1;
  $44 = $43 & 1;
  _avr_raise_irq($42,$44);
  $45 = HEAP32[$30>>2]|0;
  $46 = ((($45)) + 48|0);
  $47 = $38 >>> 2;
  $48 = $47 & 1;
  _avr_raise_irq($46,$48);
  $49 = HEAP32[$30>>2]|0;
  $50 = ((($49)) + 72|0);
  $51 = $38 >>> 3;
  $52 = $51 & 1;
  _avr_raise_irq($50,$52);
  $53 = HEAP32[$30>>2]|0;
  $54 = ((($53)) + 96|0);
  $55 = $38 >>> 4;
  $56 = $55 & 1;
  _avr_raise_irq($54,$56);
  $57 = HEAP32[$30>>2]|0;
  $58 = ((($57)) + 120|0);
  $59 = $38 >>> 5;
  $60 = $59 & 1;
  _avr_raise_irq($58,$60);
  $61 = HEAP32[$30>>2]|0;
  $62 = ((($61)) + 144|0);
  $63 = $38 >>> 6;
  $64 = $63 & 1;
  _avr_raise_irq($62,$64);
  $65 = HEAP32[$30>>2]|0;
  $66 = ((($65)) + 168|0);
  $67 = $38 >>> 7;
  _avr_raise_irq($66,$67);
  $68 = (_avr_core_watch_read($avr,$addr)|0);
  return ($68|0);
 }
 $2 = ((($avr)) + 5892|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 95|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($avr)) + 120|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6&255)>(1);
 if ($7) {
  (_puts(355637)|0);
 } else {
  $8 = ($6<<24>>24)==(0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 95|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = $12 | 1;
   $14 = $13&255;
   HEAP8[$10>>0] = $14;
  }
 }
 $15 = ((($avr)) + 121|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16&255)>(1);
 if ($17) {
  (_puts(355637)|0);
 } else {
  $69 = ($16<<24>>24)==(0);
  if (!($69)) {
   $70 = HEAP32[$2>>2]|0;
   $71 = ((($70)) + 95|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = $73 | 2;
   $75 = $74&255;
   HEAP8[$71>>0] = $75;
  }
 }
 $76 = ((($avr)) + 122|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = ($77&255)>(1);
 if ($78) {
  (_puts(355637)|0);
 } else {
  $79 = ($77<<24>>24)==(0);
  if (!($79)) {
   $80 = HEAP32[$2>>2]|0;
   $81 = ((($80)) + 95|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = $83 | 4;
   $85 = $84&255;
   HEAP8[$81>>0] = $85;
  }
 }
 $86 = ((($avr)) + 123|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = ($87&255)>(1);
 if ($88) {
  (_puts(355637)|0);
 } else {
  $89 = ($87<<24>>24)==(0);
  if (!($89)) {
   $90 = HEAP32[$2>>2]|0;
   $91 = ((($90)) + 95|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $93 | 8;
   $95 = $94&255;
   HEAP8[$91>>0] = $95;
  }
 }
 $96 = ((($avr)) + 124|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = ($97&255)>(1);
 if ($98) {
  (_puts(355637)|0);
 } else {
  $99 = ($97<<24>>24)==(0);
  if (!($99)) {
   $100 = HEAP32[$2>>2]|0;
   $101 = ((($100)) + 95|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $103 | 16;
   $105 = $104&255;
   HEAP8[$101>>0] = $105;
  }
 }
 $106 = ((($avr)) + 125|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = ($107&255)>(1);
 if ($108) {
  (_puts(355637)|0);
 } else {
  $109 = ($107<<24>>24)==(0);
  if (!($109)) {
   $110 = HEAP32[$2>>2]|0;
   $111 = ((($110)) + 95|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = $113 | 32;
   $115 = $114&255;
   HEAP8[$111>>0] = $115;
  }
 }
 $116 = ((($avr)) + 126|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = ($117&255)>(1);
 if ($118) {
  (_puts(355637)|0);
 } else {
  $119 = ($117<<24>>24)==(0);
  if (!($119)) {
   $120 = HEAP32[$2>>2]|0;
   $121 = ((($120)) + 95|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = $123 | 64;
   $125 = $124&255;
   HEAP8[$121>>0] = $125;
  }
 }
 $126 = ((($avr)) + 127|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = ($127&255)>(1);
 if ($128) {
  (_puts(355637)|0);
  $68 = (_avr_core_watch_read($avr,$addr)|0);
  return ($68|0);
 }
 $129 = ($127<<24>>24)==(0);
 if ($129) {
  $68 = (_avr_core_watch_read($avr,$addr)|0);
  return ($68|0);
 }
 $130 = HEAP32[$2>>2]|0;
 $131 = ((($130)) + 95|0);
 $132 = HEAP8[$131>>0]|0;
 $133 = $132&255;
 $134 = $133 | 128;
 $135 = $134&255;
 HEAP8[$131>>0] = $135;
 $68 = (_avr_core_watch_read($avr,$addr)|0);
 return ($68|0);
}
function _avr_run_one($avr) {
 $avr = $avr|0;
 var $$ = 0, $$14 = 0, $$15 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$2 = 0, $$20 = 0, $$lcssa = 0, $$lcssa72 = 0, $$not = 0, $$not58 = 0, $$pre = 0, $$pre65 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0;
 var $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0;
 var $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0;
 var $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0;
 var $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
 var $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0;
 var $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0;
 var $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0;
 var $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0;
 var $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0;
 var $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0;
 var $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0;
 var $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0;
 var $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0;
 var $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0;
 var $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0;
 var $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0;
 var $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0;
 var $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0;
 var $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0;
 var $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0;
 var $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0;
 var $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0;
 var $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0;
 var $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0;
 var $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0;
 var $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0;
 var $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $avr$idx25 = 0, $avr$idx25$val = 0, $avr$idx27$val = 0;
 var $avr$idx28$val = 0, $c$0 = 0, $c$0$in = 0, $cond = 0, $cond1 = 0, $cycle$1 = 0, $cycle$6 = 0, $i$03$i = 0, $new_pc$5 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond59 = 0, $phitmp$i = 0, $res$0$lcssa$i = 0, $res$02$i = 0, $res19$0 = 0, $res19$0$in = 0, $sext = 0, $sext13$mask = 0, $sext7 = 0;
 var $sp$0$lcssa$i = 0, $sp$01$i = 0, $switch$split2D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split492D = 0, $switch$split522D = 0, $switch$split552D = 0, $switch$split582D = 0, $switch$split612D = 0, $switch$split642D = 0, $switch$split672D = 0, $switch$split702D = 0, $switch$split732D = 0, $switch$split762D = 0, $switch$split792D = 0, $switch$split822D = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer33 = 0, $vararg_buffer38 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0;
 var $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $x89$1 = 0, $x94$1 = 0, $y$1 = 0, $y101$1 = 0, $z$0 = 0, $z107$1 = 0, $z112$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ((($avr)) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($avr)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 L1: do {
  if ($4) {
   $avr$idx25 = ((($avr)) + 5888|0);
   $5 = ((($avr)) + 5892|0);
   $6 = ((($avr)) + 120|0);
   $7 = ((($avr)) + 121|0);
   $8 = ((($avr)) + 125|0);
   $9 = ((($avr)) + 123|0);
   $10 = ((($avr)) + 122|0);
   $11 = ((($avr)) + 124|0);
   $12 = ((($avr)) + 56|0);
   $13 = ((($avr)) + 36|0);
   $14 = ((($avr)) + 64|0);
   $15 = ((($avr)) + 128|0);
   $16 = ((($avr)) + 127|0);
   $17 = ((($avr)) + 24|0);
   $18 = ((($avr)) + 8292|0);
   $19 = ((($avr)) + 26|0);
   $20 = ((($avr)) + 28|0);
   $21 = ((($avr)) + 126|0);
   $23 = $1;
   L3: while(1) {
    $avr$idx25$val = HEAP32[$avr$idx25>>2]|0;
    $22 = (($avr$idx25$val) + ($23)|0);
    $24 = HEAP8[$22>>0]|0;
    $25 = $24&255;
    $26 = (($23) + 1)|0;
    $27 = (($avr$idx25$val) + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = $29 << 8;
    $31 = $30 | $25;
    $32 = $31&65535;
    $33 = (($23) + 2)|0;
    $34 = $30 & 61440;
    $switch$split2D = ($34|0)<(32768);
    L5: do {
     if ($switch$split2D) {
      $switch$split432D = ($34|0)<(16384);
      if (!($switch$split432D)) {
       $switch$split522D = ($34|0)<(24576);
       if (!($switch$split522D)) {
        $switch$split702D = ($34|0)<(28672);
        if ($switch$split702D) {
         switch ($34|0) {
         case 24576:  {
          break;
         }
         default: {
          label = 165;
          break L3;
         }
         }
         $595 = $31 >>> 4;
         $596 = $595 & 15;
         $597 = $596 | 16;
         $598 = $595 & 240;
         $599 = $25 & 15;
         $600 = $598 | $599;
         $601 = HEAP32[$5>>2]|0;
         $602 = (($601) + ($597)|0);
         $603 = HEAP8[$602>>0]|0;
         $604 = $603&255;
         $605 = $600 | $604;
         $606 = $605&255;
         $607 = $597&65535;
         __avr_set_r($avr,$607,$606);
         HEAP8[$9>>0] = 0;
         $608 = ($606<<24>>24)==(0);
         $609 = $608&1;
         HEAP8[$7>>0] = $609;
         $610 = ($606&255) >>> 7;
         HEAP8[$10>>0] = $610;
         HEAP8[$11>>0] = $610;
         $cycle$6 = 1;$new_pc$5 = $33;
         break;
        } else {
         switch ($34|0) {
         case 28672:  {
          break;
         }
         default: {
          label = 165;
          break L3;
         }
         }
         $611 = $31 >>> 4;
         $612 = $611 & 15;
         $613 = $612 | 16;
         $614 = $611 & 240;
         $615 = $25 & 15;
         $616 = $614 | $615;
         $617 = HEAP32[$5>>2]|0;
         $618 = (($617) + ($613)|0);
         $619 = HEAP8[$618>>0]|0;
         $620 = $619&255;
         $621 = $620 & $616;
         $622 = $621&255;
         $623 = $613&65535;
         __avr_set_r($avr,$623,$622);
         HEAP8[$9>>0] = 0;
         $624 = ($622<<24>>24)==(0);
         $625 = $624&1;
         HEAP8[$7>>0] = $625;
         $626 = ($622&255) >>> 7;
         HEAP8[$10>>0] = $626;
         HEAP8[$11>>0] = $626;
         $cycle$6 = 1;$new_pc$5 = $33;
         break;
        }
       }
       $switch$split672D = ($34|0)<(20480);
       if (!($switch$split672D)) {
        switch ($34|0) {
        case 20480:  {
         break;
        }
        default: {
         label = 165;
         break L3;
        }
        }
        $558 = $31 >>> 4;
        $559 = $558 & 15;
        $560 = $559 | 16;
        $561 = $558 & 240;
        $562 = $25 & 15;
        $563 = $561 | $562;
        $564 = HEAP32[$5>>2]|0;
        $565 = (($564) + ($560)|0);
        $566 = HEAP8[$565>>0]|0;
        $567 = $566&255;
        $568 = (($567) - ($563))|0;
        $569 = $568&255;
        $570 = $560&65535;
        __avr_set_r($avr,$570,$569);
        $571 = $567 ^ -1;
        $572 = $563 & $571;
        $573 = $568 & $563;
        $574 = $571 & 255;
        $575 = $574 & $568;
        $576 = $573 | $572;
        $577 = $576 | $575;
        $578 = $577 >>> 3;
        $579 = $578 & 1;
        $580 = $579&255;
        HEAP8[$8>>0] = $580;
        $581 = $577 >>> 7;
        $582 = $581&255;
        HEAP8[$6>>0] = $582;
        $583 = $561 ^ 128;
        $584 = $568 ^ 128;
        $585 = $567 & $583;
        $586 = $585 & $584;
        $587 = $568 & $572;
        $588 = $586 | $587;
        $589 = $588 >>> 7;
        $590 = $589&255;
        HEAP8[$9>>0] = $590;
        $591 = ($569<<24>>24)==(0);
        $592 = $591&1;
        HEAP8[$7>>0] = $592;
        $593 = ($569&255) >>> 7;
        HEAP8[$10>>0] = $593;
        $594 = $590 ^ $593;
        HEAP8[$11>>0] = $594;
        $cycle$6 = 1;$new_pc$5 = $33;
        break;
       }
       switch ($34|0) {
       case 16384:  {
        break;
       }
       default: {
        label = 165;
        break L3;
       }
       }
       $519 = $31 >>> 4;
       $520 = $519 & 15;
       $521 = $520 | 16;
       $522 = $519 & 240;
       $523 = $25 & 15;
       $524 = $522 | $523;
       $525 = HEAP32[$5>>2]|0;
       $526 = (($525) + ($521)|0);
       $527 = HEAP8[$526>>0]|0;
       $528 = $527&255;
       $529 = (($528) - ($524))|0;
       $530 = HEAP8[$6>>0]|0;
       $531 = $530&255;
       $532 = (($529) - ($531))|0;
       $533 = $532&255;
       $534 = $521&65535;
       __avr_set_r($avr,$534,$533);
       $535 = $528 ^ -1;
       $536 = $524 & $535;
       $537 = $532 & $524;
       $538 = $535 & 255;
       $539 = $538 & $532;
       $540 = $537 | $536;
       $541 = $540 | $539;
       $542 = $541 >>> 3;
       $543 = $542 & 1;
       $544 = $543&255;
       HEAP8[$8>>0] = $544;
       $545 = $541 >>> 7;
       $546 = $545&255;
       HEAP8[$6>>0] = $546;
       $547 = $522 ^ 128;
       $548 = $532 ^ 128;
       $549 = $528 & $547;
       $550 = $549 & $548;
       $551 = $532 & $536;
       $552 = $550 | $551;
       $553 = $552 >>> 7;
       $554 = $553&255;
       HEAP8[$9>>0] = $554;
       $555 = ($533<<24>>24)==(0);
       if (!($555)) {
        HEAP8[$7>>0] = 0;
       }
       $556 = ($533&255) >>> 7;
       HEAP8[$10>>0] = $556;
       $557 = $554 ^ $556;
       HEAP8[$11>>0] = $557;
       $cycle$6 = 1;$new_pc$5 = $33;
       break;
      }
      $switch$split492D = ($34|0)<(8192);
      if (!($switch$split492D)) {
       $switch$split642D = ($34|0)<(12288);
       if (!($switch$split642D)) {
        switch ($34|0) {
        case 12288:  {
         break;
        }
        default: {
         label = 165;
         break L3;
        }
        }
        $483 = $31 >>> 4;
        $484 = $483 & 15;
        $485 = $484 | 16;
        $486 = $483 & 240;
        $487 = $25 & 15;
        $488 = $486 | $487;
        $489 = HEAP32[$5>>2]|0;
        $490 = (($489) + ($485)|0);
        $491 = HEAP8[$490>>0]|0;
        $492 = $491&255;
        $493 = (($492) - ($488))|0;
        $494 = $493&255;
        $495 = $492 ^ -1;
        $496 = $488 & $495;
        $497 = $493 & $488;
        $498 = $495 & 255;
        $499 = $498 & $493;
        $500 = $497 | $496;
        $501 = $500 | $499;
        $502 = $501 >>> 3;
        $503 = $502 & 1;
        $504 = $503&255;
        HEAP8[$8>>0] = $504;
        $505 = $501 >>> 7;
        $506 = $505&255;
        HEAP8[$6>>0] = $506;
        $507 = $486 ^ 128;
        $508 = $493 ^ 128;
        $509 = $492 & $507;
        $510 = $509 & $508;
        $511 = $493 & $496;
        $512 = $510 | $511;
        $513 = $512 >>> 7;
        $514 = $513&255;
        HEAP8[$9>>0] = $514;
        $515 = ($494<<24>>24)==(0);
        $516 = $515&1;
        HEAP8[$7>>0] = $516;
        $517 = ($494&255) >>> 7;
        HEAP8[$10>>0] = $517;
        $518 = $514 ^ $517;
        HEAP8[$11>>0] = $518;
        $cycle$6 = 1;$new_pc$5 = $33;
        break;
       }
       switch ($34|0) {
       case 8192:  {
        break;
       }
       default: {
        label = 165;
        break L3;
       }
       }
       $416 = $30 & 64512;
       switch ($416|0) {
       case 8192:  {
        $417 = $29 << 3;
        $418 = $417 & 16;
        $419 = $25 & 15;
        $420 = $418 | $419;
        $421 = $31 >>> 4;
        $422 = $421 & 31;
        $423 = HEAP32[$5>>2]|0;
        $424 = (($423) + ($422)|0);
        $425 = HEAP8[$424>>0]|0;
        $426 = (($423) + ($420)|0);
        $427 = HEAP8[$426>>0]|0;
        $428 = $427 & $425;
        $429 = $422&65535;
        __avr_set_r($avr,$429,$428);
        HEAP8[$9>>0] = 0;
        $430 = ($428<<24>>24)==(0);
        $431 = $430&1;
        HEAP8[$7>>0] = $431;
        $432 = ($428&255) >>> 7;
        HEAP8[$10>>0] = $432;
        HEAP8[$11>>0] = $432;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 9216:  {
        $433 = $29 << 3;
        $434 = $433 & 16;
        $435 = $25 & 15;
        $436 = $434 | $435;
        $437 = $31 >>> 4;
        $438 = $437 & 31;
        $439 = HEAP32[$5>>2]|0;
        $440 = (($439) + ($438)|0);
        $441 = HEAP8[$440>>0]|0;
        $442 = (($439) + ($436)|0);
        $443 = HEAP8[$442>>0]|0;
        $444 = $443 ^ $441;
        $445 = $438&65535;
        __avr_set_r($avr,$445,$444);
        HEAP8[$9>>0] = 0;
        $446 = ($441<<24>>24)==($443<<24>>24);
        $447 = $446&1;
        HEAP8[$7>>0] = $447;
        $448 = ($444&255) >>> 7;
        HEAP8[$10>>0] = $448;
        HEAP8[$11>>0] = $448;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 10240:  {
        $449 = $29 << 3;
        $450 = $449 & 16;
        $451 = $25 & 15;
        $452 = $450 | $451;
        $453 = $31 >>> 4;
        $454 = $453 & 31;
        $455 = HEAP32[$5>>2]|0;
        $456 = (($455) + ($454)|0);
        $457 = HEAP8[$456>>0]|0;
        $458 = (($455) + ($452)|0);
        $459 = HEAP8[$458>>0]|0;
        $460 = $459 | $457;
        $461 = $454&65535;
        __avr_set_r($avr,$461,$460);
        HEAP8[$9>>0] = 0;
        $462 = ($460<<24>>24)==(0);
        $463 = $462&1;
        HEAP8[$7>>0] = $463;
        $464 = ($460&255) >>> 7;
        HEAP8[$10>>0] = $464;
        HEAP8[$11>>0] = $464;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 11264:  {
        $465 = $29 << 3;
        $466 = $465 & 16;
        $467 = $25 & 15;
        $468 = $466 | $467;
        $469 = HEAP32[$5>>2]|0;
        $470 = (($469) + ($468)|0);
        $471 = HEAP8[$470>>0]|0;
        $472 = ($32&65535) >>> 4;
        $473 = $472 & 31;
        __avr_set_r($avr,$473,$471);
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       default: {
        $474 = HEAP32[$5>>2]|0;
        $475 = ((($474)) + 93|0);
        $476 = HEAP8[$475>>0]|0;
        $477 = $476&255;
        $478 = ((($474)) + 94|0);
        $479 = HEAP8[$478>>0]|0;
        $480 = $479&255;
        $481 = $480 << 8;
        $482 = $481 | $477;
        HEAP32[$vararg_buffer8>>2] = $23;
        $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
        HEAP32[$vararg_ptr11>>2] = $482;
        $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
        HEAP32[$vararg_ptr12>>2] = $31;
        _avr_global_logger($avr,1,355655,$vararg_buffer8);
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
       }
       }
      }
      $switch$split612D = ($34|0)<(4096);
      if (!($switch$split612D)) {
       switch ($34|0) {
       case 4096:  {
        break;
       }
       default: {
        label = 165;
        break L3;
       }
       }
       $260 = $30 & 64512;
       switch ($260|0) {
       case 6144:  {
        $261 = $29 << 3;
        $262 = $261 & 16;
        $263 = $25 & 15;
        $264 = $262 | $263;
        $265 = $31 >>> 4;
        $266 = $265 & 31;
        $267 = HEAP32[$5>>2]|0;
        $268 = (($267) + ($266)|0);
        $269 = HEAP8[$268>>0]|0;
        $270 = (($267) + ($264)|0);
        $271 = HEAP8[$270>>0]|0;
        $272 = $269&255;
        $273 = $271&255;
        $274 = (($272) - ($273))|0;
        $275 = $274&255;
        $276 = $266&65535;
        __avr_set_r($avr,$276,$275);
        $277 = $272 ^ -1;
        $278 = $273 & $277;
        $279 = $274 & 255;
        $280 = $275 & $271;
        $281 = $280&255;
        $282 = $279 & $277;
        $283 = $282 | $278;
        $284 = $283 | $281;
        $285 = $284 >>> 3;
        $286 = $285 & 1;
        $287 = $286&255;
        HEAP8[$8>>0] = $287;
        $288 = $284 >>> 7;
        $289 = $288&255;
        HEAP8[$6>>0] = $289;
        $290 = $273 ^ 128;
        $291 = $274 ^ 128;
        $292 = $290 & $272;
        $293 = $292 & $291;
        $294 = $274 & $278;
        $295 = $293 | $294;
        $296 = $295 >>> 7;
        $297 = $296&255;
        HEAP8[$9>>0] = $297;
        $298 = ($275<<24>>24)==(0);
        $299 = $298&1;
        HEAP8[$7>>0] = $299;
        $300 = ($275&255) >>> 7;
        HEAP8[$10>>0] = $300;
        $301 = $297 ^ $300;
        HEAP8[$11>>0] = $301;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 4096:  {
        $302 = $29 << 3;
        $303 = $302 & 16;
        $304 = $25 & 15;
        $305 = $303 | $304;
        $306 = $31 >>> 4;
        $307 = $306 & 31;
        $308 = HEAP32[$5>>2]|0;
        $309 = (($308) + ($307)|0);
        $310 = HEAP8[$309>>0]|0;
        $311 = (($308) + ($305)|0);
        $312 = HEAP8[$311>>0]|0;
        $313 = ($310<<24>>24)==($312<<24>>24);
        if (!($313)) {
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
        }
        $314 = (($avr$idx25$val) + ($33)|0);
        $315 = HEAP8[$314>>0]|0;
        $316 = $315&255;
        $317 = (($23) + 3)|0;
        $318 = (($avr$idx25$val) + ($317)|0);
        $319 = HEAP8[$318>>0]|0;
        $320 = $319&255;
        $321 = $320 << 8;
        $322 = $321 | $316;
        $323 = $322 & 64527;
        switch ($323|0) {
        case 37903: case 37902: case 37901: case 37900: case 36864:  {
         $324 = (($23) + 6)|0;
         $cycle$6 = 3;$new_pc$5 = $324;
         break L5;
         break;
        }
        default: {
         $325 = (($23) + 4)|0;
         $cycle$6 = 2;$new_pc$5 = $325;
         break L5;
        }
        }
        break;
       }
       case 5120:  {
        $326 = $29 << 3;
        $327 = $326 & 16;
        $328 = $25 & 15;
        $329 = $327 | $328;
        $330 = $31 >>> 4;
        $331 = $330 & 31;
        $332 = HEAP32[$5>>2]|0;
        $333 = (($332) + ($331)|0);
        $334 = HEAP8[$333>>0]|0;
        $335 = (($332) + ($329)|0);
        $336 = HEAP8[$335>>0]|0;
        $337 = $334&255;
        $338 = $336&255;
        $339 = (($337) - ($338))|0;
        $340 = $339&255;
        $341 = $337 ^ -1;
        $342 = $338 & $341;
        $343 = $339 & 255;
        $344 = $340 & $336;
        $345 = $344&255;
        $346 = $343 & $341;
        $347 = $346 | $342;
        $348 = $347 | $345;
        $349 = $348 >>> 3;
        $350 = $349 & 1;
        $351 = $350&255;
        HEAP8[$8>>0] = $351;
        $352 = $348 >>> 7;
        $353 = $352&255;
        HEAP8[$6>>0] = $353;
        $354 = $338 ^ 128;
        $355 = $339 ^ 128;
        $356 = $354 & $337;
        $357 = $356 & $355;
        $358 = $339 & $342;
        $359 = $357 | $358;
        $360 = $359 >>> 7;
        $361 = $360&255;
        HEAP8[$9>>0] = $361;
        $362 = ($340<<24>>24)==(0);
        $363 = $362&1;
        HEAP8[$7>>0] = $363;
        $364 = ($340&255) >>> 7;
        HEAP8[$10>>0] = $364;
        $365 = $361 ^ $364;
        HEAP8[$11>>0] = $365;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 7168:  {
        $366 = $29 << 3;
        $367 = $366 & 16;
        $368 = $25 & 15;
        $369 = $367 | $368;
        $370 = $31 >>> 4;
        $371 = $370 & 31;
        $372 = HEAP32[$5>>2]|0;
        $373 = (($372) + ($371)|0);
        $374 = HEAP8[$373>>0]|0;
        $375 = (($372) + ($369)|0);
        $376 = HEAP8[$375>>0]|0;
        $377 = $374&255;
        $378 = $376&255;
        $379 = (($378) + ($377))|0;
        $380 = HEAP8[$6>>0]|0;
        $381 = $380&255;
        $382 = (($379) + ($381))|0;
        $383 = $382&255;
        $384 = $371&65535;
        __avr_set_r($avr,$384,$383);
        $385 = $376 & $374;
        $386 = $385&255;
        $$not = $382 | -256;
        $387 = $$not ^ 255;
        $388 = $376 | $374;
        $389 = $388&255;
        $390 = $387 & $389;
        $391 = $390 | $386;
        $392 = $391 >>> 3;
        $393 = $392 & 1;
        $394 = $393&255;
        HEAP8[$8>>0] = $394;
        $395 = $391 >>> 7;
        $396 = $395&255;
        HEAP8[$6>>0] = $396;
        $397 = $387 & $386;
        $398 = $389 ^ 128;
        $399 = $382 & $398;
        $400 = $397 | $399;
        $401 = $400 >>> 7;
        $402 = $401&255;
        HEAP8[$9>>0] = $402;
        $403 = ($383<<24>>24)==(0);
        $404 = $403&1;
        HEAP8[$7>>0] = $404;
        $405 = ($383&255) >>> 7;
        HEAP8[$10>>0] = $405;
        $406 = $402 ^ $405;
        HEAP8[$11>>0] = $406;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       default: {
        $407 = HEAP32[$5>>2]|0;
        $408 = ((($407)) + 93|0);
        $409 = HEAP8[$408>>0]|0;
        $410 = $409&255;
        $411 = ((($407)) + 94|0);
        $412 = HEAP8[$411>>0]|0;
        $413 = $412&255;
        $414 = $413 << 8;
        $415 = $414 | $410;
        HEAP32[$vararg_buffer3>>2] = $23;
        $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
        HEAP32[$vararg_ptr6>>2] = $415;
        $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
        HEAP32[$vararg_ptr7>>2] = $31;
        _avr_global_logger($avr,1,355655,$vararg_buffer3);
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
       }
       }
      }
      switch ($34|0) {
      case 0:  {
       break;
      }
      default: {
       label = 165;
       break L3;
      }
      }
      $cond1 = ($32<<16>>16)==(0);
      if ($cond1) {
       $cycle$6 = 1;$new_pc$5 = $33;
      } else {
       $35 = $30 & 64512;
       switch ($35|0) {
       case 1024:  {
        $36 = $29 << 3;
        $37 = $36 & 16;
        $38 = $25 & 15;
        $39 = $37 | $38;
        $40 = $31 >>> 4;
        $41 = $40 & 31;
        $42 = HEAP32[$5>>2]|0;
        $43 = (($42) + ($41)|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = (($42) + ($39)|0);
        $46 = HEAP8[$45>>0]|0;
        $47 = $44&255;
        $48 = $46&255;
        $49 = (($47) - ($48))|0;
        $50 = HEAP8[$6>>0]|0;
        $51 = $50&255;
        $52 = (($49) - ($51))|0;
        $53 = $52&255;
        $54 = $47 ^ -1;
        $55 = $48 & $54;
        $56 = $52 & 255;
        $57 = $53 & $46;
        $58 = $57&255;
        $59 = $56 & $54;
        $60 = $59 | $55;
        $61 = $60 | $58;
        $62 = $61 >>> 3;
        $63 = $62 & 1;
        $64 = $63&255;
        HEAP8[$8>>0] = $64;
        $65 = $61 >>> 7;
        $66 = $65&255;
        HEAP8[$6>>0] = $66;
        $67 = $48 ^ 128;
        $68 = $52 ^ 128;
        $69 = $67 & $47;
        $70 = $69 & $68;
        $71 = $52 & $55;
        $72 = $70 | $71;
        $73 = $72 >>> 7;
        $74 = $73&255;
        HEAP8[$9>>0] = $74;
        $75 = ($53<<24>>24)==(0);
        if (!($75)) {
         HEAP8[$7>>0] = 0;
        }
        $76 = ($53&255) >>> 7;
        HEAP8[$10>>0] = $76;
        $77 = $74 ^ $76;
        HEAP8[$11>>0] = $77;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 3072:  {
        $78 = $29 << 3;
        $79 = $78 & 16;
        $80 = $25 & 15;
        $81 = $79 | $80;
        $82 = $31 >>> 4;
        $83 = $82 & 31;
        $84 = HEAP32[$5>>2]|0;
        $85 = (($84) + ($83)|0);
        $86 = HEAP8[$85>>0]|0;
        $87 = (($84) + ($81)|0);
        $88 = HEAP8[$87>>0]|0;
        $89 = $86&255;
        $90 = $88&255;
        $91 = (($90) + ($89))|0;
        $92 = $91&255;
        $93 = $83&65535;
        __avr_set_r($avr,$93,$92);
        $94 = $88 & $86;
        $95 = $94&255;
        $$not58 = $91 | -256;
        $96 = $$not58 ^ 255;
        $97 = $88 | $86;
        $98 = $97&255;
        $99 = $96 & $98;
        $100 = $99 | $95;
        $101 = $100 >>> 3;
        $102 = $101 & 1;
        $103 = $102&255;
        HEAP8[$8>>0] = $103;
        $104 = $100 >>> 7;
        $105 = $104&255;
        HEAP8[$6>>0] = $105;
        $106 = $96 & $95;
        $107 = $98 ^ 128;
        $108 = $91 & $107;
        $109 = $106 | $108;
        $110 = $109 >>> 7;
        $111 = $110&255;
        HEAP8[$9>>0] = $111;
        $112 = ($92<<24>>24)==(0);
        $113 = $112&1;
        HEAP8[$7>>0] = $113;
        $114 = ($92&255) >>> 7;
        HEAP8[$10>>0] = $114;
        $115 = $111 ^ $114;
        HEAP8[$11>>0] = $115;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 2048:  {
        $116 = $29 << 3;
        $117 = $116 & 16;
        $118 = $25 & 15;
        $119 = $117 | $118;
        $120 = $31 >>> 4;
        $121 = $120 & 31;
        $122 = HEAP32[$5>>2]|0;
        $123 = (($122) + ($121)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = (($122) + ($119)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = $124&255;
        $128 = $126&255;
        $129 = (($127) - ($128))|0;
        $130 = HEAP8[$6>>0]|0;
        $131 = $130&255;
        $132 = (($129) - ($131))|0;
        $133 = $132&255;
        $134 = $121&65535;
        __avr_set_r($avr,$134,$133);
        $135 = $127 ^ -1;
        $136 = $128 & $135;
        $137 = $132 & 255;
        $138 = $133 & $126;
        $139 = $138&255;
        $140 = $137 & $135;
        $141 = $140 | $136;
        $142 = $141 | $139;
        $143 = $142 >>> 3;
        $144 = $143 & 1;
        $145 = $144&255;
        HEAP8[$8>>0] = $145;
        $146 = $142 >>> 7;
        $147 = $146&255;
        HEAP8[$6>>0] = $147;
        $148 = $128 ^ 128;
        $149 = $132 ^ 128;
        $150 = $148 & $127;
        $151 = $150 & $149;
        $152 = $132 & $136;
        $153 = $151 | $152;
        $154 = $153 >>> 7;
        $155 = $154&255;
        HEAP8[$9>>0] = $155;
        $156 = ($133<<24>>24)==(0);
        if (!($156)) {
         HEAP8[$7>>0] = 0;
        }
        $157 = ($133&255) >>> 7;
        HEAP8[$10>>0] = $157;
        $158 = $155 ^ $157;
        HEAP8[$11>>0] = $158;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       default: {
        switch ($30|0) {
        case 256:  {
         $159 = $25 << 1;
         $160 = $159 & 30;
         $161 = HEAP32[$5>>2]|0;
         $162 = (($161) + ($160)|0);
         $163 = HEAP8[$162>>0]|0;
         $164 = $160 | 1;
         $165 = (($161) + ($164)|0);
         $166 = HEAP8[$165>>0]|0;
         $167 = ($32&65535) >>> 3;
         $168 = $167 & 30;
         __avr_set_r($avr,$168,$163);
         $169 = $168&65535;
         $170 = $169 | 1;
         $171 = $170&65535;
         __avr_set_r($avr,$171,$166);
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
         break;
        }
        case 512:  {
         $172 = $25 & 15;
         $173 = $172 | 16;
         $174 = $25 >>> 4;
         $175 = $174 | 16;
         $176 = HEAP32[$5>>2]|0;
         $177 = (($176) + ($173)|0);
         $178 = HEAP8[$177>>0]|0;
         $179 = $178 << 24 >> 24;
         $180 = (($176) + ($175)|0);
         $181 = HEAP8[$180>>0]|0;
         $182 = $181 << 24 >> 24;
         $183 = Math_imul($182, $179)|0;
         $184 = $183&65535;
         $185 = $183&255;
         HEAP8[$176>>0] = $185;
         $186 = ($184&65535) >>> 8;
         $187 = $186&255;
         $188 = HEAP32[$5>>2]|0;
         $189 = ((($188)) + 1|0);
         HEAP8[$189>>0] = $187;
         $190 = $183 >>> 15;
         $191 = $190 & 1;
         $192 = $191&255;
         HEAP8[$6>>0] = $192;
         $sext13$mask = $183 & 65535;
         $193 = ($sext13$mask|0)==(0);
         $194 = $193&1;
         HEAP8[$7>>0] = $194;
         $cycle$6 = 2;$new_pc$5 = $33;
         break L5;
         break;
        }
        case 768:  {
         $195 = $25 & 7;
         $196 = $195 | 16;
         $197 = $25 >>> 4;
         $198 = $197 & 7;
         $199 = $198 | 16;
         $200 = $25 & 136;
         switch ($200|0) {
         case 0:  {
          $201 = HEAP32[$5>>2]|0;
          $202 = (($201) + ($196)|0);
          $203 = HEAP8[$202>>0]|0;
          $204 = $203&255;
          $205 = (($201) + ($199)|0);
          $206 = HEAP8[$205>>0]|0;
          $207 = $206 << 24 >> 24;
          $208 = Math_imul($207, $204)|0;
          $209 = $208 >>> 15;
          $210 = $209 & 1;
          $244 = $201;$c$0$in = $210;$res19$0$in = $208;
          break;
         }
         case 8:  {
          $211 = HEAP32[$5>>2]|0;
          $212 = (($211) + ($196)|0);
          $213 = HEAP8[$212>>0]|0;
          $214 = $213&255;
          $215 = (($211) + ($199)|0);
          $216 = HEAP8[$215>>0]|0;
          $217 = $216&255;
          $218 = Math_imul($217, $214)|0;
          $219 = $218 >>> 15;
          $220 = $218 << 1;
          $244 = $211;$c$0$in = $219;$res19$0$in = $220;
          break;
         }
         case 128:  {
          $221 = HEAP32[$5>>2]|0;
          $222 = (($221) + ($196)|0);
          $223 = HEAP8[$222>>0]|0;
          $224 = $223 << 24 >> 24;
          $225 = (($221) + ($199)|0);
          $226 = HEAP8[$225>>0]|0;
          $227 = $226 << 24 >> 24;
          $228 = Math_imul($227, $224)|0;
          $229 = $228 >>> 15;
          $230 = $229 & 1;
          $231 = $228 << 1;
          $244 = $221;$c$0$in = $230;$res19$0$in = $231;
          break;
         }
         case 136:  {
          $232 = HEAP32[$5>>2]|0;
          $233 = (($232) + ($196)|0);
          $234 = HEAP8[$233>>0]|0;
          $235 = $234&255;
          $236 = (($232) + ($199)|0);
          $237 = HEAP8[$236>>0]|0;
          $238 = $237 << 24 >> 24;
          $239 = Math_imul($238, $235)|0;
          $240 = $239 >>> 15;
          $241 = $240 & 1;
          $242 = $239 << 1;
          $244 = $232;$c$0$in = $241;$res19$0$in = $242;
          break;
         }
         default: {
          label = 22;
          break L3;
         }
         }
         $res19$0 = $res19$0$in&65535;
         $c$0 = $c$0$in&255;
         $243 = $res19$0$in&255;
         HEAP8[$244>>0] = $243;
         $245 = ($res19$0&65535) >>> 8;
         $246 = $245&255;
         $247 = HEAP32[$5>>2]|0;
         $248 = ((($247)) + 1|0);
         HEAP8[$248>>0] = $246;
         HEAP8[$6>>0] = $c$0;
         $249 = ($res19$0<<16>>16)==(0);
         $250 = $249&1;
         HEAP8[$7>>0] = $250;
         $cycle$6 = 2;$new_pc$5 = $33;
         break L5;
         break;
        }
        default: {
         $251 = HEAP32[$5>>2]|0;
         $252 = ((($251)) + 93|0);
         $253 = HEAP8[$252>>0]|0;
         $254 = $253&255;
         $255 = ((($251)) + 94|0);
         $256 = HEAP8[$255>>0]|0;
         $257 = $256&255;
         $258 = $257 << 8;
         $259 = $258 | $254;
         HEAP32[$vararg_buffer>>2] = $23;
         $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
         HEAP32[$vararg_ptr1>>2] = $259;
         $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
         HEAP32[$vararg_ptr2>>2] = $31;
         _avr_global_logger($avr,1,355655,$vararg_buffer);
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
        }
        }
       }
       }
      }
     } else {
      $switch$split462D = ($34|0)<(49152);
      if (!($switch$split462D)) {
       $switch$split582D = ($34|0)<(57344);
       if ($switch$split582D) {
        $switch$split792D = ($34|0)<(53248);
        if ($switch$split792D) {
         switch ($34|0) {
         case 49152:  {
          break;
         }
         default: {
          label = 165;
          break L3;
         }
         }
         $sext7 = $31 << 20;
         $1458 = $sext7 >> 19;
         $1459 = (($1458) + ($33))|0;
         $cycle$6 = 2;$new_pc$5 = $1459;
         break;
        } else {
         switch ($34|0) {
         case 53248:  {
          break;
         }
         default: {
          label = 165;
          break L3;
         }
         }
         $sext = $31 << 20;
         $1460 = $sext >> 19;
         $1461 = (__avr_push_addr($avr,$33)|0);
         $1462 = (($1461) + 1)|0;
         $1463 = (($1460) + ($33))|0;
         $cycle$6 = $1462;$new_pc$5 = $1463;
         break;
        }
       }
       $switch$split822D = ($34|0)<(61440);
       if ($switch$split822D) {
        switch ($34|0) {
        case 57344:  {
         break;
        }
        default: {
         label = 165;
         break L3;
        }
        }
        $1464 = $31 >>> 4;
        $1465 = $1464 | 16;
        $1466 = $1464 & 240;
        $1467 = $25 & 15;
        $1468 = $1466 | $1467;
        $1469 = $1468&255;
        $1470 = $1465&65535;
        $1471 = $1470 & 31;
        __avr_set_r($avr,$1471,$1469);
        $cycle$6 = 1;$new_pc$5 = $33;
        break;
       }
       switch ($34|0) {
       case 61440:  {
        break;
       }
       default: {
        label = 165;
        break L3;
       }
       }
       $1472 = $30 & 65024;
       switch ($1472|0) {
       case 62976: case 62464: case 61952: case 61440:  {
        $1473 = $31 << 22;
        $1474 = $1473 >> 25;
        $1475 = $25 & 7;
        $1476 = $30 & 1024;
        $1477 = ($1476|0)==(0);
        $1478 = (((($avr)) + 120|0) + ($1475)|0);
        $1479 = HEAP8[$1478>>0]|0;
        $1480 = ($1479<<24>>24)!=(0);
        $or$cond = $1477 & $1480;
        if (!($or$cond)) {
         $1481 = ($1479<<24>>24)==(0);
         $1482 = $1477 ^ 1;
         $$19 = $1481 & $1482;
         if (!($$19)) {
          $cycle$6 = 1;$new_pc$5 = $33;
          break L5;
         }
        }
        $1483 = $1474 << 1;
        $1484 = (($1483) + ($33))|0;
        $cycle$6 = 2;$new_pc$5 = $1484;
        break L5;
        break;
       }
       case 63488:  {
        $1485 = $31 >>> 4;
        $1486 = $1485 & 31;
        $1487 = HEAP32[$5>>2]|0;
        $1488 = (($1487) + ($1486)|0);
        $1489 = HEAP8[$1488>>0]|0;
        $1490 = $25 & 7;
        $1491 = 1 << $1490;
        $1492 = $1489&255;
        $1493 = $1491 ^ 255;
        $1494 = $1492 & $1493;
        $1495 = HEAP8[$21>>0]|0;
        $1496 = ($1495<<24>>24)!=(0);
        $1497 = $1496 ? $1491 : 0;
        $1498 = $1497 | $1494;
        $1499 = $1498&255;
        $1500 = $1486&65535;
        __avr_set_r($avr,$1500,$1499);
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       case 64512: case 65024:  {
        $1511 = $31 >>> 4;
        $1512 = $1511 & 31;
        $1513 = HEAP32[$5>>2]|0;
        $1514 = (($1513) + ($1512)|0);
        $1515 = HEAP8[$1514>>0]|0;
        $1516 = $25 & 7;
        $1517 = 1 << $1516;
        $1518 = $30 & 512;
        $1519 = ($1518|0)!=(0);
        $1520 = $1515&255;
        $1521 = $1520 & $1517;
        $1522 = ($1521|0)!=(0);
        $or$cond5 = $1519 & $1522;
        $1523 = $1521 | $1518;
        $$20 = ($1523|0)==(0);
        $or$cond59 = $or$cond5 | $$20;
        if (!($or$cond59)) {
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
        }
        $1524 = (($avr$idx25$val) + ($33)|0);
        $1525 = HEAP8[$1524>>0]|0;
        $1526 = $1525&255;
        $1527 = (($23) + 3)|0;
        $1528 = (($avr$idx25$val) + ($1527)|0);
        $1529 = HEAP8[$1528>>0]|0;
        $1530 = $1529&255;
        $1531 = $1530 << 8;
        $1532 = $1531 | $1526;
        $1533 = $1532 & 64527;
        switch ($1533|0) {
        case 37903: case 37902: case 37901: case 37900: case 36864:  {
         $1534 = (($23) + 6)|0;
         $cycle$6 = 3;$new_pc$5 = $1534;
         break L5;
         break;
        }
        default: {
         $1535 = (($23) + 4)|0;
         $cycle$6 = 2;$new_pc$5 = $1535;
         break L5;
        }
        }
        break;
       }
       case 64000:  {
        $1501 = $31 >>> 4;
        $1502 = $1501 & 31;
        $1503 = HEAP32[$5>>2]|0;
        $1504 = (($1503) + ($1502)|0);
        $1505 = HEAP8[$1504>>0]|0;
        $1506 = $25 & 7;
        $1507 = $1505&255;
        $1508 = $1507 >>> $1506;
        $1509 = $1508 & 1;
        $1510 = $1509&255;
        HEAP8[$21>>0] = $1510;
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
        break;
       }
       default: {
        $1536 = HEAP32[$5>>2]|0;
        $1537 = ((($1536)) + 93|0);
        $1538 = HEAP8[$1537>>0]|0;
        $1539 = $1538&255;
        $1540 = ((($1536)) + 94|0);
        $1541 = HEAP8[$1540>>0]|0;
        $1542 = $1541&255;
        $1543 = $1542 << 8;
        $1544 = $1543 | $1539;
        HEAP32[$vararg_buffer38>>2] = $23;
        $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
        HEAP32[$vararg_ptr41>>2] = $1544;
        $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
        HEAP32[$vararg_ptr42>>2] = $31;
        _avr_global_logger($avr,1,355655,$vararg_buffer38);
        $cycle$6 = 1;$new_pc$5 = $33;
        break L5;
       }
       }
      }
      $switch$split552D = ($34|0)<(40960);
      L108: do {
       if ($switch$split552D) {
        $switch$split732D = ($34|0)<(36864);
        if ($switch$split732D) {
         switch ($34|0) {
         case 32768:  {
          break L108;
          break;
         }
         default: {
          label = 165;
          break L3;
         }
         }
        }
        switch ($34|0) {
        case 36864:  {
         break;
        }
        default: {
         label = 165;
         break L3;
        }
        }
        $693 = $31 & 65295;
        $694 = ($693|0)==(37896);
        if ($694) {
         $695 = $25 >>> 4;
         $696 = $695 & 7;
         $697 = $25 >>> 7;
         $698 = $697 ^ 1;
         $699 = $698&255;
         $700 = ($696|0)==(7);
         do {
          if ($700) {
           $701 = ($699<<24>>24)==(0);
           if ($701) {
            HEAP8[$15>>0] = 0;
            break;
           }
           $702 = HEAP8[$16>>0]|0;
           $703 = ($702<<24>>24)==(0);
           if ($703) {
            HEAP8[$15>>0] = -2;
           }
          }
         } while(0);
         $704 = (((($avr)) + 120|0) + ($696)|0);
         HEAP8[$704>>0] = $699;
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
        }
        switch ($31|0) {
        case 38280:  {
         $705 = (_avr_has_pending_interrupts($avr)|0);
         $706 = ($705|0)==(0);
         if (!($706)) {
          $707 = HEAP8[$16>>0]|0;
          $708 = ($707<<24>>24)==(0);
          if (!($708)) {
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
          }
         }
         HEAP32[$13>>2] = 3;
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
         break;
        }
        case 38296:  {
         $709 = HEAP32[$18>>2]|0;
         $710 = ($709|0)==(0|0);
         if ($710) {
          $cycle$6 = 1;$new_pc$5 = $33;
          break L5;
         }
         HEAP32[$13>>2] = 5;
         $cycle$6 = 0;$new_pc$5 = $23;
         break L5;
         break;
        }
        case 38312:  {
         (_avr_ioctl($avr,2003072114,0)|0);
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
         break;
        }
        case 38376:  {
         (_avr_ioctl($avr,1718841453,0)|0);
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
         break;
        }
        case 38169: case 38153: case 37913: case 37897:  {
         $711 = $25 & 16;
         $712 = $30 & 256;
         $713 = ($711|0)!=(0);
         if ($713) {
          $714 = HEAP16[$19>>1]|0;
          $715 = ($714<<16>>16)==(0);
          if ($715) {
           $716 = HEAP32[$5>>2]|0;
           $717 = ((($716)) + 93|0);
           $718 = HEAP8[$717>>0]|0;
           $719 = $718&255;
           $720 = ((($716)) + 94|0);
           $721 = HEAP8[$720>>0]|0;
           $722 = $721&255;
           $723 = $722 << 8;
           $724 = $723 | $719;
           HEAP32[$vararg_buffer18>>2] = $23;
           $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
           HEAP32[$vararg_ptr21>>2] = $724;
           $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
           HEAP32[$vararg_ptr22>>2] = $31;
           _avr_global_logger($avr,1,355655,$vararg_buffer18);
          }
         }
         $725 = HEAP32[$5>>2]|0;
         $726 = ((($725)) + 30|0);
         $727 = HEAP8[$726>>0]|0;
         $728 = $727&255;
         $729 = ((($725)) + 31|0);
         $730 = HEAP8[$729>>0]|0;
         $731 = $730&255;
         $732 = $731 << 8;
         $733 = $732 | $728;
         if ($713) {
          $734 = HEAP16[$19>>1]|0;
          $735 = $734&65535;
          $736 = (($725) + ($735)|0);
          $737 = HEAP8[$736>>0]|0;
          $738 = $737&255;
          $739 = $738 << 16;
          $740 = $739 | $733;
          $z$0 = $740;
         } else {
          $z$0 = $733;
         }
         $741 = ($712|0)==(0);
         if ($741) {
          $cycle$1 = 1;
         } else {
          $742 = (__avr_push_addr($avr,$33)|0);
          $cycle$1 = $742;
         }
         $743 = $z$0 << 1;
         $744 = (($cycle$1) + 1)|0;
         $cycle$6 = $744;$new_pc$5 = $743;
         break L5;
         break;
        }
        case 38168:  {
         $745 = HEAP8[$16>>0]|0;
         $746 = ($745<<24>>24)==(0);
         if ($746) {
          HEAP8[$15>>0] = -2;
         }
         HEAP8[$16>>0] = 1;
         _avr_interrupt_reti($avr);
         break;
        }
        case 38152:  {
         break;
        }
        case 38344:  {
         $778 = HEAP32[$5>>2]|0;
         $779 = ((($778)) + 30|0);
         $780 = HEAP8[$779>>0]|0;
         $781 = $780&255;
         $782 = ((($778)) + 31|0);
         $783 = HEAP8[$782>>0]|0;
         $784 = $783&255;
         $785 = $784 << 8;
         $786 = $785 | $781;
         $787 = (($avr$idx25$val) + ($786)|0);
         $788 = HEAP8[$787>>0]|0;
         HEAP8[$778>>0] = $788;
         $cycle$6 = 3;$new_pc$5 = $33;
         break L5;
         break;
        }
        default: {
         $789 = $31 & 65039;
         do {
          switch ($789|0) {
          case 36864:  {
           $790 = (($avr$idx25$val) + ($33)|0);
           $791 = HEAP8[$790>>0]|0;
           $792 = $791&255;
           $793 = (($23) + 3)|0;
           $794 = (($avr$idx25$val) + ($793)|0);
           $795 = HEAP8[$794>>0]|0;
           $796 = $795&255;
           $797 = $796 << 8;
           $798 = $797 | $792;
           $799 = $798&65535;
           $800 = (($23) + 4)|0;
           $801 = ($32&65535) >>> 4;
           $802 = $801 & 31;
           $803 = (__avr_get_ram($avr,$799)|0);
           __avr_set_r($avr,$802,$803);
           $cycle$6 = 2;$new_pc$5 = $800;
           break L5;
           break;
          }
          case 36868: case 36869:  {
           $804 = HEAP32[$5>>2]|0;
           $805 = ((($804)) + 30|0);
           $806 = HEAP8[$805>>0]|0;
           $807 = $806&255;
           $808 = ((($804)) + 31|0);
           $809 = HEAP8[$808>>0]|0;
           $810 = $809&255;
           $811 = $810 << 8;
           $812 = $811 | $807;
           $813 = $25 & 1;
           $814 = ($32&65535) >>> 4;
           $815 = $814 & 31;
           $816 = (($avr$idx25$val) + ($812)|0);
           $817 = HEAP8[$816>>0]|0;
           __avr_set_r($avr,$815,$817);
           $818 = ($813|0)==(0);
           if ($818) {
            $cycle$6 = 3;$new_pc$5 = $33;
            break L5;
           }
           $819 = $812&65535;
           $820 = (($819) + 1)<<16>>16;
           $821 = ($820&65535) >>> 8;
           $822 = $821&255;
           $823 = HEAP32[$5>>2]|0;
           $824 = ((($823)) + 31|0);
           HEAP8[$824>>0] = $822;
           $825 = $820&255;
           $826 = HEAP32[$5>>2]|0;
           $827 = ((($826)) + 30|0);
           HEAP8[$827>>0] = $825;
           $cycle$6 = 3;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 36871: case 36870:  {
           $828 = HEAP16[$17>>1]|0;
           $829 = ($828<<16>>16)==(0);
           if ($829) {
            $830 = HEAP32[$5>>2]|0;
            $831 = ((($830)) + 93|0);
            $832 = HEAP8[$831>>0]|0;
            $833 = $832&255;
            $834 = ((($830)) + 94|0);
            $835 = HEAP8[$834>>0]|0;
            $836 = $835&255;
            $837 = $836 << 8;
            $838 = $837 | $833;
            HEAP32[$vararg_buffer23>>2] = $23;
            $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
            HEAP32[$vararg_ptr26>>2] = $838;
            $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
            HEAP32[$vararg_ptr27>>2] = $31;
            _avr_global_logger($avr,1,355655,$vararg_buffer23);
            $$pre = HEAP16[$17>>1]|0;
            $$pre65 = HEAP32[$avr$idx25>>2]|0;
            $849 = $$pre;$859 = $$pre65;
           } else {
            $849 = $828;$859 = $avr$idx25$val;
           }
           $839 = HEAP32[$5>>2]|0;
           $840 = ((($839)) + 30|0);
           $841 = HEAP8[$840>>0]|0;
           $842 = $841&255;
           $843 = ((($839)) + 31|0);
           $844 = HEAP8[$843>>0]|0;
           $845 = $844&255;
           $846 = $845 << 8;
           $847 = $846 | $842;
           $848 = $849&65535;
           $850 = (($839) + ($848)|0);
           $851 = HEAP8[$850>>0]|0;
           $852 = $851&255;
           $853 = $852 << 16;
           $854 = $847 | $853;
           $855 = $25 & 1;
           $856 = ($32&65535) >>> 4;
           $857 = $856 & 31;
           $858 = (($859) + ($854)|0);
           $860 = HEAP8[$858>>0]|0;
           __avr_set_r($avr,$857,$860);
           $861 = ($855|0)==(0);
           if ($861) {
            $cycle$6 = 3;$new_pc$5 = $33;
            break L5;
           }
           $862 = (($854) + 1)|0;
           $863 = HEAP16[$17>>1]|0;
           $864 = $862 >>> 16;
           $865 = $864&255;
           __avr_set_r($avr,$863,$865);
           $866 = $862&65535;
           $867 = ($866&65535) >>> 8;
           $868 = $867&255;
           $869 = HEAP32[$5>>2]|0;
           $870 = ((($869)) + 31|0);
           HEAP8[$870>>0] = $868;
           $871 = $862&255;
           $872 = HEAP32[$5>>2]|0;
           $873 = ((($872)) + 30|0);
           HEAP8[$873>>0] = $871;
           $cycle$6 = 3;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 36878: case 36877: case 36876:  {
           $874 = $25 & 3;
           $875 = HEAP32[$5>>2]|0;
           $876 = ((($875)) + 27|0);
           $877 = HEAP8[$876>>0]|0;
           $878 = $877&255;
           $879 = $878 << 8;
           $880 = ((($875)) + 26|0);
           $881 = HEAP8[$880>>0]|0;
           $882 = $881&255;
           $883 = $879 | $882;
           $884 = $883&65535;
           $885 = ($874|0)==(2);
           $886 = $885 << 31 >> 31;
           $$ = (($884) + ($886))<<16>>16;
           $887 = (__avr_get_ram($avr,$$)|0);
           $888 = ($874|0)==(1);
           $889 = $888&1;
           $x89$1 = (($$) + ($889))<<16>>16;
           $890 = ($x89$1&65535) >>> 8;
           $891 = $890&255;
           $892 = HEAP32[$5>>2]|0;
           $893 = ((($892)) + 27|0);
           HEAP8[$893>>0] = $891;
           $894 = $x89$1&255;
           $895 = HEAP32[$5>>2]|0;
           $896 = ((($895)) + 26|0);
           HEAP8[$896>>0] = $894;
           $897 = ($32&65535) >>> 4;
           $898 = $897 & 31;
           __avr_set_r($avr,$898,$887);
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37390: case 37389: case 37388:  {
           $899 = $25 & 3;
           $900 = $31 >>> 4;
           $901 = $900 & 31;
           $902 = HEAP32[$5>>2]|0;
           $903 = (($902) + ($901)|0);
           $904 = HEAP8[$903>>0]|0;
           $905 = ((($902)) + 27|0);
           $906 = HEAP8[$905>>0]|0;
           $907 = $906&255;
           $908 = $907 << 8;
           $909 = ((($902)) + 26|0);
           $910 = HEAP8[$909>>0]|0;
           $911 = $910&255;
           $912 = $908 | $911;
           $913 = $912&65535;
           $914 = ($899|0)==(2);
           $915 = $914 << 31 >> 31;
           $$14 = (($913) + ($915))<<16>>16;
           $916 = ($$14&65535)<(311);
           if ($916) {
            __avr_set_r($avr,$$14,$904);
           } else {
            _avr_core_watch_write($avr,$$14,$904);
           }
           $917 = ($899|0)==(1);
           $918 = $917&1;
           $x94$1 = (($$14) + ($918))<<16>>16;
           $919 = ($x94$1&65535) >>> 8;
           $920 = $919&255;
           $921 = HEAP32[$5>>2]|0;
           $922 = ((($921)) + 27|0);
           HEAP8[$922>>0] = $920;
           $923 = $x94$1&255;
           $924 = HEAP32[$5>>2]|0;
           $925 = ((($924)) + 26|0);
           HEAP8[$925>>0] = $923;
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 36874: case 36873:  {
           $926 = $25 & 3;
           $927 = HEAP32[$5>>2]|0;
           $928 = ((($927)) + 29|0);
           $929 = HEAP8[$928>>0]|0;
           $930 = $929&255;
           $931 = $930 << 8;
           $932 = ((($927)) + 28|0);
           $933 = HEAP8[$932>>0]|0;
           $934 = $933&255;
           $935 = $931 | $934;
           $936 = $935&65535;
           $937 = ($926|0)==(2);
           $938 = $937 << 31 >> 31;
           $$15 = (($936) + ($938))<<16>>16;
           $939 = (__avr_get_ram($avr,$$15)|0);
           $940 = ($926|0)==(1);
           $941 = $940&1;
           $y$1 = (($$15) + ($941))<<16>>16;
           $942 = ($y$1&65535) >>> 8;
           $943 = $942&255;
           $944 = HEAP32[$5>>2]|0;
           $945 = ((($944)) + 29|0);
           HEAP8[$945>>0] = $943;
           $946 = $y$1&255;
           $947 = HEAP32[$5>>2]|0;
           $948 = ((($947)) + 28|0);
           HEAP8[$948>>0] = $946;
           $949 = ($32&65535) >>> 4;
           $950 = $949 & 31;
           __avr_set_r($avr,$950,$939);
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37386: case 37385:  {
           $951 = $25 & 3;
           $952 = $31 >>> 4;
           $953 = $952 & 31;
           $954 = HEAP32[$5>>2]|0;
           $955 = (($954) + ($953)|0);
           $956 = HEAP8[$955>>0]|0;
           $957 = ((($954)) + 29|0);
           $958 = HEAP8[$957>>0]|0;
           $959 = $958&255;
           $960 = $959 << 8;
           $961 = ((($954)) + 28|0);
           $962 = HEAP8[$961>>0]|0;
           $963 = $962&255;
           $964 = $960 | $963;
           $965 = $964&65535;
           $966 = ($951|0)==(2);
           $967 = $966 << 31 >> 31;
           $$16 = (($965) + ($967))<<16>>16;
           $968 = ($$16&65535)<(311);
           if ($968) {
            __avr_set_r($avr,$$16,$956);
           } else {
            _avr_core_watch_write($avr,$$16,$956);
           }
           $969 = ($951|0)==(1);
           $970 = $969&1;
           $y101$1 = (($$16) + ($970))<<16>>16;
           $971 = ($y101$1&65535) >>> 8;
           $972 = $971&255;
           $973 = HEAP32[$5>>2]|0;
           $974 = ((($973)) + 29|0);
           HEAP8[$974>>0] = $972;
           $975 = $y101$1&255;
           $976 = HEAP32[$5>>2]|0;
           $977 = ((($976)) + 28|0);
           HEAP8[$977>>0] = $975;
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37376:  {
           $978 = $31 >>> 4;
           $979 = $978 & 31;
           $980 = HEAP32[$5>>2]|0;
           $981 = (($980) + ($979)|0);
           $982 = HEAP8[$981>>0]|0;
           $983 = (($avr$idx25$val) + ($33)|0);
           $984 = HEAP8[$983>>0]|0;
           $985 = $984&255;
           $986 = (($23) + 3)|0;
           $987 = (($avr$idx25$val) + ($986)|0);
           $988 = HEAP8[$987>>0]|0;
           $989 = $988&255;
           $990 = $989 << 8;
           $991 = $990 | $985;
           $992 = $991&65535;
           $993 = (($23) + 4)|0;
           $994 = ($992&65535)<(311);
           if ($994) {
            __avr_set_r($avr,$992,$982);
            $cycle$6 = 2;$new_pc$5 = $993;
            break L5;
           } else {
            _avr_core_watch_write($avr,$992,$982);
            $cycle$6 = 2;$new_pc$5 = $993;
            break L5;
           }
           break;
          }
          case 36866: case 36865:  {
           $995 = $25 & 3;
           $996 = HEAP32[$5>>2]|0;
           $997 = ((($996)) + 31|0);
           $998 = HEAP8[$997>>0]|0;
           $999 = $998&255;
           $1000 = $999 << 8;
           $1001 = ((($996)) + 30|0);
           $1002 = HEAP8[$1001>>0]|0;
           $1003 = $1002&255;
           $1004 = $1000 | $1003;
           $1005 = $1004&65535;
           $1006 = ($995|0)==(2);
           $1007 = $1006 << 31 >> 31;
           $$17 = (($1005) + ($1007))<<16>>16;
           $1008 = (__avr_get_ram($avr,$$17)|0);
           $1009 = ($995|0)==(1);
           $1010 = $1009&1;
           $z107$1 = (($$17) + ($1010))<<16>>16;
           $1011 = ($z107$1&65535) >>> 8;
           $1012 = $1011&255;
           $1013 = HEAP32[$5>>2]|0;
           $1014 = ((($1013)) + 31|0);
           HEAP8[$1014>>0] = $1012;
           $1015 = $z107$1&255;
           $1016 = HEAP32[$5>>2]|0;
           $1017 = ((($1016)) + 30|0);
           HEAP8[$1017>>0] = $1015;
           $1018 = ($32&65535) >>> 4;
           $1019 = $1018 & 31;
           __avr_set_r($avr,$1019,$1008);
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37378: case 37377:  {
           $1020 = $25 & 3;
           $1021 = $31 >>> 4;
           $1022 = $1021 & 31;
           $1023 = HEAP32[$5>>2]|0;
           $1024 = (($1023) + ($1022)|0);
           $1025 = HEAP8[$1024>>0]|0;
           $1026 = ((($1023)) + 31|0);
           $1027 = HEAP8[$1026>>0]|0;
           $1028 = $1027&255;
           $1029 = $1028 << 8;
           $1030 = ((($1023)) + 30|0);
           $1031 = HEAP8[$1030>>0]|0;
           $1032 = $1031&255;
           $1033 = $1029 | $1032;
           $1034 = $1033&65535;
           $1035 = ($1020|0)==(2);
           $1036 = $1035 << 31 >> 31;
           $$18 = (($1034) + ($1036))<<16>>16;
           $1037 = ($$18&65535)<(311);
           if ($1037) {
            __avr_set_r($avr,$$18,$1025);
           } else {
            _avr_core_watch_write($avr,$$18,$1025);
           }
           $1038 = ($1020|0)==(1);
           $1039 = $1038&1;
           $z112$1 = (($$18) + ($1039))<<16>>16;
           $1040 = ($z112$1&65535) >>> 8;
           $1041 = $1040&255;
           $1042 = HEAP32[$5>>2]|0;
           $1043 = ((($1042)) + 31|0);
           HEAP8[$1043>>0] = $1041;
           $1044 = $z112$1&255;
           $1045 = HEAP32[$5>>2]|0;
           $1046 = ((($1045)) + 30|0);
           HEAP8[$1046>>0] = $1044;
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 36879:  {
           $1047 = ($32&65535) >>> 4;
           $1048 = $1047 & 31;
           $1049 = HEAP32[$5>>2]|0;
           $1050 = ((($1049)) + 93|0);
           $1051 = HEAP8[$1050>>0]|0;
           $1052 = $1051&255;
           $1053 = ((($1049)) + 94|0);
           $1054 = HEAP8[$1053>>0]|0;
           $1055 = $1054&255;
           $1056 = $1055 << 8;
           $1057 = $1056 | $1052;
           $1058 = (($1057) + 1)|0;
           $1059 = $1058&65535;
           $1060 = (__avr_get_ram($avr,$1059)|0);
           $1061 = $1058&255;
           __avr_set_r($avr,93,$1061);
           $1062 = ($1059&65535) >>> 8;
           $1063 = $1062&255;
           __avr_set_r($avr,94,$1063);
           __avr_set_r($avr,$1048,$1060);
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37391:  {
           $1064 = $31 >>> 4;
           $1065 = $1064 & 31;
           $1066 = HEAP32[$5>>2]|0;
           $1067 = (($1066) + ($1065)|0);
           $1068 = HEAP8[$1067>>0]|0;
           $1069 = ((($1066)) + 93|0);
           $1070 = HEAP8[$1069>>0]|0;
           $1071 = $1070&255;
           $1072 = ((($1066)) + 94|0);
           $1073 = HEAP8[$1072>>0]|0;
           $1074 = $1073&255;
           $1075 = $1074 << 8;
           $1076 = $1075 | $1071;
           $1077 = $1076&65535;
           $1078 = ($1077&65535)<(311);
           if ($1078) {
            __avr_set_r($avr,$1077,$1068);
           } else {
            _avr_core_watch_write($avr,$1077,$1068);
           }
           $1079 = (($1076) + 65535)|0;
           $1080 = $1079&65535;
           $1081 = $1079&255;
           __avr_set_r($avr,93,$1081);
           $1082 = ($1080&65535) >>> 8;
           $1083 = $1082&255;
           __avr_set_r($avr,94,$1083);
           $cycle$6 = 2;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37888:  {
           $1084 = $31 >>> 4;
           $1085 = $1084 & 31;
           $1086 = HEAP32[$5>>2]|0;
           $1087 = (($1086) + ($1085)|0);
           $1088 = HEAP8[$1087>>0]|0;
           $1089 = $1088&255;
           $1090 = $1089 ^ 255;
           $1091 = $1090&255;
           $1092 = $1085&65535;
           __avr_set_r($avr,$1092,$1091);
           HEAP8[$9>>0] = 0;
           $1093 = ($1091<<24>>24)==(0);
           $1094 = $1093&1;
           HEAP8[$7>>0] = $1094;
           $1095 = ($1091&255) >>> 7;
           HEAP8[$10>>0] = $1095;
           HEAP8[$11>>0] = $1095;
           HEAP8[$6>>0] = 1;
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37889:  {
           $1096 = $31 >>> 4;
           $1097 = $1096 & 31;
           $1098 = HEAP32[$5>>2]|0;
           $1099 = (($1098) + ($1097)|0);
           $1100 = HEAP8[$1099>>0]|0;
           $1101 = $1100&255;
           $1102 = (0 - ($1101))|0;
           $1103 = $1102&255;
           $1104 = $1097&65535;
           __avr_set_r($avr,$1104,$1103);
           $1105 = $1102 & 255;
           $1106 = $1101 | $1102;
           $1107 = $1106 >>> 3;
           $1108 = $1107 & 1;
           $1109 = $1108&255;
           HEAP8[$8>>0] = $1109;
           $1110 = ($1105|0)==(128);
           $1111 = $1110&1;
           HEAP8[$9>>0] = $1111;
           $1112 = ($1105|0)!=(0);
           $1113 = $1112&1;
           HEAP8[$6>>0] = $1113;
           $1114 = ($1103<<24>>24)==(0);
           $1115 = $1114&1;
           HEAP8[$7>>0] = $1115;
           $1116 = ($1103&255) >>> 7;
           HEAP8[$10>>0] = $1116;
           $1117 = $1111 ^ $1116;
           HEAP8[$11>>0] = $1117;
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37890:  {
           $1118 = $31 >>> 4;
           $1119 = $1118 & 31;
           $1120 = HEAP32[$5>>2]|0;
           $1121 = (($1120) + ($1119)|0);
           $1122 = HEAP8[$1121>>0]|0;
           $1123 = $1122&255;
           $1124 = $1123 >>> 4;
           $1125 = $1123 << 4;
           $1126 = $1124 | $1125;
           $1127 = $1126&255;
           $1128 = $1119&65535;
           __avr_set_r($avr,$1128,$1127);
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37891:  {
           $1129 = $31 >>> 4;
           $1130 = $1129 & 31;
           $1131 = HEAP32[$5>>2]|0;
           $1132 = (($1131) + ($1130)|0);
           $1133 = HEAP8[$1132>>0]|0;
           $1134 = $1133&255;
           $1135 = (($1134) + 1)|0;
           $1136 = $1135&255;
           $1137 = $1130&65535;
           __avr_set_r($avr,$1137,$1136);
           $1138 = $1135 & 255;
           $1139 = ($1138|0)==(128);
           $1140 = $1139&1;
           HEAP8[$9>>0] = $1140;
           $1141 = ($1136<<24>>24)==(0);
           $1142 = $1141&1;
           HEAP8[$7>>0] = $1142;
           $1143 = ($1136&255) >>> 7;
           HEAP8[$10>>0] = $1143;
           $1144 = $1140 ^ $1143;
           HEAP8[$11>>0] = $1144;
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37893:  {
           $1145 = $31 >>> 4;
           $1146 = $1145 & 31;
           $1147 = HEAP32[$5>>2]|0;
           $1148 = (($1147) + ($1146)|0);
           $1149 = HEAP8[$1148>>0]|0;
           $1150 = $1149&255;
           $1151 = $1150 >>> 1;
           $1152 = $1150 & 128;
           $1153 = $1151 | $1152;
           $1154 = $1153&255;
           $1155 = $1146&65535;
           __avr_set_r($avr,$1155,$1154);
           $1156 = ($1154<<24>>24)==(0);
           $1157 = $1156&1;
           HEAP8[$7>>0] = $1157;
           $1158 = $1150 & 1;
           $1159 = $1158&255;
           HEAP8[$6>>0] = $1159;
           $1160 = ($1154&255) >>> 7;
           HEAP8[$10>>0] = $1160;
           $1161 = $1160&255;
           $1162 = $1161 ^ $1158;
           $1163 = $1162&255;
           HEAP8[$9>>0] = $1163;
           HEAP8[$11>>0] = $1159;
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37894:  {
           $1164 = $31 >>> 4;
           $1165 = $1164 & 31;
           $1166 = HEAP32[$5>>2]|0;
           $1167 = (($1166) + ($1165)|0);
           $1168 = HEAP8[$1167>>0]|0;
           $1169 = ($1168&255) >>> 1;
           $1170 = $1165&65535;
           __avr_set_r($avr,$1170,$1169);
           HEAP8[$10>>0] = 0;
           $1171 = ($1169<<24>>24)==(0);
           $1172 = $1171&1;
           HEAP8[$7>>0] = $1172;
           $1173 = $1168&255;
           $1174 = $1173 & 1;
           $1175 = $1174&255;
           HEAP8[$6>>0] = $1175;
           HEAP8[$9>>0] = $1175;
           HEAP8[$11>>0] = $1175;
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37895:  {
           $1176 = $31 >>> 4;
           $1177 = $1176 & 31;
           $1178 = HEAP32[$5>>2]|0;
           $1179 = (($1178) + ($1177)|0);
           $1180 = HEAP8[$1179>>0]|0;
           $1181 = HEAP8[$6>>0]|0;
           $1182 = ($1181<<24>>24)!=(0);
           $1183 = $1182 ? 128 : 0;
           $1184 = $1180&255;
           $1185 = $1184 >>> 1;
           $1186 = $1183 | $1185;
           $1187 = $1186&255;
           $1188 = $1177&65535;
           __avr_set_r($avr,$1188,$1187);
           $1189 = ($1187<<24>>24)==(0);
           $1190 = $1189&1;
           HEAP8[$7>>0] = $1190;
           $1191 = $1184 & 1;
           $1192 = $1191&255;
           HEAP8[$6>>0] = $1192;
           $1193 = ($1187&255) >>> 7;
           HEAP8[$10>>0] = $1193;
           $1194 = $1193&255;
           $1195 = $1194 ^ $1191;
           $1196 = $1195&255;
           HEAP8[$9>>0] = $1196;
           HEAP8[$11>>0] = $1192;
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37898:  {
           $1197 = $31 >>> 4;
           $1198 = $1197 & 31;
           $1199 = HEAP32[$5>>2]|0;
           $1200 = (($1199) + ($1198)|0);
           $1201 = HEAP8[$1200>>0]|0;
           $1202 = $1201&255;
           $1203 = (($1202) + 255)|0;
           $1204 = $1203&255;
           $1205 = $1198&65535;
           __avr_set_r($avr,$1205,$1204);
           $1206 = $1203 & 255;
           $1207 = ($1206|0)==(127);
           $1208 = $1207&1;
           HEAP8[$9>>0] = $1208;
           $1209 = ($1204<<24>>24)==(0);
           $1210 = $1209&1;
           HEAP8[$7>>0] = $1210;
           $1211 = ($1204&255) >>> 7;
           HEAP8[$10>>0] = $1211;
           $1212 = $1208 ^ $1211;
           HEAP8[$11>>0] = $1212;
           $cycle$6 = 1;$new_pc$5 = $33;
           break L5;
           break;
          }
          case 37901: case 37900:  {
           $1213 = $31 >>> 3;
           $1214 = $1213 & 62;
           $1215 = $25 & 1;
           $1216 = $1214 | $1215;
           $1217 = (($avr$idx25$val) + ($33)|0);
           $1218 = HEAP8[$1217>>0]|0;
           $1219 = $1218&255;
           $1220 = (($23) + 3)|0;
           $1221 = (($avr$idx25$val) + ($1220)|0);
           $1222 = HEAP8[$1221>>0]|0;
           $1223 = $1222&255;
           $1224 = $1223 << 8;
           $1225 = $1216 << 16;
           $1226 = $1219 | $1225;
           $1227 = $1226 | $1224;
           $1228 = $1227 << 1;
           $cycle$6 = 3;$new_pc$5 = $1228;
           break L5;
           break;
          }
          case 37903: case 37902:  {
           $1229 = $31 >>> 3;
           $1230 = $1229 & 62;
           $1231 = $25 & 1;
           $1232 = $1230 | $1231;
           $1233 = (($avr$idx25$val) + ($33)|0);
           $1234 = HEAP8[$1233>>0]|0;
           $1235 = $1234&255;
           $1236 = (($23) + 3)|0;
           $1237 = (($avr$idx25$val) + ($1236)|0);
           $1238 = HEAP8[$1237>>0]|0;
           $1239 = $1238&255;
           $1240 = $1239 << 8;
           $1241 = $1232 << 16;
           $1242 = $1235 | $1241;
           $1243 = $1242 | $1240;
           $1244 = (($23) + 4)|0;
           $1245 = (__avr_push_addr($avr,$1244)|0);
           $1246 = (($1245) + 2)|0;
           $1247 = $1243 << 1;
           $cycle$6 = $1246;$new_pc$5 = $1247;
           break L5;
           break;
          }
          default: {
           switch ($30|0) {
           case 38400:  {
            $1248 = $25 >>> 3;
            $1249 = $1248 & 6;
            $1250 = $1249 | 24;
            $1251 = $25 >>> 2;
            $1252 = $1251 & 48;
            $1253 = $25 & 15;
            $1254 = $1252 | $1253;
            $1255 = HEAP32[$5>>2]|0;
            $1256 = (($1255) + ($1250)|0);
            $1257 = HEAP8[$1256>>0]|0;
            $1258 = $1257&255;
            $1259 = $1248 | 25;
            $1260 = (($1255) + ($1259)|0);
            $1261 = HEAP8[$1260>>0]|0;
            $1262 = $1261&255;
            $1263 = $1262 << 8;
            $1264 = $1263 | $1258;
            $1265 = (($1264) + ($1254))|0;
            $1266 = $1265&65535;
            $1267 = $1250&65535;
            $1268 = $1259&65535;
            $1269 = ($1266&65535) >>> 8;
            $1270 = $1269&255;
            __avr_set_r($avr,$1268,$1270);
            $1271 = $1265&255;
            __avr_set_r($avr,$1267,$1271);
            $1272 = $1263 ^ 32768;
            $1273 = $1265 & $1272;
            $1274 = $1273 >>> 15;
            $1275 = $1274 & 1;
            $1276 = $1275&255;
            HEAP8[$9>>0] = $1276;
            $1277 = $1265 ^ 32768;
            $1278 = $1277 & $1263;
            $1279 = $1278 >>> 15;
            $1280 = $1279&255;
            HEAP8[$6>>0] = $1280;
            $1281 = ($1266<<16>>16)==(0);
            $1282 = $1281&1;
            HEAP8[$7>>0] = $1282;
            $1283 = ($1266&65535) >>> 15;
            $1284 = $1283&255;
            HEAP8[$10>>0] = $1284;
            $1285 = $1283&65535;
            $1286 = $1275 ^ $1285;
            $1287 = $1286&255;
            HEAP8[$11>>0] = $1287;
            $cycle$6 = 2;$new_pc$5 = $33;
            break L5;
            break;
           }
           case 38656:  {
            $1288 = $25 >>> 3;
            $1289 = $1288 & 6;
            $1290 = $1289 | 24;
            $1291 = $25 >>> 2;
            $1292 = $1291 & 48;
            $1293 = $25 & 15;
            $1294 = $1292 | $1293;
            $1295 = HEAP32[$5>>2]|0;
            $1296 = (($1295) + ($1290)|0);
            $1297 = HEAP8[$1296>>0]|0;
            $1298 = $1297&255;
            $1299 = $1288 | 25;
            $1300 = (($1295) + ($1299)|0);
            $1301 = HEAP8[$1300>>0]|0;
            $1302 = $1301&255;
            $1303 = $1302 << 8;
            $1304 = $1303 | $1298;
            $1305 = (($1304) - ($1294))|0;
            $1306 = $1305&65535;
            $1307 = $1290&65535;
            $1308 = $1299&65535;
            $1309 = ($1306&65535) >>> 8;
            $1310 = $1309&255;
            __avr_set_r($avr,$1308,$1310);
            $1311 = $1305&255;
            __avr_set_r($avr,$1307,$1311);
            $1312 = $1305 ^ 32768;
            $1313 = $1312 & $1303;
            $1314 = $1313 >>> 15;
            $1315 = $1314&255;
            HEAP8[$9>>0] = $1315;
            $1316 = $1303 & 32768;
            $1317 = $1316 ^ 32768;
            $1318 = $1317 & $1305;
            $1319 = $1318 >>> 15;
            $1320 = $1319 & 1;
            $1321 = $1320&255;
            HEAP8[$6>>0] = $1321;
            $1322 = ($1306<<16>>16)==(0);
            $1323 = $1322&1;
            HEAP8[$7>>0] = $1323;
            $1324 = ($1306&65535) >>> 15;
            $1325 = $1324&255;
            HEAP8[$10>>0] = $1325;
            $1326 = $1324&65535;
            $1327 = $1314 ^ $1326;
            $1328 = $1327&255;
            HEAP8[$11>>0] = $1328;
            $cycle$6 = 2;$new_pc$5 = $33;
            break L5;
            break;
           }
           case 38912:  {
            $1329 = $25 >>> 3;
            $1330 = $1329 | 32;
            $1331 = $25 & 7;
            $1332 = 1 << $1331;
            $1333 = $1330&65535;
            $1334 = $1333 & 63;
            $1335 = (__avr_get_ram($avr,$1334)|0);
            $1336 = $1335&255;
            $1337 = $1332 ^ 255;
            $1338 = $1336 & $1337;
            $1339 = $1338&255;
            __avr_set_r($avr,$1334,$1339);
            $cycle$6 = 2;$new_pc$5 = $33;
            break L5;
            break;
           }
           case 39168:  {
            $1340 = $25 >>> 3;
            $1341 = $1340 | 32;
            $1342 = $25 & 7;
            $1343 = 1 << $1342;
            $1344 = $1341&65535;
            $1345 = $1344 & 63;
            $1346 = (__avr_get_ram($avr,$1345)|0);
            $1347 = $1346&255;
            $1348 = $1347 & $1343;
            $1349 = ($1348|0)==(0);
            if (!($1349)) {
             $cycle$6 = 1;$new_pc$5 = $33;
             break L5;
            }
            $avr$idx28$val = HEAP32[$avr$idx25>>2]|0;
            $1350 = (($avr$idx28$val) + ($33)|0);
            $1351 = HEAP8[$1350>>0]|0;
            $1352 = $1351&255;
            $1353 = (($23) + 3)|0;
            $1354 = (($avr$idx28$val) + ($1353)|0);
            $1355 = HEAP8[$1354>>0]|0;
            $1356 = $1355&255;
            $1357 = $1356 << 8;
            $1358 = $1357 | $1352;
            $1359 = $1358 & 64527;
            switch ($1359|0) {
            case 37903: case 37902: case 37901: case 37900: case 36864:  {
             $1360 = (($23) + 6)|0;
             $cycle$6 = 3;$new_pc$5 = $1360;
             break L5;
             break;
            }
            default: {
             $1361 = (($23) + 4)|0;
             $cycle$6 = 2;$new_pc$5 = $1361;
             break L5;
            }
            }
            break;
           }
           case 39424:  {
            $1362 = $25 >>> 3;
            $1363 = $1362 | 32;
            $1364 = $25 & 7;
            $1365 = 1 << $1364;
            $1366 = $1363&65535;
            $1367 = $1366 & 63;
            $1368 = (__avr_get_ram($avr,$1367)|0);
            $1369 = $1368&255;
            $1370 = $1369 | $1365;
            $1371 = $1370&255;
            __avr_set_r($avr,$1367,$1371);
            $cycle$6 = 2;$new_pc$5 = $33;
            break L5;
            break;
           }
           case 39680:  {
            $1372 = $25 >>> 3;
            $1373 = $1372 | 32;
            $1374 = $25 & 7;
            $1375 = 1 << $1374;
            $1376 = $1373&65535;
            $1377 = $1376 & 63;
            $1378 = (__avr_get_ram($avr,$1377)|0);
            $1379 = $1378&255;
            $1380 = $1379 & $1375;
            $1381 = ($1380|0)==(0);
            if ($1381) {
             $cycle$6 = 1;$new_pc$5 = $33;
             break L5;
            }
            $avr$idx27$val = HEAP32[$avr$idx25>>2]|0;
            $1382 = (($avr$idx27$val) + ($33)|0);
            $1383 = HEAP8[$1382>>0]|0;
            $1384 = $1383&255;
            $1385 = (($23) + 3)|0;
            $1386 = (($avr$idx27$val) + ($1385)|0);
            $1387 = HEAP8[$1386>>0]|0;
            $1388 = $1387&255;
            $1389 = $1388 << 8;
            $1390 = $1389 | $1384;
            $1391 = $1390 & 64527;
            switch ($1391|0) {
            case 37903: case 37902: case 37901: case 37900: case 36864:  {
             $1392 = (($23) + 6)|0;
             $cycle$6 = 3;$new_pc$5 = $1392;
             break L5;
             break;
            }
            default: {
             $1393 = (($23) + 4)|0;
             $cycle$6 = 2;$new_pc$5 = $1393;
             break L5;
            }
            }
            break;
           }
           default: {
            $1394 = $30 & 64512;
            $cond = ($1394|0)==(39936);
            if ($cond) {
             $1395 = $29 << 3;
             $1396 = $1395 & 16;
             $1397 = $25 & 15;
             $1398 = $1396 | $1397;
             $1399 = $31 >>> 4;
             $1400 = $1399 & 31;
             $1401 = HEAP32[$5>>2]|0;
             $1402 = (($1401) + ($1400)|0);
             $1403 = HEAP8[$1402>>0]|0;
             $1404 = (($1401) + ($1398)|0);
             $1405 = HEAP8[$1404>>0]|0;
             $1406 = $1403&255;
             $1407 = $1405&255;
             $1408 = Math_imul($1407, $1406)|0;
             $1409 = $1408&65535;
             $1410 = $1408&255;
             HEAP8[$1401>>0] = $1410;
             $1411 = ($1409&65535) >>> 8;
             $1412 = $1411&255;
             $1413 = HEAP32[$5>>2]|0;
             $1414 = ((($1413)) + 1|0);
             HEAP8[$1414>>0] = $1412;
             $1415 = ($1408|0)==(0);
             $1416 = $1415&1;
             HEAP8[$7>>0] = $1416;
             $1417 = $1408 >>> 15;
             $1418 = $1417&255;
             HEAP8[$6>>0] = $1418;
             $cycle$6 = 2;$new_pc$5 = $33;
             break L5;
            } else {
             $1419 = HEAP32[$5>>2]|0;
             $1420 = ((($1419)) + 93|0);
             $1421 = HEAP8[$1420>>0]|0;
             $1422 = $1421&255;
             $1423 = ((($1419)) + 94|0);
             $1424 = HEAP8[$1423>>0]|0;
             $1425 = $1424&255;
             $1426 = $1425 << 8;
             $1427 = $1426 | $1422;
             HEAP32[$vararg_buffer28>>2] = $23;
             $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
             HEAP32[$vararg_ptr31>>2] = $1427;
             $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
             HEAP32[$vararg_ptr32>>2] = $31;
             _avr_global_logger($avr,1,355655,$vararg_buffer28);
             $cycle$6 = 1;$new_pc$5 = $33;
             break L5;
            }
           }
           }
          }
          }
         } while(0);
        }
        }
        $747 = HEAP32[$5>>2]|0;
        $748 = ((($747)) + 93|0);
        $749 = HEAP8[$748>>0]|0;
        $750 = $749&255;
        $751 = ((($747)) + 94|0);
        $752 = HEAP8[$751>>0]|0;
        $753 = $752&255;
        $754 = $753 << 8;
        $755 = $754 | $750;
        $756 = (($755) + 1)|0;
        $757 = $756&65535;
        $758 = HEAP8[$20>>0]|0;
        $759 = ($758<<24>>24)==(0);
        if ($759) {
         $res$0$lcssa$i = 0;$sp$0$lcssa$i = $757;
        } else {
         $i$03$i = 0;$res$02$i = 0;$sp$01$i = $757;
         while(1) {
          $760 = $res$02$i << 8;
          $761 = (__avr_get_ram($avr,$sp$01$i)|0);
          $762 = $761&255;
          $763 = $762 | $760;
          $764 = (($i$03$i) + 1)|0;
          $765 = (($sp$01$i) + 1)<<16>>16;
          $766 = HEAP8[$20>>0]|0;
          $767 = $766&255;
          $768 = ($764|0)<($767|0);
          if ($768) {
           $i$03$i = $764;$res$02$i = $763;$sp$01$i = $765;
          } else {
           $$lcssa = $763;$$lcssa72 = $765;
           break;
          }
         }
         $phitmp$i = $$lcssa << 1;
         $res$0$lcssa$i = $phitmp$i;$sp$0$lcssa$i = $$lcssa72;
        }
        $769 = $sp$0$lcssa$i&65535;
        $770 = (($769) + 65535)|0;
        $771 = $770&65535;
        $772 = $770&255;
        __avr_set_r($avr,93,$772);
        $773 = ($771&65535) >>> 8;
        $774 = $773&255;
        __avr_set_r($avr,94,$774);
        $775 = HEAP8[$20>>0]|0;
        $776 = $775&255;
        $777 = (($776) + 2)|0;
        $cycle$6 = $777;$new_pc$5 = $res$0$lcssa$i;
        break L5;
       } else {
        $switch$split762D = ($34|0)<(45056);
        if ($switch$split762D) {
         switch ($34|0) {
         case 40960:  {
          break L108;
          break;
         }
         default: {
          label = 165;
          break L3;
         }
         }
        }
        switch ($34|0) {
        case 45056:  {
         break;
        }
        default: {
         label = 165;
         break L3;
        }
        }
        $1428 = $30 & 63488;
        switch ($1428|0) {
        case 47104:  {
         $1429 = HEAP32[$5>>2]|0;
         $1430 = $31 >>> 4;
         $1431 = $1430 & 31;
         $1432 = (($1429) + ($1431)|0);
         $1433 = HEAP8[$1432>>0]|0;
         $1434 = $29 << 3;
         $1435 = $1434 & 48;
         $1436 = $25 & 15;
         $1437 = $1435 | $1436;
         $1438 = (($1437) + 32)|0;
         $1439 = $1438&65535;
         __avr_set_r($avr,$1439,$1433);
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
         break;
        }
        case 45056:  {
         $1440 = $29 << 3;
         $1441 = $1440 & 48;
         $1442 = $25 & 15;
         $1443 = $1441 | $1442;
         $1444 = (($1443) + 32)|0;
         $1445 = ($32&65535) >>> 4;
         $1446 = $1445 & 31;
         $1447 = $1444&65535;
         $1448 = (__avr_get_ram($avr,$1447)|0);
         __avr_set_r($avr,$1446,$1448);
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
         break;
        }
        default: {
         $1449 = HEAP32[$5>>2]|0;
         $1450 = ((($1449)) + 93|0);
         $1451 = HEAP8[$1450>>0]|0;
         $1452 = $1451&255;
         $1453 = ((($1449)) + 94|0);
         $1454 = HEAP8[$1453>>0]|0;
         $1455 = $1454&255;
         $1456 = $1455 << 8;
         $1457 = $1456 | $1452;
         HEAP32[$vararg_buffer33>>2] = $23;
         $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
         HEAP32[$vararg_ptr36>>2] = $1457;
         $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
         HEAP32[$vararg_ptr37>>2] = $31;
         _avr_global_logger($avr,1,355655,$vararg_buffer33);
         $cycle$6 = 1;$new_pc$5 = $33;
         break L5;
        }
        }
       }
      } while(0);
      $627 = $31 & 53256;
      switch ($627|0) {
      case 32776:  {
       $656 = HEAP32[$5>>2]|0;
       $657 = ((($656)) + 28|0);
       $658 = HEAP8[$657>>0]|0;
       $659 = $658&255;
       $660 = ((($656)) + 29|0);
       $661 = HEAP8[$660>>0]|0;
       $662 = $661&255;
       $663 = $662 << 8;
       $664 = $663 | $659;
       $665 = $31 >>> 4;
       $666 = $665 & 31;
       $667 = $29 & 32;
       $668 = $29 << 1;
       $669 = $668 & 24;
       $670 = $25 & 7;
       $671 = $667 | $670;
       $672 = $671 | $669;
       $673 = $30 & 512;
       $674 = ($673|0)==(0);
       if ($674) {
        $680 = $666&65535;
        $681 = (($664) + ($672))|0;
        $682 = $681&65535;
        $683 = (__avr_get_ram($avr,$682)|0);
        __avr_set_r($avr,$680,$683);
        $cycle$6 = 2;$new_pc$5 = $33;
        break L5;
       }
       $675 = (($664) + ($672))|0;
       $676 = $675&65535;
       $677 = (($656) + ($666)|0);
       $678 = HEAP8[$677>>0]|0;
       $679 = ($676&65535)<(311);
       if ($679) {
        __avr_set_r($avr,$676,$678);
        $cycle$6 = 2;$new_pc$5 = $33;
        break L5;
       } else {
        _avr_core_watch_write($avr,$676,$678);
        $cycle$6 = 2;$new_pc$5 = $33;
        break L5;
       }
       break;
      }
      case 32768:  {
       $628 = HEAP32[$5>>2]|0;
       $629 = ((($628)) + 30|0);
       $630 = HEAP8[$629>>0]|0;
       $631 = $630&255;
       $632 = ((($628)) + 31|0);
       $633 = HEAP8[$632>>0]|0;
       $634 = $633&255;
       $635 = $634 << 8;
       $636 = $635 | $631;
       $637 = $31 >>> 4;
       $638 = $637 & 31;
       $639 = $29 & 32;
       $640 = $29 << 1;
       $641 = $640 & 24;
       $642 = $25 & 7;
       $643 = $639 | $642;
       $644 = $643 | $641;
       $645 = $30 & 512;
       $646 = ($645|0)==(0);
       if ($646) {
        $652 = $638&65535;
        $653 = (($636) + ($644))|0;
        $654 = $653&65535;
        $655 = (__avr_get_ram($avr,$654)|0);
        __avr_set_r($avr,$652,$655);
        $cycle$6 = 2;$new_pc$5 = $33;
        break L5;
       }
       $647 = (($636) + ($644))|0;
       $648 = $647&65535;
       $649 = (($628) + ($638)|0);
       $650 = HEAP8[$649>>0]|0;
       $651 = ($648&65535)<(311);
       if ($651) {
        __avr_set_r($avr,$648,$650);
        $cycle$6 = 2;$new_pc$5 = $33;
        break L5;
       } else {
        _avr_core_watch_write($avr,$648,$650);
        $cycle$6 = 2;$new_pc$5 = $33;
        break L5;
       }
       break;
      }
      default: {
       $684 = HEAP32[$5>>2]|0;
       $685 = ((($684)) + 93|0);
       $686 = HEAP8[$685>>0]|0;
       $687 = $686&255;
       $688 = ((($684)) + 94|0);
       $689 = HEAP8[$688>>0]|0;
       $690 = $689&255;
       $691 = $690 << 8;
       $692 = $691 | $687;
       HEAP32[$vararg_buffer13>>2] = $23;
       $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
       HEAP32[$vararg_ptr16>>2] = $692;
       $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
       HEAP32[$vararg_ptr17>>2] = $31;
       _avr_global_logger($avr,1,355655,$vararg_buffer13);
       $cycle$6 = 1;$new_pc$5 = $33;
       break L5;
      }
      }
     }
    } while(0);
    $1545 = ($cycle$6|0)<(0);
    $1546 = $1545 << 31 >> 31;
    $1547 = $12;
    $1548 = $1547;
    $1549 = HEAP32[$1548>>2]|0;
    $1550 = (($1547) + 4)|0;
    $1551 = $1550;
    $1552 = HEAP32[$1551>>2]|0;
    $1553 = (_i64Add(($1549|0),($1552|0),($cycle$6|0),($1546|0))|0);
    $1554 = tempRet0;
    $1555 = $12;
    $1556 = $1555;
    HEAP32[$1556>>2] = $1553;
    $1557 = (($1555) + 4)|0;
    $1558 = $1557;
    HEAP32[$1558>>2] = $1554;
    $1559 = HEAP32[$13>>2]|0;
    $1560 = ($1559|0)==(2);
    if (!($1560)) {
     $$2 = $new_pc$5;
     label = 170;
     break;
    }
    $1561 = $14;
    $1562 = $1561;
    $1563 = HEAP32[$1562>>2]|0;
    $1564 = (($1561) + 4)|0;
    $1565 = $1564;
    $1566 = HEAP32[$1565>>2]|0;
    $1567 = ($1566>>>0)>($1546>>>0);
    $1568 = ($1563>>>0)>($cycle$6>>>0);
    $1569 = ($1566|0)==($1546|0);
    $1570 = $1569 & $1568;
    $1571 = $1567 | $1570;
    if (!($1571)) {
     $$2 = $new_pc$5;
     label = 170;
     break;
    }
    $1572 = HEAP8[$15>>0]|0;
    $1573 = ($1572<<24>>24)==(0);
    if (!($1573)) {
     $$2 = $new_pc$5;
     label = 170;
     break;
    }
    $1574 = (_i64Subtract(($1563|0),($1566|0),($cycle$6|0),($1546|0))|0);
    $1575 = tempRet0;
    $1576 = $14;
    $1577 = $1576;
    HEAP32[$1577>>2] = $1574;
    $1578 = (($1576) + 4)|0;
    $1579 = $1578;
    HEAP32[$1579>>2] = $1575;
    HEAP32[$0>>2] = $new_pc$5;
    $1580 = HEAP32[$2>>2]|0;
    $1581 = ($new_pc$5>>>0)<($1580>>>0);
    if ($1581) {
     $23 = $new_pc$5;
    } else {
     break L1;
    }
   }
   if ((label|0) == 22) {
    // unreachable;
   }
   else if ((label|0) == 165) {
    // unreachable;
   }
   else if ((label|0) == 170) {
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 _avr_sadly_crashed($avr,0);
 $$2 = 0;
 STACKTOP = sp;return ($$2|0);
}
function _avr_init_irq($pool,$irq,$base,$count,$names) {
 $pool = $pool|0;
 $irq = $irq|0;
 $base = $base|0;
 $count = $count|0;
 $names = $names|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$us5 = 0, $$pre1$i = 0, $$pre1$i$us4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0;
 var $exitcond9 = 0, $i$01 = 0, $i$01$us = 0, $i$01$us2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($count*24)|0;
 _memset(($irq|0),0,($0|0))|0;
 $1 = ($count|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ($pool|0)==(0|0);
 $3 = ($names|0)==(0|0);
 $4 = ((($pool)) + 4|0);
 if ($2) {
  $i$01$us = 0;
  while(1) {
   $5 = (($i$01$us) + ($base))|0;
   $6 = (((($irq) + (($i$01$us*24)|0)|0)) + 8|0);
   HEAP32[$6>>2] = $5;
   $7 = (((($irq) + (($i$01$us*24)|0)|0)) + 16|0);
   HEAP8[$7>>0] = 8;
   if ($3) {
    label = 6;
   } else {
    $8 = (($names) + ($i$01$us<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     label = 6;
    } else {
     $11 = (___strdup($9)|0);
     $12 = (((($irq) + (($i$01$us*24)|0)|0)) + 4|0);
     HEAP32[$12>>2] = $11;
    }
   }
   if ((label|0) == 6) {
    label = 0;
    HEAP32[$vararg_buffer>>2] = 355753;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $5;
    (_printf(355712,$vararg_buffer)|0);
   }
   $13 = (($i$01$us) + 1)|0;
   $exitcond = ($13|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $i$01$us = $13;
   }
  }
  STACKTOP = sp;return;
 }
 if ($3) {
  $i$01$us2 = 0;
  while(1) {
   $14 = (($i$01$us2) + ($base))|0;
   $15 = (((($irq) + (($i$01$us2*24)|0)|0)) + 8|0);
   HEAP32[$15>>2] = $14;
   $16 = (((($irq) + (($i$01$us2*24)|0)|0)) + 16|0);
   HEAP8[$16>>0] = 8;
   $17 = (($irq) + (($i$01$us2*24)|0)|0);
   $18 = HEAP32[$pool>>2]|0;
   $19 = $18 & 15;
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = HEAP32[$4>>2]|0;
    $22 = $18 << 2;
    $23 = (($22) + 64)|0;
    $24 = (_realloc($21,$23)|0);
    HEAP32[$4>>2] = $24;
    $$pre$i$us5 = HEAP32[$pool>>2]|0;
    $$pre = HEAP32[$15>>2]|0;
    $26 = $$pre$i$us5;$28 = $24;$29 = $$pre;
   } else {
    $$pre1$i$us4 = HEAP32[$4>>2]|0;
    $26 = $18;$28 = $$pre1$i$us4;$29 = $14;
   }
   $25 = (($26) + 1)|0;
   HEAP32[$pool>>2] = $25;
   $27 = (($28) + ($26<<2)|0);
   HEAP32[$27>>2] = $17;
   HEAP32[$17>>2] = $pool;
   HEAP32[$vararg_buffer2>>2] = 355753;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $29;
   (_printf(355712,$vararg_buffer2)|0);
   $30 = (($i$01$us2) + 1)|0;
   $exitcond9 = ($30|0)==($count|0);
   if ($exitcond9) {
    break;
   } else {
    $i$01$us2 = $30;
   }
  }
  STACKTOP = sp;return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $31 = (($i$01) + ($base))|0;
  $32 = (((($irq) + (($i$01*24)|0)|0)) + 8|0);
  HEAP32[$32>>2] = $31;
  $33 = (((($irq) + (($i$01*24)|0)|0)) + 16|0);
  HEAP8[$33>>0] = 8;
  $34 = (($irq) + (($i$01*24)|0)|0);
  $35 = HEAP32[$pool>>2]|0;
  $36 = $35 & 15;
  $37 = ($36|0)==(0);
  if ($37) {
   $38 = HEAP32[$4>>2]|0;
   $39 = $35 << 2;
   $40 = (($39) + 64)|0;
   $41 = (_realloc($38,$40)|0);
   HEAP32[$4>>2] = $41;
   $$pre$i = HEAP32[$pool>>2]|0;
   $43 = $$pre$i;$45 = $41;
  } else {
   $$pre1$i = HEAP32[$4>>2]|0;
   $43 = $35;$45 = $$pre1$i;
  }
  $42 = (($43) + 1)|0;
  HEAP32[$pool>>2] = $42;
  $44 = (($45) + ($43<<2)|0);
  HEAP32[$44>>2] = $34;
  HEAP32[$34>>2] = $pool;
  $46 = (($names) + ($i$01<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if ($48) {
   $51 = HEAP32[$32>>2]|0;
   HEAP32[$vararg_buffer6>>2] = 355753;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $51;
   (_printf(355712,$vararg_buffer6)|0);
  } else {
   $49 = (___strdup($47)|0);
   $50 = (((($irq) + (($i$01*24)|0)|0)) + 4|0);
   HEAP32[$50>>2] = $49;
  }
  $52 = (($i$01) + 1)|0;
  $exitcond10 = ($52|0)==($count|0);
  if ($exitcond10) {
   break;
  } else {
   $i$01 = $52;
  }
 }
 STACKTOP = sp;return;
}
function _avr_alloc_irq($pool,$base,$count,$names) {
 $pool = $pool|0;
 $base = $base|0;
 $count = $count|0;
 $names = $names|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count*24)|0;
 $1 = (_malloc($0)|0);
 _avr_init_irq($pool,$1,$base,$count,$names);
 $2 = ($count|0)==(0);
 if ($2) {
  return ($1|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $3 = (((($1) + (($i$01*24)|0)|0)) + 16|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 | 4;
  $7 = $6&255;
  HEAP8[$3>>0] = $7;
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 return ($1|0);
}
function _avr_free_irq($irq,$count) {
 $irq = $irq|0;
 $count = $count|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $hook$03 = 0, $i$01$i = 0, $i$04 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($irq|0)!=(0|0);
 $1 = ($count|0)!=(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $i$04 = 0;
 } else {
  return;
 }
 while(1) {
  $6 = (($irq) + (($i$04*24)|0)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  L5: do {
   if (!($8)) {
    $9 = HEAP32[$7>>2]|0;
    $10 = ($9|0)>(0);
    if ($10) {
     $11 = ((($7)) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $i$01$i = 0;
     while(1) {
      $15 = (($12) + ($i$01$i<<2)|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($16|0)==($6|0);
      $13 = (($i$01$i) + 1)|0;
      if ($17) {
       $$lcssa = $15;
       break;
      }
      $14 = ($13|0)<($9|0);
      if ($14) {
       $i$01$i = $13;
      } else {
       break L5;
      }
     }
     HEAP32[$$lcssa>>2] = 0;
    }
   }
  } while(0);
  $18 = (((($irq) + (($i$04*24)|0)|0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
  }
  HEAP32[$18>>2] = 0;
  $21 = (((($irq) + (($i$04*24)|0)|0)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $hook$03 = $22;
   while(1) {
    $24 = HEAP32[$hook$03>>2]|0;
    _free($hook$03);
    $25 = ($24|0)==(0|0);
    if ($25) {
     break;
    } else {
     $hook$03 = $24;
    }
   }
  }
  HEAP32[$21>>2] = 0;
  $26 = (($i$04) + 1)|0;
  $exitcond = ($26|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$04 = $26;
  }
 }
 $2 = ((($irq)) + 16|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 4;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  return;
 }
 _free($irq);
 return;
}
function _avr_irq_register_notify($irq,$notify,$param) {
 $irq = $irq|0;
 $notify = $notify|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hook$0 = 0, $hook$02 = 0, $hook$03 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($irq|0)!=(0|0);
 $1 = ($notify|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  return;
 }
 $2 = ((($irq)) + 20|0);
 $hook$02 = HEAP32[$2>>2]|0;
 $3 = ($hook$02|0)==(0|0);
 $4 = $hook$02;
 L4: do {
  if (!($3)) {
   $hook$03 = $hook$02;
   while(1) {
    $5 = ((($hook$03)) + 12|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($notify|0);
    if ($7) {
     $8 = ((($hook$03)) + 16|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==($param|0);
     if ($10) {
      break;
     }
    }
    $hook$0 = HEAP32[$hook$03>>2]|0;
    $11 = ($hook$0|0)==(0|0);
    if ($11) {
     break L4;
    } else {
     $hook$03 = $hook$0;
    }
   }
   return;
  }
 } while(0);
 $12 = (_malloc(20)|0);
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 HEAP32[$12>>2] = $4;
 HEAP32[$2>>2] = $12;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = $notify;
 $14 = ((($12)) + 16|0);
 HEAP32[$14>>2] = $param;
 return;
}
function _avr_raise_irq($irq,$value) {
 $irq = $irq|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hook$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($irq|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($irq)) + 16|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ($value|0)==(0);
 $6 = $5&1;
 $7 = $4 ? $value : $6;
 $8 = ((($irq)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($7|0);
 $11 = $2 & 10;
 $12 = ($11<<24>>24)==(2);
 $or$cond = $12 & $10;
 if ($or$cond) {
  return;
 }
 $13 = $2&255;
 $14 = $13 & 247;
 $15 = $14&255;
 HEAP8[$1>>0] = $15;
 $16 = ((($irq)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $hook$03 = $17;
  while(1) {
   $19 = HEAP32[$hook$03>>2]|0;
   $20 = ((($hook$03)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP32[$20>>2] = 1;
    $23 = ((($hook$03)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if (!($25)) {
     $26 = ((($hook$03)) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_viii[$24 & 255]($irq,$7,$27);
    }
    $28 = ((($hook$03)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     _avr_raise_irq($29,$7);
    }
    $31 = HEAP32[$20>>2]|0;
    $32 = (($31) + -1)|0;
    HEAP32[$20>>2] = $32;
   }
   $33 = ($19|0)==(0|0);
   if ($33) {
    break;
   } else {
    $hook$03 = $19;
   }
  }
 }
 HEAP32[$8>>2] = $7;
 return;
}
function _avr_connect_irq($src,$dst) {
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hook$0 = 0, $hook$03 = 0, $hook$04 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $notlhs = ($src|0)==(0|0);
 $notrhs = ($dst|0)==(0|0);
 $or$cond$not = $notlhs | $notrhs;
 $0 = ($src|0)==($dst|0);
 $or$cond2 = $0 | $or$cond$not;
 if ($or$cond2) {
  $1 = HEAP32[87820]|0;
  HEAP32[$vararg_buffer>>2] = 355794;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $src;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $dst;
  (_fprintf($1,355766,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $2 = ((($src)) + 20|0);
 $hook$03 = HEAP32[$2>>2]|0;
 $3 = ($hook$03|0)==(0|0);
 $4 = $hook$03;
 L5: do {
  if (!($3)) {
   $hook$04 = $hook$03;
   while(1) {
    $6 = ((($hook$04)) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==($dst|0);
    if ($8) {
     break;
    }
    $hook$0 = HEAP32[$hook$04>>2]|0;
    $5 = ($hook$0|0)==(0|0);
    if ($5) {
     break L5;
    } else {
     $hook$04 = $hook$0;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $9 = (_malloc(20)|0);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;
 HEAP32[$9>>2] = $4;
 HEAP32[$2>>2] = $9;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $dst;
 STACKTOP = sp;return;
}
function _avr_lin_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 64|0);
 _avr_uart_init($avr,$0);
 dest=$p; src=350296; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1 = ((($p)) + 40|0);
 $2 = HEAP16[$1>>1]|0;
 _avr_register_io_write($avr,$2,93,$p);
 $3 = ((($p)) + 44|0);
 $4 = HEAP16[$3>>1]|0;
 _avr_register_io_write($avr,$4,93,$p);
 return;
}
function _avr_lin_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($port)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _avr_global_logger($1,3,355814,$vararg_buffer);
 $2 = ((($port)) + 64|0);
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 255]($2);
 $5 = ((($port)) + 40|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ((($1)) + 5892|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7)|0);
 HEAP8[$10>>0] = 32;
 STACKTOP = sp;return;
}
function _avr_lin_baud_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$0 = 0, $$0$i1 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr3 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($param)) + 40|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($param)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 511;
 $6 = ($2|0)==($5|0);
 if ($6) {
  $7 = ((($param)) + 56|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 511;
  $10 = ($2|0)==($9|0);
  if ($10) {
   $11 = $addr&65535;
   $12 = $v&255;
   HEAP32[$vararg_buffer1>>2] = $11;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $12;
   _avr_global_logger($avr,3,355875,$vararg_buffer1);
   $13 = HEAP32[$3>>2]|0;
   $14 = $13 & 511;
   $15 = ($11|0)==($14|0);
   if ($15) {
    $16 = ((($param)) + 48|0);
    $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
    $18 = $17 & 511;
    $19 = ($18|0)==(0);
    if (!($19)) {
     $20 = ((($avr)) + 5892|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($21) + ($18)|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = $17 >>> 9;
     $26 = $25 & 7;
     $27 = $24 >>> $26;
     $28 = $17 >>> 12;
     $29 = $27 & $28;
     $30 = ($29|0)==(0);
     if (!($30)) {
      _avr_global_logger($avr,2,355899,$vararg_buffer4);
      STACKTOP = sp;return;
     }
    }
    $31 = $13 >>> 9;
    $32 = $31 & 7;
    $33 = $12 >>> $32;
    $34 = $13 >>> 12;
    $35 = $34 & 255;
    $36 = $35 & $33;
    $37 = ($36|0)==(0);
    if ($37) {
     $$0 = 32;
    } else {
     $38 = HEAP32[$7>>2]|0;
     $39 = $38 >>> 9;
     $40 = $39 & 7;
     $41 = $12 >>> $40;
     $42 = $38 >>> 12;
     $43 = $41 & $42;
     $44 = 1 << $32;
     $45 = $43 << $40;
     $46 = $45 | $44;
     $47 = $46&255;
     $48 = $46 & 255;
     HEAP32[$vararg_buffer6>>2] = $12;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $43;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = $48;
     _avr_global_logger($avr,3,355935,$vararg_buffer6);
     $$0 = $47;
    }
   } else {
    $$0 = $v;
   }
   _avr_core_watch_write($avr,$addr,$$0);
   $49 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
   $50 = $49 & 511;
   $51 = ($50|0)==(0);
   $$phi$trans$insert = ((($avr)) + 5892|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($51) {
    $$0$i1 = 0;
   } else {
    $52 = (($$pre) + ($50)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $49 >>> 9;
    $56 = $55 & 7;
    $57 = $54 >>> $56;
    $58 = $49 >>> 12;
    $59 = $57 & $58;
    $$0$i1 = $59;
   }
   $60 = ((($param)) + 42|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = (($$pre) + ($62)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $65 << 8;
   $67 = ((($param)) + 44|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = (($$pre) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $72 | $66;
   HEAP32[$vararg_buffer11>>2] = $$0$i1;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $73;
   _avr_global_logger($avr,3,355978,$vararg_buffer11);
   $74 = ((($avr)) + 40|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 1)|0;
   $77 = Math_imul($76, $$0$i1)|0;
   $78 = (($75>>>0) / ($77>>>0))&-1;
   HEAP32[$vararg_buffer15>>2] = $$0$i1;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $73;
   $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
   HEAP32[$vararg_ptr19>>2] = $78;
   _avr_global_logger($avr,3,356011,$vararg_buffer15);
   $79 = (($78>>>0) / 11)&-1;
   $80 = (1000000 / ($79>>>0))&-1;
   $81 = ((($param)) + 416|0);
   $82 = $81;
   $83 = $82;
   HEAP32[$83>>2] = $80;
   $84 = (($82) + 4)|0;
   $85 = $84;
   HEAP32[$85>>2] = 0;
   HEAP32[$vararg_buffer20>>2] = $80;
   _avr_global_logger($avr,3,356070,$vararg_buffer20);
   STACKTOP = sp;return;
  }
 }
 _avr_global_logger($avr,1,355832,$vararg_buffer);
 STACKTOP = sp;return;
}
function _avr_flash_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=350336; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($p)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($p)) + 52|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $6 = (_malloc($5)|0);
  HEAP32[$0>>2] = $6;
 }
 $7 = ((($p)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = ((($p)) + 52|0);
  $11 = HEAP16[$10>>1]|0;
  $div = ($11&65535) >>> 1;
  $12 = $div&65535;
  $13 = (_malloc($12)|0);
  HEAP32[$7>>2] = $13;
 }
 _avr_register_io($avr,$p);
 $14 = ((($p)) + 80|0);
 _avr_register_vector($avr,$14);
 $15 = ((($p)) + 54|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 _avr_register_io_write($avr,$17,94,$p);
 return;
}
function _avr_flash_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div$i = 0, $i$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 52|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1&65535)>(1);
 if (!($2)) {
  return;
 }
 $3 = ((($port)) + 44|0);
 $4 = ((($port)) + 48|0);
 $i$02$i = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = (($5) + ($i$02$i<<1)|0);
  HEAP16[$6>>1] = 255;
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($i$02$i)|0);
  HEAP8[$8>>0] = 0;
  $9 = (($i$02$i) + 1)|0;
  $10 = HEAP16[$0>>1]|0;
  $div$i = ($10&65535) >>> 1;
  $11 = $div$i&65535;
  $12 = ($9|0)<($11|0);
  if ($12) {
   $i$02$i = $9;
  } else {
   break;
  }
 }
 return;
}
function _avr_flash_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div = 0, $div$i = 0, $div$i11 = 0, $div1 = 0, $div2 = 0, $i$02$i = 0, $i$02$i10 = 0, $i$026 = 0, $i1$024 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr5 = 0, $z$0 = 0, $z$125 = 0, $z$223 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($ctl|0)==(1718841453);
 if (!($0)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($port)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 5892|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 30|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($4)) + 31|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $11 | $7;
 $13 = ((($2)) + 24|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)==(0);
 if ($15) {
  $z$0 = $12;
 } else {
  $16 = $14&65535;
  $17 = (($4) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 << 16;
  $21 = $20 | $12;
  $z$0 = $21;
 }
 $22 = HEAP8[$4>>0]|0;
 $23 = $22&255;
 $24 = ((($4)) + 1|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 << 8;
 $28 = $27 | $23;
 $29 = $28&65535;
 $30 = ((($port)) + 56|0);
 $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $32 = $31 & 511;
 $33 = ($32|0)==(0);
 L7: do {
  if (!($33)) {
   $34 = (($4) + ($32)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $31 >>> 9;
   $38 = $37 & 7;
   $39 = $36 >>> $38;
   $40 = $31 >>> 12;
   $41 = $39 & $40;
   $42 = ($41|0)==(0);
   if (!($42)) {
    _avr_cycle_timer_cancel($2,95,$port);
    $43 = ((($port)) + 60|0);
    $44 = HEAPU8[$43>>0]|(HEAPU8[$43+1>>0]<<8)|(HEAPU8[$43+2>>0]<<16)|(HEAPU8[$43+3>>0]<<24);
    $45 = $44 & 511;
    $46 = ($45|0)==(0);
    if (!($46)) {
     $47 = HEAP32[$3>>2]|0;
     $48 = (($47) + ($45)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = $44 >>> 9;
     $52 = $51 & 7;
     $53 = $50 >>> $52;
     $54 = $44 >>> 12;
     $55 = $53 & $54;
     $56 = ($55|0)==(0);
     if (!($56)) {
      $57 = $z$0 & -2;
      $58 = ((($port)) + 52|0);
      $59 = HEAP16[$58>>1]|0;
      $60 = $59&65535;
      $61 = (($57>>>0) / ($60>>>0))&-1;
      HEAP32[$vararg_buffer>>2] = $61;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $60;
      _avr_global_logger($2,3,356172,$vararg_buffer);
      $62 = HEAP16[$58>>1]|0;
      $63 = ($62<<16>>16)==(0);
      if ($63) {
       break;
      }
      $64 = ((($2)) + 5888|0);
      $i$026 = 0;$z$125 = $57;
      while(1) {
       $65 = (($z$125) + 1)|0;
       $66 = HEAP32[$64>>2]|0;
       $67 = (($66) + ($z$125)|0);
       HEAP8[$67>>0] = -1;
       $68 = (($i$026) + 1)|0;
       $69 = HEAP16[$58>>1]|0;
       $70 = $69&65535;
       $71 = ($68|0)<($70|0);
       if ($71) {
        $i$026 = $68;$z$125 = $65;
       } else {
        break L7;
       }
      }
     }
    }
    $72 = ((($port)) + 64|0);
    $73 = HEAPU8[$72>>0]|(HEAPU8[$72+1>>0]<<8)|(HEAPU8[$72+2>>0]<<16)|(HEAPU8[$72+3>>0]<<24);
    $74 = $73 & 511;
    $75 = ($74|0)==(0);
    if (!($75)) {
     $76 = HEAP32[$3>>2]|0;
     $77 = (($76) + ($74)|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $80 = $73 >>> 9;
     $81 = $80 & 7;
     $82 = $79 >>> $81;
     $83 = $73 >>> 12;
     $84 = $82 & $83;
     $85 = ($84|0)==(0);
     if (!($85)) {
      $86 = ((($port)) + 52|0);
      $87 = HEAP16[$86>>1]|0;
      $88 = $87&65535;
      $89 = (0 - ($88))|0;
      $90 = $z$0 & $89;
      $91 = (($90>>>0) / ($88>>>0))&-1;
      HEAP32[$vararg_buffer2>>2] = $91;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $88;
      _avr_global_logger($2,3,356203,$vararg_buffer2);
      $92 = HEAP16[$86>>1]|0;
      $93 = ($92&65535)>(1);
      if (!($93)) {
       break;
      }
      $94 = ((($port)) + 44|0);
      $95 = ((($2)) + 5888|0);
      $i1$024 = 0;$z$223 = $90;
      while(1) {
       $107 = HEAP32[$94>>2]|0;
       $108 = (($107) + ($i1$024<<1)|0);
       $109 = HEAP16[$108>>1]|0;
       $110 = $109&255;
       $111 = (($z$223) + 1)|0;
       $112 = HEAP32[$95>>2]|0;
       $113 = (($112) + ($z$223)|0);
       HEAP8[$113>>0] = $110;
       $114 = HEAP32[$94>>2]|0;
       $115 = (($114) + ($i1$024<<1)|0);
       $116 = HEAP16[$115>>1]|0;
       $117 = ($116&65535) >>> 8;
       $118 = $117&255;
       $119 = (($z$223) + 2)|0;
       $120 = HEAP32[$95>>2]|0;
       $121 = (($120) + ($111)|0);
       HEAP8[$121>>0] = $118;
       $122 = (($i1$024) + 1)|0;
       $123 = HEAP16[$86>>1]|0;
       $div2 = ($123&65535) >>> 1;
       $124 = $div2&65535;
       $125 = ($122|0)<($124|0);
       if ($125) {
        $i1$024 = $122;$z$223 = $119;
       } else {
        $$lcssa = $123;
        break;
       }
      }
      $96 = ($$lcssa&65535)>(1);
      if (!($96)) {
       break;
      }
      $97 = ((($port)) + 44|0);
      $98 = ((($port)) + 48|0);
      $i$02$i10 = 0;
      while(1) {
       $99 = HEAP32[$97>>2]|0;
       $100 = (($99) + ($i$02$i10<<1)|0);
       HEAP16[$100>>1] = 255;
       $101 = HEAP32[$98>>2]|0;
       $102 = (($101) + ($i$02$i10)|0);
       HEAP8[$102>>0] = 0;
       $103 = (($i$02$i10) + 1)|0;
       $104 = HEAP16[$86>>1]|0;
       $div$i11 = ($104&65535) >>> 1;
       $105 = $div$i11&65535;
       $106 = ($103|0)<($105|0);
       if ($106) {
        $i$02$i10 = $103;
       } else {
        break L7;
       }
      }
     }
    }
    $126 = ((($port)) + 68|0);
    $127 = HEAPU8[$126>>0]|(HEAPU8[$126+1>>0]<<8)|(HEAPU8[$126+2>>0]<<16)|(HEAPU8[$126+3>>0]<<24);
    $128 = $127 & 511;
    $129 = ($128|0)==(0);
    if (!($129)) {
     $130 = HEAP32[$3>>2]|0;
     $131 = (($130) + ($128)|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = $127 >>> 9;
     $135 = $134 & 7;
     $136 = $133 >>> $135;
     $137 = $127 >>> 12;
     $138 = $136 & $137;
     $139 = ($138|0)==(0);
     if (!($139)) {
      _avr_global_logger($2,3,356234,$vararg_buffer6);
      break;
     }
    }
    $140 = ((($port)) + 40|0);
    $141 = HEAP16[$140>>1]|0;
    $142 = $141 & 1;
    $143 = ($142<<16>>16)==(0);
    if (!($143)) {
     $144 = ((($port)) + 72|0);
     $145 = HEAPU8[$144>>0]|(HEAPU8[$144+1>>0]<<8)|(HEAPU8[$144+2>>0]<<16)|(HEAPU8[$144+3>>0]<<24);
     $146 = $145 & 511;
     $147 = ($146|0)==(0);
     if (!($147)) {
      $148 = HEAP32[$3>>2]|0;
      $149 = (($148) + ($146)|0);
      $150 = HEAP8[$149>>0]|0;
      $151 = $150&255;
      $152 = $145 >>> 9;
      $153 = $152 & 7;
      $154 = $151 >>> $153;
      $155 = $145 >>> 12;
      $156 = $154 & $155;
      $157 = ($156|0)==(0);
      if (!($157)) {
       $158 = ((($port)) + 52|0);
       $159 = HEAP16[$158>>1]|0;
       $160 = ($159&65535)>(1);
       if (!($160)) {
        break;
       }
       $161 = ((($port)) + 44|0);
       $162 = ((($port)) + 48|0);
       $i$02$i = 0;
       while(1) {
        $163 = HEAP32[$161>>2]|0;
        $164 = (($163) + ($i$02$i<<1)|0);
        HEAP16[$164>>1] = 255;
        $165 = HEAP32[$162>>2]|0;
        $166 = (($165) + ($i$02$i)|0);
        HEAP8[$166>>0] = 0;
        $167 = (($i$02$i) + 1)|0;
        $168 = HEAP16[$158>>1]|0;
        $div$i = ($168&65535) >>> 1;
        $169 = $div$i&65535;
        $170 = ($167|0)<($169|0);
        if ($170) {
         $i$02$i = $167;
        } else {
         break L7;
        }
       }
      }
     }
    }
    HEAP32[$vararg_buffer8>>2] = $z$0;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $28;
    _avr_global_logger($2,3,356270,$vararg_buffer8);
    $171 = $z$0 >>> 1;
    $172 = ((($port)) + 52|0);
    $173 = HEAP16[$172>>1]|0;
    $div = ($173&65535) >>> 1;
    $174 = $div&65535;
    $175 = (($171>>>0) % ($174>>>0))&-1;
    $176 = ((($port)) + 48|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($177) + ($175)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = ($179<<24>>24)==(0);
    if ($180) {
     $181 = ((($port)) + 44|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (($182) + ($175<<1)|0);
     HEAP16[$183>>1] = $29;
     $184 = HEAP16[$172>>1]|0;
     $div1 = ($184&65535) >>> 1;
     $185 = $div1&65535;
     $186 = (($171>>>0) % ($185>>>0))&-1;
     $187 = (($177) + ($186)|0);
     HEAP8[$187>>0] = 1;
    }
   }
  }
 } while(0);
 $188 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $189 = $188 & 511;
 $190 = $189&65535;
 $191 = $188 >>> 12;
 $192 = $191 & 255;
 $193 = $188 >>> 9;
 $194 = $193 & 7;
 $195 = $192 << $194;
 $196 = HEAP32[$3>>2]|0;
 $197 = (($196) + ($189)|0);
 $198 = HEAP8[$197>>0]|0;
 $199 = $198&255;
 $200 = $195 ^ 255;
 $201 = $200 & $199;
 $202 = $201&255;
 _avr_core_watch_write($2,$190,$202);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _avr_progen_clear($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = ((($param)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($param)) + 56|0);
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = $5 & 511;
 $7 = $6&65535;
 $8 = $5 >>> 12;
 $9 = $8 & 255;
 $10 = $5 >>> 9;
 $11 = $10 & 7;
 $12 = $9 << $11;
 $13 = ((($3)) + 5892|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($6)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $12 ^ 255;
 $19 = $18 & $17;
 $20 = $19&255;
 _avr_core_watch_write($3,$7,$20);
 _avr_global_logger($avr,2,356108,$vararg_buffer);
 tempRet0 = (0);
 STACKTOP = sp;return 0;
}
function _avr_flash_dealloc($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = ((($port)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 _free($4);
 return;
}
function _avr_flash_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $0 = ((($param)) + 56|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($avr)) + 5892|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $1 >>> 9;
 $10 = $9 & 7;
 $11 = $8 >>> $10;
 $12 = $1 >>> 12;
 $13 = $11 & $12;
 $14 = ($13|0)==(0);
 if ($14) {
  return;
 }
 _avr_cycle_timer_register($avr,4,0,95,$param);
 return;
}
function _avr_twi_reset($io) {
 $io = $io|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($io)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _avr_irq_register_notify($1,96,$io);
 $2 = ((($io)) + 153|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($io)) + 152|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($io)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($io)) + 80|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 511;
 $9 = $8&65535;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  return;
 }
 $11 = $7 >>> 12;
 $12 = $11 & 255;
 $13 = $7 >>> 9;
 $14 = $13 & 7;
 $15 = $12 << $14;
 $16 = ((($5)) + 5892|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($8)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $15 ^ 255;
 $22 = $20 & $21;
 $23 = $15 & 248;
 $24 = $22 | $23;
 $25 = $24&255;
 _avr_core_watch_write($5,$9,$25);
 return;
}
function _avr_twi_irq_input($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($param)) + 60|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($1)) + 5892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $3 >>> 9;
 $12 = $11 & 7;
 $13 = $10 >>> $12;
 $14 = $3 >>> 12;
 $15 = $13 & $14;
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = 356316;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $value;
 _avr_global_logger($1,3,356307,$vararg_buffer);
 $17 = $value >>> 8;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 do {
  if (!($19)) {
   $20 = ((($param)) + 152|0);
   HEAP8[$20>>0] = 0;
   $21 = ((($param)) + 153|0);
   HEAP8[$21>>0] = 0;
   $22 = $17 & 4;
   $23 = ($22|0)==(0);
   if ($23) {
    _avr_global_logger($1,3,356401,$vararg_buffer7);
    break;
   }
   $24 = ((($param)) + 56|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = $25&65535;
   $27 = HEAP32[$6>>2]|0;
   $28 = (($27) + ($26)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $30 >>> 1;
   $32 = $31 ^ 255;
   $33 = $value >>> 16;
   $34 = $33 & 255;
   $35 = ((($param)) + 54|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = (($27) + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 >>> 1;
   HEAP32[$vararg_buffer2>>2] = $34;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $41;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $32;
   _avr_global_logger($1,3,356334,$vararg_buffer2);
   $42 = $32 & $33;
   $43 = $42&255;
   HEAP8[$21>>0] = $43;
   $44 = HEAP16[$35>>1]|0;
   $45 = $44&65535;
   $46 = HEAP32[$6>>2]|0;
   $47 = (($46) + ($45)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $49 >>> 1;
   $51 = $50 & $32;
   $52 = ($42|0)==($51|0);
   if ($52) {
    HEAP8[$20>>0] = 64;
    $53 = $17 & 16;
    $54 = ($53|0)!=(0);
    if (!($54)) {
     $55 = $42 | 1;
     $56 = $55&255;
     HEAP8[$21>>0] = $56;
    }
    $57 = $54 ? 96 : -88;
    $58 = ((($param)) + 154|0);
    HEAP8[$58>>0] = $57;
    $59 = HEAP32[$0>>2]|0;
    _avr_cycle_timer_register_usec($59,9,97,$param);
   }
  }
 } while(0);
 $60 = $17 & 2;
 $61 = ($60|0)==(0);
 if (!($61)) {
  $62 = $17 & 16;
  $63 = ($62|0)!=(0);
  $64 = $63 ? 96 : -88;
  $65 = ((($param)) + 154|0);
  HEAP8[$65>>0] = $64;
  $66 = HEAP32[$0>>2]|0;
  _avr_cycle_timer_register_usec($66,9,97,$param);
 }
 $67 = $17 & 8;
 $68 = ($67|0)==(0);
 do {
  if ($68) {
   $$phi$trans$insert = ((($param)) + 152|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $80 = $$pre;
  } else {
   $69 = $value >>> 24;
   $70 = $69 & 1;
   HEAP32[$vararg_buffer9>>2] = $70;
   _avr_global_logger($1,3,356435,$vararg_buffer9);
   $71 = ($70|0)==(0);
   $72 = ((($param)) + 152|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73&255;
   if ($71) {
    $77 = $74 & 247;
    $78 = $77&255;
    HEAP8[$72>>0] = $78;
    $80 = $78;
    break;
   } else {
    $75 = $74 | 8;
    $76 = $75&255;
    HEAP8[$72>>0] = $76;
    $80 = $76;
    break;
   }
  }
 } while(0);
 $79 = $80 & 64;
 $81 = ($79<<24>>24)==(0);
 if ($81) {
  $93 = $17 & 32;
  $94 = ($93|0)==(0);
  if ($94) {
   STACKTOP = sp;return;
  }
  $95 = $value >>> 24;
  HEAP32[$vararg_buffer12>>2] = $95;
  _avr_global_logger($1,3,356456,$vararg_buffer12);
  $96 = $95&255;
  $97 = ((($param)) + 58|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98&65535;
  $100 = HEAP32[$6>>2]|0;
  $101 = (($100) + ($99)|0);
  HEAP8[$101>>0] = $96;
  STACKTOP = sp;return;
 } else {
  $82 = $17 & 16;
  $83 = ($82|0)==(0);
  if ($83) {
   STACKTOP = sp;return;
  }
  $84 = $value >>> 24;
  $85 = $84&255;
  $86 = ((($param)) + 58|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87&65535;
  $89 = HEAP32[$6>>2]|0;
  $90 = (($89) + ($88)|0);
  HEAP8[$90>>0] = $85;
  $91 = ((($param)) + 154|0);
  HEAP8[$91>>0] = -128;
  $92 = HEAP32[$0>>2]|0;
  _avr_cycle_timer_register_usec($92,9,97,$param);
  STACKTOP = sp;return;
 }
}
function _avr_twi_set_state_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = ((($param)) + 154|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($param)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($param)) + 80|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 511;
 $9 = $8&65535;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $$pre1$i = $3&255;
  $$pre$phi$iZ2D = $$pre1$i;$27 = $5;
 } else {
  $11 = $7 >>> 12;
  $12 = $11 & 255;
  $13 = $7 >>> 9;
  $14 = $13 & 7;
  $15 = $12 << $14;
  $16 = ((($5)) + 5892|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($8)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $15 ^ 255;
  $22 = $20 & $21;
  $23 = $3&255;
  $24 = $15 & $23;
  $25 = $22 | $24;
  $26 = $25&255;
  _avr_core_watch_write($5,$9,$26);
  $$pre$i = HEAP32[$4>>2]|0;
  $$pre$phi$iZ2D = $23;$27 = $$pre$i;
 }
 HEAP32[$vararg_buffer>>2] = 356381;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$pre$phi$iZ2D;
 _avr_global_logger($27,3,356372,$vararg_buffer);
 $28 = ((($param)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 48|0);
 _avr_raise_irq($30,$$pre$phi$iZ2D);
 $31 = HEAP32[$4>>2]|0;
 $32 = ((($param)) + 88|0);
 (_avr_raise_interrupt($31,$32)|0);
 HEAP8[$2>>0] = 0;
 tempRet0 = (0);
 STACKTOP = sp;return 0;
}
function _avr_twi_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 dest=$p; src=350376; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $0 = ((($p)) + 88|0);
 _avr_register_vector($avr,$0);
 $1 = ((($p)) + 40|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = $3 | 1953982720;
 (_avr_io_setirqs($p,$4,3,0)|0);
 $5 = ((($p)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 511;
 $8 = $7&65535;
 _avr_register_io_write($avr,$8,98,$p);
 $9 = ((($p)) + 58|0);
 $10 = HEAP16[$9>>1]|0;
 _avr_register_io_write($avr,$10,99,$p);
 $11 = HEAP16[$9>>1]|0;
 _avr_register_io_read($avr,$11,100,$p);
 $12 = ((($p)) + 80|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 511;
 $15 = $14&65535;
 _avr_register_io_write($avr,$15,101,$p);
 return;
}
function _avr_twi_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$ = 0, $$0$i = 0, $$0$i11 = 0, $$0$i13 = 0, $$0$i19 = 0, $$0$i21 = 0, $$0$i25 = 0, $$0$i26 = 0, $$0$i3 = 0, $$0$i31 = 0, $$0$i5 = 0, $$0$i7 = 0, $$0$i9 = 0, $$mask = 0, $$pre = 0, $$pre$i = 0, $$pre$i29 = 0, $$pre$phi55Z2D = 0, $$pre$phi57Z2D = 0, $$pre56 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $msgv$0 = 0, $phitmp = 0, $twen$0 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr24 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer45 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer = sp;
 $0 = ((($param)) + 60|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0$i = 0;
 } else {
  $4 = ((($avr)) + 5892|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $1 >>> 9;
  $10 = $9 & 7;
  $11 = $8 >>> $10;
  $12 = $1 >>> 12;
  $13 = $11 & $12;
  $14 = $13&255;
  $$0$i = $14;
 }
 $15 = ((($param)) + 68|0);
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $17 = $16 & 511;
 $18 = ($17|0)==(0);
 if ($18) {
  $$0$i3 = 0;
 } else {
  $19 = ((($avr)) + 5892|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $16 >>> 9;
  $25 = $24 & 7;
  $26 = $23 >>> $25;
  $27 = $16 >>> 12;
  $28 = $26 & $27;
  $29 = $28&255;
  $$0$i3 = $29;
 }
 $30 = ((($param)) + 72|0);
 $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $32 = $31 & 511;
 $33 = ($32|0)==(0);
 if ($33) {
  $$0$i5 = 0;
 } else {
  $34 = ((($avr)) + 5892|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $31 >>> 9;
  $40 = $39 & 7;
  $41 = $38 >>> $40;
  $42 = $31 >>> 12;
  $43 = $41 & $42;
  $44 = $43&255;
  $$0$i5 = $44;
 }
 $45 = ((($param)) + 88|0);
 $46 = ((($param)) + 96|0);
 $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
 $48 = $47 & 511;
 $49 = ($48|0)==(0);
 if ($49) {
  $$0$i7 = 0;
 } else {
  $50 = ((($avr)) + 5892|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($48)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $47 >>> 9;
  $56 = $55 & 7;
  $57 = $54 >>> $56;
  $58 = $47 >>> 12;
  $59 = $57 & $58;
  $60 = $59&255;
  $$0$i7 = $60;
 }
 _avr_core_watch_write($avr,$addr,$v);
 $61 = $v&255;
 $62 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $63 = $62 & 511;
 $64 = ($63|0)==(0);
 if ($64) {
  $$0$i9 = 0;
 } else {
  $65 = ((($avr)) + 5892|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($63)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $62 >>> 9;
  $71 = $70 & 7;
  $72 = $69 >>> $71;
  $73 = $62 >>> 12;
  $74 = $72 & $73;
  $$0$i9 = $74;
 }
 $75 = $$0$i9 & 255;
 $76 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $77 = $76 & 511;
 $78 = ($77|0)==(0);
 if ($78) {
  $$0$i11 = 0;
 } else {
  $79 = ((($avr)) + 5892|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + ($77)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $76 >>> 9;
  $85 = $84 & 7;
  $86 = $83 >>> $85;
  $87 = $76 >>> 12;
  $88 = $86 & $87;
  $$0$i11 = $88;
 }
 $89 = $$0$i11 & 255;
 $90 = ((($param)) + 64|0);
 $91 = HEAPU8[$90>>0]|(HEAPU8[$90+1>>0]<<8)|(HEAPU8[$90+2>>0]<<16)|(HEAPU8[$90+3>>0]<<24);
 $92 = $91 & 511;
 $93 = ($92|0)==(0);
 if ($93) {
  $$0$i19 = 0;
 } else {
  $94 = ((($avr)) + 5892|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($92)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $91 >>> 9;
  $100 = $99 & 7;
  $101 = $98 >>> $100;
  $102 = $91 >>> 12;
  $103 = $101 & $102;
  $$0$i19 = $103;
 }
 $104 = $$0$i19 & 255;
 $105 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
 $106 = $105 & 511;
 $107 = ($106|0)==(0);
 if ($107) {
  $$0$i21 = 0;
 } else {
  $108 = ((($avr)) + 5892|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + ($106)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = $105 >>> 9;
  $114 = $113 & 7;
  $115 = $112 >>> $114;
  $116 = $105 >>> 12;
  $117 = $115 & $116;
  $$0$i21 = $117;
 }
 $118 = $$0$i21 & 255;
 $119 = ((($param)) + 80|0);
 $120 = HEAPU8[$119>>0]|(HEAPU8[$119+1>>0]<<8)|(HEAPU8[$119+2>>0]<<16)|(HEAPU8[$119+3>>0]<<24);
 $121 = $120 & 511;
 $122 = ($121|0)==(0);
 if ($122) {
  $$0$i25 = 0;
 } else {
  $123 = ((($param)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($124)) + 5892|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) + ($121)|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $130 = $120 >>> 12;
  $131 = $130 & 255;
  $132 = $120 >>> 9;
  $133 = $132 & 7;
  $134 = $131 << $133;
  $135 = $129 & $134;
  $$0$i25 = $135;
 }
 $136 = $$0$i25 & 255;
 $137 = ((($param)) + 152|0);
 $138 = HEAP8[$137>>0]|0;
 $139 = $138&255;
 HEAP32[$vararg_buffer>>2] = 356569;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $61;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $75;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $89;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $104;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $118;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $136;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $139;
 _avr_global_logger($avr,3,356506,$vararg_buffer);
 $140 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $141 = $140 & 511;
 $142 = ($141|0)==(0);
 if ($142) {
  $$0$i26 = 0;
 } else {
  $143 = ((($avr)) + 5892|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + ($141)|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = $140 >>> 9;
  $149 = $148 & 7;
  $150 = $147 >>> $149;
  $151 = $140 >>> 12;
  $152 = $150 & $151;
  $153 = $152&255;
  $$0$i26 = $153;
 }
 $154 = ($$0$i<<24>>24)==($$0$i26<<24>>24);
 if ($154) {
  $twen$0 = $$0$i;
 } else {
  $155 = ($$0$i<<24>>24)==(0);
  $156 = $155&1;
  if ($155) {
   $$pre56 = ((($avr)) + 5892|0);
   $$pre$phi57Z2D = $$pre56;
  } else {
   $157 = HEAPU8[$90>>0]|(HEAPU8[$90+1>>0]<<8)|(HEAPU8[$90+2>>0]<<16)|(HEAPU8[$90+3>>0]<<24);
   $158 = $157 & 511;
   $159 = $158&65535;
   $160 = $157 >>> 12;
   $161 = $160 & 255;
   $162 = $157 >>> 9;
   $163 = $162 & 7;
   $164 = $161 << $163;
   $165 = ((($avr)) + 5892|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + ($158)|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $164 ^ 255;
   $171 = $170 & $169;
   $172 = $171&255;
   _avr_core_watch_write($avr,$159,$172);
   $173 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
   $174 = $173 & 511;
   $175 = $174&65535;
   $176 = $173 >>> 12;
   $177 = $176 & 255;
   $178 = $173 >>> 9;
   $179 = $178 & 7;
   $180 = $177 << $179;
   $181 = HEAP32[$165>>2]|0;
   $182 = (($181) + ($174)|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = $180 ^ 255;
   $186 = $185 & $184;
   $187 = $186&255;
   _avr_core_watch_write($avr,$175,$187);
   $188 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
   $189 = $188 & 511;
   $190 = $189&65535;
   $191 = $188 >>> 12;
   $192 = $191 & 255;
   $193 = $188 >>> 9;
   $194 = $193 & 7;
   $195 = $192 << $194;
   $196 = HEAP32[$165>>2]|0;
   $197 = (($196) + ($189)|0);
   $198 = HEAP8[$197>>0]|0;
   $199 = $198&255;
   $200 = $195 ^ 255;
   $201 = $200 & $199;
   $202 = $201&255;
   _avr_core_watch_write($avr,$190,$202);
   _avr_clear_interrupt($avr,$45);
   $203 = ((($param)) + 58|0);
   $204 = HEAP16[$203>>1]|0;
   _avr_core_watch_write($avr,$204,-1);
   $205 = ((($param)) + 4|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = HEAPU8[$119>>0]|(HEAPU8[$119+1>>0]<<8)|(HEAPU8[$119+2>>0]<<16)|(HEAPU8[$119+3>>0]<<24);
   $208 = $207 & 511;
   $209 = $208&65535;
   $210 = ($209<<16>>16)==(0);
   if ($210) {
    $226 = $206;
   } else {
    $211 = $207 >>> 12;
    $212 = $211 & 255;
    $213 = $207 >>> 9;
    $214 = $213 & 7;
    $215 = $212 << $214;
    $216 = ((($206)) + 5892|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($217) + ($208)|0);
    $219 = HEAP8[$218>>0]|0;
    $220 = $219&255;
    $221 = $215 ^ 255;
    $222 = $220 & $221;
    $223 = $215 & 248;
    $224 = $222 | $223;
    $225 = $224&255;
    _avr_core_watch_write($206,$209,$225);
    $$pre$i29 = HEAP32[$205>>2]|0;
    $226 = $$pre$i29;
   }
   HEAP32[$vararg_buffer8>>2] = 356381;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 248;
   _avr_global_logger($226,3,356372,$vararg_buffer8);
   $227 = ((($param)) + 24|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($228)) + 48|0);
   _avr_raise_irq($229,248);
   HEAP8[$137>>0] = 0;
   $230 = ((($param)) + 153|0);
   HEAP8[$230>>0] = 0;
   $$pre$phi57Z2D = $165;
  }
  $231 = $155&1;
  HEAP32[$vararg_buffer12>>2] = $231;
  _avr_global_logger($avr,3,356583,$vararg_buffer12);
  $232 = ((($param)) + 54|0);
  $233 = HEAP16[$232>>1]|0;
  $234 = $233&65535;
  $235 = HEAP32[$$pre$phi57Z2D>>2]|0;
  $236 = (($235) + ($234)|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = ($237<<24>>24)==(0);
  if ($238) {
   $twen$0 = $156;
  } else {
   $239 = $237&255;
   $240 = $239 >>> 1;
   $241 = ((($param)) + 56|0);
   $242 = HEAP16[$241>>1]|0;
   $243 = $242&65535;
   $244 = (($235) + ($243)|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = $245&255;
   $247 = $246 >>> 1;
   HEAP32[$vararg_buffer15>>2] = $240;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $247;
   _avr_global_logger($avr,3,356593,$vararg_buffer15);
   $248 = HEAP8[$137>>0]|0;
   $249 = $248&255;
   $250 = $249 | 64;
   $251 = $250&255;
   HEAP8[$137>>0] = $251;
   $twen$0 = $156;
  }
 }
 $252 = ($twen$0<<24>>24)==(0);
 if ($252) {
  STACKTOP = sp;return;
 }
 $253 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
 $254 = $253 & 511;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0$i31 = 0;
 } else {
  $256 = ((($avr)) + 5892|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + ($254)|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&255;
  $261 = $253 >>> 9;
  $262 = $261 & 7;
  $263 = $260 >>> $262;
  $264 = $253 >>> 12;
  $265 = $263 & $264;
  $266 = $265&255;
  $$0$i31 = $266;
 }
 (_avr_clear_interrupt_if($avr,$45,$$0$i7)|0);
 $267 = ($$0$i5<<24>>24)==(0);
 if ($267) {
  $268 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
  $269 = $268 & 511;
  $270 = ($269|0)==(0);
  if (!($270)) {
   $271 = ((($avr)) + 5892|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + ($269)|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = $268 >>> 9;
   $277 = $276 & 7;
   $278 = $275 >>> $277;
   $279 = $268 >>> 12;
   $280 = $278 & $279;
   $281 = ($280|0)==(0);
   if (!($281)) {
    _avr_global_logger($avr,3,356616,$vararg_buffer19);
    $282 = HEAP16[$137>>1]|0;
    $283 = $282 & 1;
    $284 = ($283<<16>>16)==(0);
    if (!($284)) {
     $285 = ($282&65535) >>> 8;
     $286 = $285&65535;
     $287 = ((($param)) + 24|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = ((($288)) + 24|0);
     $290 = $286 << 16;
     $291 = $290 | 16777728;
     _avr_raise_irq($289,$291);
    }
    $292 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
    $293 = $292 & 511;
    $294 = $293&65535;
    $295 = $292 >>> 12;
    $296 = $295 & 255;
    $297 = $292 >>> 9;
    $298 = $297 & 7;
    $299 = $296 << $298;
    $300 = HEAP32[$271>>2]|0;
    $301 = (($300) + ($293)|0);
    $302 = HEAP8[$301>>0]|0;
    $303 = $302&255;
    $304 = $299 ^ 255;
    $305 = $304 & $303;
    $306 = $305&255;
    _avr_core_watch_write($avr,$294,$306);
    $307 = ((($param)) + 4|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAPU8[$119>>0]|(HEAPU8[$119+1>>0]<<8)|(HEAPU8[$119+2>>0]<<16)|(HEAPU8[$119+3>>0]<<24);
    $310 = $309 & 511;
    $311 = $310&65535;
    $312 = ($311<<16>>16)==(0);
    if ($312) {
     $328 = $308;
    } else {
     $313 = $309 >>> 12;
     $314 = $313 & 255;
     $315 = $309 >>> 9;
     $316 = $315 & 7;
     $317 = $314 << $316;
     $318 = ((($308)) + 5892|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = (($319) + ($310)|0);
     $321 = HEAP8[$320>>0]|0;
     $322 = $321&255;
     $323 = $317 ^ 255;
     $324 = $322 & $323;
     $325 = $317 & 248;
     $326 = $324 | $325;
     $327 = $326&255;
     _avr_core_watch_write($308,$311,$327);
     $$pre$i = HEAP32[$307>>2]|0;
     $328 = $$pre$i;
    }
    HEAP32[$vararg_buffer21>>2] = 356381;
    $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
    HEAP32[$vararg_ptr24>>2] = 248;
    _avr_global_logger($328,3,356372,$vararg_buffer21);
    $329 = ((($param)) + 24|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ((($330)) + 48|0);
    _avr_raise_irq($331,248);
    HEAP8[$137>>0] = 0;
   }
  }
 }
 $332 = ($$0$i3<<24>>24)==(0);
 if ($332) {
  $333 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
  $334 = $333 & 511;
  $335 = ($334|0)==(0);
  if (!($335)) {
   $336 = ((($avr)) + 5892|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = (($337) + ($334)|0);
   $339 = HEAP8[$338>>0]|0;
   $340 = $339&255;
   $341 = $333 >>> 9;
   $342 = $341 & 7;
   $343 = $340 >>> $342;
   $344 = $333 >>> 12;
   $345 = $343 & $344;
   $346 = ($345|0)==(0);
   if (!($346)) {
    $347 = HEAP8[$137>>0]|0;
    $348 = $347 & 1;
    $349 = ($348<<24>>24)!=(0);
    $350 = $349 ? 356632 : 361908;
    HEAP32[$vararg_buffer25>>2] = $350;
    _avr_global_logger($avr,3,356635,$vararg_buffer25);
    $351 = HEAP8[$137>>0]|0;
    $352 = $351 & 1;
    $353 = ($352<<24>>24)==(0);
    $354 = ((($param)) + 154|0);
    if ($353) {
     HEAP8[$354>>0] = 8;
     $357 = ((($param)) + 4|0);
     $358 = HEAP32[$357>>2]|0;
     _avr_cycle_timer_register_usec($358,0,97,$param);
    } else {
     HEAP8[$354>>0] = 16;
     $355 = ((($param)) + 4|0);
     $356 = HEAP32[$355>>2]|0;
     _avr_cycle_timer_register_usec($356,0,97,$param);
    }
    $359 = ((($param)) + 153|0);
    HEAP8[$359>>0] = 0;
    HEAP8[$137>>0] = 1;
   }
  }
 }
 $360 = ($$0$i31<<24>>24)==(0);
 if ($360) {
  STACKTOP = sp;return;
 }
 $361 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $362 = $361 & 511;
 $363 = ($362|0)==(0);
 if (!($363)) {
  $364 = ((($avr)) + 5892|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = (($365) + ($362)|0);
  $367 = HEAP8[$366>>0]|0;
  $368 = $367&255;
  $369 = $361 >>> 9;
  $370 = $369 & 7;
  $371 = $368 >>> $370;
  $372 = $361 >>> 12;
  $373 = $371 & $372;
  $374 = ($373|0)==(0);
  if (!($374)) {
   STACKTOP = sp;return;
  }
 }
 $375 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $376 = $375 & 511;
 $377 = ($376|0)==(0);
 if (!($377)) {
  $378 = ((($avr)) + 5892|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = (($379) + ($376)|0);
  $381 = HEAP8[$380>>0]|0;
  $382 = $381&255;
  $383 = $375 >>> 9;
  $384 = $383 & 7;
  $385 = $382 >>> $384;
  $386 = $375 >>> 12;
  $387 = $385 & $386;
  $388 = ($387|0)==(0);
  if (!($388)) {
   STACKTOP = sp;return;
  }
 }
 $389 = ((($param)) + 153|0);
 $390 = HEAP8[$389>>0]|0;
 $391 = $390&255;
 $392 = $391 & 1;
 $393 = HEAPU8[$90>>0]|(HEAPU8[$90+1>>0]<<8)|(HEAPU8[$90+2>>0]<<16)|(HEAPU8[$90+3>>0]<<24);
 $394 = $393 & 511;
 $395 = ($394|0)==(0);
 if ($395) {
  $$0$i13 = 0;
 } else {
  $396 = ((($avr)) + 5892|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = (($397) + ($394)|0);
  $399 = HEAP8[$398>>0]|0;
  $400 = $399&255;
  $401 = $393 >>> 9;
  $402 = $401 & 7;
  $403 = $400 >>> $402;
  $404 = $393 >>> 12;
  $405 = $403 & $404;
  $phitmp = ($405|0)!=(0);
  $$0$i13 = $phitmp;
 }
 $406 = HEAP16[$137>>1]|0;
 $407 = $406&255;
 $$mask = $406 & 255;
 $408 = $$mask&65535;
 $409 = $408 & 64;
 $410 = ($409|0)==(0);
 $411 = $408 & 4;
 $412 = ($411|0)!=(0);
 $413 = ($406&65535) >>> 8;
 $414 = $413&65535;
 if (!($410)) {
  if (!($412)) {
   $460 = $408 | 4;
   $461 = $460&255;
   HEAP8[$137>>0] = $461;
   $462 = ((($param)) + 24|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = ((($463)) + 24|0);
   $465 = $$0$i13 ? 3072 : 1024;
   $466 = $408 << 9;
   $467 = $466 & 8192;
   $468 = $467 | $465;
   $469 = ((($param)) + 58|0);
   $470 = HEAP16[$469>>1]|0;
   $471 = $470&65535;
   $472 = ((($avr)) + 5892|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = (($473) + ($471)|0);
   $475 = HEAP8[$474>>0]|0;
   $476 = $413&65535;
   $477 = $476 << 16;
   $478 = $468 | $477;
   $479 = $475&255;
   $480 = $479 << 24;
   $481 = $478 | $480;
   _avr_raise_irq($464,$481);
   STACKTOP = sp;return;
  }
  $415 = ($392|0)==(0);
  do {
   if ($415) {
    _avr_global_logger($avr,3,356711,$vararg_buffer32);
    $436 = ((($param)) + 24|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = ((($437)) + 24|0);
    $439 = HEAP8[$389>>0]|0;
    $440 = $439&255;
    $441 = $440 << 16;
    $442 = $441 | 2048;
    _avr_raise_irq($438,$442);
    $$pre$phi55Z2D = $436;
   } else {
    _avr_global_logger($avr,3,356654,$vararg_buffer28);
    $416 = HEAP16[$137>>1]|0;
    $417 = $416 & 16;
    $418 = ($417<<16>>16)==(0);
    if ($418) {
     _avr_global_logger($avr,3,356675,$vararg_buffer30);
     $$pre = ((($param)) + 24|0);
     $$pre$phi55Z2D = $$pre;
     break;
    } else {
     $419 = ($416&65535) >>> 8;
     $420 = $419&65535;
     $421 = ((($param)) + 24|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ((($422)) + 24|0);
     $424 = ((($param)) + 58|0);
     $425 = HEAP16[$424>>1]|0;
     $426 = $425&65535;
     $427 = ((($avr)) + 5892|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = (($428) + ($426)|0);
     $430 = HEAP8[$429>>0]|0;
     $431 = $420 << 16;
     $432 = $430&255;
     $433 = $432 << 24;
     $434 = $431 | $433;
     $435 = $434 | 10240;
     _avr_raise_irq($423,$435);
     $$pre$phi55Z2D = $421;
     break;
    }
   }
  } while(0);
  $443 = HEAP32[$$pre$phi55Z2D>>2]|0;
  $444 = ((($443)) + 24|0);
  $445 = HEAP8[$389>>0]|0;
  $446 = ((($param)) + 58|0);
  $447 = HEAP16[$446>>1]|0;
  $448 = $447&65535;
  $449 = ((($avr)) + 5892|0);
  $450 = HEAP32[$449>>2]|0;
  $451 = (($450) + ($448)|0);
  $452 = HEAP8[$451>>0]|0;
  $453 = $$0$i13 ? 3072 : 1024;
  $454 = $445&255;
  $455 = $454 << 16;
  $456 = $455 | $453;
  $457 = $452&255;
  $458 = $457 << 24;
  $459 = $456 | $458;
  _avr_raise_irq($444,$459);
  STACKTOP = sp;return;
 }
 do {
  if ($412) {
   $482 = ($392|0)!=(0);
   if ($482) {
    HEAP32[$vararg_buffer34>>2] = $414;
    _avr_global_logger($avr,3,356733,$vararg_buffer34);
   } else {
    $483 = ((($param)) + 58|0);
    $484 = HEAP16[$483>>1]|0;
    $485 = $484&65535;
    $486 = ((($avr)) + 5892|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = (($487) + ($485)|0);
    $489 = HEAP8[$488>>0]|0;
    $490 = $489&255;
    $491 = $413&65535;
    HEAP32[$vararg_buffer37>>2] = $490;
    $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
    HEAP32[$vararg_ptr40>>2] = $491;
    _avr_global_logger($avr,3,356758,$vararg_buffer37);
   }
   $492 = $392 << 4;
   $493 = (($492) + 16)|0;
   $494 = $493 | 8;
   $$ = $$0$i13 ? $494 : $493;
   $msgv$0 = $$&255;
   $495 = HEAP8[$137>>0]|0;
   $496 = $495&255;
   $497 = $496 & 247;
   $498 = $497&255;
   HEAP8[$137>>0] = $498;
   HEAP32[$vararg_buffer41>>2] = $497;
   $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
   HEAP32[$vararg_ptr44>>2] = $$;
   _avr_global_logger($avr,3,356787,$vararg_buffer41);
   $499 = HEAP16[$137>>1]|0;
   $500 = $499&255;
   $501 = $500 & $msgv$0;
   $502 = ($501<<24>>24)==(0);
   if ($502) {
    _avr_global_logger($avr,3,356675,$vararg_buffer45);
    break;
   }
   $503 = ($499&65535) >>> 8;
   $504 = $503&65535;
   $505 = ((($param)) + 24|0);
   $506 = HEAP32[$505>>2]|0;
   $507 = ((($506)) + 24|0);
   $508 = ((($param)) + 58|0);
   $509 = HEAP16[$508>>1]|0;
   $510 = $509&65535;
   $511 = ((($avr)) + 5892|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = (($512) + ($510)|0);
   $514 = HEAP8[$513>>0]|0;
   $515 = $$ << 8;
   $516 = $504 << 16;
   $517 = $516 | $515;
   $518 = $514&255;
   $519 = $518 << 24;
   $520 = $517 | $519;
   _avr_raise_irq($507,$520);
   if ($482) {
    $521 = $$ & 8;
    $522 = $521 ^ 88;
    $523 = $522&255;
    $524 = ((($param)) + 154|0);
    HEAP8[$524>>0] = $523;
    $525 = ((($param)) + 4|0);
    $526 = HEAP32[$525>>2]|0;
    _avr_cycle_timer_register_usec($526,9,97,$param);
    break;
   } else {
    $527 = HEAP8[$137>>0]|0;
    $528 = $527 & 8;
    $529 = $528&255;
    $530 = $529 ^ 8;
    $531 = (($530) + 40)|0;
    $532 = $531&255;
    $533 = ((($param)) + 154|0);
    HEAP8[$533>>0] = $532;
    $534 = ((($param)) + 4|0);
    $535 = HEAP32[$534>>2]|0;
    _avr_cycle_timer_register_usec($535,9,97,$param);
    break;
   }
  } else {
   $536 = ($407<<24>>24)==(0);
   if ($536) {
    break;
   }
   $537 = ((($param)) + 58|0);
   $538 = HEAP16[$537>>1]|0;
   $539 = $538&65535;
   $540 = ((($avr)) + 5892|0);
   $541 = HEAP32[$540>>2]|0;
   $542 = (($541) + ($539)|0);
   $543 = HEAP8[$542>>0]|0;
   $544 = $543&255;
   HEAP32[$vararg_buffer47>>2] = $544;
   _avr_global_logger($avr,3,356809,$vararg_buffer47);
   $545 = HEAP8[$137>>0]|0;
   $546 = $545&255;
   $547 = $546 | 4;
   $548 = $547&255;
   HEAP8[$137>>0] = $548;
   $549 = HEAP16[$537>>1]|0;
   $550 = $549&65535;
   $551 = HEAP32[$540>>2]|0;
   $552 = (($551) + ($550)|0);
   $553 = HEAP8[$552>>0]|0;
   HEAP8[$389>>0] = $553;
   $554 = $547 & 247;
   $555 = $554&255;
   HEAP8[$137>>0] = $555;
   $556 = ((($param)) + 24|0);
   $557 = HEAP32[$556>>2]|0;
   $558 = ((($557)) + 24|0);
   $559 = $553&255;
   $560 = $559 << 16;
   $561 = $560 | 256;
   _avr_raise_irq($558,$561);
   $562 = HEAP8[$389>>0]|0;
   $563 = $562 & 1;
   $564 = ($563<<24>>24)==(0);
   $565 = HEAP8[$137>>0]|0;
   $566 = $565&255;
   if (!($564)) {
    $567 = $566 | 32;
    $568 = $567&255;
    HEAP8[$137>>0] = $568;
    $569 = $566 & 8;
    $570 = $569 ^ 72;
    $571 = $570&255;
    $572 = ((($param)) + 154|0);
    HEAP8[$572>>0] = $571;
    $573 = ((($param)) + 4|0);
    $574 = HEAP32[$573>>2]|0;
    _avr_cycle_timer_register_usec($574,9,97,$param);
    break;
   }
   $575 = $566 & 16;
   $576 = ($575|0)==(0);
   $577 = $566 & 8;
   $578 = $577 ^ 8;
   if ($576) {
    $584 = (($578) + 24)|0;
    $585 = $584&255;
    $586 = ((($param)) + 154|0);
    HEAP8[$586>>0] = $585;
    $587 = ((($param)) + 4|0);
    $588 = HEAP32[$587>>2]|0;
    _avr_cycle_timer_register_usec($588,9,97,$param);
    break;
   } else {
    $579 = (($578) + 40)|0;
    $580 = $579&255;
    $581 = ((($param)) + 154|0);
    HEAP8[$581>>0] = $580;
    $582 = ((($param)) + 4|0);
    $583 = HEAP32[$582>>2]|0;
    _avr_cycle_timer_register_usec($583,0,97,$param);
    break;
   }
  }
 } while(0);
 $589 = HEAP8[$137>>0]|0;
 $590 = $589&255;
 $591 = $590 & 239;
 $592 = $591&255;
 HEAP8[$137>>0] = $592;
 STACKTOP = sp;return;
}
function _avr_twi_write_data($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $0 = ((($param)) + 152|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 | 16;
 $4 = $3&255;
 HEAP8[$0>>0] = $4;
 return;
}
function _avr_twi_read_data($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 152|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 | 32;
 $4 = $3&255;
 HEAP8[$0>>0] = $4;
 $5 = ((($param)) + 58|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ((($avr)) + 5892|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7)|0);
 $11 = HEAP8[$10>>0]|0;
 return ($11|0);
}
function _avr_twi_write_status($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 80|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0$i = 0;
 } else {
  $4 = ((($avr)) + 5892|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $1 >>> 9;
  $10 = $9 & 7;
  $11 = $8 >>> $10;
  $12 = $1 >>> 12;
  $13 = $11 & $12;
  $$0$i = $13;
 }
 _avr_core_watch_write($avr,$addr,$v);
 $14 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $15 = $14 & 511;
 $16 = $15&65535;
 $17 = ($16<<16>>16)==(0);
 if ($17) {
  return;
 }
 $18 = $14 >>> 12;
 $19 = $18 & 255;
 $20 = $14 >>> 9;
 $21 = $20 & 7;
 $22 = $19 << $21;
 $23 = ((($avr)) + 5892|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($15)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $22 ^ 255;
 $29 = $27 & $28;
 $30 = $$0$i << $21;
 $31 = $30 & $22;
 $32 = $29 | $31;
 $33 = $32&255;
 _avr_core_watch_write($avr,$16,$33);
 return;
}
function _avr_adc_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=350428; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $0 = ((($p)) + 224|0);
 _avr_register_vector($avr,$0);
 (_avr_io_setirqs($p,1633968928,19,0)|0);
 $1 = ((($p)) + 100|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 _avr_register_io_write($avr,$3,102,$p);
 $4 = ((($p)) + 130|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $7 = $5&255;
  _avr_register_io_write($avr,$7,103,$p);
 }
 $8 = ((($p)) + 128|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 _avr_register_io_read($avr,$10,104,$p);
 $11 = ((($p)) + 129|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 _avr_register_io_read($avr,$13,105,$p);
 return;
}
function _avr_adc_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _avr_cycle_timer_cancel($1,106,$port);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($port)) + 108|0);
 $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 $5 = $4 & 511;
 $6 = $5&65535;
 $7 = $4 >>> 12;
 $8 = $7 & 255;
 $9 = $4 >>> 9;
 $10 = $9 & 7;
 $11 = $8 << $10;
 $12 = ((($2)) + 5892|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($5)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $11 ^ 255;
 $18 = $17 & $16;
 $19 = $18&255;
 _avr_core_watch_write($2,$6,$19);
 $20 = ((($port)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 _avr_irq_register_notify($21,107,$port);
 $22 = HEAP32[$20>>2]|0;
 $23 = ((($22)) + 24|0);
 _avr_irq_register_notify($23,107,$port);
 $24 = HEAP32[$20>>2]|0;
 $25 = ((($24)) + 48|0);
 _avr_irq_register_notify($25,107,$port);
 $26 = HEAP32[$20>>2]|0;
 $27 = ((($26)) + 72|0);
 _avr_irq_register_notify($27,107,$port);
 $28 = HEAP32[$20>>2]|0;
 $29 = ((($28)) + 96|0);
 _avr_irq_register_notify($29,107,$port);
 $30 = HEAP32[$20>>2]|0;
 $31 = ((($30)) + 120|0);
 _avr_irq_register_notify($31,107,$port);
 $32 = HEAP32[$20>>2]|0;
 $33 = ((($32)) + 144|0);
 _avr_irq_register_notify($33,107,$port);
 $34 = HEAP32[$20>>2]|0;
 $35 = ((($34)) + 168|0);
 _avr_irq_register_notify($35,107,$port);
 $36 = HEAP32[$20>>2]|0;
 $37 = ((($36)) + 192|0);
 _avr_irq_register_notify($37,107,$port);
 $38 = HEAP32[$20>>2]|0;
 $39 = ((($38)) + 216|0);
 _avr_irq_register_notify($39,107,$port);
 $40 = HEAP32[$20>>2]|0;
 $41 = ((($40)) + 240|0);
 _avr_irq_register_notify($41,107,$port);
 $42 = HEAP32[$20>>2]|0;
 $43 = ((($42)) + 264|0);
 _avr_irq_register_notify($43,107,$port);
 $44 = HEAP32[$20>>2]|0;
 $45 = ((($44)) + 288|0);
 _avr_irq_register_notify($45,107,$port);
 $46 = HEAP32[$20>>2]|0;
 $47 = ((($46)) + 312|0);
 _avr_irq_register_notify($47,107,$port);
 $48 = HEAP32[$20>>2]|0;
 $49 = ((($48)) + 336|0);
 _avr_irq_register_notify($49,107,$port);
 $50 = HEAP32[$20>>2]|0;
 $51 = ((($50)) + 360|0);
 _avr_irq_register_notify($51,107,$port);
 $52 = HEAP32[$20>>2]|0;
 $53 = ((($52)) + 384|0);
 _avr_irq_register_notify($53,107,$port);
 $54 = HEAP32[$20>>2]|0;
 $55 = ((($54)) + 408|0);
 _avr_irq_register_notify($55,107,$port);
 $56 = HEAP32[$20>>2]|0;
 $57 = ((($56)) + 432|0);
 _avr_irq_register_notify($57,107,$port);
 return;
}
function _avr_adc_int_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 104|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  tempRet0 = (0);
  return 0;
 }
 $6 = ((($avr)) + 5892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $3 >>> 9;
 $12 = $11 & 7;
 $13 = $10 >>> $12;
 $14 = $3 >>> 12;
 $15 = $13 & $14;
 $16 = ($15|0)==(0);
 if ($16) {
  tempRet0 = (0);
  return 0;
 }
 $17 = ((($param)) + 224|0);
 (_avr_raise_interrupt($avr,$17)|0);
 $18 = ((($param)) + 108|0);
 $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8)|(HEAPU8[$18+2>>0]<<16)|(HEAPU8[$18+3>>0]<<24);
 $20 = $19 & 511;
 $21 = $20&65535;
 $22 = $19 >>> 12;
 $23 = $22 & 255;
 $24 = $19 >>> 9;
 $25 = $24 & 7;
 $26 = $23 << $25;
 $27 = HEAP32[$6>>2]|0;
 $28 = (($27) + ($20)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $26 ^ 255;
 $32 = $31 & $30;
 $33 = $32&255;
 _avr_core_watch_write($avr,$21,$33);
 $34 = ((($param)) + 562|0);
 HEAP8[$34>>0] = 0;
 $35 = ((($param)) + 563|0);
 HEAP8[$35>>0] = 0;
 $36 = ((($param)) + 212|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)==(1);
 if (!($38)) {
  tempRet0 = (0);
  return 0;
 }
 $39 = ((($param)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 408|0);
 _avr_raise_irq($41,1);
 tempRet0 = (0);
 return 0;
}
function _avr_adc_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$old = 0, $$old4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($irq)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  $4 = $value&65535;
  $5 = ((($param)) + 544|0);
  $6 = (($5) + ($3<<1)|0);
  HEAP16[$6>>1] = $4;
  return;
  break;
 }
 case 16:  {
  $7 = $value&65535;
  $8 = ((($param)) + 560|0);
  HEAP16[$8>>1] = $7;
  return;
  break;
 }
 case 17:  {
  $9 = ((($param)) + 112|0);
  $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
  $11 = $10 & 511;
  $12 = ($11|0)==(0);
  if ($12) {
   return;
  }
  $13 = ((($1)) + 5892|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $10 >>> 9;
  $19 = $18 & 7;
  $20 = $17 >>> $19;
  $21 = $10 >>> 12;
  $22 = $20 & $21;
  $23 = ($22|0)==(0);
  if ($23) {
   return;
  }
  $24 = ((($param)) + 108|0);
  $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8)|(HEAPU8[$24+2>>0]<<16)|(HEAPU8[$24+3>>0]<<24);
  $26 = $25 & 511;
  $27 = ($26|0)==(0);
  if ($27) {
   $$old = $25&255;
   $$old4 = ($$old<<24>>24)==(0);
   if ($$old4) {
    return;
   }
  } else {
   $28 = (($14) + ($26)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $25 >>> 9;
   $32 = $31 & 7;
   $33 = $30 >>> $32;
   $34 = $25 >>> 12;
   $35 = $33 & $34;
   $36 = ($35|0)!=(0);
   $37 = $25&255;
   $38 = ($37<<24>>24)==(0);
   $or$cond = $36 | $38;
   if ($or$cond) {
    return;
   }
  }
  $39 = $25 & 255;
  $40 = (($14) + ($39)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $25 >>> 9;
  $44 = $43 & 7;
  $45 = 1 << $44;
  $46 = $42 | $45;
  $47 = $46&255;
  $48 = $25&65535;
  $49 = $48 & 255;
  _avr_adc_write_adcsra($1,$49,$47,$param);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _avr_adc_write_adcsra($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i9 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre26 = 0, $$pre27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avr$idx$val = 0, $avr$idx$val$pre = 0, $cond = 0, $phitmp = 0, $phitmp29 = 0, $res$1$i = 0, $res$1$i$1 = 0, $res$1$i$2 = 0;
 var $res$1$i4 = 0, $res$1$i4$1 = 0, $res$1$i4$2 = 0, $res$1$i4$3 = 0, $res$1$i4$4 = 0, $res$1$i4$5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 _avr_adc_configure_trigger($avr,$param);
 $0 = ((($param)) + 108|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0$i = 0;
 } else {
  $4 = ((($avr)) + 5892|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $1 >>> 9;
  $10 = $9 & 7;
  $11 = $8 >>> $10;
  $12 = $1 >>> 12;
  $13 = $11 & $12;
  $14 = $13&255;
  $$0$i = $14;
 }
 $15 = ((($param)) + 104|0);
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $17 = $16 & 511;
 $18 = ($17|0)==(0);
 $$phi$trans$insert = ((($avr)) + 5892|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($18) {
  $$0$i9 = 0;
 } else {
  $19 = (($$pre) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $16 >>> 9;
  $23 = $22 & 7;
  $24 = $21 >>> $23;
  $25 = $16 >>> 12;
  $26 = $24 & $25;
  $27 = $26&255;
  $$0$i9 = $27;
 }
 $28 = (($$pre) + ($2)|0);
 HEAP8[$28>>0] = $v;
 $29 = ($$0$i<<24>>24)==(0);
 do {
  if ($29) {
   $$0 = $v;
  } else {
   $30 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
   $31 = $30 & 511;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $33 = HEAP32[$$phi$trans$insert>>2]|0;
    $34 = (($33) + ($31)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = $30 >>> 9;
    $38 = $37 & 7;
    $39 = $36 >>> $38;
    $40 = $30 >>> 12;
    $41 = $39 & $40;
    $42 = ($41|0)==(0);
    if (!($42)) {
     $$0 = $v;
     break;
    }
   }
   $43 = $31&65535;
   $44 = ($43<<16>>16)==(0);
   if ($44) {
    $57 = $30;
   } else {
    $45 = $30 >>> 12;
    $46 = $45 & 255;
    $47 = $30 >>> 9;
    $48 = $47 & 7;
    $49 = $46 << $48;
    $50 = HEAP32[$$phi$trans$insert>>2]|0;
    $51 = (($50) + ($31)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $53 | $49;
    $55 = $54&255;
    _avr_core_watch_write($avr,$43,$55);
    $$pre26 = HEAP32[$0>>2]|0;
    $57 = $$pre26;
   }
   $56 = $57 & 511;
   $58 = HEAP32[$$phi$trans$insert>>2]|0;
   $59 = (($58) + ($56)|0);
   $60 = HEAP8[$59>>0]|0;
   $$0 = $60;
  }
 } while(0);
 $cond = ($$0$i9<<24>>24)==(0);
 $61 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $62 = $61 & 511;
 $63 = ($62|0)==(0);
 do {
  if ($cond) {
   if ($63) {
    $$1 = $$0;
   } else {
    $64 = HEAP32[$$phi$trans$insert>>2]|0;
    $65 = (($64) + ($62)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $61 >>> 9;
    $69 = $68 & 7;
    $70 = $67 >>> $69;
    $71 = $61 >>> 12;
    $72 = $70 & $71;
    $73 = ($72|0)==(0);
    if ($73) {
     $$1 = $$0;
    } else {
     $74 = ((($param)) + 562|0);
     HEAP8[$74>>0] = 1;
     $75 = ((($avr)) + 52|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($avr)) + 48|0);
     $78 = HEAP32[$77>>2]|0;
     HEAP32[$vararg_buffer>>2] = $76;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $78;
     _avr_global_logger($avr,3,357416,$vararg_buffer);
     $$1 = $$0;
    }
   }
  } else {
   if (!($63)) {
    $79 = HEAP32[$$phi$trans$insert>>2]|0;
    $80 = (($79) + ($62)|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = $61 >>> 9;
    $84 = $83 & 7;
    $85 = $82 >>> $84;
    $86 = $61 >>> 12;
    $87 = $85 & $86;
    $88 = ($87|0)==(0);
    if (!($88)) {
     $$1 = $$0;
     break;
    }
   }
   _avr_cycle_timer_cancel($avr,106,$param);
   $89 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
   $90 = $89 & 511;
   $91 = $90&65535;
   $92 = $89 >>> 12;
   $93 = $92 & 255;
   $94 = $89 >>> 9;
   $95 = $94 & 7;
   $96 = $93 << $95;
   $97 = HEAP32[$$phi$trans$insert>>2]|0;
   $98 = (($97) + ($90)|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = $96 ^ 255;
   $102 = $101 & $100;
   $103 = $102&255;
   _avr_core_watch_write($avr,$91,$103);
   $104 = HEAP32[$0>>2]|0;
   $105 = $104 & 511;
   $106 = HEAP32[$$phi$trans$insert>>2]|0;
   $107 = (($106) + ($105)|0);
   $108 = HEAP8[$107>>0]|0;
   $$1 = $108;
  }
 } while(0);
 if (!($29)) {
  _avr_core_watch_write($avr,$addr,$$1);
  STACKTOP = sp;return;
 }
 $109 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $110 = $109 & 511;
 $111 = ($110|0)==(0);
 if ($111) {
  _avr_core_watch_write($avr,$addr,$$1);
  STACKTOP = sp;return;
 }
 $112 = HEAP32[$$phi$trans$insert>>2]|0;
 $113 = (($112) + ($110)|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $109 >>> 9;
 $117 = $116 & 7;
 $118 = $115 >>> $117;
 $119 = $109 >>> 12;
 $120 = $118 & $119;
 $121 = ($120|0)==(0);
 if ($121) {
  _avr_core_watch_write($avr,$addr,$$1);
  STACKTOP = sp;return;
 }
 $122 = ((($param)) + 44|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $123 & 511;
 $125 = ($124|0)==(0);
 if ($125) {
  $res$1$i4 = 0;
 } else {
  $126 = (($112) + ($124)|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = $123 >>> 9;
  $130 = $129 & 7;
  $131 = $128 >>> $130;
  $132 = $123 >>> 12;
  $133 = $132 & $131;
  $134 = $133&255;
  $res$1$i4 = $134;
 }
 $135 = ((($param)) + 48|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $136 & 511;
 $138 = ($137|0)==(0);
 if ($138) {
  $res$1$i4$1 = $res$1$i4;
 } else {
  $198 = (($112) + ($137)|0);
  $199 = HEAP8[$198>>0]|0;
  $200 = $199&255;
  $201 = $136 >>> 9;
  $202 = $201 & 7;
  $203 = $200 >>> $202;
  $204 = $136 >>> 12;
  $205 = $204 & $203;
  $206 = $205 << 1;
  $207 = $res$1$i4&255;
  $208 = $206 | $207;
  $209 = $208&255;
  $res$1$i4$1 = $209;
 }
 $210 = ((($param)) + 52|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $211 & 511;
 $213 = ($212|0)==(0);
 if ($213) {
  $res$1$i4$2 = $res$1$i4$1;
 } else {
  $214 = (($112) + ($212)|0);
  $215 = HEAP8[$214>>0]|0;
  $216 = $215&255;
  $217 = $211 >>> 9;
  $218 = $217 & 7;
  $219 = $216 >>> $218;
  $220 = $211 >>> 12;
  $221 = $220 & $219;
  $222 = $221 << 2;
  $223 = $res$1$i4$1&255;
  $224 = $222 | $223;
  $225 = $224&255;
  $res$1$i4$2 = $225;
 }
 $226 = ((($param)) + 56|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = $227 & 511;
 $229 = ($228|0)==(0);
 if ($229) {
  $res$1$i4$3 = $res$1$i4$2;
 } else {
  $230 = (($112) + ($228)|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&255;
  $233 = $227 >>> 9;
  $234 = $233 & 7;
  $235 = $232 >>> $234;
  $236 = $227 >>> 12;
  $237 = $236 & $235;
  $238 = $237 << 3;
  $239 = $res$1$i4$2&255;
  $240 = $238 | $239;
  $241 = $240&255;
  $res$1$i4$3 = $241;
 }
 $242 = ((($param)) + 60|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = $243 & 511;
 $245 = ($244|0)==(0);
 if ($245) {
  $res$1$i4$4 = $res$1$i4$3;
 } else {
  $246 = (($112) + ($244)|0);
  $247 = HEAP8[$246>>0]|0;
  $248 = $247&255;
  $249 = $243 >>> 9;
  $250 = $249 & 7;
  $251 = $248 >>> $250;
  $252 = $243 >>> 12;
  $253 = $252 & $251;
  $254 = $253 << 4;
  $255 = $res$1$i4$3&255;
  $256 = $254 | $255;
  $257 = $256&255;
  $res$1$i4$4 = $257;
 }
 $258 = ((($param)) + 64|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = $259 & 511;
 $261 = ($260|0)==(0);
 if ($261) {
  $res$1$i4$5 = $res$1$i4$4;
 } else {
  $262 = (($112) + ($260)|0);
  $263 = HEAP8[$262>>0]|0;
  $264 = $263&255;
  $265 = $259 >>> 9;
  $266 = $265 & 7;
  $267 = $264 >>> $266;
  $268 = $259 >>> 12;
  $269 = $268 & $267;
  $270 = $269 << 5;
  $271 = $res$1$i4$4&255;
  $272 = $270 | $271;
  $273 = $272&255;
  $res$1$i4$5 = $273;
 }
 $274 = $res$1$i4$5&255;
 $275 = ((($param)) + 288|0);
 $276 = (($275) + ($274<<2)|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = ((($param)) + 24|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = ((($279)) + 432|0);
 _avr_raise_irq($280,$277);
 $281 = ((($param)) + 116|0);
 $145 = HEAP32[$281>>2]|0;
 $141 = $145 & 511;
 $282 = ($141|0)==(0);
 if ($282) {
  $res$1$i = 0;
 } else {
  $139 = HEAP32[$$phi$trans$insert>>2]|0;
  $140 = (($139) + ($141)|0);
  $142 = HEAP8[$140>>0]|0;
  $143 = $142&255;
  $144 = $145 >>> 9;
  $146 = $144 & 7;
  $147 = $143 >>> $146;
  $148 = $145 >>> 12;
  $149 = $148 & $147;
  $150 = $149&255;
  $res$1$i = $150;
 }
 $151 = ((($param)) + 120|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $152 & 511;
 $154 = ($153|0)==(0);
 if ($154) {
  $res$1$i$1 = $res$1$i;
 } else {
  $162 = HEAP32[$$phi$trans$insert>>2]|0;
  $163 = (($162) + ($153)|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = $152 >>> 9;
  $167 = $166 & 7;
  $168 = $165 >>> $167;
  $169 = $152 >>> 12;
  $170 = $169 & $168;
  $171 = $170 << 1;
  $172 = $res$1$i&255;
  $173 = $171 | $172;
  $174 = $173&255;
  $res$1$i$1 = $174;
 }
 $175 = ((($param)) + 124|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & 511;
 $178 = ($177|0)==(0);
 if ($178) {
  $res$1$i$2 = $res$1$i$1;
 } else {
  $179 = HEAP32[$$phi$trans$insert>>2]|0;
  $180 = (($179) + ($177)|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $176 >>> 9;
  $184 = $183 & 7;
  $185 = $182 >>> $184;
  $186 = $176 >>> 12;
  $187 = $186 & $185;
  $188 = $187 << 2;
  $189 = $res$1$i$1&255;
  $190 = $188 | $189;
  $191 = $190&255;
  $res$1$i$2 = $191;
 }
 $192 = $res$1$i$2&255;
 $193 = ($res$1$i$2<<24>>24)==(0);
 $194 = $193&1;
 $$ = (($194) + ($192))|0;
 $158 = ((($avr)) + 40|0);
 $195 = HEAP32[$158>>2]|0;
 $156 = $195 >>> $$;
 $157 = ((($param)) + 562|0);
 $196 = HEAP8[$157>>0]|0;
 $197 = ($196<<24>>24)==(0);
 if ($197) {
  $160 = 13;$avr$idx$val = $195;
 } else {
  $155 = (($156>>>0) / 1300)&-1;
  HEAP32[$vararg_buffer2>>2] = $155;
  _avr_global_logger($avr,3,357444,$vararg_buffer2);
  $$pre27 = HEAP8[$157>>0]|0;
  $avr$idx$val$pre = HEAP32[$158>>2]|0;
  $phitmp = ($$pre27<<24>>24)!=(0);
  $phitmp29 = $phitmp ? 25 : 13;
  $160 = $phitmp29;$avr$idx$val = $avr$idx$val$pre;
 }
 $159 = (($156>>>0) / ($160>>>0))&-1;
 $161 = (($avr$idx$val>>>0) / ($159>>>0))&-1;
 _avr_cycle_timer_register($avr,$161,0,106,$param);
 _avr_core_watch_write($avr,$addr,$$1);
 STACKTOP = sp;return;
}
function _avr_adc_configure_trigger($avr,$param) {
 $avr = $avr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $cond = 0, $res$1$i = 0, $res$1$i$1 = 0, $res$1$i$2 = 0;
 var $res$1$i$3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($param)) + 112|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($param)) + 212|0);
  $5 = HEAP8[$4>>0]|0;
  $39 = $4;$95 = $5;
  label = 8;
 } else {
  $6 = ((($avr)) + 5892|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($2)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $1 >>> 9;
  $12 = $11 & 7;
  $13 = $10 >>> $12;
  $14 = $1 >>> 12;
  $15 = $13 & $14;
  $16 = ((($param)) + 212|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($15|0)==(0);
  if ($18) {
   $39 = $16;$95 = $17;
   label = 8;
  } else {
   $19 = ((($param)) + 132|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 511;
   $22 = ($21|0)==(0);
   if ($22) {
    $res$1$i = 0;
   } else {
    $23 = (($7) + ($21)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = $20 >>> 9;
    $27 = $26 & 7;
    $28 = $25 >>> $27;
    $29 = $20 >>> 12;
    $30 = $29 & $28;
    $31 = $30&255;
    $res$1$i = $31;
   }
   $32 = ((($param)) + 136|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & 511;
   $35 = ($34|0)==(0);
   if ($35) {
    $res$1$i$1 = $res$1$i;
   } else {
    $46 = (($7) + ($34)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = $33 >>> 9;
    $50 = $49 & 7;
    $51 = $48 >>> $50;
    $52 = $33 >>> 12;
    $53 = $52 & $51;
    $54 = $53 << 1;
    $55 = $res$1$i&255;
    $56 = $54 | $55;
    $57 = $56&255;
    $res$1$i$1 = $57;
   }
   $58 = ((($param)) + 140|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 511;
   $61 = ($60|0)==(0);
   if ($61) {
    $res$1$i$2 = $res$1$i$1;
   } else {
    $62 = (($7) + ($60)|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = $59 >>> 9;
    $66 = $65 & 7;
    $67 = $64 >>> $66;
    $68 = $59 >>> 12;
    $69 = $68 & $67;
    $70 = $69 << 2;
    $71 = $res$1$i$1&255;
    $72 = $70 | $71;
    $73 = $72&255;
    $res$1$i$2 = $73;
   }
   $74 = ((($param)) + 144|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 & 511;
   $77 = ($76|0)==(0);
   if ($77) {
    $res$1$i$3 = $res$1$i$2;
   } else {
    $78 = (($7) + ($76)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $75 >>> 9;
    $82 = $81 & 7;
    $83 = $80 >>> $82;
    $84 = $75 >>> 12;
    $85 = $84 & $83;
    $86 = $85 << 3;
    $87 = $res$1$i$2&255;
    $88 = $86 | $87;
    $89 = $88&255;
    $res$1$i$3 = $89;
   }
   $90 = $res$1$i$3&255;
   $91 = ((($param)) + 148|0);
   $92 = (($91) + ($90<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $93&255;
   HEAP8[$16>>0] = $94;
   $37 = $93 & 255;
   $cond = ($37|0)==(1);
   if ($cond) {
    $40 = $17;$42 = $94;
   } else {
    $36 = (350544 + ($37<<2)|0);
    $38 = HEAP32[$36>>2]|0;
    HEAP32[$vararg_buffer>>2] = $38;
    _avr_global_logger($avr,2,357340,$vararg_buffer);
    HEAP8[$16>>0] = 0;
    $40 = $17;$42 = 0;
   }
  }
 }
 if ((label|0) == 8) {
  HEAP8[$39>>0] = 0;
  $40 = $95;$42 = 0;
 }
 $41 = ($40<<24>>24)==($42<<24>>24);
 if ($41) {
  STACKTOP = sp;return;
 }
 $43 = $42&255;
 $44 = (350544 + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $45;
 _avr_global_logger($avr,3,357382,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _avr_adc_write_adcsrb($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _avr_adc_configure_trigger($avr,$param);
 return;
}
function _avr_adc_read_l($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $mux$sroa$0$0 = 0, $mux$sroa$0$1 = 0, $phitmp = 0, $phitmp7 = 0;
 var $reg$0 = 0, $reg$1 = 0, $res$1$i = 0, $res$1$i$1 = 0, $res$1$i$2 = 0, $res$1$i4 = 0, $res$1$i4$1 = 0, $res$1$i4$2 = 0, $res$1$i4$3 = 0, $res$1$i4$4 = 0, $res$1$i4$5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr9 = 0, $vref$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($param)) + 563|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (_avr_core_watch_read($avr,$addr)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($param)) + 68|0);
 $5 = ((($avr)) + 5892|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = $6 & 511;
 $8 = ($7|0)==(0);
 if ($8) {
  $res$1$i = 0;
 } else {
  $9 = HEAP32[$5>>2]|0;
  $10 = (($9) + ($7)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $6 >>> 9;
  $14 = $13 & 7;
  $15 = $12 >>> $14;
  $16 = $6 >>> 12;
  $17 = $16 & $15;
  $18 = $17&255;
  $res$1$i = $18;
 }
 $19 = ((($param)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 511;
 $22 = ($21|0)==(0);
 if ($22) {
  $res$1$i$1 = $res$1$i;
 } else {
  $199 = HEAP32[$5>>2]|0;
  $200 = (($199) + ($21)|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = $20 >>> 9;
  $204 = $203 & 7;
  $205 = $202 >>> $204;
  $206 = $20 >>> 12;
  $207 = $206 & $205;
  $208 = $207 << 1;
  $209 = $res$1$i&255;
  $210 = $208 | $209;
  $211 = $210&255;
  $res$1$i$1 = $211;
 }
 $212 = ((($param)) + 76|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = $213 & 511;
 $215 = ($214|0)==(0);
 if ($215) {
  $res$1$i$2 = $res$1$i$1;
 } else {
  $216 = HEAP32[$5>>2]|0;
  $217 = (($216) + ($214)|0);
  $218 = HEAP8[$217>>0]|0;
  $219 = $218&255;
  $220 = $213 >>> 9;
  $221 = $220 & 7;
  $222 = $219 >>> $221;
  $223 = $213 >>> 12;
  $224 = $223 & $222;
  $225 = $224 << 2;
  $226 = $res$1$i$1&255;
  $227 = $225 | $226;
  $228 = $227&255;
  $res$1$i$2 = $228;
 }
 $229 = $res$1$i$2&255;
 $230 = ((($param)) + 80|0);
 $231 = (($230) + ($229<<1)|0);
 $84 = HEAP16[$231>>1]|0;
 $232 = ((($param)) + 44|0);
 $29 = HEAP32[$232>>2]|0;
 $25 = $29 & 511;
 $233 = ($25|0)==(0);
 if ($233) {
  $res$1$i4 = 0;
 } else {
  $23 = HEAP32[$5>>2]|0;
  $24 = (($23) + ($25)|0);
  $26 = HEAP8[$24>>0]|0;
  $27 = $26&255;
  $28 = $29 >>> 9;
  $30 = $28 & 7;
  $31 = $27 >>> $30;
  $32 = $29 >>> 12;
  $33 = $32 & $31;
  $34 = $33&255;
  $res$1$i4 = $34;
 }
 $35 = ((($param)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 511;
 $38 = ($37|0)==(0);
 if ($38) {
  $res$1$i4$1 = $res$1$i4;
 } else {
  $113 = HEAP32[$5>>2]|0;
  $114 = (($113) + ($37)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $36 >>> 9;
  $118 = $117 & 7;
  $119 = $116 >>> $118;
  $120 = $36 >>> 12;
  $121 = $120 & $119;
  $122 = $121 << 1;
  $123 = $res$1$i4&255;
  $124 = $122 | $123;
  $125 = $124&255;
  $res$1$i4$1 = $125;
 }
 $126 = ((($param)) + 52|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 & 511;
 $129 = ($128|0)==(0);
 if ($129) {
  $res$1$i4$2 = $res$1$i4$1;
 } else {
  $130 = HEAP32[$5>>2]|0;
  $131 = (($130) + ($128)|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $134 = $127 >>> 9;
  $135 = $134 & 7;
  $136 = $133 >>> $135;
  $137 = $127 >>> 12;
  $138 = $137 & $136;
  $139 = $138 << 2;
  $140 = $res$1$i4$1&255;
  $141 = $139 | $140;
  $142 = $141&255;
  $res$1$i4$2 = $142;
 }
 $143 = ((($param)) + 56|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = $144 & 511;
 $146 = ($145|0)==(0);
 if ($146) {
  $res$1$i4$3 = $res$1$i4$2;
 } else {
  $147 = HEAP32[$5>>2]|0;
  $148 = (($147) + ($145)|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = $144 >>> 9;
  $152 = $151 & 7;
  $153 = $150 >>> $152;
  $154 = $144 >>> 12;
  $155 = $154 & $153;
  $156 = $155 << 3;
  $157 = $res$1$i4$2&255;
  $158 = $156 | $157;
  $159 = $158&255;
  $res$1$i4$3 = $159;
 }
 $160 = ((($param)) + 60|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $161 & 511;
 $163 = ($162|0)==(0);
 if ($163) {
  $res$1$i4$4 = $res$1$i4$3;
 } else {
  $164 = HEAP32[$5>>2]|0;
  $165 = (($164) + ($162)|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $166&255;
  $168 = $161 >>> 9;
  $169 = $168 & 7;
  $170 = $167 >>> $169;
  $171 = $161 >>> 12;
  $172 = $171 & $170;
  $173 = $172 << 4;
  $174 = $res$1$i4$3&255;
  $175 = $173 | $174;
  $176 = $175&255;
  $res$1$i4$4 = $176;
 }
 $177 = ((($param)) + 64|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $178 & 511;
 $180 = ($179|0)==(0);
 if ($180) {
  $res$1$i4$5 = $res$1$i4$4;
 } else {
  $181 = HEAP32[$5>>2]|0;
  $182 = (($181) + ($179)|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = $178 >>> 9;
  $186 = $185 & 7;
  $187 = $184 >>> $186;
  $188 = $178 >>> 12;
  $189 = $188 & $187;
  $190 = $189 << 5;
  $191 = $res$1$i4$4&255;
  $192 = $190 | $191;
  $193 = $192&255;
  $res$1$i4$5 = $193;
 }
 $194 = $res$1$i4$5&255;
 $195 = ((($param)) + 288|0);
 $196 = (($195) + ($194<<2)|0);
 $51 = HEAP32[$196>>2]|0;
 $197 = ((($param)) + 96|0);
 $45 = HEAPU8[$197>>0]|(HEAPU8[$197+1>>0]<<8)|(HEAPU8[$197+2>>0]<<16)|(HEAPU8[$197+3>>0]<<24);
 $41 = $45 & 511;
 $198 = ($41|0)==(0);
 if ($198) {
  $$0$i = 0;
 } else {
  $39 = HEAP32[$5>>2]|0;
  $40 = (($39) + ($41)|0);
  $42 = HEAP8[$40>>0]|0;
  $43 = $42&255;
  $44 = $45 >>> 9;
  $46 = $44 & 7;
  $47 = $43 >>> $46;
  $48 = $45 >>> 12;
  $49 = $47 & $48;
  $phitmp = ($49|0)!=(0);
  $phitmp7 = $phitmp ? 6 : 0;
  $$0$i = $phitmp7;
 }
 $50 = $51 & 7;
 L35: do {
  switch ($50|0) {
  case 2:  {
   $52 = $51 >>> 19;
   $53 = ((($param)) + 544|0);
   $54 = (($53) + ($52<<1)|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = $55&65535;
   $mux$sroa$0$1 = $51;$reg$0 = $56;
   break;
  }
  case 3:  {
   $57 = $51 & 2040;
   $58 = ($57|0)==(0);
   $59 = $51 & -2041;
   $60 = $59 | 8;
   $mux$sroa$0$0 = $58 ? $60 : $51;
   $61 = $mux$sroa$0$0 >>> 19;
   $62 = ((($param)) + 544|0);
   $63 = (($62) + ($61<<1)|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64&65535;
   $66 = $mux$sroa$0$0 >>> 3;
   $67 = $66 & 255;
   $68 = $mux$sroa$0$0 >>> 11;
   $69 = $68 & 255;
   $70 = (($62) + ($69<<1)|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = (($65) - ($72))|0;
   $74 = Math_imul($73, $67)|0;
   $mux$sroa$0$1 = $mux$sroa$0$0;$reg$0 = $74;
   break;
  }
  case 4:  {
   $75 = ((($param)) + 560|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76&65535;
   $mux$sroa$0$1 = $51;$reg$0 = $77;
   break;
  }
  case 5:  {
   $78 = $51 >>> 19;
   $mux$sroa$0$1 = $51;$reg$0 = $78;
   break;
  }
  case 6:  {
   $79 = ((($avr)) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)==(0);
   if ($81) {
    _avr_global_logger($avr,2,357468,$vararg_buffer);
    $mux$sroa$0$1 = $51;$reg$0 = 0;
    break L35;
   } else {
    $82 = $80 >>> 2;
    $mux$sroa$0$1 = $51;$reg$0 = $82;
    break L35;
   }
   break;
  }
  default: {
   $mux$sroa$0$1 = $51;$reg$0 = 0;
  }
  }
 } while(0);
 $83 = $84&65535;
 switch ($83|0) {
 case 1:  {
  $85 = ((($avr)) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)==(0);
  if ($87) {
   _avr_global_logger($avr,2,357468,$vararg_buffer1);
   $vref$0 = 3300;
  } else {
   $vref$0 = $86;
  }
  break;
 }
 case 0:  {
  $88 = ((($avr)) + 52|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==(0);
  if ($90) {
   _avr_global_logger($avr,2,357501,$vararg_buffer3);
   $vref$0 = 3300;
  } else {
   $vref$0 = $89;
  }
  break;
 }
 case 2:  {
  $91 = ((($avr)) + 48|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)==(0);
  if ($93) {
   _avr_global_logger($avr,2,357535,$vararg_buffer5);
   $vref$0 = 3300;
  } else {
   $vref$0 = $92;
  }
  break;
 }
 default: {
  $vref$0 = $83;
 }
 }
 $94 = ($reg$0*1023)|0;
 $95 = (($94>>>0) / ($vref$0>>>0))&-1;
 $96 = ($95>>>0)>(1023);
 if ($96) {
  $97 = $mux$sroa$0$1 & 7;
  HEAP32[$vararg_buffer7>>2] = $97;
  $vararg_ptr9 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $95;
  $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = 1023;
  $vararg_ptr11 = ((($vararg_buffer7)) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $vref$0;
  _avr_global_logger($avr,2,357569,$vararg_buffer7);
  $reg$1 = 1023;
 } else {
  $reg$1 = $95;
 }
 $98 = $reg$1 << $$0$i;
 $99 = $98&255;
 $100 = ((($param)) + 128|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = HEAP32[$5>>2]|0;
 $104 = (($103) + ($102)|0);
 HEAP8[$104>>0] = $99;
 $105 = $98 >>> 8;
 $106 = $105&255;
 $107 = ((($param)) + 129|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = HEAP32[$5>>2]|0;
 $111 = (($110) + ($109)|0);
 HEAP8[$111>>0] = $106;
 HEAP8[$0>>0] = 1;
 $112 = (_avr_core_watch_read($avr,$addr)|0);
 $$0 = $112;
 STACKTOP = sp;return ($$0|0);
}
function _avr_adc_read_h($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 563|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 switch ($2|0) {
 case 0:  {
  $3 = ((($param)) + 128|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  (_avr_adc_read_l($avr,$5,$param)|0);
  label = 3;
  break;
 }
 case 1:  {
  label = 3;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 3) {
  HEAP8[$0>>0] = 2;
 }
 $6 = (_avr_core_watch_read($avr,$addr)|0);
 return ($6|0);
}
function _avr_spi_reset($io) {
 $io = $io|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($io)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _avr_irq_register_notify($1,108,$io);
 return;
}
function _avr_spi_irq_input($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($param)) + 56|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = ((($1)) + 5892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $3 >>> 9;
 $12 = $11 & 7;
 $13 = $10 >>> $12;
 $14 = $3 >>> 12;
 $15 = $13 & $14;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 $17 = $value&255;
 $18 = ((($param)) + 144|0);
 HEAP8[$18>>0] = $17;
 $19 = ((($param)) + 80|0);
 (_avr_raise_interrupt($1,$19)|0);
 $20 = ((($param)) + 60|0);
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
 $22 = $21 & 511;
 $23 = ($22|0)==(0);
 $$pre = HEAP32[$6>>2]|0;
 if (!($23)) {
  $24 = (($$pre) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $21 >>> 9;
  $28 = $27 & 7;
  $29 = $26 >>> $28;
  $30 = $21 >>> 12;
  $31 = $29 & $30;
  $32 = ($31|0)==(0);
  if (!($32)) {
   return;
  }
 }
 $33 = ((($param)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 24|0);
 $36 = ((($param)) + 48|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (($$pre) + ($38)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 _avr_raise_irq($35,$41);
 return;
}
function _avr_spi_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=350612; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $0 = ((($p)) + 80|0);
 _avr_register_vector($avr,$0);
 $1 = ((($p)) + 40|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = $3 | 1936746752;
 (_avr_io_setirqs($p,$4,2,0)|0);
 $5 = ((($p)) + 48|0);
 $6 = HEAP16[$5>>1]|0;
 _avr_register_io_write($avr,$6,109,$p);
 $7 = HEAP16[$5>>1]|0;
 _avr_register_io_read($avr,$7,110,$p);
 return;
}
function _avr_spi_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 48|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==($addr<<16>>16);
 if (!($2)) {
  return;
 }
 $3 = ((($param)) + 88|0);
 $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 $5 = $4 & 511;
 $6 = $5&65535;
 $7 = $4 >>> 12;
 $8 = $7 & 255;
 $9 = $4 >>> 9;
 $10 = $9 & 7;
 $11 = $8 << $10;
 $12 = ((($avr)) + 5892|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($5)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $11 ^ 255;
 $18 = $17 & $16;
 $19 = $18&255;
 _avr_core_watch_write($avr,$6,$19);
 _avr_core_watch_write($avr,$addr,$v);
 _avr_cycle_timer_register_usec($avr,100,111,$param);
 return;
}
function _avr_spi_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 56|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  tempRet0 = (0);
  return 0;
 }
 $6 = ((($avr)) + 5892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $3 >>> 9;
 $12 = $11 & 7;
 $13 = $10 >>> $12;
 $14 = $3 >>> 12;
 $15 = $13 & $14;
 $16 = ($15|0)==(0);
 if ($16) {
  tempRet0 = (0);
  return 0;
 }
 $17 = ((($param)) + 60|0);
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = $18 & 511;
 $20 = ($19|0)==(0);
 if ($20) {
  tempRet0 = (0);
  return 0;
 }
 $21 = (($7) + ($19)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $18 >>> 9;
 $25 = $24 & 7;
 $26 = $23 >>> $25;
 $27 = $18 >>> 12;
 $28 = $26 & $27;
 $29 = ($28|0)==(0);
 if ($29) {
  tempRet0 = (0);
  return 0;
 }
 $30 = ((($param)) + 80|0);
 (_avr_raise_interrupt($avr,$30)|0);
 $31 = ((($param)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 24|0);
 $34 = ((($param)) + 48|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = HEAP32[$6>>2]|0;
 $38 = (($37) + ($36)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 _avr_raise_irq($33,$40);
 tempRet0 = (0);
 return 0;
}
function _avr_spi_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 144|0);
 $1 = HEAP8[$0>>0]|0;
 HEAP8[$0>>0] = 0;
 $2 = ((($param)) + 88|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = $4&65535;
 $6 = $3 >>> 12;
 $7 = $6 & 255;
 $8 = $3 >>> 9;
 $9 = $8 & 7;
 $10 = $7 << $9;
 $11 = ((($avr)) + 5892|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($4)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $10 ^ 255;
 $17 = $16 & $15;
 $18 = $17&255;
 _avr_core_watch_write($avr,$5,$18);
 return ($1|0);
}
function _avr_ioport_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $value & 256;
 $3 = $value & 255;
 $4 = ((($irq)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = 1 << $5;
 $$not = $6 | -256;
 $7 = $$not ^ 255;
 $8 = ((($param)) + 46|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ((($1)) + 5892|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 & $7;
 $17 = $16&255;
 HEAP8[$13>>0] = $17;
 $18 = ($3|0)!=(0);
 if ($18) {
  $19 = HEAP16[$8>>1]|0;
  $20 = $19&65535;
  $21 = HEAP32[$11>>2]|0;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24 | $6;
  $26 = $25&255;
  HEAP8[$22>>0] = $26;
 }
 $27 = ($2|0)==(0);
 if (!($27)) {
  $28 = ((($param)) + 42|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = HEAP32[$11>>2]|0;
  $32 = (($31) + ($30)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 & $7;
  $36 = $18 ? $6 : 0;
  $37 = $35 | $36;
  $38 = $37&255;
  _avr_core_watch_write($1,$29,$38);
  $39 = ((($param)) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 240|0);
  $42 = $37 & 255;
  _avr_raise_irq($41,$42);
  _avr_ioport_update_irqs($param);
 }
 $43 = ((($param)) + 112|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = ($44<<16>>16)==(0);
 if ($45) {
  return;
 }
 $46 = $44&65535;
 $47 = HEAP32[$11>>2]|0;
 $48 = (($47) + ($46)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = $6 & $50;
 $52 = ($51|0)==(0);
 if ($52) {
  return;
 }
 $53 = ((($param)) + 48|0);
 (_avr_raise_interrupt($1,$53)|0);
 return;
}
function _avr_ioport_update_irqs($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($p)) + 44|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1)) + 5892|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ((($p)) + 114|0);
 $11 = ((($p)) + 42|0);
 $12 = ((($p)) + 24|0);
 $i$01 = 0;
 while(1) {
  $39 = 1 << $i$01;
  $40 = $39 & $9;
  $41 = ($40|0)==(0);
  do {
   if ($41) {
    $52 = HEAP16[$10>>1]|0;
    $53 = $52&65535;
    $54 = $53 & 255;
    $55 = $54 & $39;
    $56 = ($55|0)==(0);
    if (!($56)) {
     $57 = ($52&65535) >>> 8;
     $58 = $57&65535;
     $59 = HEAP32[$12>>2]|0;
     $60 = (($59) + (($i$01*24)|0)|0);
     $61 = $58 >>> $i$01;
     $62 = $61 & 1;
     _avr_raise_irq($60,$62);
     break;
    }
    $63 = HEAP16[$11>>1]|0;
    $64 = $63&65535;
    $65 = HEAP32[$5>>2]|0;
    $66 = (($65) + ($64)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 & $39;
    $70 = ($69|0)==(0);
    if (!($70)) {
     $71 = HEAP32[$12>>2]|0;
     $72 = (($71) + (($i$01*24)|0)|0);
     _avr_raise_irq($72,1);
    }
   } else {
    $42 = HEAP32[$12>>2]|0;
    $43 = (($42) + (($i$01*24)|0)|0);
    $44 = HEAP16[$11>>1]|0;
    $45 = $44&65535;
    $46 = HEAP32[$5>>2]|0;
    $47 = (($46) + ($45)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 >>> $i$01;
    $51 = $50 & 1;
    _avr_raise_irq($43,$51);
   }
  } while(0);
  $73 = (($i$01) + 1)|0;
  $exitcond = ($73|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $73;
  }
 }
 $13 = ((($p)) + 46|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = HEAP32[$5>>2]|0;
 $17 = (($16) + ($15)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $9 ^ 255;
 $21 = $19 & $20;
 $22 = HEAP16[$11>>1]|0;
 $23 = $22&65535;
 $24 = (($16) + ($23)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 & $8;
 $27 = $26&255;
 $28 = $27 | $21;
 $29 = HEAP16[$10>>1]|0;
 $30 = $29&65535;
 $31 = $30 & 255;
 $32 = $31 ^ 255;
 $33 = $28 & $32;
 $34 = ($29&65535) >>> 8;
 $35 = $34&65535;
 $36 = $33 | $35;
 $37 = HEAP32[$12>>2]|0;
 $38 = ((($37)) + 192|0);
 _avr_raise_irq($38,$36);
 return;
}
function _avr_ioport_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($p)) + 42|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $3 = ((($p)) + 40|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = HEAP32[$avr>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  (_printf(357618,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  dest=$p; src=350660; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  _avr_register_io($avr,$p);
  $7 = ((($p)) + 48|0);
  _avr_register_vector($avr,$7);
  $8 = ((($p)) + 40|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = $10 | 1768908544;
  (_avr_io_setirqs($p,$11,12,0)|0);
  $12 = ((($p)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 16|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 | 2;
  $18 = $17&255;
  HEAP8[$14>>0] = $18;
  $19 = ((($13)) + 40|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 | 2;
  $23 = $22&255;
  HEAP8[$19>>0] = $23;
  $24 = ((($13)) + 64|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 | 2;
  $28 = $27&255;
  HEAP8[$24>>0] = $28;
  $29 = ((($13)) + 88|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 | 2;
  $33 = $32&255;
  HEAP8[$29>>0] = $33;
  $34 = ((($13)) + 112|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 | 2;
  $38 = $37&255;
  HEAP8[$34>>0] = $38;
  $39 = ((($13)) + 136|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41 | 2;
  $43 = $42&255;
  HEAP8[$39>>0] = $43;
  $44 = ((($13)) + 160|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $46 | 2;
  $48 = $47&255;
  HEAP8[$44>>0] = $48;
  $49 = ((($13)) + 184|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 | 2;
  $53 = $52&255;
  HEAP8[$49>>0] = $53;
  $54 = ((($13)) + 208|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $56 | 2;
  $58 = $57&255;
  HEAP8[$54>>0] = $58;
  $59 = ((($13)) + 232|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 | 2;
  $63 = $62&255;
  HEAP8[$59>>0] = $63;
  $64 = ((($13)) + 256|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $66 | 2;
  $68 = $67&255;
  HEAP8[$64>>0] = $68;
  $69 = ((($13)) + 280|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 | 2;
  $73 = $72&255;
  HEAP8[$69>>0] = $73;
  $74 = HEAP16[$0>>1]|0;
  _avr_register_io_write($avr,$74,112,$p);
  $75 = ((($p)) + 46|0);
  $76 = HEAP16[$75>>1]|0;
  _avr_register_io_read($avr,$76,113,$p);
  $77 = HEAP16[$75>>1]|0;
  _avr_register_io_write($avr,$77,114,$p);
  $78 = ((($p)) + 44|0);
  $79 = HEAP16[$78>>1]|0;
  _avr_register_io_write($avr,$79,115,$p);
  STACKTOP = sp;return;
 }
}
function _avr_ioport_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _avr_irq_register_notify($1,116,$port);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 _avr_irq_register_notify($3,116,$port);
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 48|0);
 _avr_irq_register_notify($5,116,$port);
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 72|0);
 _avr_irq_register_notify($7,116,$port);
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 96|0);
 _avr_irq_register_notify($9,116,$port);
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 120|0);
 _avr_irq_register_notify($11,116,$port);
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($12)) + 144|0);
 _avr_irq_register_notify($13,116,$port);
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 168|0);
 _avr_irq_register_notify($15,116,$port);
 return;
}
function _avr_ioport_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $$1 = 0, $$pre = 0, $$pre$phi13Z2D = 0, $$pre10 = 0, $$pre11 = 0, $$pre7 = 0, $$pre8 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $o$1 = 0, $o$1$1 = 0, $o$1$2 = 0, $o$1$3 = 0, $o$1$4 = 0, $o$1$5 = 0, $o$1$6 = 0, $o$23 = 0, $res$0 = 0;
 var $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($io_param|0)==(0|0);
 if ($2) {
  $$1 = -1;
  return ($$1|0);
 }
 $cond = ($ctl|0)==(1768908658);
 if (!($cond)) {
  $34 = ((($port)) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35&255;
  $sext = $35 << 24;
  $37 = $sext >> 24;
  $38 = $37 | 1768911616;
  $39 = ($38|0)==($ctl|0);
  if ($39) {
   $40 = $35 >>> 16;
   $41 = ((($1)) + 5892|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $37 & 127;
   $44 = (($42) + ($40)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $46 << 7;
   $48 = $47 | $43;
   $49 = ((($port)) + 44|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 & 65535;
   $52 = (($42) + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 << 15;
   $56 = $48 | $55;
   $57 = $50 >>> 16;
   $58 = (($42) + ($57)|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = $60 << 23;
   $62 = $56 | $61;
   HEAP32[$io_param>>2] = $62;
   $$pre = HEAP8[$34>>0]|0;
   $64 = $$pre;$res$0 = 0;
  } else {
   $64 = $36;$res$0 = -1;
  }
  $63 = $64 << 24 >> 24;
  $65 = $63 | 1768910848;
  $66 = ($65|0)==($ctl|0);
  if (!($66)) {
   $$1 = $res$0;
   return ($$1|0);
  }
  $67 = HEAP32[$io_param>>2]|0;
  $68 = $67 >>> 7;
  $69 = $68&255;
  $70 = ((($port)) + 114|0);
  HEAP8[$70>>0] = $69;
  $71 = HEAP32[$io_param>>2]|0;
  $72 = $71 >>> 15;
  $73 = $72&255;
  $74 = ((($port)) + 115|0);
  HEAP8[$74>>0] = $73;
  $$1 = 0;
  return ($$1|0);
 }
 $3 = HEAP32[$io_param>>2]|0;
 $4 = $3 & 511;
 $5 = ((($port)) + 42|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $9 = ((($port)) + 46|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($4|0)==($11|0);
  if (!($12)) {
   $13 = ((($port)) + 44|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = ($4|0)==($15|0);
   if (!($16)) {
    $$1 = -1;
    return ($$1|0);
   }
  }
 }
 $17 = $3 & 1044480;
 $18 = ($17|0)==(1044480);
 $19 = ((($port)) + 24|0);
 if ($18) {
  $24 = HEAP32[$19>>2]|0;
  $25 = ((($24)) + 192|0);
  $26 = ((($io_param)) + 4|0);
  HEAP32[$26>>2] = $25;
  $$pre$phi13Z2D = $26;$o$23 = 1;
 } else {
  $20 = ((($io_param)) + 4|0);
  $21 = $3 >>> 12;
  $22 = $21 & 1;
  $23 = ($22|0)==(0);
  if ($23) {
   $o$1 = 0;
  } else {
   $27 = $3 >>> 9;
   $28 = $27 & 7;
   $29 = HEAP32[$19>>2]|0;
   $30 = (($29) + (($28*24)|0)|0);
   HEAP32[$20>>2] = $30;
   $o$1 = 1;
  }
  $31 = $21 & 2;
  $32 = ($31|0)==(0);
  if ($32) {
   $o$1$1 = $o$1;
  } else {
   $75 = $3 >>> 9;
   $76 = $75 & 7;
   $77 = (($76) + 1)|0;
   $78 = HEAP32[$19>>2]|0;
   $79 = (($78) + (($77*24)|0)|0);
   $80 = (($o$1) + 1)|0;
   $81 = (($20) + ($o$1<<2)|0);
   HEAP32[$81>>2] = $79;
   $o$1$1 = $80;
  }
  $82 = $21 & 4;
  $83 = ($82|0)==(0);
  if ($83) {
   $92 = $3;$o$1$2 = $o$1$1;
  } else {
   $84 = $3 >>> 9;
   $85 = $84 & 7;
   $86 = (($85) + 2)|0;
   $87 = HEAP32[$19>>2]|0;
   $88 = (($87) + (($86*24)|0)|0);
   $89 = (($o$1$1) + 1)|0;
   $90 = (($20) + ($o$1$1<<2)|0);
   HEAP32[$90>>2] = $88;
   $$pre7 = HEAP32[$io_param>>2]|0;
   $92 = $$pre7;$o$1$2 = $89;
  }
  $91 = $92 & 32768;
  $93 = ($91|0)==(0);
  if ($93) {
   $102 = $92;$o$1$3 = $o$1$2;
  } else {
   $94 = $92 >>> 9;
   $95 = $94 & 7;
   $96 = (($95) + 3)|0;
   $97 = HEAP32[$19>>2]|0;
   $98 = (($97) + (($96*24)|0)|0);
   $99 = (($o$1$2) + 1)|0;
   $100 = (($20) + ($o$1$2<<2)|0);
   HEAP32[$100>>2] = $98;
   $$pre8 = HEAP32[$io_param>>2]|0;
   $102 = $$pre8;$o$1$3 = $99;
  }
  $101 = $102 & 65536;
  $103 = ($101|0)==(0);
  if ($103) {
   $112 = $102;$o$1$4 = $o$1$3;
  } else {
   $104 = $102 >>> 9;
   $105 = $104 & 7;
   $106 = (($105) + 4)|0;
   $107 = HEAP32[$19>>2]|0;
   $108 = (($107) + (($106*24)|0)|0);
   $109 = (($o$1$3) + 1)|0;
   $110 = (($20) + ($o$1$3<<2)|0);
   HEAP32[$110>>2] = $108;
   $$pre9 = HEAP32[$io_param>>2]|0;
   $112 = $$pre9;$o$1$4 = $109;
  }
  $111 = $112 & 131072;
  $113 = ($111|0)==(0);
  if ($113) {
   $122 = $112;$o$1$5 = $o$1$4;
  } else {
   $114 = $112 >>> 9;
   $115 = $114 & 7;
   $116 = (($115) + 5)|0;
   $117 = HEAP32[$19>>2]|0;
   $118 = (($117) + (($116*24)|0)|0);
   $119 = (($o$1$4) + 1)|0;
   $120 = (($20) + ($o$1$4<<2)|0);
   HEAP32[$120>>2] = $118;
   $$pre10 = HEAP32[$io_param>>2]|0;
   $122 = $$pre10;$o$1$5 = $119;
  }
  $121 = $122 & 262144;
  $123 = ($121|0)==(0);
  if ($123) {
   $132 = $122;$o$1$6 = $o$1$5;
  } else {
   $124 = $122 >>> 9;
   $125 = $124 & 7;
   $126 = (($125) + 6)|0;
   $127 = HEAP32[$19>>2]|0;
   $128 = (($127) + (($126*24)|0)|0);
   $129 = (($o$1$5) + 1)|0;
   $130 = (($20) + ($o$1$5<<2)|0);
   HEAP32[$130>>2] = $128;
   $$pre11 = HEAP32[$io_param>>2]|0;
   $132 = $$pre11;$o$1$6 = $129;
  }
  $131 = $132 & 524288;
  $133 = ($131|0)==(0);
  if ($133) {
   $$pre$phi13Z2D = $20;$o$23 = $o$1$6;
  } else {
   $134 = $132 >>> 9;
   $135 = $134 & 7;
   $136 = (($135) + 7)|0;
   $137 = HEAP32[$19>>2]|0;
   $138 = (($137) + (($136*24)|0)|0);
   $139 = (($o$1$6) + 1)|0;
   $140 = (($20) + ($o$1$6<<2)|0);
   HEAP32[$140>>2] = $138;
   $141 = ($139|0)<(8);
   if ($141) {
    $$pre$phi13Z2D = $20;$o$23 = $139;
   } else {
    $$1 = 8;
    return ($$1|0);
   }
  }
 }
 $33 = (($$pre$phi13Z2D) + ($o$23<<2)|0);
 HEAP32[$33>>2] = 0;
 $$1 = $o$23;
 return ($$1|0);
}
function _avr_ioport_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $0 = ((($param)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 240|0);
 $3 = $v&255;
 _avr_raise_irq($2,$3);
 _avr_ioport_update_irqs($param);
 return;
}
function _avr_ioport_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 65535;
 $3 = ((($avr)) + 5892|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $1 >>> 16;
 $8 = (($4) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $6&255;
 $12 = $11 ^ 255;
 $13 = $10 & $12;
 $14 = ((($param)) + 42|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = (($4) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 & $6;
 $20 = $19&255;
 $21 = $20 | $13;
 $22 = $21&255;
 $23 = $addr&65535;
 $24 = (($4) + ($23)|0);
 HEAP8[$24>>0] = $22;
 $25 = (_avr_core_watch_read($avr,$addr)|0);
 $26 = ((($param)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 264|0);
 $29 = $25&255;
 _avr_raise_irq($28,$29);
 return ($25|0);
}
function _avr_ioport_pin_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 42|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ((($avr)) + 5892|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 ^ $v;
 _avr_core_watch_write($avr,$1,$7);
 $8 = ((($param)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 240|0);
 $11 = $7&255;
 _avr_raise_irq($10,$11);
 _avr_ioport_update_irqs($param);
 return;
}
function _avr_ioport_ddr_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 216|0);
 $3 = $v&255;
 _avr_raise_irq($2,$3);
 _avr_core_watch_write($avr,$addr,$v);
 _avr_ioport_update_irqs($param);
 return;
}
function _avr_uart_reset($io) {
 $io = $io|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($io)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($io)) + 212|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($io)) + 220|0);
  $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
  $7 = $6 & 511;
  $8 = $7&65535;
  $9 = ($8<<16>>16)==(0);
  if (!($9)) {
   $10 = $6 >>> 12;
   $11 = $10 & 255;
   $12 = $6 >>> 9;
   $13 = $12 & 7;
   $14 = $11 << $13;
   $15 = ((($1)) + 5892|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($7)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 | $14;
   $21 = $20&255;
   _avr_core_watch_write($1,$8,$21);
  }
 }
 $22 = ((($io)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 _avr_irq_register_notify($23,117,$io);
 _avr_cycle_timer_cancel($1,118,$io);
 _avr_cycle_timer_cancel($1,119,$io);
 $24 = ((($io)) + 276|0);
 /* fence */;
 $25 = ((($24)) + 68|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($24)) + 66|0);
 HEAP16[$26>>1] = 0;
 $27 = ((($24)) + 64|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($io)) + 72|0);
 $29 = HEAPU8[$28>>0]|(HEAPU8[$28+1>>0]<<8)|(HEAPU8[$28+2>>0]<<16)|(HEAPU8[$28+3>>0]<<24);
 $30 = $29 & 511;
 $31 = $30&65535;
 $32 = ($31<<16>>16)==(0);
 if ($32) {
  $$pre = ((($1)) + 5892|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $33 = $29 >>> 12;
  $34 = $33 & 255;
  $35 = $29 >>> 9;
  $36 = $35 & 7;
  $37 = $34 << $36;
  $38 = ((($1)) + 5892|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($30)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $42 | $37;
  $44 = $43&255;
  _avr_core_watch_write($1,$31,$44);
  $$pre$phiZ2D = $38;
 }
 $45 = ((($io)) + 76|0);
 $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8)|(HEAPU8[$45+2>>0]<<16)|(HEAPU8[$45+3>>0]<<24);
 $47 = $46 & 511;
 $48 = $47&65535;
 $49 = $46 >>> 12;
 $50 = $49 & 255;
 $51 = $46 >>> 9;
 $52 = $51 & 7;
 $53 = $50 << $52;
 $54 = HEAP32[$$pre$phiZ2D>>2]|0;
 $55 = (($54) + ($47)|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $53 ^ 255;
 $59 = $58 & $57;
 $60 = $59&255;
 _avr_core_watch_write($1,$48,$60);
 $61 = ((($io)) + 60|0);
 $62 = HEAPU8[$61>>0]|(HEAPU8[$61+1>>0]<<8)|(HEAPU8[$61+2>>0]<<16)|(HEAPU8[$61+3>>0]<<24);
 $63 = $62 & 511;
 $64 = $63&65535;
 $65 = ($64<<16>>16)==(0);
 if ($65) {
  $77 = ((($io)) + 352|0);
  $78 = $77;
  $79 = $78;
  HEAP32[$79>>2] = 100;
  $80 = (($78) + 4)|0;
  $81 = $80;
  HEAP32[$81>>2] = 0;
  return;
 }
 $66 = $62 >>> 12;
 $67 = $66 & 255;
 $68 = $62 >>> 9;
 $69 = $68 & 7;
 $70 = $67 << $69;
 $71 = HEAP32[$$pre$phiZ2D>>2]|0;
 $72 = (($71) + ($63)|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 | $70;
 $76 = $75&255;
 _avr_core_watch_write($1,$64,$76);
 $77 = ((($io)) + 352|0);
 $78 = $77;
 $79 = $78;
 HEAP32[$79>>2] = 100;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = 0;
 return;
}
function _avr_uart_irq_input($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx2$val = 0, $$idx2$val$pre = 0, $$idx3$val = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($param)) + 56|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = ((($1)) + 5892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $3 >>> 9;
 $12 = $11 & 7;
 $13 = $10 >>> $12;
 $14 = $3 >>> 12;
 $15 = $13 & $14;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 $17 = ((($param)) + 276|0);
 $$idx = ((($param)) + 340|0);
 $$idx$val = HEAP16[$$idx>>1]|0;
 $$idx1 = ((($param)) + 342|0);
 $$idx1$val = HEAP16[$$idx1>>1]|0;
 $18 = ($$idx$val<<16>>16)==($$idx1$val<<16>>16);
 if ($18) {
  $19 = ((($param)) + 352|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  _avr_cycle_timer_register_usec($1,$22,118,$param);
  $$pre = HEAP16[$$idx1>>1]|0;
  $$pre4 = HEAP16[$$idx>>1]|0;
  $27 = $$pre;$31 = $$pre4;
 } else {
  $27 = $$idx1$val;$31 = $$idx$val;
 }
 $26 = $27&65535;
 $28 = (($26) + 1)|0;
 $29 = $28 & 63;
 $30 = $31&65535;
 $32 = ($30|0)==($29|0);
 if ($32) {
  $$idx2$val = $31;$$idx3$val = $27;
 } else {
  $33 = $value&255;
  $34 = $29&65535;
  $35 = (($17) + ($26)|0);
  HEAP8[$35>>0] = $33;
  /* fence */;
  HEAP16[$$idx1>>1] = $34;
  $$idx2$val$pre = HEAP16[$$idx>>1]|0;
  $$idx2$val = $$idx2$val$pre;$$idx3$val = $34;
 }
 $36 = $$idx3$val&65535;
 $37 = (($36) + 1)|0;
 $38 = $37 & 63;
 $39 = $$idx2$val&65535;
 $40 = ($39|0)==($38|0);
 if (!($40)) {
  return;
 }
 $41 = ((($param)) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 72|0);
 _avr_raise_irq($43,1);
 return;
}
function _avr_uart_rxc_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 56|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  tempRet0 = (0);
  return 0;
 }
 $6 = ((($avr)) + 5892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $3 >>> 9;
 $12 = $11 & 7;
 $13 = $10 >>> $12;
 $14 = $3 >>> 12;
 $15 = $13 & $14;
 $16 = ($15|0)==(0);
 if ($16) {
  tempRet0 = (0);
  return 0;
 }
 $17 = ((($param)) + 84|0);
 (_avr_raise_interrupt($avr,$17)|0);
 tempRet0 = (0);
 return 0;
}
function _avr_uart_txc_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 60|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  tempRet0 = (0);
  return 0;
 }
 $6 = ((($avr)) + 5892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $3 >>> 9;
 $12 = $11 & 7;
 $13 = $10 >>> $12;
 $14 = $3 >>> 12;
 $15 = $13 & $14;
 $16 = ($15|0)==(0);
 if ($16) {
  tempRet0 = (0);
  return 0;
 }
 $17 = ((($param)) + 212|0);
 (_avr_raise_interrupt($avr,$17)|0);
 $18 = ((($param)) + 148|0);
 (_avr_raise_interrupt($avr,$18)|0);
 tempRet0 = (0);
 return 0;
}
function _avr_uart_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=350748; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($p)) + 348|0);
 HEAP32[$0>>2] = 3;
 _avr_register_io($avr,$p);
 $1 = ((($p)) + 84|0);
 _avr_register_vector($avr,$1);
 $2 = ((($p)) + 148|0);
 _avr_register_vector($avr,$2);
 $3 = ((($p)) + 212|0);
 _avr_register_vector($avr,$3);
 $4 = ((($p)) + 40|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = $6 | 1969320448;
 (_avr_io_setirqs($p,$7,4,0)|0);
 $8 = ((($p)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 88|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 | 2;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 $15 = ((($p)) + 48|0);
 $16 = HEAP16[$15>>1]|0;
 _avr_register_io_write($avr,$16,120,$p);
 $17 = HEAP16[$15>>1]|0;
 _avr_register_io_read($avr,$17,121,$p);
 $18 = ((($p)) + 92|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 511;
 $21 = $20&65535;
 _avr_register_io_read($avr,$21,122,$p);
 $22 = HEAP8[$3>>0]|0;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = ((($p)) + 216|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 511;
  $27 = $26&65535;
  _avr_register_io_write($avr,$27,123,$p);
 }
 $28 = ((($p)) + 50|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = ($29<<16>>16)==(0);
 if (!($30)) {
  _avr_register_io_write($avr,$29,123,$p);
 }
 $31 = ((($p)) + 80|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = ($32<<16>>16)==(0);
 if ($33) {
  return;
 }
 _avr_register_io_write($avr,$32,124,$p);
 return;
}
function _avr_uart_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($io_param|0)==(0|0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = ((($port)) + 40|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = $3 | 1969320704;
 $5 = ($4|0)==($ctl|0);
 if ($5) {
  $6 = HEAP32[$io_param>>2]|0;
  $7 = ((($port)) + 348|0);
  HEAP32[$7>>2] = $6;
  $res$0 = 0;
 } else {
  $res$0 = -1;
 }
 $8 = $3 | 1969317632;
 $9 = ($8|0)==($ctl|0);
 if (!($9)) {
  $$0 = $res$0;
  return ($$0|0);
 }
 $10 = ((($port)) + 348|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$io_param>>2] = $11;
 $$0 = 0;
 return ($$0|0);
}
function _avr_uart_udr_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _avr_core_watch_write($avr,$addr,$v);
 $0 = ((($param)) + 212|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($param)) + 220|0);
  $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
  $5 = $4 & 511;
  $6 = $5&65535;
  $7 = $4 >>> 12;
  $8 = $7 & 255;
  $9 = $4 >>> 9;
  $10 = $9 & 7;
  $11 = $8 << $10;
  $12 = ((($avr)) + 5892|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($5)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $11 ^ 255;
  $18 = $17 & $16;
  $19 = $18&255;
  _avr_core_watch_write($avr,$6,$19);
 }
 $20 = ((($param)) + 352|0);
 $21 = $20;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 _avr_cycle_timer_register_usec($avr,$23,119,$param);
 $27 = ((($param)) + 348|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 2;
 $30 = ($29|0)==(0);
 do {
  if (!($30)) {
   $31 = ((($param)) + 360|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    $34 = (_malloc(256)|0);
    HEAP32[$31>>2] = $34;
    $41 = $34;
   } else {
    $41 = $32;
   }
   $35 = ($v&255)<(32);
   $36 = $35 ? 46 : $v;
   $37 = ((($param)) + 364|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
   $40 = (($41) + ($38)|0);
   HEAP8[$40>>0] = $36;
   $42 = HEAP32[$37>>2]|0;
   $43 = HEAP32[$31>>2]|0;
   $44 = (($43) + ($42)|0);
   HEAP8[$44>>0] = 0;
   $45 = ($v<<24>>24)==(10);
   if (!($45)) {
    $46 = HEAP32[$37>>2]|0;
    $47 = ($46|0)==(256);
    if (!($47)) {
     break;
    }
   }
   HEAP32[$37>>2] = 0;
   $48 = HEAP32[$31>>2]|0;
   HEAP32[$vararg_buffer>>2] = $48;
   _avr_global_logger($avr,3,357752,$vararg_buffer);
  }
 } while(0);
 $49 = ((($param)) + 60|0);
 $50 = HEAPU8[$49>>0]|(HEAPU8[$49+1>>0]<<8)|(HEAPU8[$49+2>>0]<<16)|(HEAPU8[$49+3>>0]<<24);
 $51 = $50 & 511;
 $52 = ($51|0)==(0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = ((($avr)) + 5892|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($51)|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $50 >>> 9;
 $59 = $58 & 7;
 $60 = $57 >>> $59;
 $61 = $50 >>> 12;
 $62 = $60 & $61;
 $63 = ($62|0)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = ((($param)) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($65)) + 24|0);
 $67 = $v&255;
 _avr_raise_irq($66,$67);
 STACKTOP = sp;return;
}
function _avr_uart_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$0 = 0, $$0$i2 = 0, $$idx$val = 0, $$idx1$val = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 92|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = $2&65535;
 $4 = $1 >>> 12;
 $5 = $4 & 255;
 $6 = $1 >>> 9;
 $7 = $6 & 7;
 $8 = $5 << $7;
 $9 = ((($avr)) + 5892|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($2)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $8 ^ 255;
 $15 = $14 & $13;
 $16 = $15&255;
 _avr_core_watch_write($avr,$3,$16);
 $17 = ((($param)) + 56|0);
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = $18 & 511;
 $20 = ($19|0)==(0);
 $$pre4 = HEAP32[$9>>2]|0;
 if (!($20)) {
  $21 = (($$pre4) + ($19)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $18 >>> 9;
  $25 = $24 & 7;
  $26 = $23 >>> $25;
  $27 = $18 >>> 12;
  $28 = $26 & $27;
  $29 = ($28|0)==(0);
  if (!($29)) {
   $32 = ((($param)) + 340|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = ((($param)) + 342|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = ($33<<16>>16)==($36<<16>>16);
   if ($37) {
    $$0$i2 = 0;$46 = $$pre4;
   } else {
    $38 = ((($param)) + 276|0);
    $39 = (($38) + ($34)|0);
    $40 = HEAP8[$39>>0]|0;
    /* fence */;
    $41 = (($34) + 1)|0;
    $42 = $41 & 63;
    $43 = $42&65535;
    HEAP16[$32>>1] = $43;
    $$pre = HEAP32[$9>>2]|0;
    $$0$i2 = $40;$46 = $$pre;
   }
   $44 = $addr&65535;
   $45 = (($46) + ($44)|0);
   HEAP8[$45>>0] = $$0$i2;
   $47 = (_avr_core_watch_read($avr,$addr)|0);
   $$idx$val = HEAP16[$32>>1]|0;
   $$idx1$val = HEAP16[$35>>1]|0;
   $48 = ($$idx$val<<16>>16)==($$idx1$val<<16>>16);
   if ($48) {
    $$0 = $47;
    return ($$0|0);
   }
   $49 = ((($param)) + 352|0);
   $50 = $49;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($50) + 4)|0;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   _avr_cycle_timer_register_usec($avr,$52,118,$param);
   $$0 = $47;
   return ($$0|0);
  }
 }
 $30 = $addr&65535;
 $31 = (($$pre4) + ($30)|0);
 HEAP8[$31>>0] = 0;
 (_avr_core_watch_read($avr,$addr)|0);
 $$0 = 0;
 return ($$0|0);
}
function _avr_uart_rxc_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$0$i10 = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp = 0, $phitmp16 = 0, $phitmp19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_avr_core_watch_read($avr,$addr)|0);
 $1 = ((($param)) + 56|0);
 $2 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 $3 = $2 & 511;
 $4 = ($3|0)==(0);
 if ($4) {
  $59 = 1;
 } else {
  $5 = ((($avr)) + 5892|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($3)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $2 >>> 9;
  $11 = $10 & 7;
  $12 = $9 >>> $11;
  $13 = $2 >>> 12;
  $14 = $12 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $59 = 1;
  } else {
   $16 = ((($param)) + 92|0);
   $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
   $18 = $17 & 511;
   $19 = ($18|0)==(0);
   if ($19) {
    $$0$i10 = 1;
   } else {
    $20 = (($6) + ($18)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = $17 >>> 9;
    $24 = $23 & 7;
    $25 = $22 >>> $24;
    $26 = $17 >>> 12;
    $27 = $25 & $26;
    $phitmp16 = ($27|0)==(0);
    $$0$i10 = $phitmp16;
   }
   $phitmp = $$0$i10&1;
   $59 = $phitmp;
  }
 }
 $28 = ((($param)) + 60|0);
 $29 = HEAPU8[$28>>0]|(HEAPU8[$28+1>>0]<<8)|(HEAPU8[$28+2>>0]<<16)|(HEAPU8[$28+3>>0]<<24);
 $30 = $29 & 511;
 $31 = ($30|0)==(0);
 if ($31) {
  $61 = 0;
 } else {
  $32 = ((($avr)) + 5892|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $29 >>> 9;
  $38 = $37 & 7;
  $39 = $36 >>> $38;
  $40 = $29 >>> 12;
  $41 = $39 & $40;
  $42 = ($41|0)==(0);
  if ($42) {
   $61 = 0;
  } else {
   $43 = ((($param)) + 156|0);
   $44 = HEAPU8[$43>>0]|(HEAPU8[$43+1>>0]<<8)|(HEAPU8[$43+2>>0]<<16)|(HEAPU8[$43+3>>0]<<24);
   $45 = $44 & 511;
   $46 = ($45|0)==(0);
   if ($46) {
    $61 = 0;
   } else {
    $47 = (($33) + ($45)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $44 >>> 9;
    $51 = $50 & 7;
    $52 = $49 >>> $51;
    $53 = $44 >>> 12;
    $54 = $52 & $53;
    $phitmp19 = ($54|0)!=(0);
    $61 = $phitmp19;
   }
  }
 }
 $55 = ((($param)) + 348|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 & 1;
 $58 = ($57|0)==(0);
 $60 = ($59|0)==(0);
 $or$cond = $60 | $58;
 $or$cond2 = $61 | $or$cond;
 if ($or$cond2) {
  $63 = $2;
 } else {
  (_usleep(1)|0);
  $$pre = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
  $63 = $$pre;
 }
 $62 = $63 & 511;
 $64 = ($62|0)==(0);
 if ($64) {
  return ($0|0);
 }
 $65 = ((($avr)) + 5892|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($62)|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $63 >>> 9;
 $71 = $70 & 7;
 $72 = $69 >>> $71;
 $73 = $63 >>> 12;
 $74 = $72 & $73;
 $75 = ($74|0)==(0);
 if ($75) {
  return ($0|0);
 }
 $$idx = ((($param)) + 340|0);
 $$idx$val = HEAP16[$$idx>>1]|0;
 $$idx3 = ((($param)) + 342|0);
 $$idx3$val = HEAP16[$$idx3>>1]|0;
 $76 = ($$idx$val<<16>>16)==($$idx3$val<<16>>16);
 if (!($76)) {
  return ($0|0);
 }
 $77 = ((($param)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 72|0);
 _avr_raise_irq($79,0);
 $80 = HEAP32[$77>>2]|0;
 $81 = ((($80)) + 48|0);
 _avr_raise_irq($81,1);
 return ($0|0);
}
function _avr_uart_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$0$i = 0, $$0$i3 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 212|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $3 = $addr&65535;
 $4 = ((($param)) + 216|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 511;
 $7 = ($3|0)==($6|0);
 if ($7) {
  $8 = ($addr<<16>>16)==(0);
  if ($8) {
   $$0$i = 0;
  } else {
   $9 = ((($avr)) + 5892|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($3)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = $5 >>> 9;
   $15 = $14 & 7;
   $16 = $13 >>> $15;
   $17 = $5 >>> 12;
   $18 = $16 & $17;
   $19 = $18&255;
   $$0$i = $19;
  }
  _avr_core_watch_write($avr,$addr,$v);
  $20 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
  $21 = $20 & 511;
  $22 = ($21|0)==(0);
  if (!($22)) {
   $23 = ((($avr)) + 5892|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $20 >>> 9;
   $29 = $28 & 7;
   $30 = $27 >>> $29;
   $31 = $20 >>> 12;
   $32 = $30 & $31;
   $33 = ($$0$i<<24>>24)!=(0);
   $34 = ($32|0)==(0);
   $or$cond = $33 | $34;
   if (!($or$cond)) {
    $35 = (_avr_cycle_timer_status($avr,119,$param)|0);
    $36 = tempRet0;
    $37 = ($35|0)==(0);
    $38 = ($36|0)==(0);
    $39 = $37 & $38;
    if ($39) {
     (_avr_raise_interrupt($avr,$0)|0);
    }
   }
  }
 }
 $$pr = HEAP8[$0>>0]|0;
 $40 = ($$pr<<24>>24)==(0);
 if ($40) {
  return;
 }
 $41 = ((($param)) + 220|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 511;
 $44 = ($3|0)==($43|0);
 if (!($44)) {
  return;
 }
 $45 = ((($param)) + 148|0);
 $46 = ((($param)) + 156|0);
 $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
 $48 = $47 & 511;
 $49 = ($48|0)==(0);
 if ($49) {
  $$0$i3 = 0;
 } else {
  $50 = ((($avr)) + 5892|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($48)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $47 >>> 9;
  $56 = $55 & 7;
  $57 = $54 >>> $56;
  $58 = $47 >>> 12;
  $59 = $57 & $58;
  $60 = $59&255;
  $$0$i3 = $60;
 }
 $61 = ((($param)) + 64|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 & 511;
 $64 = ($3|0)!=($63|0);
 $65 = ($addr<<16>>16)==(0);
 $or$cond9 = $64 | $65;
 if (!($or$cond9)) {
  $66 = $62 >>> 12;
  $67 = $66 & 255;
  $68 = $62 >>> 9;
  $69 = $68 & 7;
  $70 = $67 << $69;
  $71 = ((($avr)) + 5892|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($3)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $70 ^ 255;
  $77 = $75 & $76;
  $78 = $v&255;
  $79 = $70 & $78;
  $80 = $77 | $79;
  $81 = $80&255;
  _avr_core_watch_write($avr,$addr,$81);
 }
 (_avr_clear_interrupt_if($avr,$45,$$0$i3)|0);
 return;
}
function _avr_uart_baud_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$0$i = 0, $$0$i1 = 0, $$0$i3 = 0, $$0$i5 = 0, $$0$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $baud$0 = 0, $phitmp = 0, $phitmp13 = 0, $phitmp16 = 0, $phitmp18 = 0, $phitmp19 = 0;
 var $phitmp20 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 _avr_core_watch_write($avr,$addr,$v);
 $0 = ((($param)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 65535;
 $3 = ((($avr)) + 5892|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $1 >>> 16;
 $9 = (($4) + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $12 | $7;
 $14 = ((($avr)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 1)|0;
 $17 = (($15>>>0) / ($16>>>0))&-1;
 $18 = ((($param)) + 64|0);
 $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8)|(HEAPU8[$18+2>>0]<<16)|(HEAPU8[$18+3>>0]<<24);
 $20 = $19 & 511;
 $21 = ($20|0)==(0);
 if ($21) {
  $$0$i = 4;
 } else {
  $22 = (($4) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $19 >>> 9;
  $26 = $25 & 7;
  $27 = $24 >>> $26;
  $28 = $19 >>> 12;
  $29 = $27 & $28;
  $phitmp = ($29|0)==(0);
  $phitmp13 = $phitmp ? 4 : 3;
  $$0$i = $phitmp13;
 }
 $baud$0 = $17 >>> $$0$i;
 $30 = ((($param)) + 72|0);
 $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $32 = $31 & 511;
 $33 = ($32|0)==(0);
 if ($33) {
  $$0$i7 = 0;
 } else {
  $34 = (($4) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $31 >>> 9;
  $38 = $37 & 7;
  $39 = $36 >>> $38;
  $40 = $31 >>> 12;
  $41 = $39 & $40;
  $$0$i7 = $41;
 }
 $42 = ((($param)) + 76|0);
 $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8)|(HEAPU8[$42+2>>0]<<16)|(HEAPU8[$42+3>>0]<<24);
 $44 = $43 & 511;
 $45 = ($44|0)==(0);
 if ($45) {
  $$0$i5 = 0;
 } else {
  $46 = (($4) + ($44)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $43 >>> 9;
  $50 = $49 & 7;
  $51 = $48 >>> $50;
  $52 = $43 >>> 12;
  $53 = $51 & $52;
  $phitmp16 = $53 << 2;
  $$0$i5 = $phitmp16;
 }
 $54 = $$0$i5 | $$0$i7;
 $55 = (350804 + ($54<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($param)) + 68|0);
 $58 = HEAPU8[$57>>0]|(HEAPU8[$57+1>>0]<<8)|(HEAPU8[$57+2>>0]<<16)|(HEAPU8[$57+3>>0]<<24);
 $59 = $58 & 511;
 $60 = ($59|0)==(0);
 if ($60) {
  $$0$i3 = 1;
 } else {
  $61 = (($4) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $58 >>> 9;
  $65 = $64 & 7;
  $66 = $63 >>> $65;
  $67 = $58 >>> 12;
  $68 = $66 & $67;
  $phitmp18 = (($68) + 1)|0;
  $$0$i3 = $phitmp18;
 }
 $69 = (($56) + 2)|0;
 $70 = (($69) + ($$0$i3))|0;
 $71 = ((($param)) + 40|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72 << 24 >> 24;
 if ($21) {
  $$0$i1 = 1;
 } else {
  $74 = (($4) + ($20)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $19 >>> 9;
  $78 = $77 & 7;
  $79 = $76 >>> $78;
  $80 = $19 >>> 12;
  $81 = $79 & $80;
  $phitmp19 = ($81|0)!=(0);
  $phitmp20 = $phitmp19 ? 2 : 1;
  $$0$i1 = $phitmp20;
 }
 HEAP32[$vararg_buffer>>2] = $73;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $baud$0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $$0$i1;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $56;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $$0$i3;
 _avr_global_logger($avr,3,357765,$vararg_buffer);
 $82 = (($baud$0>>>0) / ($70>>>0))&-1;
 $83 = (1000000 / ($82>>>0))&-1;
 $84 = ((($param)) + 352|0);
 $85 = $84;
 $86 = $85;
 HEAP32[$86>>2] = $83;
 $87 = (($85) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = 0;
 HEAP32[$vararg_buffer6>>2] = $83;
 _avr_global_logger($avr,3,357826,$vararg_buffer6);
 STACKTOP = sp;return;
}
function _avr_extint_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=350836; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $0 = ((($p)) + 48|0);
 _avr_register_vector($avr,$0);
 $1 = ((($p)) + 128|0);
 _avr_register_vector($avr,$1);
 $2 = ((($p)) + 208|0);
 _avr_register_vector($avr,$2);
 $3 = ((($p)) + 288|0);
 _avr_register_vector($avr,$3);
 $4 = ((($p)) + 368|0);
 _avr_register_vector($avr,$4);
 $5 = ((($p)) + 448|0);
 _avr_register_vector($avr,$5);
 $6 = ((($p)) + 528|0);
 _avr_register_vector($avr,$6);
 $7 = ((($p)) + 608|0);
 _avr_register_vector($avr,$7);
 (_avr_io_setirqs($p,1768846368,8,0)|0);
 return;
}
function _avr_extint_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 24|0);
 $1 = ((($port)) + 40|0);
 $2 = ((($port)) + 4|0);
 $i$01 = 0;
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + (($i$01*24)|0)|0);
  _avr_irq_register_notify($4,125,$port);
  $5 = (((($1) + (($i$01*80)|0)|0)) + 72|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = HEAP32[$2>>2]|0;
   $9 = (((($1) + (($i$01*80)|0)|0)) + 76|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = (_avr_io_getirq($8,$6,$11)|0);
   $13 = HEAP32[$0>>2]|0;
   $14 = (($13) + (($i$01*24)|0)|0);
   _avr_connect_irq($12,$14);
  }
  $15 = (($i$01) + 1)|0;
  $exitcond = ($15|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $15;
  }
 }
 return;
}
function _avr_extint_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$ = 0, $$03$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$02$i = 0, $mode$0 = 0, $not$ = 0, $or$cond = 0, $res$01$i = 0, $res$1$i = 0, $res$1$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($irq)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = ($value|0)!=(0);
 $not$ = $4 ^ 1;
 $6 = $5 ^ 1;
 $7 = ((($irq)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = ((($param)) + 40|0);
 $11 = (($10) + (($9*80)|0)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 511;
 $14 = ($13|0)!=(0);
 $15 = (($10) + (($8*80)|0)|0);
 $16 = $14 ? 2 : 1;
 $17 = ((($1)) + 5892|0);
 $$03$i = $15;$i$02$i = 0;$res$01$i = 0;
 while(1) {
  $18 = HEAP32[$$03$i>>2]|0;
  $19 = $18 & 511;
  $20 = ($19|0)==(0);
  if ($20) {
   $res$1$i = $res$01$i;
  } else {
   $21 = HEAP32[$17>>2]|0;
   $22 = (($21) + ($19)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $18 >>> 9;
   $26 = $25 & 7;
   $27 = $24 >>> $26;
   $28 = $18 >>> 12;
   $29 = $28 & 255;
   $30 = $29 & $27;
   $31 = $30 << $i$02$i;
   $32 = $res$01$i&255;
   $33 = $31 | $32;
   $34 = $33&255;
   $res$1$i = $34;
  }
  $35 = (($i$02$i) + 1)|0;
  $36 = ((($$03$i)) + 4|0);
  $exitcond$i = ($35|0)==($16|0);
  if ($exitcond$i) {
   $res$1$i$lcssa = $res$1$i;
   break;
  } else {
   $$03$i = $36;$i$02$i = $35;$res$01$i = $res$1$i;
  }
 }
 $37 = $5 & $not$;
 $$ = $4 & $6;
 if ($14) {
  $mode$0 = $res$1$i$lcssa;
 } else {
  $38 = $res$1$i$lcssa&255;
  $39 = (($38) + 2)|0;
  $40 = $39&255;
  $mode$0 = $40;
 }
 $41 = $mode$0&255;
 switch ($41|0) {
 case 3:  {
  if (!($37)) {
   return;
  }
  $44 = (((($10) + (($8*80)|0)|0)) + 8|0);
  (_avr_raise_interrupt($1,$44)|0);
  return;
  break;
 }
 case 1:  {
  $or$cond = $5 ^ $4;
  if (!($or$cond)) {
   return;
  }
  $42 = (((($10) + (($8*80)|0)|0)) + 8|0);
  (_avr_raise_interrupt($1,$42)|0);
  return;
  break;
 }
 case 2:  {
  if (!($$)) {
   return;
  }
  $43 = (((($10) + (($8*80)|0)|0)) + 8|0);
  (_avr_raise_interrupt($1,$43)|0);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _avr_eeprom_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=350908; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($p)) + 44|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (_malloc($2)|0);
 $4 = ((($p)) + 40|0);
 HEAP32[$4>>2] = $3;
 _memset(($3|0),-1,($2|0))|0;
 _avr_register_io($avr,$p);
 $5 = ((($p)) + 80|0);
 _avr_register_vector($avr,$5);
 $6 = ((($p)) + 49|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 _avr_register_io_write($avr,$8,126,$p);
 return;
}
function _avr_eeprom_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $switch$split2D = ($ctl|0)<(1701147504);
 if (!($switch$split2D)) {
  switch ($ctl|0) {
  case 1701147504:  {
   break;
  }
  default: {
   $$2 = -1;
   STACKTOP = sp;return ($$2|0);
  }
  }
  $0 = ($io_param|0)==(0|0);
  if (!($0)) {
   $1 = ((($io_param)) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP32[$io_param>>2]|0;
    $5 = ($4|0)==(0|0);
    if (!($5)) {
     $6 = ((($io_param)) + 4|0);
     $7 = HEAP16[$6>>1]|0;
     $8 = $7&65535;
     $9 = (($8) + ($2))|0;
     $10 = ((($port)) + 44|0);
     $11 = HEAP16[$10>>1]|0;
     $12 = $11&65535;
     $13 = ($9>>>0)>($12>>>0);
     if (!($13)) {
      $16 = ((($port)) + 40|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + ($8)|0);
      _memcpy(($18|0),($4|0),($2|0))|0;
      $19 = ((($port)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$1>>2]|0;
      $22 = HEAP16[$6>>1]|0;
      $23 = $22&65535;
      HEAP32[$vararg_buffer1>>2] = 357972;
      $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $21;
      $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
      HEAP32[$vararg_ptr5>>2] = $23;
      _avr_global_logger($20,3,357989,$vararg_buffer1);
      $$2 = -1;
      STACKTOP = sp;return ($$2|0);
     }
    }
   }
  }
  $14 = ((($port)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = 357972;
  _avr_global_logger($15,2,357921,$vararg_buffer);
  $$2 = -2;
  STACKTOP = sp;return ($$2|0);
 }
 switch ($ctl|0) {
 case 1701144432:  {
  break;
 }
 default: {
  $$2 = -1;
  STACKTOP = sp;return ($$2|0);
 }
 }
 $24 = ($io_param|0)==(0|0);
 if (!($24)) {
  $25 = ((($io_param)) + 4|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = ((($io_param)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + ($29))|0;
  $31 = ((($port)) + 44|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = ($30>>>0)>($33>>>0);
  if (!($34)) {
   $37 = HEAP32[$io_param>>2]|0;
   $38 = ($37|0)==(0|0);
   $39 = ((($port)) + 40|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($27)|0);
   if ($38) {
    HEAP32[$io_param>>2] = $41;
    $$2 = -1;
    STACKTOP = sp;return ($$2|0);
   } else {
    _memcpy(($37|0),($41|0),($29|0))|0;
    $$2 = -1;
    STACKTOP = sp;return ($$2|0);
   }
  }
 }
 $35 = ((($port)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$vararg_buffer6>>2] = 357972;
 _avr_global_logger($36,2,358046,$vararg_buffer6);
 $$2 = -2;
 STACKTOP = sp;return ($$2|0);
}
function _avr_eeprom_dealloc($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 HEAP32[$0>>2] = 0;
 return;
}
function _avr_eeprom_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$mask = 0, $$mask14 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr1$0 = 0, $addr2$0 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 68|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 if ($3) {
  _avr_core_watch_write($avr,$addr,$v);
  label = 4;
 } else {
  $4 = ((($avr)) + 5892|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $1 >>> 9;
  $10 = $9 & 7;
  $11 = $8 >>> $10;
  $12 = $1 >>> 12;
  $13 = $11 & $12;
  _avr_core_watch_write($avr,$addr,$v);
  $cond = ($13|0)==(0);
  if ($cond) {
   label = 4;
  } else {
   $28 = ((($param)) + 72|0);
   $29 = HEAPU8[$28>>0]|(HEAPU8[$28+1>>0]<<8)|(HEAPU8[$28+2>>0]<<16)|(HEAPU8[$28+3>>0]<<24);
   $30 = $29 & 511;
   $31 = ($30|0)==(0);
   if (!($31)) {
    $32 = HEAP32[$4>>2]|0;
    $33 = (($32) + ($30)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $29 >>> 9;
    $37 = $36 & 7;
    $38 = $35 >>> $37;
    $39 = $29 >>> 12;
    $40 = $38 & $39;
    $41 = ($40|0)==(0);
    if (!($41)) {
     $42 = ((($param)) + 46|0);
     $43 = HEAP16[$42>>1]|0;
     $44 = $43&255;
     $45 = ($44<<24>>24)==(0);
     $46 = ($43&65535) >>> 8;
     $47 = $46&65535;
     $48 = (($32) + ($47)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     if ($45) {
      $addr1$0 = $50;
     } else {
      $$mask = $43 & 255;
      $51 = $$mask&65535;
      $52 = (($32) + ($51)|0);
      $53 = HEAP8[$52>>0]|0;
      $54 = $53&255;
      $55 = $54 << 8;
      $56 = $55 | $50;
      $addr1$0 = $56;
     }
     $57 = ((($param)) + 48|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = (($32) + ($59)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $addr1$0 & 65535;
     $63 = ((($param)) + 40|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (($64) + ($62)|0);
     HEAP8[$65>>0] = $61;
     $66 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
     $67 = $66 & 511;
     $68 = $67&65535;
     $69 = $66 >>> 12;
     $70 = $69 & 255;
     $71 = $66 >>> 9;
     $72 = $71 & 7;
     $73 = $70 << $72;
     $74 = HEAP32[$4>>2]|0;
     $75 = (($74) + ($67)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = $73 ^ 255;
     $79 = $78 & $77;
     $80 = $79&255;
     _avr_core_watch_write($avr,$68,$80);
     _avr_cycle_timer_register_usec($avr,3400,128,$param);
    }
   }
  }
 }
 if ((label|0) == 4) {
  $14 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
  $15 = $14 & 511;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = ((($avr)) + 5892|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($15)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $14 >>> 9;
   $23 = $22 & 7;
   $24 = $21 >>> $23;
   $25 = $14 >>> 12;
   $26 = $24 & $25;
   $27 = ($26|0)==(0);
   if (!($27)) {
    _avr_cycle_timer_register($avr,4,0,127,$param);
   }
  }
 }
 $81 = ((($param)) + 76|0);
 $82 = HEAPU8[$81>>0]|(HEAPU8[$81+1>>0]<<8)|(HEAPU8[$81+2>>0]<<16)|(HEAPU8[$81+3>>0]<<24);
 $83 = $82 & 511;
 $84 = ($83|0)==(0);
 $$pre = ((($avr)) + 5892|0);
 if (!($84)) {
  $85 = HEAP32[$$pre>>2]|0;
  $86 = (($85) + ($83)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $82 >>> 9;
  $90 = $89 & 7;
  $91 = $88 >>> $90;
  $92 = $82 >>> 12;
  $93 = $91 & $92;
  $94 = ($93|0)==(0);
  if (!($94)) {
   $95 = ((($param)) + 46|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96&255;
   $98 = ($97<<24>>24)==(0);
   $99 = ($96&65535) >>> 8;
   $100 = $99&65535;
   $101 = (($85) + ($100)|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   if ($98) {
    $addr2$0 = $103;
   } else {
    $$mask14 = $96 & 255;
    $104 = $$mask14&65535;
    $105 = (($85) + ($104)|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = $107 << 8;
    $109 = $108 | $103;
    $addr2$0 = $109;
   }
   $110 = $addr2$0 & 65535;
   $111 = ((($param)) + 40|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($112) + ($110)|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = ((($param)) + 48|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = (($85) + ($117)|0);
   HEAP8[$118>>0] = $114;
  }
 }
 $119 = ((($param)) + 72|0);
 $120 = HEAPU8[$119>>0]|(HEAPU8[$119+1>>0]<<8)|(HEAPU8[$119+2>>0]<<16)|(HEAPU8[$119+3>>0]<<24);
 $121 = $120 & 511;
 $122 = $121&65535;
 $123 = $120 >>> 12;
 $124 = $123 & 255;
 $125 = $120 >>> 9;
 $126 = $125 & 7;
 $127 = $124 << $126;
 $128 = HEAP32[$$pre>>2]|0;
 $129 = (($128) + ($121)|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&255;
 $132 = $127 ^ 255;
 $133 = $132 & $131;
 $134 = $133&255;
 _avr_core_watch_write($avr,$122,$134);
 $135 = HEAPU8[$81>>0]|(HEAPU8[$81+1>>0]<<8)|(HEAPU8[$81+2>>0]<<16)|(HEAPU8[$81+3>>0]<<24);
 $136 = $135 & 511;
 $137 = $136&65535;
 $138 = $135 >>> 12;
 $139 = $138 & 255;
 $140 = $135 >>> 9;
 $141 = $140 & 7;
 $142 = $139 << $141;
 $143 = HEAP32[$$pre>>2]|0;
 $144 = (($143) + ($136)|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = $142 ^ 255;
 $148 = $147 & $146;
 $149 = $148&255;
 _avr_core_watch_write($avr,$137,$149);
 return;
}
function _avr_eempe_clear($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($param)) + 68|0);
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = $5 & 511;
 $7 = $6&65535;
 $8 = $5 >>> 12;
 $9 = $8 & 255;
 $10 = $5 >>> 9;
 $11 = $10 & 7;
 $12 = $9 << $11;
 $13 = ((($3)) + 5892|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($6)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $12 ^ 255;
 $19 = $18 & $17;
 $20 = $19&255;
 _avr_core_watch_write($3,$7,$20);
 tempRet0 = (0);
 return 0;
}
function _avr_eei_raise($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($param)) + 80|0);
 (_avr_raise_interrupt($3,$4)|0);
 tempRet0 = (0);
 return 0;
}
function _avr_timer_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=350948; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $0 = ((($p)) + 464|0);
 _avr_register_vector($avr,$0);
 $1 = ((($p)) + 528|0);
 _avr_register_vector($avr,$1);
 $2 = ((($p)) + 40|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = $4 | 1953329664;
 (_avr_io_setirqs($p,$5,5,0)|0);
 $6 = ((($p)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 2;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 $13 = ((($7)) + 40|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 | 2;
 $17 = $16&255;
 HEAP8[$13>>0] = $17;
 $18 = ((($p)) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 511;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = $20&65535;
  _avr_register_io_write($avr,$22,129,$p);
 }
 $23 = ((($p)) + 64|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 511;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = HEAP32[$18>>2]|0;
  $28 = $27 & 511;
  $29 = ($25|0)==($28|0);
  if (!($29)) {
   $30 = $25&65535;
   _avr_register_io_write($avr,$30,129,$p);
  }
 }
 $31 = ((($p)) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 511;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = HEAP32[$18>>2]|0;
  $36 = $35 & 511;
  $37 = ($33|0)==($36|0);
  if (!($37)) {
   $38 = HEAP32[$23>>2]|0;
   $39 = $38 & 511;
   $40 = ($33|0)==($39|0);
   if (!($40)) {
    $41 = $33&65535;
    _avr_register_io_write($avr,$41,129,$p);
   }
  }
 }
 $42 = ((($p)) + 72|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 511;
 $45 = ($44|0)==(0);
 if (!($45)) {
  $46 = HEAP32[$18>>2]|0;
  $47 = $46 & 511;
  $48 = ($44|0)==($47|0);
  if (!($48)) {
   $49 = HEAP32[$23>>2]|0;
   $50 = $49 & 511;
   $51 = ($44|0)==($50|0);
   if (!($51)) {
    $52 = HEAP32[$31>>2]|0;
    $53 = $52 & 511;
    $54 = ($44|0)==($53|0);
    if (!($54)) {
     $55 = $44&65535;
     _avr_register_io_write($avr,$55,129,$p);
    }
   }
  }
 }
 $56 = ((($p)) + 156|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 & 511;
 $59 = $58&65535;
 _avr_register_io_write($avr,$59,129,$p);
 $60 = ((($p)) + 160|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 & 511;
 $63 = ($62|0)==(0);
 if (!($63)) {
  $64 = HEAP32[$56>>2]|0;
  $65 = $64 & 511;
  $66 = ($62|0)==($65|0);
  if (!($66)) {
   $67 = $62&65535;
   _avr_register_io_write($avr,$67,129,$p);
  }
 }
 $68 = ((($p)) + 164|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 & 511;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $72 = HEAP32[$56>>2]|0;
  $73 = $72 & 511;
  $74 = ($70|0)==($73|0);
  if (!($74)) {
   $75 = HEAP32[$60>>2]|0;
   $76 = $75 & 511;
   $77 = ($70|0)==($76|0);
   if (!($77)) {
    $78 = $70&65535;
    _avr_register_io_write($avr,$78,129,$p);
   }
  }
 }
 $79 = ((($p)) + 168|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 & 511;
 $82 = ($81|0)==(0);
 if (!($82)) {
  $83 = HEAP32[$56>>2]|0;
  $84 = $83 & 511;
  $85 = ($81|0)==($84|0);
  if (!($85)) {
   $86 = HEAP32[$60>>2]|0;
   $87 = $86 & 511;
   $88 = ($81|0)==($87|0);
   if (!($88)) {
    $89 = HEAP32[$68>>2]|0;
    $90 = $89 & 511;
    $91 = ($81|0)==($90|0);
    if (!($91)) {
     $92 = $81&65535;
     _avr_register_io_write($avr,$92,129,$p);
    }
   }
  }
 }
 $93 = ((($p)) + 152|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 511;
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = $95&65535;
  _avr_register_io_write($avr,$97,129,$p);
 }
 $98 = ((($p)) + 472|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 & 511;
 $101 = $100&65535;
 _avr_register_io_write($avr,$101,130,$p);
 $102 = ((($p)) + 200|0);
 $103 = ((($p)) + 264|0);
 HEAP32[$103>>2] = $p;
 _avr_register_vector($avr,$102);
 $104 = ((($p)) + 268|0);
 $105 = HEAP16[$104>>1]|0;
 $106 = ($105<<16>>16)==(0);
 if (!($106)) {
  _avr_register_io_write($avr,$105,131,$102);
 }
 $107 = ((($p)) + 288|0);
 $108 = ((($p)) + 352|0);
 HEAP32[$108>>2] = $p;
 _avr_register_vector($avr,$107);
 $109 = ((($p)) + 356|0);
 $110 = HEAP16[$109>>1]|0;
 $111 = ($110<<16>>16)==(0);
 if (!($111)) {
  _avr_register_io_write($avr,$110,131,$107);
 }
 $112 = ((($p)) + 376|0);
 $113 = ((($p)) + 440|0);
 HEAP32[$113>>2] = $p;
 _avr_register_vector($avr,$112);
 $114 = ((($p)) + 444|0);
 $115 = HEAP16[$114>>1]|0;
 $116 = ($115<<16>>16)==(0);
 if ($116) {
  $117 = ((($p)) + 52|0);
  $118 = HEAP16[$117>>1]|0;
  _avr_register_io_write($avr,$118,132,$p);
  $119 = HEAP16[$117>>1]|0;
  _avr_register_io_read($avr,$119,133,$p);
  return;
 }
 _avr_register_io_write($avr,$115,131,$112);
 $117 = ((($p)) + 52|0);
 $118 = HEAP16[$117>>1]|0;
 _avr_register_io_write($avr,$118,132,$p);
 $119 = HEAP16[$117>>1]|0;
 _avr_register_io_read($avr,$119,133,$p);
 return;
}
function _avr_timer_reset($port) {
 $port = $port|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req = 0, $req1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $req = sp + 36|0;
 $req1 = sp;
 $0 = ((($port)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _avr_cycle_timer_cancel($1,134,$port);
 _avr_cycle_timer_cancel($1,73,$port);
 _avr_cycle_timer_cancel($1,74,$port);
 _avr_cycle_timer_cancel($1,75,$port);
 $2 = ((($port)) + 24|0);
 $3 = ((($req)) + 4|0);
 $4 = ((($port)) + 280|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 dest=$req; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $9 = ((($port)) + 276|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$req>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (_avr_ioctl($11,1768908658,$req)|0);
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = HEAP32[$2>>2]|0;
  $15 = ((($14)) + 48|0);
  $16 = HEAP32[$3>>2]|0;
  _avr_connect_irq($15,$16);
 }
 $17 = ((($port)) + 368|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 dest=$req; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $22 = ((($port)) + 364|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$req>>2] = $23;
 $24 = HEAP32[$0>>2]|0;
 $25 = (_avr_ioctl($24,1768908658,$req)|0);
 $26 = ($25|0)>(0);
 if ($26) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ((($29)) + 72|0);
  $31 = HEAP32[$3>>2]|0;
  _avr_connect_irq($30,$31);
 }
 $32 = ((($port)) + 456|0);
 $33 = $32;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = 0;
 dest=$req; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $37 = ((($port)) + 452|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$req>>2] = $38;
 $39 = HEAP32[$0>>2]|0;
 $40 = (_avr_ioctl($39,1768908658,$req)|0);
 $41 = ($40|0)>(0);
 if ($41) {
  $42 = HEAP32[$2>>2]|0;
  $43 = ((($42)) + 96|0);
  $44 = HEAP32[$3>>2]|0;
  _avr_connect_irq($43,$44);
 }
 dest=$req1; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $45 = ((($port)) + 192|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$req1>>2] = $46;
 $47 = HEAP32[$0>>2]|0;
 $48 = (_avr_ioctl($47,1768908658,$req1)|0);
 $49 = ($48|0)>(0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $27 = ((($req1)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 _avr_irq_register_notify($28,135,$port);
 STACKTOP = sp;return;
}
function _avr_timer_tov($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $compi$02 = 0, $exitcond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 600|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==(0);
 $10 = ($8|0)==(0);
 $11 = $9 & $10;
 if (!($11)) {
  $12 = ((($param)) + 464|0);
  (_avr_raise_interrupt($avr,$12)|0);
  $13 = $2;
  $14 = $13;
  HEAP32[$14>>2] = $0;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $1;
  $17 = ((($param)) + 200|0);
  $18 = ((($param)) + 592|0);
  $19 = ((($param)) + 4|0);
  $20 = ((($param)) + 24|0);
  $compi$02 = 0;
  while(1) {
   $91 = (((($17) + (($compi$02*88)|0)|0)) + 80|0);
   $92 = $91;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($92) + 4)|0;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = ($94|0)==(0);
   $99 = ($97|0)==(0);
   $100 = $98 & $99;
   do {
    if (!($100)) {
     $101 = $18;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($101) + 4)|0;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $107 = ($97>>>0)<($106>>>0);
     $108 = ($94>>>0)<($103>>>0);
     $109 = ($97|0)==($106|0);
     $110 = $109 & $108;
     $111 = $107 | $110;
     if (!($111)) {
      $138 = ($103|0)==($94|0);
      $139 = ($106|0)==($97|0);
      $140 = $138 & $139;
      if (!($140)) {
       break;
      }
      $141 = (351008 + ($compi$02<<2)|0);
      $142 = HEAP32[$141>>2]|0;
      (FUNCTION_TABLE_iiiii[$142 & 255]($avr,$0,$1,$param)|0);
      $143 = tempRet0;
      break;
     }
     $112 = (((((($param)) + 200|0) + (($compi$02*88)|0)|0)) + 72|0);
     $113 = HEAPU8[$112>>0]|(HEAPU8[$112+1>>0]<<8)|(HEAPU8[$112+2>>0]<<16)|(HEAPU8[$112+3>>0]<<24);
     $114 = $113 & 511;
     $115 = ($114|0)==(0);
     L11: do {
      if (!($115)) {
       $116 = HEAP32[$19>>2]|0;
       $117 = ((($116)) + 5892|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($118) + ($114)|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = $120&255;
       $122 = $113 >>> 9;
       $123 = $122 & 7;
       $124 = $121 >>> $123;
       $125 = $113 >>> 12;
       $126 = $124 & $125;
       $127 = (($compi$02) + 2)|0;
       $128 = HEAP32[$20>>2]|0;
       $129 = (($128) + (($127*24)|0)|0);
       switch ($126|0) {
       case 3:  {
        _avr_raise_irq($129,0);
        break L11;
        break;
       }
       case 2:  {
        _avr_raise_irq($129,1);
        break L11;
        break;
       }
       default: {
        break L11;
       }
       }
      }
     } while(0);
     $130 = $91;
     $131 = $130;
     $132 = HEAP32[$131>>2]|0;
     $133 = (($130) + 4)|0;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (351008 + ($compi$02<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     _avr_cycle_timer_register($avr,$132,$135,$137,$param);
    }
   } while(0);
   $144 = (($compi$02) + 1)|0;
   $exitcond4 = ($144|0)==(3);
   if ($exitcond4) {
    $82 = $18;
    break;
   } else {
    $compi$02 = $144;
   }
  }
  $83 = $82;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (_i64Add(($85|0),($88|0),($0|0),($1|0))|0);
  $90 = tempRet0;
  tempRet0 = ($90);
  return ($89|0);
 }
 $21 = $2;
 $22 = $21;
 HEAP32[$22>>2] = $0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $1;
 $25 = ((($param)) + 592|0);
 $26 = ((($param)) + 4|0);
 $27 = ((($param)) + 24|0);
 $28 = ((($param)) + 280|0);
 $29 = $28;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($31|0)==(0);
 $36 = ($34|0)==(0);
 $37 = $35 & $36;
 if (!($37)) {
  $38 = $25;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($34>>>0)<($43>>>0);
  $45 = ($31>>>0)<($40>>>0);
  $46 = ($34|0)==($43|0);
  $47 = $46 & $45;
  $48 = $44 | $47;
  if ($48) {
   $49 = ((($param)) + 272|0);
   $50 = HEAPU8[$49>>0]|(HEAPU8[$49+1>>0]<<8)|(HEAPU8[$49+2>>0]<<16)|(HEAPU8[$49+3>>0]<<24);
   $51 = $50 & 511;
   $52 = ($51|0)==(0);
   L23: do {
    if (!($52)) {
     $53 = HEAP32[$26>>2]|0;
     $54 = ((($53)) + 5892|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + ($51)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = $50 >>> 9;
     $60 = $59 & 7;
     $61 = $58 >>> $60;
     $62 = $50 >>> 12;
     $63 = $61 & $62;
     $64 = HEAP32[$27>>2]|0;
     $65 = ((($64)) + 48|0);
     switch ($63|0) {
     case 3:  {
      _avr_raise_irq($65,0);
      break L23;
      break;
     }
     case 2:  {
      _avr_raise_irq($65,1);
      break L23;
      break;
     }
     default: {
      break L23;
     }
     }
    }
   } while(0);
   $66 = $28;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($66) + 4)|0;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   _avr_cycle_timer_register($avr,$68,$71,73,$param);
  }
 }
 $72 = ((($param)) + 368|0);
 $73 = $72;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75|0)==(0);
 $80 = ($78|0)==(0);
 $81 = $79 & $80;
 if (!($81)) {
  $145 = $25;
  $146 = $145;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + 4)|0;
  $149 = $148;
  $150 = HEAP32[$149>>2]|0;
  $151 = ($78>>>0)<($150>>>0);
  $152 = ($75>>>0)<($147>>>0);
  $153 = ($78|0)==($150|0);
  $154 = $153 & $152;
  $155 = $151 | $154;
  if ($155) {
   $156 = ((($param)) + 360|0);
   $157 = HEAPU8[$156>>0]|(HEAPU8[$156+1>>0]<<8)|(HEAPU8[$156+2>>0]<<16)|(HEAPU8[$156+3>>0]<<24);
   $158 = $157 & 511;
   $159 = ($158|0)==(0);
   L33: do {
    if (!($159)) {
     $160 = HEAP32[$26>>2]|0;
     $161 = ((($160)) + 5892|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (($162) + ($158)|0);
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = $157 >>> 9;
     $167 = $166 & 7;
     $168 = $165 >>> $167;
     $169 = $157 >>> 12;
     $170 = $168 & $169;
     $171 = HEAP32[$27>>2]|0;
     $172 = ((($171)) + 72|0);
     switch ($170|0) {
     case 3:  {
      _avr_raise_irq($172,0);
      break L33;
      break;
     }
     case 2:  {
      _avr_raise_irq($172,1);
      break L33;
      break;
     }
     default: {
      break L33;
     }
     }
    }
   } while(0);
   $173 = $72;
   $174 = $173;
   $175 = HEAP32[$174>>2]|0;
   $176 = (($173) + 4)|0;
   $177 = $176;
   $178 = HEAP32[$177>>2]|0;
   _avr_cycle_timer_register($avr,$175,$178,74,$param);
  }
 }
 $179 = ((($param)) + 456|0);
 $180 = $179;
 $181 = $180;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($180) + 4)|0;
 $184 = $183;
 $185 = HEAP32[$184>>2]|0;
 $186 = ($182|0)==(0);
 $187 = ($185|0)==(0);
 $188 = $186 & $187;
 if ($188) {
  $82 = $25;
  $83 = $82;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (_i64Add(($85|0),($88|0),($0|0),($1|0))|0);
  $90 = tempRet0;
  tempRet0 = ($90);
  return ($89|0);
 }
 $189 = $25;
 $190 = $189;
 $191 = HEAP32[$190>>2]|0;
 $192 = (($189) + 4)|0;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = ($185>>>0)<($194>>>0);
 $196 = ($182>>>0)<($191>>>0);
 $197 = ($185|0)==($194|0);
 $198 = $197 & $196;
 $199 = $195 | $198;
 if (!($199)) {
  $82 = $25;
  $83 = $82;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (_i64Add(($85|0),($88|0),($0|0),($1|0))|0);
  $90 = tempRet0;
  tempRet0 = ($90);
  return ($89|0);
 }
 $200 = ((($param)) + 448|0);
 $201 = HEAPU8[$200>>0]|(HEAPU8[$200+1>>0]<<8)|(HEAPU8[$200+2>>0]<<16)|(HEAPU8[$200+3>>0]<<24);
 $202 = $201 & 511;
 $203 = ($202|0)==(0);
 L46: do {
  if (!($203)) {
   $204 = HEAP32[$26>>2]|0;
   $205 = ((($204)) + 5892|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($206) + ($202)|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = $208&255;
   $210 = $201 >>> 9;
   $211 = $210 & 7;
   $212 = $209 >>> $211;
   $213 = $201 >>> 12;
   $214 = $212 & $213;
   $215 = HEAP32[$27>>2]|0;
   $216 = ((($215)) + 96|0);
   switch ($214|0) {
   case 3:  {
    _avr_raise_irq($216,0);
    break L46;
    break;
   }
   case 2:  {
    _avr_raise_irq($216,1);
    break L46;
    break;
   }
   default: {
    break L46;
   }
   }
  }
 } while(0);
 $217 = $179;
 $218 = $217;
 $219 = HEAP32[$218>>2]|0;
 $220 = (($217) + 4)|0;
 $221 = $220;
 $222 = HEAP32[$221>>2]|0;
 _avr_cycle_timer_register($avr,$219,$222,75,$param);
 $82 = $25;
 $83 = $82;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (_i64Add(($85|0),($88|0),($0|0),($1|0))|0);
 $90 = tempRet0;
 tempRet0 = ($90);
 return ($89|0);
}
function _avr_timer_compa($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_avr_timer_comp($param,$0,$1,0)|0);
 $3 = tempRet0;
 tempRet0 = ($3);
 return ($2|0);
}
function _avr_timer_comp($p,$0,$1,$comp) {
 $p = $p|0;
 $0 = $0|0;
 $1 = $1|0;
 $comp = $comp|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($p)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $comp&255;
 $5 = (((($p)) + 200|0) + (($4*88)|0)|0);
 (_avr_raise_interrupt($3,$5)|0);
 $6 = (((((($p)) + 200|0) + (($4*88)|0)|0)) + 72|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 511;
 $9 = ($8|0)==(0);
 L1: do {
  if (!($9)) {
   $10 = ((($3)) + 5892|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($8)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = $7 >>> 9;
   $16 = $15 & 7;
   $17 = $14 >>> $16;
   $18 = $7 >>> 12;
   $19 = $17 & $18;
   $20 = (($4) + 2)|0;
   $21 = ((($p)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + (($20*24)|0)|0);
   switch ($19|0) {
   case 3:  {
    _avr_raise_irq($23,1);
    break L1;
    break;
   }
   case 1:  {
    $24 = (((((($p)) + 200|0) + (($4*88)|0)|0)) + 76|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 511;
    $27 = ($26|0)==(0);
    if ($27) {
     $40 = (((($22) + (($20*24)|0)|0)) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $not$ = ($41|0)==(0);
     $42 = $not$&1;
     _avr_raise_irq($23,$42);
     break L1;
    } else {
     $28 = ((($3)) + 5892|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + ($26)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $25 >>> 9;
     $34 = $33 & 7;
     $35 = $32 >>> $34;
     $36 = $25 >>> 12;
     $37 = $35 & $36;
     $not$1 = ($37|0)==(0);
     $38 = $not$1&1;
     $39 = $38 | 256;
     _avr_raise_irq($23,$39);
     break L1;
    }
    break;
   }
   case 2:  {
    _avr_raise_irq($23,0);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $43 = ((($p)) + 592|0);
 $44 = $43;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($46|0)==(0);
 $51 = ($49|0)==(0);
 $52 = $50 & $51;
 if ($52) {
  $53 = (((((($p)) + 200|0) + (($4*88)|0)|0)) + 80|0);
  $54 = $53;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)==(0);
  $61 = ($59|0)==(0);
  $62 = $60 & $61;
  $63 = (_i64Add(($56|0),($59|0),($0|0),($1|0))|0);
  $64 = tempRet0;
  $65 = $62 ? 0 : $63;
  $66 = $62 ? 0 : $64;
  tempRet0 = ($66);
  return ($65|0);
 } else {
  tempRet0 = (0);
  return 0;
 }
 return (0)|0;
}
function _avr_timer_compb($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_avr_timer_comp($param,$0,$1,1)|0);
 $3 = tempRet0;
 tempRet0 = ($3);
 return ($2|0);
}
function _avr_timer_compc($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_avr_timer_comp($param,$0,$1,2)|0);
 $3 = tempRet0;
 tempRet0 = ($3);
 return ($2|0);
}
function _avr_timer_irq_icp($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $$0$i = 0, $$0$i6$off0 = 0, $$0$i6$off8 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $extract = 0, $extract$t7 = 0, $or$cond = 0, $or$cond4 = 0;
 var $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($param)) + 140|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 255;
 $5 = ($4|0)==(2);
 if ($5) {
  return;
 }
 $6 = ((($param)) + 196|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 511;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0$i = 1;
 } else {
  $10 = ((($1)) + 5892|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $7 >>> 9;
  $16 = $15 & 7;
  $17 = $14 >>> $16;
  $18 = $7 >>> 12;
  $19 = $17 & $18;
  $phitmp = ($19|0)==(0);
  $$0$i = $phitmp;
 }
 $20 = ((($irq)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $$not = ($21|0)==(0);
 $22 = ($value|0)!=(0);
 if ($$0$i) {
  $or$cond4 = $22 | $$not;
  if ($or$cond4) {
   return;
  }
 } else {
  $or$cond = $22 & $$not;
  if (!($or$cond)) {
   return;
  }
 }
 $23 = ((($param)) + 592|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($26|0)==(0);
 $31 = ($29|0)==(0);
 $32 = $30 & $31;
 if ($32) {
  $$0$i6$off0 = 0;$$0$i6$off8 = 0;
 } else {
  $33 = ((($1)) + 56|0);
  $34 = $33;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($param)) + 600|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (_i64Subtract(($36|0),($39|0),($43|0),($46|0))|0);
  $48 = tempRet0;
  $49 = ((($param)) + 608|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  $52 = (($51) + 1)|0;
  $53 = (___muldi3(($52|0),0,($47|0),($48|0))|0);
  $54 = tempRet0;
  $55 = (___udivdi3(($53|0),($54|0),($26|0),($29|0))|0);
  $56 = tempRet0;
  $57 = $55&65535;
  $58 = $55&255;
  $extract = ($57&65535) >>> 8;
  $extract$t7 = $extract&255;
  $$0$i6$off0 = $58;$$0$i6$off8 = $extract$t7;
 }
 $59 = ((($param)) + 54|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = ((($1)) + 5892|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($61)|0);
 HEAP8[$64>>0] = $$0$i6$off0;
 $65 = ((($param)) + 58|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = ($66<<16>>16)==(0);
 if (!($67)) {
  $68 = $66&65535;
  $69 = HEAP32[$62>>2]|0;
  $70 = (($69) + ($68)|0);
  HEAP8[$70>>0] = $$0$i6$off8;
 }
 $71 = ((($param)) + 528|0);
 (_avr_raise_interrupt($1,$71)|0);
 return;
}
function _avr_timer_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 40|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = $2 | 1953330176;
 $4 = ($3|0)==($ctl|0);
 if (!($4)) {
  $res$0 = -1;
  return ($res$0|0);
 }
 $5 = HEAP32[$io_param>>2]|0;
 $6 = ((($port)) + 44|0);
 HEAP32[$6>>2] = $5;
 $res$0 = 0;
 return ($res$0|0);
}
function _avr_timer_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$0$i = 0, $$0$i7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $clock$0 = 0, $or$cond = 0, $or$cond1 = 0, $res$1$1$i = 0, $res$1$1$i10 = 0, $res$1$1$i15 = 0, $res$1$1$i3 = 0, $res$1$2$i = 0, $res$1$2$i11 = 0;
 var $res$1$2$i16 = 0, $res$1$2$i4 = 0, $res$1$3$i = 0, $res$1$3$i12 = 0, $res$1$3$i17 = 0, $res$1$3$i5 = 0, $res$1$i = 0, $res$1$i14 = 0, $res$1$i2 = 0, $res$1$i9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($param)) + 152|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 $$pre = ((($avr)) + 5892|0);
 if ($3) {
  $$0$i = 0;
 } else {
  $4 = HEAP32[$$pre>>2]|0;
  $5 = (($4) + ($2)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $1 >>> 9;
  $9 = $8 & 7;
  $10 = $7 >>> $9;
  $11 = $1 >>> 12;
  $12 = $10 & $11;
  $13 = $12&255;
  $$0$i = $13;
 }
 $14 = ((($param)) + 156|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 511;
 $17 = ($16|0)==(0);
 if ($17) {
  $res$1$i = 0;
 } else {
  $18 = HEAP32[$$pre>>2]|0;
  $19 = (($18) + ($16)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $15 >>> 9;
  $23 = $22 & 7;
  $24 = $21 >>> $23;
  $25 = $15 >>> 12;
  $26 = $24 & $25;
  $27 = $26&255;
  $res$1$i = $27;
 }
 $28 = ((($param)) + 160|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 511;
 $31 = ($30|0)==(0);
 if ($31) {
  $res$1$1$i = $res$1$i;
 } else {
  $32 = HEAP32[$$pre>>2]|0;
  $33 = (($32) + ($30)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $29 >>> 9;
  $37 = $36 & 7;
  $38 = $35 >>> $37;
  $39 = $29 >>> 12;
  $40 = $38 & $39;
  $41 = $40 << 1;
  $42 = $res$1$i&255;
  $43 = $41 | $42;
  $44 = $43&255;
  $res$1$1$i = $44;
 }
 $45 = ((($param)) + 164|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 & 511;
 $48 = ($47|0)==(0);
 if ($48) {
  $res$1$2$i = $res$1$1$i;
 } else {
  $49 = HEAP32[$$pre>>2]|0;
  $50 = (($49) + ($47)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $46 >>> 9;
  $54 = $53 & 7;
  $55 = $52 >>> $54;
  $56 = $46 >>> 12;
  $57 = $55 & $56;
  $58 = $57 << 2;
  $59 = $res$1$1$i&255;
  $60 = $58 | $59;
  $61 = $60&255;
  $res$1$2$i = $61;
 }
 $62 = ((($param)) + 168|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 & 511;
 $65 = ($64|0)==(0);
 if ($65) {
  $res$1$3$i = $res$1$2$i;
 } else {
  $66 = HEAP32[$$pre>>2]|0;
  $67 = (($66) + ($64)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $63 >>> 9;
  $71 = $70 & 7;
  $72 = $69 >>> $71;
  $73 = $63 >>> 12;
  $74 = $72 & $73;
  $75 = $74 << 3;
  $76 = $res$1$2$i&255;
  $77 = $75 | $76;
  $78 = $77&255;
  $res$1$3$i = $78;
 }
 $79 = ((($param)) + 60|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 & 511;
 $82 = ($81|0)==(0);
 if ($82) {
  $res$1$i2 = 0;
 } else {
  $83 = HEAP32[$$pre>>2]|0;
  $84 = (($83) + ($81)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $80 >>> 9;
  $88 = $87 & 7;
  $89 = $86 >>> $88;
  $90 = $80 >>> 12;
  $91 = $89 & $90;
  $92 = $91&255;
  $res$1$i2 = $92;
 }
 $93 = ((($param)) + 64|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 511;
 $96 = ($95|0)==(0);
 if ($96) {
  $res$1$1$i3 = $res$1$i2;
 } else {
  $97 = HEAP32[$$pre>>2]|0;
  $98 = (($97) + ($95)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $94 >>> 9;
  $102 = $101 & 7;
  $103 = $100 >>> $102;
  $104 = $94 >>> 12;
  $105 = $103 & $104;
  $106 = $105 << 1;
  $107 = $res$1$i2&255;
  $108 = $106 | $107;
  $109 = $108&255;
  $res$1$1$i3 = $109;
 }
 $110 = ((($param)) + 68|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 511;
 $113 = ($112|0)==(0);
 if ($113) {
  $res$1$2$i4 = $res$1$1$i3;
 } else {
  $114 = HEAP32[$$pre>>2]|0;
  $115 = (($114) + ($112)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  $118 = $111 >>> 9;
  $119 = $118 & 7;
  $120 = $117 >>> $119;
  $121 = $111 >>> 12;
  $122 = $120 & $121;
  $123 = $122 << 2;
  $124 = $res$1$1$i3&255;
  $125 = $123 | $124;
  $126 = $125&255;
  $res$1$2$i4 = $126;
 }
 $127 = ((($param)) + 72|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 & 511;
 $130 = ($129|0)==(0);
 if ($130) {
  $res$1$3$i5 = $res$1$2$i4;
 } else {
  $131 = HEAP32[$$pre>>2]|0;
  $132 = (($131) + ($129)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = $128 >>> 9;
  $136 = $135 & 7;
  $137 = $134 >>> $136;
  $138 = $128 >>> 12;
  $139 = $137 & $138;
  $140 = $139 << 3;
  $141 = $res$1$2$i4&255;
  $142 = $140 | $141;
  $143 = $142&255;
  $res$1$3$i5 = $143;
 }
 _avr_core_watch_write($avr,$addr,$v);
 $144 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $145 = $144 & 511;
 $146 = ($145|0)==(0);
 if ($146) {
  $$0$i7 = 0;
 } else {
  $147 = HEAP32[$$pre>>2]|0;
  $148 = (($147) + ($145)|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = $144 >>> 9;
  $152 = $151 & 7;
  $153 = $150 >>> $152;
  $154 = $144 >>> 12;
  $155 = $153 & $154;
  $156 = $155&255;
  $$0$i7 = $156;
 }
 $157 = HEAP32[$14>>2]|0;
 $158 = $157 & 511;
 $159 = ($158|0)==(0);
 if ($159) {
  $res$1$i9 = 0;
 } else {
  $160 = HEAP32[$$pre>>2]|0;
  $161 = (($160) + ($158)|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162&255;
  $164 = $157 >>> 9;
  $165 = $164 & 7;
  $166 = $163 >>> $165;
  $167 = $157 >>> 12;
  $168 = $166 & $167;
  $169 = $168&255;
  $res$1$i9 = $169;
 }
 $170 = HEAP32[$28>>2]|0;
 $171 = $170 & 511;
 $172 = ($171|0)==(0);
 if ($172) {
  $res$1$1$i10 = $res$1$i9;
 } else {
  $173 = HEAP32[$$pre>>2]|0;
  $174 = (($173) + ($171)|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = $170 >>> 9;
  $178 = $177 & 7;
  $179 = $176 >>> $178;
  $180 = $170 >>> 12;
  $181 = $179 & $180;
  $182 = $181 << 1;
  $183 = $res$1$i9&255;
  $184 = $182 | $183;
  $185 = $184&255;
  $res$1$1$i10 = $185;
 }
 $186 = HEAP32[$45>>2]|0;
 $187 = $186 & 511;
 $188 = ($187|0)==(0);
 if ($188) {
  $res$1$2$i11 = $res$1$1$i10;
 } else {
  $189 = HEAP32[$$pre>>2]|0;
  $190 = (($189) + ($187)|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = $191&255;
  $193 = $186 >>> 9;
  $194 = $193 & 7;
  $195 = $192 >>> $194;
  $196 = $186 >>> 12;
  $197 = $195 & $196;
  $198 = $197 << 2;
  $199 = $res$1$1$i10&255;
  $200 = $198 | $199;
  $201 = $200&255;
  $res$1$2$i11 = $201;
 }
 $202 = HEAP32[$62>>2]|0;
 $203 = $202 & 511;
 $204 = ($203|0)==(0);
 if ($204) {
  $res$1$3$i12 = $res$1$2$i11;
 } else {
  $205 = HEAP32[$$pre>>2]|0;
  $206 = (($205) + ($203)|0);
  $207 = HEAP8[$206>>0]|0;
  $208 = $207&255;
  $209 = $202 >>> 9;
  $210 = $209 & 7;
  $211 = $208 >>> $210;
  $212 = $202 >>> 12;
  $213 = $211 & $212;
  $214 = $213 << 3;
  $215 = $res$1$2$i11&255;
  $216 = $214 | $215;
  $217 = $216&255;
  $res$1$3$i12 = $217;
 }
 $218 = HEAP32[$79>>2]|0;
 $219 = $218 & 511;
 $220 = ($219|0)==(0);
 if ($220) {
  $res$1$i14 = 0;
 } else {
  $221 = HEAP32[$$pre>>2]|0;
  $222 = (($221) + ($219)|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $218 >>> 9;
  $226 = $225 & 7;
  $227 = $224 >>> $226;
  $228 = $218 >>> 12;
  $229 = $227 & $228;
  $230 = $229&255;
  $res$1$i14 = $230;
 }
 $231 = HEAP32[$93>>2]|0;
 $232 = $231 & 511;
 $233 = ($232|0)==(0);
 if ($233) {
  $res$1$1$i15 = $res$1$i14;
 } else {
  $234 = HEAP32[$$pre>>2]|0;
  $235 = (($234) + ($232)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = $231 >>> 9;
  $239 = $238 & 7;
  $240 = $237 >>> $239;
  $241 = $231 >>> 12;
  $242 = $240 & $241;
  $243 = $242 << 1;
  $244 = $res$1$i14&255;
  $245 = $243 | $244;
  $246 = $245&255;
  $res$1$1$i15 = $246;
 }
 $247 = HEAP32[$110>>2]|0;
 $248 = $247 & 511;
 $249 = ($248|0)==(0);
 if ($249) {
  $res$1$2$i16 = $res$1$1$i15;
 } else {
  $250 = HEAP32[$$pre>>2]|0;
  $251 = (($250) + ($248)|0);
  $252 = HEAP8[$251>>0]|0;
  $253 = $252&255;
  $254 = $247 >>> 9;
  $255 = $254 & 7;
  $256 = $253 >>> $255;
  $257 = $247 >>> 12;
  $258 = $256 & $257;
  $259 = $258 << 2;
  $260 = $res$1$1$i15&255;
  $261 = $259 | $260;
  $262 = $261&255;
  $res$1$2$i16 = $262;
 }
 $263 = HEAP32[$127>>2]|0;
 $264 = $263 & 511;
 $265 = ($264|0)==(0);
 if ($265) {
  $res$1$3$i17 = $res$1$2$i16;
 } else {
  $266 = HEAP32[$$pre>>2]|0;
  $267 = (($266) + ($264)|0);
  $268 = HEAP8[$267>>0]|0;
  $269 = $268&255;
  $270 = $263 >>> 9;
  $271 = $270 & 7;
  $272 = $269 >>> $271;
  $273 = $263 >>> 12;
  $274 = $272 & $273;
  $275 = $274 << 3;
  $276 = $res$1$2$i16&255;
  $277 = $275 | $276;
  $278 = $277&255;
  $res$1$3$i17 = $278;
 }
 $279 = $res$1$3$i12&255;
 $280 = ($res$1$3$i12<<24>>24)==($res$1$3$i<<24>>24);
 $281 = ($res$1$3$i17<<24>>24)==($res$1$3$i5<<24>>24);
 $or$cond = $280 & $281;
 $282 = ($$0$i7<<24>>24)==($$0$i<<24>>24);
 $or$cond1 = $282 & $or$cond;
 if ($or$cond1) {
  STACKTOP = sp;return;
 }
 $283 = ($$0$i7<<24>>24)==(0);
 if ($283) {
  $284 = ((($avr)) + 40|0);
  $285 = HEAP32[$284>>2]|0;
  $clock$0 = $285;
 } else {
  $clock$0 = 32768;
 }
 $286 = ($res$1$3$i12<<24>>24)==(0);
 if ($286) {
  $287 = ((($param)) + 280|0);
  $288 = $287;
  $289 = $288;
  HEAP32[$289>>2] = 0;
  $290 = (($288) + 4)|0;
  $291 = $290;
  HEAP32[$291>>2] = 0;
  $292 = ((($param)) + 368|0);
  $293 = $292;
  $294 = $293;
  HEAP32[$294>>2] = 0;
  $295 = (($293) + 4)|0;
  $296 = $295;
  HEAP32[$296>>2] = 0;
  $297 = ((($param)) + 456|0);
  $298 = $297;
  $299 = $298;
  HEAP32[$299>>2] = 0;
  $300 = (($298) + 4)|0;
  $301 = $300;
  HEAP32[$301>>2] = 0;
  $302 = ((($param)) + 592|0);
  $303 = $302;
  $304 = $303;
  HEAP32[$304>>2] = 0;
  $305 = (($303) + 4)|0;
  $306 = $305;
  HEAP32[$306>>2] = 0;
  _avr_cycle_timer_cancel($avr,134,$param);
  _avr_cycle_timer_cancel($avr,73,$param);
  _avr_cycle_timer_cancel($avr,74,$param);
  _avr_cycle_timer_cancel($avr,75,$param);
  $307 = ((($param)) + 40|0);
  $308 = HEAP8[$307>>0]|0;
  $309 = $308 << 24 >> 24;
  HEAP32[$vararg_buffer>>2] = 358169;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $309;
  _avr_global_logger($avr,3,358138,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $310 = ((($param)) + 172|0);
  $311 = (($310) + ($279)|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = $312&255;
  $314 = $clock$0 >> $313;
  $315 = ((($param)) + 188|0);
  HEAP32[$315>>2] = $314;
  $316 = ((($param)) + 140|0);
  $317 = $res$1$3$i17&255;
  $318 = ((($param)) + 76|0);
  $319 = (($318) + ($317<<2)|0);
  $320 = HEAP32[$319>>2]|0;
  HEAP32[$316>>2] = $320;
  $321 = $320 >>> 24;
  $322 = ((($param)) + 144|0);
  HEAP32[$322>>2] = $321;
  $323 = $320 >>> 16;
  $324 = $323 & 255;
  $325 = 1 << $324;
  $326 = (($325) + -1)|0;
  $327 = ((($param)) + 148|0);
  HEAP32[$327>>2] = $326;
  _avr_timer_reconfigure($param);
  STACKTOP = sp;return;
 }
}
function _avr_timer_reconfigure($p) {
 $p = $p|0;
 var $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $res$1$1$i = 0, $res$1$2$i = 0, $res$1$3$i = 0, $res$1$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($p)) + 280|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ((($p)) + 368|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = ((($p)) + 456|0);
 $13 = $12;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($p)) + 592|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 _avr_cycle_timer_cancel($1,134,$p);
 _avr_cycle_timer_cancel($1,73,$p);
 _avr_cycle_timer_cancel($1,74,$p);
 _avr_cycle_timer_cancel($1,75,$p);
 $22 = ((($p)) + 144|0);
 $23 = HEAP32[$22>>2]|0;
 switch ($23|0) {
 case 1:  {
  $24 = ((($p)) + 188|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($p)) + 148|0);
  $27 = HEAP32[$26>>2]|0;
  _avr_timer_configure($p,$25,$27);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $28 = ((($p)) + 188|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($p)) + 148|0);
  $31 = HEAP32[$30>>2]|0;
  _avr_timer_configure($p,$29,$31);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $32 = ((($p)) + 188|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($p)) + 268|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 65535;
  $37 = HEAP32[$0>>2]|0;
  $38 = ((($37)) + 5892|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $35 >>> 16;
  $44 = ($43|0)==(0);
  if ($44) {
   $50 = 0;
  } else {
   $45 = (($39) + ($43)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $47 << 8;
   $50 = $48;
  }
  $49 = $50 | $42;
  _avr_timer_configure($p,$33,$49);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $51 = ((($p)) + 140|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 & 255;
  $54 = ($53|0)==(1);
  if ($54) {
   $55 = ((($p)) + 268|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 & 65535;
   $58 = HEAP32[$0>>2]|0;
   $59 = ((($58)) + 5892|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($57)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $56 >>> 16;
   $65 = ($64|0)==(0);
   if ($65) {
    $71 = 0;
   } else {
    $66 = (($60) + ($64)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 << 8;
    $71 = $69;
   }
   $70 = $71 | $63;
   $$sink2 = $70;
  } else {
   $72 = ((($p)) + 54|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73&65535;
   $75 = HEAP32[$0>>2]|0;
   $76 = ((($75)) + 5892|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($74)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = ((($p)) + 56|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82&65535;
   $84 = ($83<<16>>16)==(0);
   if ($84) {
    $91 = 0;
   } else {
    $85 = $82 >>> 16;
    $86 = (($77) + ($85)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = $88 << 8;
    $91 = $89;
   }
   $90 = $91 | $80;
   $$sink2 = $90;
  }
  $92 = ((($p)) + 188|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $$sink2 & 65535;
  _avr_timer_configure($p,$93,$94);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $95 = ((($p)) + 188|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($p)) + 148|0);
  $98 = HEAP32[$97>>2]|0;
  _avr_timer_configure($p,$96,$98);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $99 = ((($p)) + 60|0);
  $100 = ((($1)) + 5892|0);
  $101 = HEAP32[$99>>2]|0;
  $102 = $101 & 511;
  $103 = ($102|0)==(0);
  if ($103) {
   $res$1$i = 0;
  } else {
   $104 = HEAP32[$100>>2]|0;
   $105 = (($104) + ($102)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $101 >>> 9;
   $109 = $108 & 7;
   $110 = $107 >>> $109;
   $111 = $101 >>> 12;
   $112 = $110 & $111;
   $113 = $112&255;
   $res$1$i = $113;
  }
  $114 = ((($p)) + 64|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $115 & 511;
  $117 = ($116|0)==(0);
  if ($117) {
   $res$1$1$i = $res$1$i;
  } else {
   $118 = HEAP32[$100>>2]|0;
   $119 = (($118) + ($116)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $115 >>> 9;
   $123 = $122 & 7;
   $124 = $121 >>> $123;
   $125 = $115 >>> 12;
   $126 = $124 & $125;
   $127 = $126 << 1;
   $128 = $res$1$i&255;
   $129 = $127 | $128;
   $130 = $129&255;
   $res$1$1$i = $130;
  }
  $131 = ((($p)) + 68|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 & 511;
  $134 = ($133|0)==(0);
  if ($134) {
   $res$1$2$i = $res$1$1$i;
  } else {
   $135 = HEAP32[$100>>2]|0;
   $136 = (($135) + ($133)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = $132 >>> 9;
   $140 = $139 & 7;
   $141 = $138 >>> $140;
   $142 = $132 >>> 12;
   $143 = $141 & $142;
   $144 = $143 << 2;
   $145 = $res$1$1$i&255;
   $146 = $144 | $145;
   $147 = $146&255;
   $res$1$2$i = $147;
  }
  $148 = ((($p)) + 72|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $149 & 511;
  $151 = ($150|0)==(0);
  if ($151) {
   $res$1$3$i = $res$1$2$i;
  } else {
   $152 = HEAP32[$100>>2]|0;
   $153 = (($152) + ($150)|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = $149 >>> 9;
   $157 = $156 & 7;
   $158 = $155 >>> $157;
   $159 = $149 >>> 12;
   $160 = $158 & $159;
   $161 = $160 << 3;
   $162 = $res$1$2$i&255;
   $163 = $161 | $162;
   $164 = $163&255;
   $res$1$3$i = $164;
  }
  $165 = ((($p)) + 40|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $166 << 24 >> 24;
  $168 = $res$1$3$i&255;
  $169 = ((($p)) + 140|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $170 >>> 24;
  HEAP32[$vararg_buffer>>2] = 358368;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $167;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $168;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $171;
  _avr_global_logger($1,2,358319,$vararg_buffer);
  STACKTOP = sp;return;
 }
 }
}
function _avr_timer_configure($p,$clock,$top) {
 $p = $p|0;
 $clock = $clock|0;
 $top = $top|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $compi$01 = 0, $exitcond = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = (+($clock>>>0));
 $1 = (($top) + 1)|0;
 $2 = (+($1>>>0));
 $3 = $0 / $2;
 $4 = ((($p)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7>>>0));
 $9 = ((($p)) + 592|0);
 $10 = $top&65535;
 $11 = ((($p)) + 608|0);
 HEAP16[$11>>1] = $10;
 $12 = $8 / $3;
 $13 = (~~$12)>>>0;
 $14 = +Math_abs($12) >= 1.0 ? $12 > 0.0 ? (~~+Math_min(+Math_floor($12 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($12 - +(~~$12 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $15 = $9;
 $16 = $15;
 HEAP32[$16>>2] = $13;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = ((($p)) + 40|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = $3;
 $23 = (___muldi3(($13|0),($14|0),1000000,0)|0);
 $24 = tempRet0;
 $25 = (___udivdi3(($23|0),($24|0),($7|0),0)|0);
 $26 = tempRet0;
 HEAP32[$vararg_buffer>>2] = 358231;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr2>>3] = $22;
 $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr3>>2] = $13;
 $vararg_ptr4 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr4>>2] = $25;
 _avr_global_logger($5,3,358185,$vararg_buffer);
 $27 = ((($p)) + 44|0);
 $compi$01 = 0;
 while(1) {
  $39 = (((((($p)) + 200|0) + (($compi$01*88)|0)|0)) + 68|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = ($40<<16>>16)==(0);
  if (!($41)) {
   $42 = $40&65535;
   $43 = HEAP32[$4>>2]|0;
   $44 = ((($43)) + 5892|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = (((((($p)) + 200|0) + (($compi$01*88)|0)|0)) + 70|0);
   $50 = HEAP16[$49>>1]|0;
   $51 = ($50<<16>>16)==(0);
   if ($51) {
    $58 = 0;
   } else {
    $52 = $50&65535;
    $53 = (($45) + ($52)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = $55 << 8;
    $58 = $56;
   }
   $57 = $58 | $48;
   $59 = $57&65535;
   $60 = $57 & 65535;
   $61 = (($60) + 1)|0;
   $62 = (+($61>>>0));
   $63 = $0 / $62;
   $64 = (((((($p)) + 200|0) + (($compi$01*88)|0)|0)) + 80|0);
   $65 = $64;
   $66 = $65;
   HEAP32[$66>>2] = 0;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = 0;
   $69 = HEAP32[$27>>2]|0;
   $70 = 256 << $compi$01;
   $71 = $69 & $70;
   $72 = ($71|0)==(0);
   if (!($72)) {
    $73 = HEAP8[$19>>0]|0;
    $74 = $73 << 24 >> 24;
    $75 = (($compi$01) + 65)|0;
    HEAP32[$vararg_buffer5>>2] = 358231;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = $74;
    $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
    HEAP32[$vararg_ptr9>>2] = $clock;
    $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
    HEAP32[$vararg_ptr10>>2] = $top;
    $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
    HEAP32[$vararg_ptr11>>2] = $75;
    $vararg_ptr12 = ((($vararg_buffer5)) + 20|0);
    HEAP32[$vararg_ptr12>>2] = $60;
    (_printf(358251,$vararg_buffer5)|0);
   }
   $76 = ($59<<16>>16)==(0);
   $77 = ($60>>>0)>($top>>>0);
   $or$cond = $76 | $77;
   if (!($or$cond)) {
    $78 = $8 / $63;
    $79 = (~~$78)>>>0;
    $80 = +Math_abs($78) >= 1.0 ? $78 > 0.0 ? (~~+Math_min(+Math_floor($78 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($78 - +(~~$78 >>> 0)) / 4294967296.0) >>> 0 : 0;
    $81 = $64;
    $82 = $81;
    HEAP32[$82>>2] = $79;
    $83 = (($81) + 4)|0;
    $84 = $83;
    HEAP32[$84>>2] = $80;
    $85 = HEAP32[$27>>2]|0;
    $86 = $85 & $70;
    $87 = ($86|0)==(0);
    if (!($87)) {
     $88 = HEAP8[$19>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($compi$01) + 65)|0;
     $91 = $63;
     HEAP32[$vararg_buffer13>>2] = 358231;
     $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
     HEAP32[$vararg_ptr16>>2] = $89;
     $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
     HEAP32[$vararg_ptr17>>2] = $90;
     $vararg_ptr18 = ((($vararg_buffer13)) + 16|0);
     HEAPF64[$vararg_ptr18>>3] = $91;
     $vararg_ptr19 = ((($vararg_buffer13)) + 24|0);
     HEAP32[$vararg_ptr19>>2] = $79;
     (_printf(358283,$vararg_buffer13)|0);
    }
   }
  }
  $92 = (($compi$01) + 1)|0;
  $exitcond = ($92|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $compi$01 = $92;
  }
 }
 $28 = $9;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33>>>0)>(0);
 $35 = ($30>>>0)>(1);
 $36 = ($33|0)==(0);
 $37 = $36 & $35;
 $38 = $34 | $37;
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $93 = HEAP32[$4>>2]|0;
 _avr_cycle_timer_register($93,$30,$33,134,$p);
 $94 = ((($p)) + 600|0);
 $95 = $94;
 $96 = $95;
 HEAP32[$96>>2] = 0;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = 0;
 $99 = HEAP32[$4>>2]|0;
 $100 = ((($99)) + 56|0);
 $101 = $100;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 $104 = (($101) + 4)|0;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 (_avr_timer_tov($99,$103,$106,$p)|0);
 $107 = tempRet0;
 STACKTOP = sp;return;
}
function _avr_timer_write_pending($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$0$i = 0, $$0$i1$2 = 0, $$0$i3 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 464|0);
 $1 = ((($param)) + 472|0);
 $2 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 $3 = $2 & 511;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0$i = 0;
 } else {
  $5 = ((($avr)) + 5892|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($3)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $2 >>> 9;
  $11 = $10 & 7;
  $12 = $9 >>> $11;
  $13 = $2 >>> 12;
  $14 = $12 & $13;
  $15 = $14&255;
  $$0$i = $15;
 }
 $16 = ((($param)) + 528|0);
 $17 = ((($param)) + 536|0);
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = $18 & 511;
 $20 = ($19|0)==(0);
 $$pre = ((($avr)) + 5892|0);
 if ($20) {
  $$0$i3 = 0;
 } else {
  $21 = HEAP32[$$pre>>2]|0;
  $22 = (($21) + ($19)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $18 >>> 9;
  $26 = $25 & 7;
  $27 = $24 >>> $26;
  $28 = $18 >>> 12;
  $29 = $27 & $28;
  $30 = $29&255;
  $$0$i3 = $30;
 }
 $31 = ((($param)) + 200|0);
 $32 = ((($param)) + 208|0);
 $33 = HEAPU8[$32>>0]|(HEAPU8[$32+1>>0]<<8)|(HEAPU8[$32+2>>0]<<16)|(HEAPU8[$32+3>>0]<<24);
 $34 = $33 & 511;
 $35 = ($34|0)==(0);
 if ($35) {
  $74 = 0;
 } else {
  $36 = HEAP32[$$pre>>2]|0;
  $37 = (($36) + ($34)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $33 >>> 9;
  $41 = $40 & 7;
  $42 = $39 >>> $41;
  $43 = $33 >>> 12;
  $44 = $42 & $43;
  $45 = $44&255;
  $74 = $45;
 }
 $46 = ((($param)) + 296|0);
 $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
 $48 = $47 & 511;
 $49 = ($48|0)==(0);
 if ($49) {
  $76 = 0;
 } else {
  $50 = HEAP32[$$pre>>2]|0;
  $51 = (($50) + ($48)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $47 >>> 9;
  $55 = $54 & 7;
  $56 = $53 >>> $55;
  $57 = $47 >>> 12;
  $58 = $56 & $57;
  $59 = $58&255;
  $76 = $59;
 }
 $60 = ((($param)) + 384|0);
 $61 = HEAPU8[$60>>0]|(HEAPU8[$60+1>>0]<<8)|(HEAPU8[$60+2>>0]<<16)|(HEAPU8[$60+3>>0]<<24);
 $62 = $61 & 511;
 $63 = ($62|0)==(0);
 if ($63) {
  $$0$i1$2 = 0;
  _avr_core_watch_write($avr,$addr,$v);
  (_avr_clear_interrupt_if($avr,$0,$$0$i)|0);
  (_avr_clear_interrupt_if($avr,$16,$$0$i3)|0);
  (_avr_clear_interrupt_if($avr,$31,$74)|0);
  $75 = ((($param)) + 288|0);
  (_avr_clear_interrupt_if($avr,$75,$76)|0);
  $77 = ((($param)) + 376|0);
  (_avr_clear_interrupt_if($avr,$77,$$0$i1$2)|0);
  return;
 }
 $64 = HEAP32[$$pre>>2]|0;
 $65 = (($64) + ($62)|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $61 >>> 9;
 $69 = $68 & 7;
 $70 = $67 >>> $69;
 $71 = $61 >>> 12;
 $72 = $70 & $71;
 $73 = $72&255;
 $$0$i1$2 = $73;
 _avr_core_watch_write($avr,$addr,$v);
 (_avr_clear_interrupt_if($avr,$0,$$0$i)|0);
 (_avr_clear_interrupt_if($avr,$16,$$0$i3)|0);
 (_avr_clear_interrupt_if($avr,$31,$74)|0);
 $75 = ((($param)) + 288|0);
 (_avr_clear_interrupt_if($avr,$75,$76)|0);
 $77 = ((($param)) + 376|0);
 (_avr_clear_interrupt_if($avr,$77,$$0$i1$2)|0);
 return;
}
function _avr_timer_write_ocr($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$pre = 0, $$pre$phi10Z2D = 0, $$pre$phiZ2D = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avr$idx$val = 0, $avr$idx2 = 0, $avr$idx2$val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($param)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $avr$idx2 = ((($avr)) + 5892|0);
 $avr$idx2$val = HEAP32[$avr$idx2>>2]|0;
 $$idx3 = ((($param)) + 68|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $2 = $$idx3$val >>> 16;
 $3 = $$idx3$val & 65535;
 $4 = (($avr$idx2$val) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($2|0)==(0);
 if ($7) {
  $13 = 0;
 } else {
  $8 = (($avr$idx2$val) + ($2)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 << 8;
  $13 = $11;
 }
 $12 = $13 | $6;
 $14 = $12&65535;
 _avr_core_watch_write($avr,$addr,$v);
 $15 = ((($1)) + 144|0);
 $16 = HEAP32[$15>>2]|0;
 switch ($16|0) {
 case 1:  {
  _avr_timer_reconfigure($1);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  _avr_timer_reconfigure($1);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  _avr_timer_reconfigure($1);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $17 = ((($1)) + 140|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 255;
  $20 = ($19|0)==(1);
  if ($20) {
   _avr_timer_reconfigure($1);
   $$pre = ((($1)) + 24|0);
   $$pre9 = ((($1)) + 4|0);
   $$pre$phi10Z2D = $$pre9;$$pre$phiZ2D = $$pre;
  } else {
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($1)) + 268|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 & 65535;
   $26 = ((($1)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 5892|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($25)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $24 >>> 16;
   $34 = ($33|0)==(0);
   if ($34) {
    $40 = 0;
   } else {
    $35 = (($29) + ($33)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = $37 << 8;
    $40 = $38;
   }
   $39 = $40 | $32;
   _avr_raise_irq($22,$39);
   $$pre$phi10Z2D = $26;$$pre$phiZ2D = $21;
  }
  $41 = HEAP32[$$pre$phiZ2D>>2]|0;
  $42 = ((($41)) + 24|0);
  $43 = ((($1)) + 356|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 & 65535;
  $46 = HEAP32[$$pre$phi10Z2D>>2]|0;
  $47 = ((($46)) + 5892|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $44 >>> 16;
  $53 = ($52|0)==(0);
  if ($53) {
   $59 = 0;
  } else {
   $54 = (($48) + ($52)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 << 8;
   $59 = $57;
  }
  $58 = $59 | $51;
  _avr_raise_irq($42,$58);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $avr$idx$val = HEAP32[$avr$idx2>>2]|0;
  $$idx$val = HEAP32[$$idx3>>2]|0;
  $60 = $$idx$val >>> 16;
  $61 = $$idx$val & 65535;
  $62 = (($avr$idx$val) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($60|0)==(0);
  if ($65) {
   $71 = 0;
  } else {
   $66 = (($avr$idx$val) + ($60)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $68 << 8;
   $71 = $69;
  }
  $70 = $71 | $64;
  $72 = $70&65535;
  $73 = ($14<<16>>16)==($72<<16>>16);
  if (!($73)) {
   _avr_timer_reconfigure($1);
  }
  $74 = ((($1)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($1)) + 268|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 & 65535;
  $79 = ((($1)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 5892|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($78)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $77 >>> 16;
  $87 = ($86|0)==(0);
  if ($87) {
   $93 = 0;
  } else {
   $88 = (($82) + ($86)|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = $90 << 8;
   $93 = $91;
  }
  $92 = $93 | $85;
  _avr_raise_irq($75,$92);
  $94 = HEAP32[$74>>2]|0;
  $95 = ((($94)) + 24|0);
  $96 = ((($1)) + 356|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $97 & 65535;
  $99 = HEAP32[$79>>2]|0;
  $100 = ((($99)) + 5892|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + ($98)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $97 >>> 16;
  $106 = ($105|0)==(0);
  if ($106) {
   $112 = 0;
  } else {
   $107 = (($101) + ($105)|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 << 8;
   $112 = $110;
  }
  $111 = $112 | $104;
  _avr_raise_irq($95,$111);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = ((($1)) + 40|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114 << 24 >> 24;
  $116 = ((($1)) + 140|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117 >>> 24;
  HEAP32[$vararg_buffer>>2] = 358424;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $115;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $118;
  _avr_global_logger($avr,2,358390,$vararg_buffer);
  _avr_timer_reconfigure($1);
  STACKTOP = sp;return;
 }
 }
}
function _avr_timer_tcnt_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$idx = 0, $$idx$val = 0, $$idx$val$idx = 0, $$idx$val$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx2 = 0, $$idx2$val = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _avr_core_watch_write($avr,$addr,$v);
 $$idx = ((($param)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = ((($param)) + 52|0);
 $$idx1$val = HEAP16[$$idx1>>1]|0;
 $$idx2 = ((($param)) + 56|0);
 $$idx2$val = HEAP16[$$idx2>>1]|0;
 $$idx$val$idx = ((($$idx$val)) + 5892|0);
 $$idx$val$idx$val = HEAP32[$$idx$val$idx>>2]|0;
 $0 = $$idx1$val&65535;
 $1 = (($$idx$val$idx$val) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = ($$idx2$val<<16>>16)==(0);
 if ($4) {
  $11 = 0;
 } else {
  $5 = $$idx2$val&65535;
  $6 = (($$idx$val$idx$val) + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $8 << 8;
  $11 = $9;
 }
 $10 = $11 | $3;
 $12 = ((($param)) + 608|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(0);
 if ($14) {
  return;
 }
 $15 = $10&65535;
 $16 = ($15&65535)<($13&65535);
 _avr_cycle_timer_cancel($avr,134,$param);
 _avr_cycle_timer_cancel($avr,73,$param);
 _avr_cycle_timer_cancel($avr,74,$param);
 _avr_cycle_timer_cancel($avr,75,$param);
 $$mask = $10 & 65535;
 $17 = $16 ? $$mask : 0;
 $18 = $16 ? 0 : 0;
 $19 = ((($param)) + 592|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (___muldi3(($22|0),($25|0),($17|0),($18|0))|0);
 $27 = tempRet0;
 $28 = HEAP16[$12>>1]|0;
 $29 = $28&65535;
 $30 = (___udivdi3(($26|0),($27|0),($29|0),0)|0);
 $31 = tempRet0;
 $32 = ($25>>>0)>(0);
 $33 = ($22>>>0)>(1);
 $34 = ($25|0)==(0);
 $35 = $34 & $33;
 $36 = $32 | $35;
 if (!($36)) {
  return;
 }
 $37 = (_i64Subtract(($22|0),($25|0),($30|0),($31|0))|0);
 $38 = tempRet0;
 _avr_cycle_timer_register($avr,$37,$38,134,$param);
 $39 = ((($param)) + 600|0);
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = 0;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = 0;
 $44 = ((($avr)) + 56|0);
 $45 = $44;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (_i64Subtract(($47|0),($50|0),($30|0),($31|0))|0);
 $52 = tempRet0;
 (_avr_timer_tov($avr,$51,$52,$param)|0);
 $53 = tempRet0;
 return;
}
function _avr_timer_tcnt_read($avr,$addr,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $param = $param|0;
 var $$0$i$off0 = 0, $$0$i$off8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extract = 0, $extract$t1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 592|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)==(0);
 $8 = ($6|0)==(0);
 $9 = $7 & $8;
 if ($9) {
  $$0$i$off0 = 0;$$0$i$off8 = 0;
 } else {
  $10 = ((($param)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 56|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($param)) + 600|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_i64Subtract(($15|0),($18|0),($22|0),($25|0))|0);
  $27 = tempRet0;
  $28 = ((($param)) + 608|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = (($30) + 1)|0;
  $32 = (___muldi3(($31|0),0,($26|0),($27|0))|0);
  $33 = tempRet0;
  $34 = (___udivdi3(($32|0),($33|0),($3|0),($6|0))|0);
  $35 = tempRet0;
  $36 = $34&65535;
  $37 = $34&255;
  $extract = ($36&65535) >>> 8;
  $extract$t1 = $extract&255;
  $$0$i$off0 = $37;$$0$i$off8 = $extract$t1;
 }
 $38 = ((($param)) + 52|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = ((($avr)) + 5892|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($40)|0);
 HEAP8[$43>>0] = $$0$i$off0;
 $44 = ((($param)) + 56|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = ($45<<16>>16)==(0);
 if ($46) {
  $50 = (_avr_core_watch_read($avr,$addr)|0);
  return ($50|0);
 }
 $47 = $45&65535;
 $48 = HEAP32[$41>>2]|0;
 $49 = (($48) + ($47)|0);
 HEAP8[$49>>0] = $$0$i$off8;
 $50 = (_avr_core_watch_read($avr,$addr)|0);
 return ($50|0);
}
function _avr_watchdog_init($avr,$p) {
 $avr = $avr|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$p; src=351020; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _avr_register_io($avr,$p);
 $0 = ((($p)) + 68|0);
 _avr_register_vector($avr,$0);
 $1 = ((($p)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 511;
 $4 = $3&65535;
 _avr_register_io_write($avr,$4,136,$p);
 $5 = ((($p)) + 144|0);
 HEAP8[$5>>0] = 0;
 return;
}
function _avr_watchdog_reset($port) {
 $port = $port|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($port)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($port)) + 144|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $114 = ((($port)) + 68|0);
  $115 = ((($114)) + 12|0);
  _avr_irq_register_notify($115,137,$port);
  return;
 }
 HEAP8[$2>>0] = 0;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 104|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($port)) + 48|0);
 $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
 $10 = $9 & 511;
 $11 = $10&65535;
 $12 = ($11<<16>>16)==(0);
 if (!($12)) {
  $13 = $9 >>> 12;
  $14 = $13 & 255;
  $15 = $9 >>> 9;
  $16 = $15 & 7;
  $17 = $14 << $16;
  $18 = ((($1)) + 5892|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($10)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 | $17;
  $24 = $23&255;
  _avr_core_watch_write($1,$11,$24);
 }
 $25 = ((($port)) + 40|0);
 $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8)|(HEAPU8[$25+2>>0]<<16)|(HEAPU8[$25+3>>0]<<24);
 $27 = $26 & 511;
 $28 = $27&65535;
 $29 = ($28<<16>>16)==(0);
 if ($29) {
  $$pre = ((($1)) + 5892|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $30 = $26 >>> 12;
  $31 = $30 & 255;
  $32 = $26 >>> 9;
  $33 = $32 & 7;
  $34 = $31 << $33;
  $35 = ((($1)) + 5892|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($27)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 | $34;
  $41 = $40&255;
  _avr_core_watch_write($1,$28,$41);
  $$pre$phiZ2D = $35;
 }
 $42 = ((($port)) + 52|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 511;
 $45 = ($44|0)==(0);
 if (!($45)) {
  $46 = $44&65535;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $48 = $43 >>> 12;
   $49 = $48 & 255;
   $50 = $43 >>> 9;
   $51 = $50 & 7;
   $52 = $49 << $51;
   $53 = HEAP32[$$pre$phiZ2D>>2]|0;
   $54 = (($53) + ($44)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $52 ^ 255;
   $58 = $56 & $57;
   $59 = $58&255;
   _avr_core_watch_write($1,$46,$59);
  }
 }
 $60 = ((($42)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 & 511;
 $63 = ($62|0)==(0);
 if (!($63)) {
  $64 = $62&65535;
  $65 = ($64<<16>>16)==(0);
  if (!($65)) {
   $66 = $61 >>> 12;
   $67 = $66 & 255;
   $68 = $61 >>> 9;
   $69 = $68 & 7;
   $70 = $67 << $69;
   $71 = HEAP32[$$pre$phiZ2D>>2]|0;
   $72 = (($71) + ($62)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73&255;
   $75 = $70 ^ 255;
   $76 = $74 & $75;
   $77 = $76&255;
   _avr_core_watch_write($1,$64,$77);
  }
 }
 $78 = ((($42)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 & 511;
 $81 = ($80|0)==(0);
 if (!($81)) {
  $82 = $80&65535;
  $83 = ($82<<16>>16)==(0);
  if (!($83)) {
   $84 = $79 >>> 12;
   $85 = $84 & 255;
   $86 = $79 >>> 9;
   $87 = $86 & 7;
   $88 = $85 << $87;
   $89 = HEAP32[$$pre$phiZ2D>>2]|0;
   $90 = (($89) + ($80)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = $88 ^ 255;
   $94 = $92 & $93;
   $95 = $94&255;
   _avr_core_watch_write($1,$82,$95);
  }
 }
 $96 = ((($42)) + 12|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $97 & 511;
 $99 = ($98|0)==(0);
 if (!($99)) {
  $100 = $98&65535;
  $101 = ($100<<16>>16)==(0);
  if (!($101)) {
   $102 = $97 >>> 12;
   $103 = $102 & 255;
   $104 = $97 >>> 9;
   $105 = $104 & 7;
   $106 = $103 << $105;
   $107 = HEAP32[$$pre$phiZ2D>>2]|0;
   $108 = (($107) + ($98)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = $106 ^ 255;
   $112 = $110 & $111;
   $113 = $112&255;
   _avr_core_watch_write($1,$100,$113);
  }
 }
 _avr_watchdog_set_cycle_count_and_timer($1,$port,0,0);
 $114 = ((($port)) + 68|0);
 $115 = ((($114)) + 12|0);
 _avr_irq_register_notify($115,137,$port);
 return;
}
function _avr_watchdog_set_cycle_count_and_timer($avr,$p,$was_enabled,$old_wdp) {
 $avr = $avr|0;
 $p = $p|0;
 $was_enabled = $was_enabled|0;
 $old_wdp = $old_wdp|0;
 var $$0$i = 0, $$0$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp = 0, $res$1$1$i = 0, $res$1$2$i = 0, $res$1$3$i = 0, $res$1$i = 0, $vararg_buffer = 0;
 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ((($p)) + 52|0);
 $1 = ((($avr)) + 5892|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 511;
 $4 = ($3|0)==(0);
 if ($4) {
  $res$1$i = 0;
 } else {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + ($3)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $2 >>> 9;
  $10 = $9 & 7;
  $11 = $8 >>> $10;
  $12 = $2 >>> 12;
  $13 = $11 & $12;
  $14 = $13&255;
  $res$1$i = $14;
 }
 $15 = ((($p)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 511;
 $18 = ($17|0)==(0);
 if ($18) {
  $res$1$1$i = $res$1$i;
 } else {
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $16 >>> 9;
  $24 = $23 & 7;
  $25 = $22 >>> $24;
  $26 = $16 >>> 12;
  $27 = $25 & $26;
  $28 = $27 << 1;
  $29 = $res$1$i&255;
  $30 = $28 | $29;
  $31 = $30&255;
  $res$1$1$i = $31;
 }
 $32 = ((($p)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & 511;
 $35 = ($34|0)==(0);
 if ($35) {
  $res$1$2$i = $res$1$1$i;
 } else {
  $36 = HEAP32[$1>>2]|0;
  $37 = (($36) + ($34)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $33 >>> 9;
  $41 = $40 & 7;
  $42 = $39 >>> $41;
  $43 = $33 >>> 12;
  $44 = $42 & $43;
  $45 = $44 << 2;
  $46 = $res$1$1$i&255;
  $47 = $45 | $46;
  $48 = $47&255;
  $res$1$2$i = $48;
 }
 $49 = ((($p)) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 & 511;
 $52 = ($51|0)==(0);
 if ($52) {
  $res$1$3$i = $res$1$2$i;
 } else {
  $53 = HEAP32[$1>>2]|0;
  $54 = (($53) + ($51)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $50 >>> 9;
  $58 = $57 & 7;
  $59 = $56 >>> $58;
  $60 = $50 >>> 12;
  $61 = $59 & $60;
  $62 = $61 << 3;
  $63 = $res$1$2$i&255;
  $64 = $62 | $63;
  $65 = $64&255;
  $res$1$3$i = $65;
 }
 $66 = $res$1$3$i&255;
 $67 = 2048 << $66;
 $68 = ($67|0)<(0);
 $69 = $68 << 31 >> 31;
 $70 = ((($p)) + 136|0);
 $71 = ((($avr)) + 40|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (___muldi3(($67|0),($69|0),($72|0),0)|0);
 $74 = tempRet0;
 $75 = (___udivdi3(($73|0),($74|0),128000,0)|0);
 $76 = tempRet0;
 $77 = $70;
 $78 = $77;
 HEAP32[$78>>2] = $75;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $76;
 $81 = ((($p)) + 48|0);
 $82 = HEAPU8[$81>>0]|(HEAPU8[$81+1>>0]<<8)|(HEAPU8[$81+2>>0]<<16)|(HEAPU8[$81+3>>0]<<24);
 $83 = $82 & 511;
 $84 = ($83|0)==(0);
 if ($84) {
  $$0$i3 = 0;
 } else {
  $85 = HEAP32[$1>>2]|0;
  $86 = (($85) + ($83)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $82 >>> 9;
  $90 = $89 & 7;
  $91 = $88 >>> $90;
  $92 = $82 >>> 12;
  $93 = $91 & $92;
  $94 = $93&255;
  $$0$i3 = $94;
 }
 $95 = ((($p)) + 72|0);
 $96 = HEAPU8[$95>>0]|(HEAPU8[$95+1>>0]<<8)|(HEAPU8[$95+2>>0]<<16)|(HEAPU8[$95+3>>0]<<24);
 $97 = $96 & 511;
 $98 = ($97|0)==(0);
 if ($98) {
  $$0$i = 0;
 } else {
  $99 = HEAP32[$1>>2]|0;
  $100 = (($99) + ($97)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $96 >>> 9;
  $104 = $103 & 7;
  $105 = $102 >>> $104;
  $106 = $96 >>> 12;
  $107 = $105 & $106;
  $108 = $107&255;
  $$0$i = $108;
 }
 $109 = $was_enabled&255;
 $110 = $$0$i | $$0$i3;
 $111 = ($110<<24>>24)!=(0);
 $112 = $111&1;
 $113 = ($109|0)!=($112|0);
 $114 = ($old_wdp<<24>>24)>(-1);
 $115 = $old_wdp << 24 >> 24;
 $116 = ($66|0)!=($115|0);
 $phitmp = $116&1;
 $117 = $114 ? $phitmp : 0;
 $118 = ($117<<24>>24)!=(0);
 $or$cond = $118 | $113;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $119 = ($110<<24>>24)==(0);
 if (!($119)) {
  $120 = $117&255;
  $121 = $113&1;
  $122 = ((351060 + ($121<<3)|0) + ($120<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = 1 << $66;
  HEAP32[$vararg_buffer>>2] = $123;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $67;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $124;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $75;
  _avr_global_logger($avr,3,358483,$vararg_buffer);
  $125 = $70;
  $126 = $125;
  $127 = HEAP32[$126>>2]|0;
  $128 = (($125) + 4)|0;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  _avr_cycle_timer_register($avr,$127,$130,138,$p);
  STACKTOP = sp;return;
 }
 if (!($113)) {
  STACKTOP = sp;return;
 }
 _avr_global_logger($avr,3,358618,$vararg_buffer4);
 _avr_cycle_timer_cancel($avr,138,$p);
 STACKTOP = sp;return;
}
function _avr_watchdog_timer($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($param)) + 72|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($avr)) + 5892|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($4)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3 >>> 9;
  $12 = $11 & 7;
  $13 = $10 >>> $12;
  $14 = $3 >>> 12;
  $15 = $13 & $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = ((($param)) + 68|0);
   _avr_global_logger($avr,3,358542,$vararg_buffer);
   (_avr_raise_interrupt($avr,$17)|0);
   $18 = ((($param)) + 136|0);
   $19 = $18;
   $20 = $19;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (_i64Add(($21|0),($24|0),($0|0),($1|0))|0);
   $26 = tempRet0;
   $46 = $26;$47 = $25;
   tempRet0 = ($46);
   STACKTOP = sp;return ($47|0);
  }
 }
 $27 = ((($param)) + 48|0);
 $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8)|(HEAPU8[$27+2>>0]<<16)|(HEAPU8[$27+3>>0]<<24);
 $29 = $28 & 511;
 $30 = ($29|0)==(0);
 if ($30) {
  $46 = 0;$47 = 0;
  tempRet0 = ($46);
  STACKTOP = sp;return ($47|0);
 }
 $31 = ((($avr)) + 5892|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29)|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $28 >>> 9;
 $37 = $36 & 7;
 $38 = $35 >>> $37;
 $39 = $28 >>> 12;
 $40 = $38 & $39;
 $41 = ($40|0)==(0);
 if ($41) {
  $46 = 0;$47 = 0;
  tempRet0 = ($46);
  STACKTOP = sp;return ($47|0);
 }
 _avr_global_logger($avr,3,358566,$vararg_buffer1);
 $42 = ((($avr)) + 104|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($param)) + 144|0);
 $45 = ((($param)) + 148|0);
 HEAP32[$45>>2] = $43;
 HEAP8[$44>>0] = 1;
 HEAP32[$42>>2] = 139;
 $46 = 0;$47 = 0;
 tempRet0 = ($46);
 STACKTOP = sp;return ($47|0);
}
function _avr_watchdog_run_callback_software_reset($avr) {
 $avr = $avr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _avr_reset($avr);
 return;
}
function _avr_watchdog_irq_notify($irq,$value,$param) {
 $irq = $irq|0;
 $value = $value|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($value|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = ((($param)) + 76|0);
 $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 $5 = $4 & 511;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = ((($1)) + 5892|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($5)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $4 >>> 9;
 $13 = $12 & 7;
 $14 = $11 >>> $13;
 $15 = $4 >>> 12;
 $16 = $14 & $15;
 $17 = ($16|0)==(0);
 if ($17) {
  return;
 }
 $18 = ((($param)) + 72|0);
 $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8)|(HEAPU8[$18+2>>0]<<16)|(HEAPU8[$18+3>>0]<<24);
 $20 = $19 & 511;
 $21 = $20&65535;
 $22 = $19 >>> 12;
 $23 = $22 & 255;
 $24 = $19 >>> 9;
 $25 = $24 & 7;
 $26 = $23 << $25;
 $27 = (($8) + ($20)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 ^ 255;
 $31 = $30 & $29;
 $32 = $31&255;
 _avr_core_watch_write($1,$21,$32);
 return;
}
function _avr_watchdog_ioctl($port,$ctl,$io_param) {
 $port = $port|0;
 $ctl = $ctl|0;
 $io_param = $io_param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctl|0)==(2003072114);
 if (!($0)) {
  $res$0 = -1;
  return ($res$0|0);
 }
 $1 = ((($port)) + 4|0);
 $2 = ((($port)) + 48|0);
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = $3 & 511;
 $5 = ($4|0)==(0);
 if ($5) {
  label = 4;
 } else {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($6)) + 5892|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($4)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $3 >>> 9;
  $13 = $12 & 7;
  $14 = $11 >>> $13;
  $15 = $3 >>> 12;
  $16 = $14 & $15;
  $17 = ($16|0)==(0);
  if ($17) {
   label = 4;
  } else {
   $41 = $6;
  }
 }
 if ((label|0) == 4) {
  $18 = ((($port)) + 72|0);
  $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8)|(HEAPU8[$18+2>>0]<<16)|(HEAPU8[$18+3>>0]<<24);
  $20 = $19 & 511;
  $21 = ($20|0)==(0);
  if ($21) {
   $res$0 = 0;
   return ($res$0|0);
  }
  $22 = HEAP32[$1>>2]|0;
  $23 = ((($22)) + 5892|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($20)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $19 >>> 9;
  $29 = $28 & 7;
  $30 = $27 >>> $29;
  $31 = $19 >>> 12;
  $32 = $30 & $31;
  $33 = ($32|0)==(0);
  if ($33) {
   $res$0 = 0;
   return ($res$0|0);
  } else {
   $41 = $22;
  }
 }
 $34 = ((($port)) + 136|0);
 $35 = $34;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 _avr_cycle_timer_register($41,$37,$40,138,$port);
 $res$0 = 0;
 return ($res$0|0);
}
function _avr_watchdog_write($avr,$addr,$v,$param) {
 $avr = $avr|0;
 $addr = $addr|0;
 $v = $v|0;
 $param = $param|0;
 var $$0$i = 0, $$0$i1 = 0, $$0$i3 = 0, $$0$i9 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp = 0, $phitmp22 = 0, $res$1$1$i = 0, $res$1$2$i = 0, $res$1$3$i = 0, $res$1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($param)) + 48|0);
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $2 = $1 & 511;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0$i = 0;
 } else {
  $4 = ((($avr)) + 5892|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $1 >>> 9;
  $10 = $9 & 7;
  $11 = $8 >>> $10;
  $12 = $1 >>> 12;
  $13 = $11 & $12;
  $14 = $13&255;
  $$0$i = $14;
 }
 $15 = ((($param)) + 72|0);
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $17 = $16 & 511;
 $18 = ($17|0)==(0);
 if ($18) {
  $$0$i1 = 0;
 } else {
  $19 = ((($avr)) + 5892|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $16 >>> 9;
  $25 = $24 & 7;
  $26 = $23 >>> $25;
  $27 = $16 >>> 12;
  $28 = $26 & $27;
  $29 = $28&255;
  $$0$i1 = $29;
 }
 $30 = ((($param)) + 44|0);
 $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $32 = $31 & 511;
 $33 = ($32|0)==(0);
 $$phi$trans$insert = ((($avr)) + 5892|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($33) {
  $$0$i3 = 1;
 } else {
  $34 = (($$pre) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $31 >>> 9;
  $38 = $37 & 7;
  $39 = $36 >>> $38;
  $40 = $31 >>> 12;
  $41 = $39 & $40;
  $phitmp22 = ($41|0)==(0);
  $$0$i3 = $phitmp22;
 }
 $42 = ($$0$i<<24>>24)==(0);
 $43 = ($$0$i1<<24>>24)!=(0);
 $phitmp = $43&1;
 $44 = $42 ? $phitmp : 1;
 $45 = $addr&65535;
 $46 = (($$pre) + ($45)|0);
 $47 = HEAP8[$46>>0]|0;
 _avr_core_watch_write($avr,$addr,$v);
 if (!($$0$i3)) {
  $48 = ((($param)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 & 511;
  $51 = ($50|0)==(0);
  if ($51) {
   $res$1$i = 0;
  } else {
   $52 = HEAP32[$$phi$trans$insert>>2]|0;
   $53 = (($52) + ($50)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $49 >>> 9;
   $57 = $56 & 7;
   $58 = $55 >>> $57;
   $59 = $49 >>> 12;
   $60 = $58 & $59;
   $61 = $60&255;
   $res$1$i = $61;
  }
  $62 = ((($param)) + 56|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $63 & 511;
  $65 = ($64|0)==(0);
  if ($65) {
   $res$1$1$i = $res$1$i;
  } else {
   $66 = HEAP32[$$phi$trans$insert>>2]|0;
   $67 = (($66) + ($64)|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $63 >>> 9;
   $71 = $70 & 7;
   $72 = $69 >>> $71;
   $73 = $63 >>> 12;
   $74 = $72 & $73;
   $75 = $74 << 1;
   $76 = $res$1$i&255;
   $77 = $75 | $76;
   $78 = $77&255;
   $res$1$1$i = $78;
  }
  $79 = ((($param)) + 60|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80 & 511;
  $82 = ($81|0)==(0);
  if ($82) {
   $res$1$2$i = $res$1$1$i;
  } else {
   $83 = HEAP32[$$phi$trans$insert>>2]|0;
   $84 = (($83) + ($81)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = $80 >>> 9;
   $88 = $87 & 7;
   $89 = $86 >>> $88;
   $90 = $80 >>> 12;
   $91 = $89 & $90;
   $92 = $91 << 2;
   $93 = $res$1$1$i&255;
   $94 = $92 | $93;
   $95 = $94&255;
   $res$1$2$i = $95;
  }
  $96 = ((($param)) + 64|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $97 & 511;
  $99 = ($98|0)==(0);
  if ($99) {
   $res$1$3$i = $res$1$2$i;
  } else {
   $100 = HEAP32[$$phi$trans$insert>>2]|0;
   $101 = (($100) + ($98)|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $97 >>> 9;
   $105 = $104 & 7;
   $106 = $103 >>> $105;
   $107 = $97 >>> 12;
   $108 = $106 & $107;
   $109 = $108 << 3;
   $110 = $res$1$2$i&255;
   $111 = $109 | $110;
   $112 = $111&255;
   $res$1$3$i = $112;
  }
  $113 = ((($param)) + 40|0);
  $114 = HEAPU8[$113>>0]|(HEAPU8[$113+1>>0]<<8)|(HEAPU8[$113+2>>0]<<16)|(HEAPU8[$113+3>>0]<<24);
  $115 = $114 & 511;
  $116 = ($115|0)==(0);
  if (!($116)) {
   $117 = HEAP32[$$phi$trans$insert>>2]|0;
   $118 = (($117) + ($115)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = $114 >>> 9;
   $122 = $121 & 7;
   $123 = $120 >>> $122;
   $124 = $114 >>> 12;
   $125 = $123 & $124;
   $126 = ($125|0)==(0);
   if (!($126)) {
    $127 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
    $128 = $127 & 511;
    $129 = $128&65535;
    $130 = ($129<<16>>16)==(0);
    if (!($130)) {
     $131 = $127 >>> 12;
     $132 = $131 & 255;
     $133 = $127 >>> 9;
     $134 = $133 & 7;
     $135 = $132 << $134;
     $136 = (($117) + ($128)|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = $137&255;
     $139 = $138 | $135;
     $140 = $139&255;
     _avr_core_watch_write($avr,$129,$140);
    }
   }
  }
  _avr_watchdog_set_cycle_count_and_timer($avr,$param,$44,$res$1$3$i);
  return;
 }
 $141 = HEAP32[$$phi$trans$insert>>2]|0;
 $142 = (($141) + ($45)|0);
 HEAP8[$142>>0] = $47;
 $143 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $144 = $143 & 511;
 $145 = ($144|0)==(0);
 if ($145) {
  $$0$i9 = 0;
 } else {
  $146 = $v&255;
  $147 = $143 >>> 9;
  $148 = $147 & 7;
  $149 = $146 >>> $148;
  $150 = $143 >>> 12;
  $151 = $149 & $150;
  $152 = $151&255;
  $$0$i9 = $152;
 }
 $153 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $154 = $153 & 511;
 $155 = ($154|0)==(0);
 do {
  if (!($155)) {
   $156 = $v&255;
   $157 = $153 >>> 9;
   $158 = $157 & 7;
   $159 = $156 >>> $158;
   $160 = $153 >>> 12;
   $161 = $159 & $160;
   $162 = ($$0$i9<<24>>24)==(0);
   $163 = ($161|0)==(0);
   $or$cond = $162 | $163;
   if ($or$cond) {
    if ($163) {
     break;
    }
    $177 = $154&65535;
    $178 = ($177<<16>>16)==(0);
    if ($178) {
     break;
    }
    $179 = $160 & 255;
    $180 = $179 << $158;
    $181 = HEAP32[$$phi$trans$insert>>2]|0;
    $182 = (($181) + ($154)|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = $184 | $180;
    $186 = $185&255;
    _avr_core_watch_write($avr,$177,$186);
    break;
   }
   $164 = $144&65535;
   $165 = ($164<<16>>16)==(0);
   if (!($165)) {
    $166 = $143 >>> 12;
    $167 = $166 & 255;
    $168 = $143 >>> 9;
    $169 = $168 & 7;
    $170 = $167 << $169;
    $171 = HEAP32[$$phi$trans$insert>>2]|0;
    $172 = (($171) + ($144)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = $174 | $170;
    $176 = $175&255;
    _avr_core_watch_write($avr,$164,$176);
   }
   _avr_cycle_timer_register($avr,4,0,140,$param);
   return;
  }
 } while(0);
 $187 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $188 = $187 & 511;
 $189 = $188&65535;
 $190 = ($189<<16>>16)==(0);
 if (!($190)) {
  $191 = $187 >>> 12;
  $192 = $191 & 255;
  $193 = $187 >>> 9;
  $194 = $193 & 7;
  $195 = $192 << $194;
  $196 = HEAP32[$$phi$trans$insert>>2]|0;
  $197 = (($196) + ($188)|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = $195 ^ 255;
  $201 = $199 & $200;
  $202 = $v&255;
  $203 = $195 & $202;
  $204 = $201 | $203;
  $205 = $204&255;
  _avr_core_watch_write($avr,$189,$205);
 }
 _avr_watchdog_set_cycle_count_and_timer($avr,$param,$44,-1);
 return;
}
function _avr_wdce_clear($avr,$0,$1,$param) {
 $avr = $avr|0;
 $0 = $0|0;
 $1 = $1|0;
 $param = $param|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($param)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($param)) + 44|0);
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = $5 & 511;
 $7 = $6&65535;
 $8 = $5 >>> 12;
 $9 = $8 & 255;
 $10 = $5 >>> 9;
 $11 = $10 & 7;
 $12 = $9 << $11;
 $13 = ((($3)) + 5892|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($6)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $12 ^ 255;
 $19 = $18 & $17;
 $20 = $19&255;
 _avr_core_watch_write($3,$7,$20);
 tempRet0 = (0);
 return 0;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[90340]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 361404;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[90340]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((141|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_387($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[90340]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((142|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_382($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 79;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa113 = $13;
     break;
    }
   }
   $16 = ($$lcssa113|0)==(45);
   L11: do {
    switch ($$lcssa113|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa113;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base | 16;
   $27 = ($26|0)==(16);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((358639) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((358639) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa112 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa112;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (358895 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((358639) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((358639) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa108 = $134;$$lcssa109 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa109;$154 = 0;$156 = $$lcssa108;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond31 = $153 | $160;
      if ($or$cond31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((358639) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((358639) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((358639) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa110 = $185;$$lcssa111 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa111;$294 = $$lcssa110;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((358639) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((358639) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((358639) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $fabs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $y;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & -2147483648;
 $5 = $4 | $3;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 return (+$6);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=351516; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 255]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((358904 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 359384;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 359384;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 359384;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 359384 : (359386);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (359385);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 359384;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 359384;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 361286;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 361293;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (361294) : (361299);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (361296);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (359368 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(361337,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(361337,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 361312 : 361316;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 361333 : 361320;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 359384;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 359384;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (359368 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 359384;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (359384 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 359384;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (359394 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 359482;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 359482;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 359482;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall6(6,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-4);
 $$ = $1 ? -115 : $0;
 $2 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($2|0);
}
function _fcntl($fd,$cmd,$varargs) {
 $fd = $fd|0;
 $cmd = $cmd|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $ex = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0;
 var $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 176|0;
 $ex = sp + 168|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = ($cmd|0)==(4);
 $8 = $6 | 32768;
 $$ = $7 ? $8 : $6;
 L1: do {
  switch ($cmd|0) {
  case 14:  {
   $9 = $$;
   HEAP32[$vararg_buffer>>2] = $fd;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $9;
   $10 = (___syscall221(221,($vararg_buffer|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$2 = $11;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $fd;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $ex;
   $12 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($12|0) {
   case -22:  {
    $13 = $$;
    HEAP32[$vararg_buffer8>>2] = $fd;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $13;
    $14 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $14;
    break;
   }
   case 0:  {
    $16 = HEAP32[$ex>>2]|0;
    $17 = ($16|0)==(2);
    $18 = ((($ex)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $17 ? $20 : $19;
    $$0 = $21;
    break;
   }
   default: {
    $15 = (___syscall_ret($12)|0);
    $$0 = $15;
   }
   }
   $$2 = $$0;
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $fd;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $22 = (___syscall221(221,($vararg_buffer13|0))|0);
   $23 = ($22|0)==(-22);
   if (!($23)) {
    $24 = ($22|0)>(-1);
    if ($24) {
     HEAP32[$vararg_buffer18>>2] = $22;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $25 = (___syscall_ret($22)|0);
    $$2 = $25;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $fd;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $26 = (___syscall221(221,($vararg_buffer23|0))|0);
   $27 = ($26|0)==(-22);
   if ($27) {
    HEAP32[$vararg_buffer31>>2] = $fd;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $30 = (___syscall221(221,($vararg_buffer31|0))|0);
    $31 = ($30|0)>(-1);
    if ($31) {
     HEAP32[$vararg_buffer36>>2] = $30;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $32 = (___syscall_ret($30)|0);
    $$2 = $32;
    break L1;
   } else {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer28>>2] = $26;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $29 = (___syscall_ret(-22)|0);
    $$2 = $29;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($cmd) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $33 = $$;
    HEAP32[$vararg_buffer41>>2] = $fd;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $cmd;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $33;
    $34 = (___syscall221(221,($vararg_buffer41|0))|0);
    $35 = (___syscall_ret($34)|0);
    $$2 = $35;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $fd;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $cmd;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $36 = (___syscall221(221,($vararg_buffer46|0))|0);
    $37 = (___syscall_ret($36)|0);
    $$2 = $37;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa258 = 0;
 var $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$lnz$0$i = 0, $$neg$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$pre42$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0;
 var $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond151$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond18$i = 0, $or$cond192$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i27 = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa277 = $9;
     break;
    }
   }
   $12 = ($$lcssa277|0)==(45);
   L13: do {
    switch ($$lcssa277|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa277;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (361324 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (361333 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$693 = $156;$694 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa244;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $695 = $170;$696 = $168;$697 = $170;$698 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $695 = $693;$696 = $694;$697 = $190;$698 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre42$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi43$iZ2D = $$pre42$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi43$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi43$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi43$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$699 = $348;$700 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa275;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3112$i = $$2$i;$365 = 0;$366 = 0;$701 = $360;$702 = $358;$703 = $699;$704 = $700;$gotdig$3108$i = $gotdig$2$i13;$gotrad$1109$i = $gotrad$0$i14;$j$0111$i = 0;$k$0110$i = 0;$lnz$0107$i = 0;
        L205: while(1) {
         do {
          if ($701) {
           $cond$i = ($gotrad$1109$i|0)==(0);
           if ($cond$i) {
            $705 = $365;$706 = $366;$707 = $365;$708 = $366;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = 1;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
           } else {
            $709 = $703;$710 = $704;$711 = $365;$712 = $366;$gotdig$3108$i$lcssa = $gotdig$3108$i;$j$0111$i$lcssa = $j$0111$i;$k$0110$i$lcssa = $k$0110$i;$lnz$0107$i$lcssa = $lnz$0107$i;
            break L205;
           }
          } else {
           $364 = ($k$0110$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3112$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0107$i;
           $370 = ($j$0111$i|0)==(0);
           $371 = (($x$i) + ($k$0110$i<<2)|0);
           if ($370) {
            $storemerge$i = $702;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3112$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0111$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0110$i))|0;
           $$16$i = $377 ? 0 : $376;
           $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3112$i = $$3$be$i;$365 = $707;$366 = $708;$701 = $390;$702 = $388;$703 = $705;$704 = $706;$gotdig$3108$i = $gotdig$4$i;$gotrad$1109$i = $gotrad$2$i;$j$0111$i = $j$2$i;$k$0110$i = $k$2$i;$lnz$0107$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $705;$394 = $707;$396 = $706;$397 = $708;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3108$i$lcssa|0)!=(0);
        $713 = $711;$714 = $712;$715 = $709;$716 = $710;$717 = $363;$j$077$i = $j$0111$i$lcssa;$k$073$i = $k$0110$i$lcssa;$lnz$067$i = $lnz$0107$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $699;$394 = 0;$396 = $700;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $713 = $394;$714 = $397;$715 = $395;$716 = $398;$717 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $718 = $394;$719 = $397;$720 = $399;$721 = $395;$722 = $398;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $718 = $713;$719 = $714;$720 = $717;$721 = $715;$722 = $716;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($717) {
         $426 = $715;$428 = $713;$429 = $716;$431 = $714;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($720) {
        $426 = $721;$428 = $718;$429 = $722;$431 = $719;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond151$i = ($473|0)==(9);
           if ($exitcond151$i) {
            $$lcssa267 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa267;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (351628 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $$neg$i = Math_imul($426, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $493 = (($$neg40$i) + ($$neg$i))|0;
          $494 = ($493|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $495 = $$pre$i17 >>> $493;
          $496 = ($495|0)==(0);
          $or$cond192$i = $494 | $496;
          if ($or$cond192$i) {
           $497 = (+($sign$0|0));
           $498 = (+($$pre$i17>>>0));
           $499 = $497 * $498;
           $500 = (($426) + -10)|0;
           $501 = (351628 + ($500<<2)|0);
           $502 = HEAP32[$501>>2]|0;
           $503 = (+($502|0));
           $504 = $499 * $503;
           $$1$i = $504;
           break;
          }
         }
        }
        $505 = (($426|0) % 9)&-1;
        $506 = ($505|0)==(0);
        if ($506) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $426;$z$1$ph45$i = $k$3$i;
        } else {
         $507 = ($426|0)>(-1);
         $508 = (($505) + 9)|0;
         $509 = $507 ? $505 : $508;
         $510 = (8 - ($509))|0;
         $511 = (351628 + ($510<<2)|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = ($k$3$i|0)==(0);
         if ($513) {
          $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $426;$z$0$i = 0;
         } else {
          $514 = (1000000000 / ($512|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $426;
          while(1) {
           $515 = (($x$i) + ($k$494$i<<2)|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = (($516>>>0) % ($512>>>0))&-1;
           $518 = (($516>>>0) / ($512>>>0))&-1;
           $519 = (($518) + ($carry$095$i))|0;
           HEAP32[$515>>2] = $519;
           $520 = Math_imul($517, $514)|0;
           $521 = ($k$494$i|0)==($a$093$i|0);
           $522 = ($519|0)==(0);
           $or$cond21$i = $521 & $522;
           $523 = (($k$494$i) + 1)|0;
           $524 = $523 & 127;
           $525 = (($rp$092$i) + -9)|0;
           $rp$1$i18 = $or$cond21$i ? $525 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $524 : $a$093$i;
           $526 = ($523|0)==($k$3$i|0);
           if ($526) {
            $$lcssa266 = $520;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $520;$k$494$i = $523;$rp$092$i = $rp$1$i18;
           }
          }
          $527 = ($$lcssa266|0)==(0);
          if ($527) {
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $528 = (($k$3$i) + 1)|0;
           $529 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$529>>2] = $$lcssa266;
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $528;
          }
         }
         $530 = (9 - ($509))|0;
         $531 = (($530) + ($rp$0$lcssa162$i))|0;
         $a$2$ph46$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $531;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $532 = ($rp$2$ph44$i|0)<(18);
         $533 = ($rp$2$ph44$i|0)==(18);
         $534 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($532)) {
           if (!($533)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $535 = HEAP32[$534>>2]|0;
           $536 = ($535>>>0)<(9007199);
           if (!($536)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $537 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $537;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $538 = (($x$i) + ($k$5$i<<2)|0);
           $539 = HEAP32[$538>>2]|0;
           $540 = (_bitshift64Shl(($539|0),0,29)|0);
           $541 = tempRet0;
           $542 = (_i64Add(($540|0),($541|0),($carry1$0$i|0),0)|0);
           $543 = tempRet0;
           $544 = ($543>>>0)>(0);
           $545 = ($542>>>0)>(1000000000);
           $546 = ($543|0)==(0);
           $547 = $546 & $545;
           $548 = $544 | $547;
           if ($548) {
            $549 = (___udivdi3(($542|0),($543|0),1000000000,0)|0);
            $550 = tempRet0;
            $551 = (___uremdi3(($542|0),($543|0),1000000000,0)|0);
            $552 = tempRet0;
            $$sink$off0$i = $551;$carry1$1$i = $549;
           } else {
            $$sink$off0$i = $542;$carry1$1$i = 0;
           }
           HEAP32[$538>>2] = $$sink$off0$i;
           $553 = (($z$2$i) + 127)|0;
           $554 = $553 & 127;
           $555 = ($k$5$i|0)!=($554|0);
           $556 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $555 | $556;
           $557 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $557 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $558 = (($k$5$i) + -1)|0;
           if ($556) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $558;$z$2$i = $z$3$i;
           }
          }
          $559 = (($e2$0$i19) + -29)|0;
          $560 = ($carry1$1$i$lcssa|0)==(0);
          if ($560) {
           $e2$0$i19 = $559;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa265 = $559;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $561 = (($rp$2$ph44$i) + 9)|0;
         $562 = (($a$2$ph46$i) + 127)|0;
         $563 = $562 & 127;
         $564 = ($563|0)==($z$3$i$lcssa$lcssa|0);
         if ($564) {
          $565 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $566 = $565 & 127;
          $567 = (($x$i) + ($566<<2)|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $570 = $569 & 127;
          $571 = (($x$i) + ($570<<2)|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $572 | $568;
          HEAP32[$571>>2] = $573;
          $z$4$i = $566;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $574 = (($x$i) + ($563<<2)|0);
         HEAP32[$574>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $563;$e2$0$ph$i = $$lcssa265;$rp$2$ph44$i = $561;$z$1$ph45$i = $z$4$i;
        }
        L302: while(1) {
         $605 = (($z$6$ph$i) + 1)|0;
         $602 = $605 & 127;
         $606 = (($z$6$ph$i) + 127)|0;
         $607 = $606 & 127;
         $608 = (($x$i) + ($607<<2)|0);
         $a$4$ph167$i = $a$4$ph$i;$e2$1$ph166$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $609 = ($rp$4$ph$i|0)==(18);
          $610 = ($rp$4$ph$i|0)>(27);
          $$24$i = $610 ? 9 : 1;
          $$not$i = $609 ^ 1;
          $a$4$i = $a$4$ph167$i;$e2$1$i = $e2$1$ph166$i;
          while(1) {
           $575 = $a$4$i & 127;
           $576 = ($575|0)==($z$6$ph$i|0);
           do {
            if ($576) {
             label = 219;
            } else {
             $577 = (($x$i) + ($575<<2)|0);
             $578 = HEAP32[$577>>2]|0;
             $579 = ($578>>>0)<(9007199);
             if ($579) {
              label = 219;
              break;
             }
             $580 = ($578>>>0)>(9007199);
             if ($580) {
              break;
             }
             $581 = (($a$4$i) + 1)|0;
             $582 = $581 & 127;
             $583 = ($582|0)==($z$6$ph$i|0);
             if ($583) {
              label = 219;
              break;
             }
             $689 = (($x$i) + ($582<<2)|0);
             $690 = HEAP32[$689>>2]|0;
             $691 = ($690>>>0)<(254740991);
             if ($691) {
              label = 219;
              break;
             }
             $692 = ($690>>>0)>(254740991);
             $brmerge$i28 = $692 | $$not$i;
             if (!($brmerge$i28)) {
              $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($609) {
             label = 220;
             break L302;
            }
           }
           $584 = (($e2$1$i) + ($$24$i))|0;
           $585 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($585) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $584;
           } else {
            $$lcssa258 = $584;$a$4$i$lcssa250 = $a$4$i;
            break;
           }
          }
          $586 = 1 << $$24$i;
          $587 = (($586) + -1)|0;
          $588 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa250;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa250;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $589 = (($x$i) + ($k$687$i<<2)|0);
           $590 = HEAP32[$589>>2]|0;
           $591 = $590 & $587;
           $592 = $590 >>> $$24$i;
           $593 = (($592) + ($carry4$089$i))|0;
           HEAP32[$589>>2] = $593;
           $594 = Math_imul($591, $588)|0;
           $595 = ($k$687$i|0)==($a$586$i|0);
           $596 = ($593|0)==(0);
           $or$cond25$i = $595 & $596;
           $597 = (($k$687$i) + 1)|0;
           $598 = $597 & 127;
           $599 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $599 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $598 : $a$586$i;
           $600 = ($598|0)==($z$6$ph$i|0);
           if ($600) {
            $$lcssa259 = $594;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $594;$k$687$i = $598;$rp$585$i = $rp$6$i;
           }
          }
          $601 = ($$lcssa259|0)==(0);
          if ($601) {
           $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $603 = ($602|0)==($a$6$i$lcssa|0);
          if (!($603)) {
           $$lcssa258$lcssa = $$lcssa258;$$lcssa259$lcssa = $$lcssa259;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $611 = HEAP32[$608>>2]|0;
          $612 = $611 | 1;
          HEAP32[$608>>2] = $612;
          $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $604 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$604>>2] = $$lcssa259$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa258$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $602;
        }
        if ((label|0) == 220) {
         if ($576) {
          $613 = (($602) + -1)|0;
          $614 = (($x$i) + ($613<<2)|0);
          HEAP32[$614>>2] = 0;
          $616 = $z$6$ph$i;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $602;
         } else {
          $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $615 = (($x$i) + ($616<<2)|0);
        $617 = HEAP32[$615>>2]|0;
        $618 = (+($617>>>0));
        $619 = (($a$4$i251) + 1)|0;
        $620 = $619 & 127;
        $621 = ($620|0)==($z$10$i|0);
        if ($621) {
         $678 = (($a$4$i251) + 2)|0;
         $679 = $678 & 127;
         $680 = (($679) + -1)|0;
         $681 = (($x$i) + ($680<<2)|0);
         HEAP32[$681>>2] = 0;
         $z$10$1$i = $679;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $682 = $618 * 1.0E+9;
        $683 = (($x$i) + ($620<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (+($684>>>0));
        $686 = $682 + $685;
        $642 = (+($sign$0|0));
        $624 = $642 * $686;
        $662 = (($e2$1$i248) + 53)|0;
        $668 = (($662) - ($emin$0$ph))|0;
        $669 = ($668|0)<($bits$0$ph|0);
        $687 = ($668|0)<(0);
        $$$i = $687 ? 0 : $668;
        $denormal$0$i = $669&1;
        $$012$i = $669 ? $$$i : $bits$0$ph;
        $688 = ($$012$i|0)<(53);
        if ($688) {
         $622 = (105 - ($$012$i))|0;
         $623 = (+_scalbn(1.0,$622));
         $625 = (+_copysignl($623,$624));
         $626 = (53 - ($$012$i))|0;
         $627 = (+_scalbn(1.0,$626));
         $628 = (+_fmodl($624,$627));
         $629 = $624 - $628;
         $630 = $625 + $629;
         $bias$0$i25 = $625;$frac$0$i = $628;$y$1$i24 = $630;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $624;
        }
        $631 = (($a$4$i251) + 2)|0;
        $632 = $631 & 127;
        $633 = ($632|0)==($z$10$1$i|0);
        do {
         if ($633) {
          $frac$3$i = $frac$0$i;
         } else {
          $634 = (($x$i) + ($632<<2)|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ($635>>>0)<(500000000);
          do {
           if ($636) {
            $637 = ($635|0)==(0);
            if ($637) {
             $638 = (($a$4$i251) + 3)|0;
             $639 = $638 & 127;
             $640 = ($639|0)==($z$10$1$i|0);
             if ($640) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $641 = $642 * 0.25;
            $643 = $641 + $frac$0$i;
            $frac$1$i = $643;
           } else {
            $644 = ($635>>>0)>(500000000);
            if ($644) {
             $645 = $642 * 0.75;
             $646 = $645 + $frac$0$i;
             $frac$1$i = $646;
             break;
            }
            $647 = (($a$4$i251) + 3)|0;
            $648 = $647 & 127;
            $649 = ($648|0)==($z$10$1$i|0);
            if ($649) {
             $650 = $642 * 0.5;
             $651 = $650 + $frac$0$i;
             $frac$1$i = $651;
             break;
            } else {
             $652 = $642 * 0.75;
             $653 = $652 + $frac$0$i;
             $frac$1$i = $653;
             break;
            }
           }
          } while(0);
          $654 = (53 - ($$012$i))|0;
          $655 = ($654|0)>(1);
          if (!($655)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $656 = (+_fmodl($frac$1$i,1.0));
          $657 = $656 != 0.0;
          if ($657) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $658 = $frac$1$i + 1.0;
          $frac$3$i = $658;
         }
        } while(0);
        $659 = $y$1$i24 + $frac$3$i;
        $660 = $659 - $bias$0$i25;
        $661 = $662 & 2147483647;
        $663 = (-2 - ($sum$i))|0;
        $664 = ($661|0)>($663|0);
        do {
         if ($664) {
          $665 = (+Math_abs((+$660)));
          $666 = !($665 >= 9007199254740992.0);
          if ($666) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i248;$y$2$i26 = $660;
          } else {
           $667 = ($$012$i|0)==($668|0);
           $or$cond26$i = $669 & $667;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $670 = $660 * 0.5;
           $671 = (($e2$1$i248) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $671;$y$2$i26 = $670;
          }
          $672 = (($e2$3$i) + 50)|0;
          $673 = ($672|0)>($330|0);
          if (!($673)) {
           $674 = ($denormal$2$i|0)!=(0);
           $675 = $frac$3$i != 0.0;
           $or$cond9$i27 = $675 & $674;
           if (!($or$cond9$i27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $676 = (___errno_location()|0);
          HEAP32[$676>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
         } else {
          $e2$4$i = $e2$1$i248;$y$3$i = $660;
         }
        } while(0);
        $677 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $677;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x = $35 ? $36 : $x;
     return (+$$x);
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026 = 0;
      while(1) {
       $45 = (($ex$026) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026 = $45;
       } else {
        $ex$0$lcssa = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $55 = (1 - ($ex$0$lcssa))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1 = $ex$0$lcssa;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1 = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020 = 0;
      while(1) {
       $68 = (($ey$020) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020 = $68;
       } else {
        $ey$0$lcssa = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $78 = (1 - ($ey$0$lcssa))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph = $ey$0$lcssa;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph = $9;
    }
    $83 = ($ex$1|0)>($ey$1$ph|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $153 = $94;$154 = $88;$155 = $89;$95 = $84;$97 = $85;$ex$212 = $ex$1;
      while(1) {
       if ($153) {
        $96 = ($95|0)==($86|0);
        $98 = ($97|0)==($87|0);
        $99 = $96 & $98;
        if ($99) {
         break;
        } else {
         $101 = $154;$102 = $155;
        }
       } else {
        $101 = $95;$102 = $97;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212) + -1)|0;
       $106 = ($105|0)>($ey$1$ph|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $153 = $113;$154 = $107;$155 = $108;$95 = $103;$97 = $104;$ex$212 = $105;
       } else {
        $$lcssa7 = $113;$114 = $103;$116 = $104;$156 = $107;$157 = $108;$ex$2$lcssa = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $$0 = $100;
      break L1;
     } else {
      $$lcssa7 = $94;$114 = $84;$116 = $85;$156 = $88;$157 = $89;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $115 = ($114|0)==($86|0);
     $117 = ($116|0)==($87|0);
     $118 = $115 & $117;
     if ($118) {
      $126 = $x * 0.0;
      $$0 = $126;
      break;
     } else {
      $119 = $157;$121 = $156;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $120 = ($119>>>0)<(1048576);
    $122 = ($121>>>0)<(0);
    $123 = ($119|0)==(1048576);
    $124 = $123 & $122;
    $125 = $120 | $124;
    if ($125) {
     $127 = $121;$128 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39 = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa = $131;
       break;
      }
     }
    } else {
     $138 = $121;$139 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $137 = ($ex$3$lcssa|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$152 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$152 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $152;HEAP32[tempDoublePtr+4>>2] = $149;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 361408 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (351076 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa20 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa20 = $l$03;$r$04$lcssa19 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre$pre = HEAP8[$l$03$lcssa20>>0]|0;
   $19 = $$pre$pre;$r$0$lcssa = $r$04$lcssa19;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function _basename($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$02 = 0, $i$03 = 0, $i$1 = 0;
 var $i$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 361337;
 } else {
  $1 = HEAP8[$s>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = 361337;
  } else {
   $3 = (_strlen($s)|0);
   $i$02 = (($3) + -1)|0;
   $4 = ($i$02|0)==(0);
   L4: do {
    if ($4) {
     $i$1 = 0;
    } else {
     $i$03 = $i$02;
     while(1) {
      $5 = (($s) + ($i$03)|0);
      $6 = HEAP8[$5>>0]|0;
      $7 = ($6<<24>>24)==(47);
      if (!($7)) {
       $i$1 = $i$03;
       break L4;
      }
      HEAP8[$5>>0] = 0;
      $i$0 = (($i$03) + -1)|0;
      $8 = ($i$0|0)==(0);
      if ($8) {
       $i$1 = 0;
       break;
      } else {
       $i$03 = $i$0;
      }
     }
    }
   } while(0);
   while(1) {
    $9 = ($i$1|0)==(0);
    if ($9) {
     $i$1$lcssa = 0;
     break;
    }
    $10 = (($i$1) + -1)|0;
    $11 = (($s) + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(47);
    if ($13) {
     $i$1$lcssa = $i$1;
     break;
    } else {
     $i$1 = $10;
    }
   }
   $14 = (($s) + ($i$1$lcssa)|0);
   $$0 = $14;
  }
 }
 return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(361339,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(361339,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 143;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 79;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 80;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 78;
   $34 = HEAP32[(361364)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((361388)|0));
   $37 = HEAP32[(361384)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(361384)>>2] = $4;
   ___unlock(((361388)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((361388)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(361384)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(361384)>>2] = $14;
  }
  ___unlock(((361388)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 127]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[87878]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[87878]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((361388)|0));
   $$012 = HEAP32[(361384)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((361388)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 255]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$047 = 0, $$05 = 0, $$lcssa13 = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0;
 var $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $12 = $3;
 } else {
  $12 = 0;
 }
 $4 = (($n) + -1)|0;
 $5 = ($n|0)<(2);
 if ($5) {
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 255)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $13 = ($12|0)==(0);
  if (!($13)) {
   ___unlockfile($f);
  }
  $14 = ($4|0)==(0);
  if ($14) {
   HEAP8[$s>>0] = 0;
   $$0 = $s;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($4|0)==(0);
  L11: do {
   if ($$old2) {
    $p$1 = $s;
    label = 17;
   } else {
    $15 = ((($f)) + 4|0);
    $16 = ((($f)) + 8|0);
    $$05 = $4;$p$0 = $s;
    while(1) {
     $17 = HEAP32[$15>>2]|0;
     $18 = HEAP32[$16>>2]|0;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = (_memchr($17,10,$20)|0);
     $22 = ($21|0)==(0|0);
     $23 = $21;
     $24 = (1 - ($19))|0;
     $25 = (($24) + ($23))|0;
     $26 = $22 ? $20 : $25;
     $27 = ($26>>>0)<($$05>>>0);
     $28 = $27 ? $26 : $$05;
     _memcpy(($p$0|0),($17|0),($28|0))|0;
     $29 = HEAP32[$15>>2]|0;
     $30 = (($29) + ($28)|0);
     HEAP32[$15>>2] = $30;
     $31 = (($p$0) + ($28)|0);
     $32 = (($$05) - ($28))|0;
     $or$cond = $22 & $27;
     if (!($or$cond)) {
      $p$1 = $31;
      label = 17;
      break L11;
     }
     $33 = HEAP32[$16>>2]|0;
     $34 = ($30>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($30)) + 1|0);
      HEAP32[$15>>2] = $35;
      $36 = HEAP8[$30>>0]|0;
      $37 = $36&255;
      $46 = $37;
     } else {
      $38 = (___uflow($f)|0);
      $39 = ($38|0)<(0);
      if ($39) {
       $$lcssa13 = $31;
       break;
      } else {
       $46 = $38;
      }
     }
     $44 = (($32) + -1)|0;
     $45 = $46&255;
     $47 = ((($31)) + 1|0);
     HEAP8[$31>>0] = $45;
     $sext$mask = $46 & 255;
     $48 = ($sext$mask|0)!=(10);
     $49 = ($44|0)!=(0);
     $or$cond3 = $49 & $48;
     if ($or$cond3) {
      $$05 = $44;$p$0 = $47;
     } else {
      $p$1 = $47;
      label = 17;
      break L11;
     }
    }
    $40 = ($$lcssa13|0)==($s|0);
    if ($40) {
     $$047 = 0;
    } else {
     $41 = HEAP32[$f>>2]|0;
     $42 = $41 & 16;
     $43 = ($42|0)==(0);
     if ($43) {
      $$047 = 0;
     } else {
      $p$1 = $$lcssa13;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $50 = ($s|0)==(0|0);
   if ($50) {
    $$047 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$047 = $s;
   }
  }
  $51 = ($12|0)==(0);
  if ($51) {
   $$0 = $$047;
  } else {
   ___unlockfile($f);
   $$0 = $$047;
  }
 }
 return ($$0|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi184Z2D = 0, $$pre173 = 0, $$pre175 = 0, $$pre177 = 0, $$pre179 = 0, $$pre180 = 0, $$pre181 = 0, $$pre182 = 0, $$pre183 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0;
 var $c$0102 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor18 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0, $i$1 = 0;
 var $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit8 = 0, $isdigit897 = 0, $isdigittmp = 0, $isdigittmp7 = 0, $isdigittmp796 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0, $matches$2 = 0;
 var $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0;
 var $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0106 = 0;
 var $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $326 = $4;
 } else {
  $326 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0107 = 0;$p$0110 = $fmt;$pos$0111 = 0;$s$0105 = 0;$wcs$0106 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0110>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0110)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0110)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0110)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0110)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp796 = (($93) + -48)|0;
        $isdigit897 = ($isdigittmp796>>>0)<(10);
        if ($isdigit897) {
         $97 = $93;$p$398 = $p$2;$width$099 = 0;
         while(1) {
          $94 = ($width$099*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$398)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp7 = (($100) + -48)|0;
          $isdigit8 = ($isdigittmp7>>>0)<(10);
          if ($isdigit8) {
           $97 = $100;$p$398 = $98;$width$099 = $96;
          } else {
           $$lcssa40 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa40 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa40<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre173 = HEAP8[$104>>0]|0;
         $107 = $$pre173;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa40;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0105;$wcs$1 = $wcs$0106;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$11 = $109 ? $110 : $105;
         $$12 = $109 ? -2 : -1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$13 = $112 ? $113 : $105;
         $$14 = $112 ? 3 : 1;
         $p$5 = $$13;$size$0 = $$14;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
         label = 154;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0111;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0111;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0111|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0111&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0111&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0111;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         if ($140) {
          $$pre175 = HEAP32[$7>>2]|0;
          $148 = $$pre175;
         } else {
          $141 = HEAP32[$7>>2]|0;
          $142 = ((($141)) + -1|0);
          HEAP32[$7>>2] = $142;
          $143 = $142;
          $148 = $143;
         }
         $144 = HEAP32[$9>>2]|0;
         $145 = HEAP32[$10>>2]|0;
         $146 = (($144) + ($pos$0111))|0;
         $147 = (($146) + ($148))|0;
         $149 = (($147) - ($145))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
          label = 154;
          break L6;
         }
         $$pre177 = HEAP32[$8>>2]|0;
         $156 = $$pre177;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L68: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ | 16;
          $162 = ($161|0)==(115);
          L70: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $p$6 = $166 ? $167 : $164;
            $168 = $166&1;
            _memset(($scanset|0),($168|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $169 = HEAP8[$p$6>>0]|0;
            switch ($169<<24>>24) {
            case 45:  {
             $170 = ((($p$6)) + 1|0);
             $171 = $invert$0 ^ 1;
             $172 = $171&255;
             HEAP8[$14>>0] = $172;
             $$pre$phi184Z2D = $172;$p$7$ph = $170;
             break;
            }
            case 93:  {
             $173 = ((($p$6)) + 1|0);
             $174 = $invert$0 ^ 1;
             $175 = $174&255;
             HEAP8[$15>>0] = $175;
             $$pre$phi184Z2D = $175;$p$7$ph = $173;
             break;
            }
            default: {
             $$pre182 = $invert$0 ^ 1;
             $$pre183 = $$pre182&255;
             $$pre$phi184Z2D = $$pre183;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $176 = HEAP8[$p$7>>0]|0;
             L81: do {
              switch ($176<<24>>24) {
              case 0:  {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L70;
               break;
              }
              case 45:  {
               $177 = ((($p$7)) + 1|0);
               $178 = HEAP8[$177>>0]|0;
               switch ($178<<24>>24) {
               case 93: case 0:  {
                $189 = 45;$p$8 = $p$7;
                break L81;
                break;
               }
               default: {
               }
               }
               $179 = ((($p$7)) + -1|0);
               $180 = HEAP8[$179>>0]|0;
               $181 = ($180&255)<($178&255);
               if ($181) {
                $182 = $180&255;
                $c$0102 = $182;
                while(1) {
                 $183 = (($c$0102) + 1)|0;
                 $184 = (($scanset) + ($183)|0);
                 HEAP8[$184>>0] = $$pre$phi184Z2D;
                 $185 = HEAP8[$177>>0]|0;
                 $186 = $185&255;
                 $187 = ($183|0)<($186|0);
                 if ($187) {
                  $c$0102 = $183;
                 } else {
                  $189 = $185;$p$8 = $177;
                  break;
                 }
                }
               } else {
                $189 = $178;$p$8 = $177;
               }
               break;
              }
              default: {
               $189 = $176;$p$8 = $p$7;
              }
              }
             } while(0);
             $188 = $189&255;
             $190 = (($188) + 1)|0;
             $191 = (($scanset) + ($190)|0);
             HEAP8[$191>>0] = $$pre$phi184Z2D;
             $192 = ((($p$8)) + 1|0);
             $p$7 = $192;
            }
           }
          } while(0);
          $193 = (($width$1) + 1)|0;
          $194 = $160 ? $193 : 31;
          $195 = ($$size$0|0)==(1);
          $196 = ($alloc$0|0)!=(0);
          L89: do {
           if ($195) {
            if ($196) {
             $197 = $194 << 2;
             $198 = (_malloc($197)|0);
             $199 = ($198|0)==(0|0);
             if ($199) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $198;
              label = 154;
              break L6;
             } else {
              $wcs$2 = $198;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $194;$wcs$3$ph = $wcs$2;
            L95: while(1) {
             $200 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph22 = $i$0$ph;
             while(1) {
              L99: while(1) {
               $201 = HEAP32[$7>>2]|0;
               $202 = HEAP32[$8>>2]|0;
               $203 = ($201>>>0)<($202>>>0);
               if ($203) {
                $204 = ((($201)) + 1|0);
                HEAP32[$7>>2] = $204;
                $205 = HEAP8[$201>>0]|0;
                $206 = $205&255;
                $209 = $206;
               } else {
                $207 = (___shgetc($f)|0);
                $209 = $207;
               }
               $208 = (($209) + 1)|0;
               $210 = (($scanset) + ($208)|0);
               $211 = HEAP8[$210>>0]|0;
               $212 = ($211<<24>>24)==(0);
               if ($212) {
                $i$0$ph22$lcssa = $i$0$ph22;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L95;
               }
               $213 = $209&255;
               HEAP8[$0>>0] = $213;
               $214 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($214|0) {
               case -1:  {
                $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($200) {
               $i$1 = $i$0$ph22;
              } else {
               $215 = HEAP32[$wc>>2]|0;
               $216 = (($i$0$ph22) + 1)|0;
               $217 = (($wcs$3$ph) + ($i$0$ph22<<2)|0);
               HEAP32[$217>>2] = $215;
               $i$1 = $216;
              }
              $218 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $196 & $218;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph22 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $219 = $factor | 1;
             $220 = $219 << 2;
             $221 = (_realloc($wcs$3$ph,$220)|0);
             $222 = ($221|0)==(0|0);
             if ($222) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
              label = 154;
              break L6;
             } else {
              $i$0$ph$phi = $k$0$ph;$k$0$ph = $219;$wcs$3$ph = $221;$i$0$ph = $i$0$ph$phi;
             }
            }
            $223 = (_mbsinit($st)|0);
            $224 = ($223|0)==(0);
            if ($224) {
             $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph$lcssa;
             label = 154;
             break L6;
            } else {
             $i$4 = $i$0$ph22$lcssa;$s$4 = 0;$wcs$5 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($196) {
             $225 = (_malloc($194)|0);
             $226 = ($225|0)==(0|0);
             if ($226) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = 0;
              label = 154;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $194;$s$2$ph = $225;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $227 = HEAP32[$7>>2]|0;
               $228 = HEAP32[$8>>2]|0;
               $229 = ($227>>>0)<($228>>>0);
               if ($229) {
                $230 = ((($227)) + 1|0);
                HEAP32[$7>>2] = $230;
                $231 = HEAP8[$227>>0]|0;
                $232 = $231&255;
                $235 = $232;
               } else {
                $233 = (___shgetc($f)|0);
                $235 = $233;
               }
               $234 = (($235) + 1)|0;
               $236 = (($scanset) + ($234)|0);
               $237 = HEAP8[$236>>0]|0;
               $238 = ($237<<24>>24)==(0);
               if ($238) {
                $i$4 = $i$2;$s$4 = $s$2$ph;$wcs$5 = 0;
                break L89;
               }
               $239 = $235&255;
               $240 = (($i$2) + 1)|0;
               $241 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$241>>0] = $239;
               $242 = ($240|0)==($k$1$ph|0);
               if ($242) {
                break;
               } else {
                $i$2 = $240;
               }
              }
              $factor18 = $k$1$ph << 1;
              $243 = $factor18 | 1;
              $244 = (_realloc($s$2$ph,$243)|0);
              $245 = ($244|0)==(0|0);
              if ($245) {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$2$ph;$wcs$8 = 0;
               label = 154;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $243;$s$2$ph = $244;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $246 = ($dest$0|0)==(0|0);
            if ($246) {
             $264 = $156;
             while(1) {
              $262 = HEAP32[$7>>2]|0;
              $263 = ($262>>>0)<($264>>>0);
              if ($263) {
               $265 = ((($262)) + 1|0);
               HEAP32[$7>>2] = $265;
               $266 = HEAP8[$262>>0]|0;
               $267 = $266&255;
               $270 = $267;
              } else {
               $268 = (___shgetc($f)|0);
               $270 = $268;
              }
              $269 = (($270) + 1)|0;
              $271 = (($scanset) + ($269)|0);
              $272 = HEAP8[$271>>0]|0;
              $273 = ($272<<24>>24)==(0);
              if ($273) {
               $i$4 = 0;$s$4 = 0;$wcs$5 = 0;
               break L89;
              }
              $$pre180 = HEAP32[$8>>2]|0;
              $264 = $$pre180;
             }
            } else {
             $249 = $156;$i$3 = 0;
             while(1) {
              $247 = HEAP32[$7>>2]|0;
              $248 = ($247>>>0)<($249>>>0);
              if ($248) {
               $250 = ((($247)) + 1|0);
               HEAP32[$7>>2] = $250;
               $251 = HEAP8[$247>>0]|0;
               $252 = $251&255;
               $255 = $252;
              } else {
               $253 = (___shgetc($f)|0);
               $255 = $253;
              }
              $254 = (($255) + 1)|0;
              $256 = (($scanset) + ($254)|0);
              $257 = HEAP8[$256>>0]|0;
              $258 = ($257<<24>>24)==(0);
              if ($258) {
               $i$4 = $i$3;$s$4 = $dest$0;$wcs$5 = 0;
               break L89;
              }
              $259 = $255&255;
              $260 = (($i$3) + 1)|0;
              $261 = (($dest$0) + ($i$3)|0);
              HEAP8[$261>>0] = $259;
              $$pre179 = HEAP32[$8>>2]|0;
              $249 = $$pre179;$i$3 = $260;
             }
            }
           }
          } while(0);
          $274 = HEAP32[$8>>2]|0;
          $275 = ($274|0)==(0|0);
          if ($275) {
           $$pre181 = HEAP32[$7>>2]|0;
           $282 = $$pre181;
          } else {
           $276 = HEAP32[$7>>2]|0;
           $277 = ((($276)) + -1|0);
           HEAP32[$7>>2] = $277;
           $278 = $277;
           $282 = $278;
          }
          $279 = HEAP32[$9>>2]|0;
          $280 = HEAP32[$10>>2]|0;
          $281 = (($282) - ($280))|0;
          $283 = (($281) + ($279))|0;
          $284 = ($283|0)==(0);
          if ($284) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          $$not = $160 ^ 1;
          $285 = ($283|0)==($width$1|0);
          $or$cond10 = $285 | $$not;
          if (!($or$cond10)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          do {
           if ($196) {
            if ($195) {
             HEAP32[$dest$0>>2] = $wcs$5;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$4;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          } else {
           $286 = ($wcs$5|0)==(0|0);
           if (!($286)) {
            $287 = (($wcs$5) + ($i$4<<2)|0);
            HEAP32[$287>>2] = 0;
           }
           $288 = ($s$4|0)==(0|0);
           if ($288) {
            $p$10 = $p$9;$s$5 = 0;$wcs$6 = $wcs$5;
            break L68;
           }
           $289 = (($s$4) + ($i$4)|0);
           HEAP8[$289>>0] = 0;
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $307 = (+___floatscan($f,$$size$0,0));
          $308 = HEAP32[$9>>2]|0;
          $309 = HEAP32[$7>>2]|0;
          $310 = HEAP32[$10>>2]|0;
          $311 = (($310) - ($309))|0;
          $312 = ($308|0)==($311|0);
          if ($312) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $313 = ($dest$0|0)==(0|0);
          if ($313) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $314 = $307;
            HEAPF32[$dest$0>>2] = $314;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $290 = (___intscan($f,$base$0,0,-1,-1)|0);
          $291 = tempRet0;
          $292 = HEAP32[$9>>2]|0;
          $293 = HEAP32[$7>>2]|0;
          $294 = HEAP32[$10>>2]|0;
          $295 = (($294) - ($293))|0;
          $296 = ($292|0)==($295|0);
          if ($296) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $297 = ($$|0)==(112);
          $298 = ($dest$0|0)!=(0|0);
          $or$cond3 = $298 & $297;
          if ($or$cond3) {
           $299 = $290;
           HEAP32[$dest$0>>2] = $299;
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
           break;
          }
          $300 = ($dest$0|0)==(0|0);
          if ($300) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $301 = $290&255;
            HEAP8[$dest$0>>0] = $301;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case -1:  {
            $302 = $290&65535;
            HEAP16[$dest$0>>1] = $302;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 3:  {
            $303 = $dest$0;
            $304 = $303;
            HEAP32[$304>>2] = $290;
            $305 = (($303) + 4)|0;
            $306 = $305;
            HEAP32[$306>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
           }
           }
          }
         }
        } while(0);
        $315 = HEAP32[$9>>2]|0;
        $316 = HEAP32[$7>>2]|0;
        $317 = HEAP32[$10>>2]|0;
        $318 = (($315) + ($pos$1))|0;
        $319 = (($318) + ($316))|0;
        $320 = (($319) - ($317))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $321 = $not$&1;
        $matches$0$ = (($321) + ($matches$0107))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $320;$s$6 = $s$5;$wcs$7 = $wcs$6;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0110) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa386 = $61;$matches$0107$lcssa = $matches$0107;$s$0105$lcssa = $s$0105;$wcs$0106$lcssa = $wcs$0106;
       label = 22;
       break L6;
      }
      $69 = (($pos$0111) + 1)|0;
      $matches$1 = $matches$0107;$p$11 = $51;$pos$2 = $69;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     } else {
      $p$1 = $p$0110;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      if ($36) {
       $$pre = HEAP32[$7>>2]|0;
       $44 = $$pre;
      } else {
       $37 = HEAP32[$7>>2]|0;
       $38 = ((($37)) + -1|0);
       HEAP32[$7>>2] = $38;
       $39 = $38;
       $44 = $39;
      }
      $40 = HEAP32[$9>>2]|0;
      $41 = HEAP32[$10>>2]|0;
      $42 = (($40) + ($pos$0111))|0;
      $43 = (($42) + ($44))|0;
      $45 = (($43) - ($41))|0;
      $matches$1 = $matches$0107;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     }
    } while(0);
    $322 = ((($p$11)) + 1|0);
    $323 = HEAP8[$322>>0]|0;
    $324 = ($323<<24>>24)==(0);
    if ($324) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $323;$matches$0107 = $matches$1;$p$0110 = $322;$pos$0111 = $pos$2;$s$0105 = $s$6;$wcs$0106 = $wcs$7;
    }
   }
   if ((label|0) == 22) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa386|0)>(-1);
    $68 = ($matches$0107$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0107$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$8 = $s$0105$lcssa;$wcs$9 = $wcs$0106$lcssa;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($matches$0107371|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0402;$s$8 = $s$7;$wcs$9 = $wcs$8;
     label = 155;
    } else {
     $alloc$2 = $alloc$0402;$matches$2 = $matches$0107371;$s$9 = $s$7;$wcs$10 = $wcs$8;
    }
   }
   if ((label|0) == 155) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$9 = $s$8;$wcs$10 = $wcs$9;
   }
   $325 = ($alloc$2|0)==(0);
   if ($325) {
    $matches$3 = $matches$2;
   } else {
    _free($s$9);
    _free($wcs$10);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $327 = ($326|0)==(0);
 if (!($327)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 144;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function _socket($domain,$type,$protocol) {
 $domain = $domain|0;
 $type = $type|0;
 $protocol = $protocol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 64|0;
 $1 = sp + 40|0;
 HEAP32[$0>>2] = $domain;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $type;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $protocol;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 L1: do {
  if ($9) {
   $10 = (___errno_location()|0);
   $11 = HEAP32[$10>>2]|0;
   switch ($11|0) {
   case 93: case 22:  {
    break;
   }
   default: {
    $$0 = $8;
    break L1;
   }
   }
   $12 = $type & 526336;
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = $8;
   } else {
    HEAP32[$1>>2] = $domain;
    $14 = ((($1)) + 4|0);
    $15 = $type & -526337;
    HEAP32[$14>>2] = $15;
    $16 = ((($1)) + 8|0);
    HEAP32[$16>>2] = $protocol;
    $17 = ((($1)) + 12|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($1)) + 16|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($1)) + 20|0);
    HEAP32[$19>>2] = 0;
    HEAP32[$vararg_buffer2>>2] = 1;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $1;
    $20 = (___syscall102(102,($vararg_buffer2|0))|0);
    $21 = (___syscall_ret($20)|0);
    $22 = ($21|0)<(0);
    if ($22) {
     $$0 = $21;
    } else {
     $23 = $type & 524288;
     $24 = ($23|0)==(0);
     if (!($24)) {
      HEAP32[$vararg_buffer6>>2] = 1;
      (_fcntl($21,2,$vararg_buffer6)|0);
     }
     $25 = $type & 2048;
     $26 = ($25|0)==(0);
     if ($26) {
      $$0 = $21;
     } else {
      $27 = (_fcntl($21,3,$vararg_buffer9)|0);
      $28 = $27 | 2048;
      HEAP32[$vararg_buffer11>>2] = $28;
      (_fcntl($21,4,$vararg_buffer11)|0);
      $$0 = $21;
     }
    }
   }
  } else {
   $$0 = $8;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _send($fd,$buf,$len,$flags) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sendto($fd,$buf,$len,$flags,0,0)|0);
 return ($0|0);
}
function _sendto($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $buf;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $flags;
 $5 = ((($0)) + 16|0);
 $6 = $addr;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = $alen;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _htons($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _htonl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _setsockopt($fd,$level,$optname,$optval,$optlen) {
 $fd = $fd|0;
 $level = $level|0;
 $optname = $optname|0;
 $optval = $optval|0;
 $optlen = $optlen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $level;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $optname;
 $3 = ((($0)) + 12|0);
 $4 = $optval;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $optlen;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _bind($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _recvfrom($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $buf;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $flags;
 $5 = ((($0)) + 16|0);
 $6 = $addr;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 20|0);
 $8 = $alen;
 HEAP32[$7>>2] = $8;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $9 = (___syscall102(102,($vararg_buffer|0))|0);
 $10 = (___syscall_ret($9)|0);
 STACKTOP = sp;return ($10|0);
}
function _accept($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 $4 = $len;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa42 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa43 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa44 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa42 = $$031;$$04$lcssa43 = $$0430;$$06$lcssa44 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa42 = $$0$lcssa;$$04$lcssa43 = $$04$lcssa;$$06$lcssa44 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa43>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa44;$$3 = $$0$lcssa42;
   } else {
    $19 = ($$0$lcssa42>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa42;$wd$018 = $$06$lcssa44;$ws$019 = $$04$lcssa43;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa42;$wd$0$lcssa = $$06$lcssa44;$ws$0$lcssa = $$04$lcssa43;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _listen($fd,$backlog) {
 $fd = $fd|0;
 $backlog = $backlog|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $backlog;
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $3 = (___syscall102(102,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _recv($fd,$buf,$len,$flags) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_recvfrom($fd,$buf,$len,$flags,0,0)|0);
 return ($0|0);
}
function _select($n,$rfds,$wfds,$efds,$tv) {
 $n = $n|0;
 $rfds = $rfds|0;
 $wfds = $wfds|0;
 $efds = $efds|0;
 $tv = $tv|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $n;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $rfds;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $wfds;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $efds;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $tv;
 $0 = (___syscall142(142,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 255]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _perror($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[87820]|0;
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strerror($2)|0);
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (___lockfile($0)|0);
  $13 = $7;
 } else {
  $13 = 0;
 }
 $8 = ($msg|0)==(0|0);
 if (!($8)) {
  $9 = HEAP8[$msg>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = (_strlen($msg)|0);
   (_fwrite($msg,$11,1,$0)|0);
   (_fputc(58,$0)|0);
   (_fputc(32,$0)|0);
  }
 }
 $12 = (_strlen($3)|0);
 (_fwrite($3,$12,1,$0)|0);
 (_fputc(10,$0)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  ___unlockfile($0);
 }
 return;
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[87849]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _putchar($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[87849]|0;
 $1 = (_fputc($c,$0)|0);
 return ($1|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[87849]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $19 = $4;
 } else {
  $19 = 0;
 }
 $5 = (_fputs($s,$0)|0);
 $6 = ($5|0)<(0);
 do {
  if ($6) {
   $18 = 1;
  } else {
   $7 = ((($0)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(10);
   if (!($9)) {
    $10 = ((($0)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $15 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = 10;
     $18 = 0;
     break;
    }
   }
   $16 = (___overflow($0,10)|0);
   $phitmp = ($16|0)<(0);
   $18 = $phitmp;
  }
 } while(0);
 $17 = $18 << 31 >> 31;
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___unlockfile($0);
 }
 return ($17|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _sleep($seconds) {
 $seconds = $seconds|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp;
 HEAP32[$tv>>2] = $seconds;
 $0 = ((($tv)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (_nanosleep(($tv|0),($tv|0))|0);
 $2 = ($1|0)==(0);
 $3 = HEAP32[$tv>>2]|0;
 $$0 = $2 ? 0 : $3;
 STACKTOP = sp;return ($$0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
 var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[90353]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (361452 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[90353] = $22;
     } else {
      $23 = HEAP32[(361428)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(361420)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (361452 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[90353] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(361428)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(361420)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(361432)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (361452 + ($93<<2)|0);
      $95 = HEAP32[90353]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[90353] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(361428)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(361420)>>2] = $82;
     HEAP32[(361432)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(361416)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (361716 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(361428)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (361716 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(361416)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(361416)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(361428)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(361428)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(361428)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(361420)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(361432)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (361452 + ($231<<2)|0);
       $233 = HEAP32[90353]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[90353] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(361428)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(361420)>>2] = $rsize$0$i$lcssa;
      HEAP32[(361432)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(361416)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (361716 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (361716 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(361420)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(361428)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (361716 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(361416)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(361416)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(361428)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(361428)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(361428)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (361452 + ($428<<2)|0);
          $430 = HEAP32[90353]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[90353] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(361428)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (361716 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(361416)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(361416)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(361428)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(361428)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(361420)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(361432)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(361432)>>2] = $514;
   HEAP32[(361420)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(361420)>>2] = 0;
   HEAP32[(361432)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(361424)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(361424)>>2] = $529;
  $530 = HEAP32[(361436)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(361436)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[90471]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(361892)>>2] = $539;
    HEAP32[(361888)>>2] = $539;
    HEAP32[(361896)>>2] = -1;
    HEAP32[(361900)>>2] = -1;
    HEAP32[(361904)>>2] = 0;
    HEAP32[(361856)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[90471] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(361892)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(361852)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(361844)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(361856)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(361436)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (361860);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(361424)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(361888)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(361844)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(361852)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(361892)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(361856)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(361856)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(361844)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(361844)>>2] = $632;
  $633 = HEAP32[(361848)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(361848)>>2] = $632;
  }
  $635 = HEAP32[(361436)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(361428)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(361428)>>2] = $tbase$746$i;
    }
    HEAP32[(361860)>>2] = $tbase$746$i;
    HEAP32[(361864)>>2] = $tsize$745$i;
    HEAP32[(361872)>>2] = 0;
    $640 = HEAP32[90471]|0;
    HEAP32[(361448)>>2] = $640;
    HEAP32[(361444)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (361452 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(361436)>>2] = $654;
    HEAP32[(361424)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(361900)>>2]|0;
    HEAP32[(361440)>>2] = $660;
   } else {
    $sp$068$i = (361860);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(361424)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(361436)>>2] = $684;
       HEAP32[(361424)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(361900)>>2]|0;
       HEAP32[(361440)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(361428)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(361428)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (361860);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (361860);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(361424)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(361424)>>2] = $732;
        HEAP32[(361436)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(361432)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(361420)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(361420)>>2] = $738;
         HEAP32[(361432)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (361452 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[90353]|0;
            $765 = $764 & $763;
            HEAP32[90353] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (361716 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(361416)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(361416)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(361428)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(361428)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(361428)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (361452 + ($842<<2)|0);
         $844 = HEAP32[90353]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[90353] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(361428)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (361716 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(361416)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(361416)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(361428)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(361428)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (361860);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(361436)>>2] = $952;
    HEAP32[(361424)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(361900)>>2]|0;
    HEAP32[(361440)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(361860)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(361860)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(361860)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(361860)+12>>2]|0;
    HEAP32[(361860)>>2] = $tbase$746$i;
    HEAP32[(361864)>>2] = $tsize$745$i;
    HEAP32[(361872)>>2] = 0;
    HEAP32[(361868)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (361452 + ($973<<2)|0);
      $975 = HEAP32[90353]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[90353] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(361428)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (361716 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(361416)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(361416)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(361428)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(361428)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(361424)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(361424)>>2] = $1055;
   $1056 = HEAP32[(361436)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(361436)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(361428)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(361432)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(361420)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (361452 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[90353]|0;
     $37 = $36 & $35;
     HEAP32[90353] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (361716 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(361416)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(361416)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(361428)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(361428)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(361428)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(361436)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(361424)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(361424)>>2] = $122;
   HEAP32[(361436)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(361432)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(361432)>>2] = 0;
   HEAP32[(361420)>>2] = 0;
   return;
  }
  $127 = HEAP32[(361432)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(361420)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(361420)>>2] = $130;
   HEAP32[(361432)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (361452 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(361428)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[90353]|0;
     $154 = $153 & $152;
     HEAP32[90353] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(361428)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(361428)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(361428)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (361716 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(361416)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(361416)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(361428)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(361428)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(361428)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(361432)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(361420)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (361452 + ($235<<2)|0);
  $237 = HEAP32[90353]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[90353] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(361428)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (361716 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(361416)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(361416)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(361428)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(361428)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(361444)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(361444)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (361868);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(361444)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(361428)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(361892)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(361436)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(361424)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(361436)>>2] = $38;
  HEAP32[(361424)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(361432)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(361420)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(361420)>>2] = $storemerge1;
  HEAP32[(361432)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (361452 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[90353]|0;
    $91 = $90 & $89;
    HEAP32[90353] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (361716 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(361416)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(361416)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(361428)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(361428)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(361428)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(361428)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(361432)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(361420)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (361452 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[90353]|0;
     $32 = $31 & $30;
     HEAP32[90353] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (361716 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(361416)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(361416)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(361428)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(361428)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(361428)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(361428)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(361436)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(361424)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(361424)>>2] = $116;
   HEAP32[(361436)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(361432)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(361432)>>2] = 0;
   HEAP32[(361420)>>2] = 0;
   return;
  }
  $121 = HEAP32[(361432)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(361420)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(361420)>>2] = $124;
   HEAP32[(361432)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (361452 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[90353]|0;
     $147 = $146 & $145;
     HEAP32[90353] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (361716 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(361416)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(361416)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(361428)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(361428)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(361428)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(361432)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(361420)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (361452 + ($225<<2)|0);
  $227 = HEAP32[90353]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[90353] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(361428)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (361716 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(361416)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(361416)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(361428)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(361428)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&0](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1() {
 ; nullFunc_i(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5);
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(6);return 0;
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,_avr_flash_ioctl,b0,b0,b0,b0,b0,_avr_ioport_ioctl,b0,_avr_uart_ioctl,b0,_avr_eeprom_ioctl,b0,b0,_avr_timer_ioctl,b0,b0,b0,b0,_avr_watchdog_ioctl,b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_avr_twi_read_data,b0,b0,b0,_avr_adc_read_l,_avr_adc_read_h,b0,b0,b0,b0,_avr_spi_read,b0,b0,_avr_ioport_read,b0,b0,b0,b0,b0
,b0,b0,_avr_uart_read,_avr_uart_rxc_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_avr_timer_tcnt_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_read,_do_read,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_i = [b1,b1,b1,b1,_make,b1,b1,_make_124,b1,b1,_make_129,b1,b1,_make_134,b1,b1,_make_138,b1,b1,_make_142,_make_148,b1,b1,_make_154,b1,b1,_make_158,b1,b1
,_make_162,b1,b1,_make_166,_make_171,_make_176,_make_181,_make_185,_make_191,_make_196,_make_202,_make_207,_make_228,b1,b1,_make_233,b1,b1,b1,b1,_make_240,b1,b1,_make_244,_make_248,_make_252,_make_256,_make_260,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,_m1280_init,_m1280_reset,b2,_m1281_init,_m1281_reset,b2,_mx4_init,_mx4_reset,b2,_m128_init,_m128_reset,b2,_m128rfa1_init,_m128rfa1_reset,b2,_m128rfr2_init,_m128rfr2_reset,b2,b2,_mx8_init,_mx8_reset,b2,_mx_init,_mx_reset,b2,_mxm1_init,_mxm1_reset
,b2,_m2560_init,_m2560_reset,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_init,_reset,b2,_init_235,_reset_236,_tx4_init,_tx4_reset,b2,_tx5_init,_tx5_reset,b2,b2,b2,b2,b2,_avr_lin_reset,_avr_flash_reset
,b2,_avr_flash_dealloc,_avr_twi_reset,_avr_adc_reset,_avr_spi_reset,_avr_ioport_reset,b2,_avr_uart_reset,b2,_avr_extint_reset,b2,_avr_eeprom_dealloc,_avr_timer_reset,b2,b2,b2,b2,_avr_watchdog_reset,b2,b2,b2,b2,b2,b2,_sig_int,_avr_callback_run_gdb,b2,b2,b2,b2
,_avr_callback_run_raw,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_avr_watchdog_run_callback_software_reset,b2,_cleanup_387,_cleanup_382,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3];
var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,___stdio_close,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_avr_callback_sleep_gdb,b5,__avr_vcd_notify,b5
,b5,_avr_callback_sleep_raw,b5,b5,b5,b5,b5,_avr_twi_irq_input,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_avr_adc_irq_notify,_avr_spi_irq_input,b5,b5,b5,b5,b5,b5,b5,_avr_ioport_irq_notify,_avr_uart_irq_input,b5
,b5,b5,b5,b5,b5,b5,_avr_extint_irq_notify,b5,b5,b5,b5,b5,b5,b5,b5,b5,_avr_timer_irq_icp,b5,_avr_watchdog_irq_notify,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_avr_timer_compa,_avr_timer_compb,_avr_timer_compc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__avr_vcd_timer,b6,b6
,b6,b6,b6,b6,b6,b6,_avr_progen_clear,b6,_avr_twi_set_state_timer,b6,b6,b6,b6,b6,b6,b6,b6,_avr_adc_int_raise,b6,b6,b6,b6,_avr_spi_raise,b6,b6,b6,b6,b6,b6,_avr_uart_rxc_raise
,_avr_uart_txc_raise,b6,b6,b6,b6,b6,b6,b6,_avr_eempe_clear,_avr_eei_raise,b6,b6,b6,b6,b6,_avr_timer_tov,b6,b6,b6,_avr_watchdog_timer,b6,_avr_wdce_clear,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viiii = [b7,_std_logger,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__avr_io_mux_write
,b7,b7,__avr_io_command_write,__avr_io_console_write,_avr_lin_baud_write,_avr_flash_write,b7,b7,b7,_avr_twi_write,_avr_twi_write_data,b7,_avr_twi_write_status,_avr_adc_write_adcsra,_avr_adc_write_adcsrb,b7,b7,b7,b7,b7,_avr_spi_write,b7,b7,_avr_ioport_write,b7,_avr_ioport_pin_write,_avr_ioport_ddr_write,b7,b7,b7
,b7,_avr_uart_udr_write,b7,b7,_avr_uart_write,_avr_uart_baud_write,b7,_avr_eeprom_write,b7,b7,_avr_timer_write,_avr_timer_write_pending,_avr_timer_write_ocr,_avr_timer_tcnt_write,b7,b7,b7,_avr_watchdog_write,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];

  return { _i64Subtract: _i64Subtract, _fflush: _fflush, _main: _main, _htonl: _htonl, _i64Add: _i64Add, _memset: _memset, _malloc: _malloc, _free: _free, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Lshr: _bitshift64Lshr, _htons: _htons, _bitshift64Shl: _bitshift64Shl, ___errno_location: ___errno_location, _ntohs: _ntohs, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _htons = Module["_htons"] = asm["_htons"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



